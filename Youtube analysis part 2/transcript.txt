1.python tutorial for beginners



  
    
      0:00
    
  
  
  what's up everybody in this video I'm going to teach you everything you need to know to start coding with python I've
  


  
    
      0:06
    
  
  
  also included 20 different Hands-On projects to help you learn you can find the entire list in the description of
  


  
    
      0:12
    
  
  
  this video our final project will be a weather app that fetches real-time weather data from an API even if you've
  


  
    
      0:19
    
  
  
  never coded anything in your life before I'll walk you through the basics the ABCs of programming if that sounds good
  


  
    
      0:25
    
  
  
  to you then I encourage you to sit back relax and enjoy the
  


  
    
      0:32
    
  
  
  show this course doesn't cost you anything but if you would like to help me out you can help increase its reach
  


  
    
      0:38
    
  
  
  by hitting the like button leave a random comment down below and subscribe if you'd like to be a fellow bro thank
  


  
    
      0:44
    
  
  
  you I appreciate it I don't like boring introductions so I say we just jump
  


  
    
      0:49
    
  
  
  right in there's two things we'll need to download the first is a python interpreter to convert our written code
  


  
    
      0:56
    
  
  
  to machine code we're going to head to python.org or go to
  


  
    
      1:02
    
  
  
  downloads and download the latest version we will open this
  


  
    
      1:09
    
  
  
  executable if you're on Windows you'll want to check this checkbox add python
  


  
    
      1:14
    
  
  
  exe to path and we will install
  


  
    
      1:21
    
  
  
  now the setup was successful and that's all you need to do to download the python
  


  
    
      1:27
    
  
  
  interpreter the second download we'll need is an IDE an integrated development
  


  
    
      1:33
    
  
  
  environment basically a place where we can write code for idees there's two
  


  
    
      1:38
    
  
  
  popular choices when writing python code pycharm and vs code if you already use
  


  
    
      1:44
    
  
  
  vs code you can stick with that just be sure to download the python extension I find pycharm more beginner friendly if
  


  
    
      1:52
    
  
  
  you've never coded before if you would like to use pycharm go to jetb brains.com pycharm
  


  
    
      2:00
    
  
  
  and we will click this green download button there's two versions of py charm
  


  
    
      2:06
    
  
  
  the professional version and the community version the professional version is paid for I would not
  


  
    
      2:12
    
  
  
  recommend using it only because there's plenty of free Ides on the market we'll use the Community Edition the free one
  


  
    
      2:19
    
  
  
  because I don't like to pay for things and I'm sure you don't either select the correct download for your operating
  


  
    
      2:25
    
  
  
  system I'm running Windows I will download pycharm
  


  
    
      2:31
    
  
  
  we will open this executable click next you could select a
  


  
    
      2:37
    
  
  
  destination folder I'll keep it as is next I'll create a desktop
  


  
    
      2:43
    
  
  
  shortcut but you don't necessarily need to click next install and we'll just
  


  
    
      2:50
    
  
  
  have to give it a moment okay the setup is now complete
  


  
    
      2:57
    
  
  
  I'll check this check box to run py charm when we click close this window after opening py charm we're
  


  
    
      3:04
    
  
  
  going to create a new project you can rename your python project I'll keep it as is you can
  


  
    
      3:11
    
  
  
  select a location again I won't change that you can create a sample welcome script but for this tutorial we won't
  


  
    
      3:19
    
  
  
  let's select the latest python version and create our new
  


  
    
      3:25
    
  
  
  project in the menu to the left we're going to create a new python file file file new python
  


  
    
      3:34
    
  
  
  file let's name this file main but really you can name it anything
  


  
    
      3:40
    
  
  
  and select python file python files end with the py file
  


  
    
      3:49
    
  
  
  extension we should have our main python file within our python project folder
  


  
    
      3:54
    
  
  
  now we're going to print something to the console window within our main python file we're going to write a print
  


  
    
      4:00
    
  
  
  statement so type print add a set of parentheses between the set of
  


  
    
      4:06
    
  
  
  parentheses we will add a set of double quotes to print something or single
  


  
    
      4:11
    
  
  
  quotes either one my own preference is double quotes normally in a programming
  


  
    
      4:17
    
  
  
  tutorial the instructor would tell you to print something such as hello world
  


  
    
      4:22
    
  
  
  but we like to be different here instead think of your favorite food
  


  
    
      4:28
    
  
  
  in this case I like pizza I will print I like
  


  
    
      4:34
    
  
  
  pizza to run our Python program we will click the screen Arrow to run our main
  


  
    
      4:40
    
  
  
  python file we should have a console window
  


  
    
      4:45
    
  
  
  that displays our output I like pizza or whatever your favorite food is let's
  


  
    
      4:51
    
  
  
  print another line of code let's
  


  
    
      4:56
    
  
  
  print it's really
  


  
    
      5:01
    
  
  
  good by adding a second print statement we are printing a second line of
  


  
    
      5:07
    
  
  
  code now we'll discuss comments the python interpreter doesn't
  


  
    
      5:12
    
  
  
  output comments to write a comment you use a pound sign I like to call this a
  


  
    
      5:18
    
  
  
  hashtag my comment will be this is my first Python
  


  
    
      5:25
    
  
  
  program comments are used as notes for yourself or for other people reading this code if I were to run this code
  


  
    
      5:33
    
  
  
  again this comment is not displayed to the output we still have I like pizza
  


  
    
      5:39
    
  
  
  it's really good all right everybody so that is your very first Python program
  


  
    
      5:44
    
  
  
  and in the next topic we'll discuss variables all right everybody we are
  


  
    
  2.variables



  
    
      5:50
    
  
  
  moving on to variables a variable is a container for a value there's four
  


  
    
      5:55
    
  
  
  different data types we'll discuss strings integers floats and and booleans
  


  
    
      6:01
    
  
  
  yes I know that's a silly name a variable behaves as if it was the value
  


  
    
      6:06
    
  
  
  it contains each variable should have a unique name let's say we have a variable
  


  
    
      6:11
    
  
  
  of first name to assign a variable you use the assignment operator of equals
  


  
    
      6:17
    
  
  
  for text a string is a series of text this can be double quotes or single
  


  
    
      6:22
    
  
  
  quotes my own preference is double quotes why don't you type in your first
  


  
    
      6:28
    
  
  
  name this very ible a first name will behave as if it was this value the
  


  
    
      6:33
    
  
  
  series of characters so to demonstrate this I'm going to print my first name
  


  
    
      6:41
    
  
  
  variable so place it within a print statement without quotes that will print
  


  
    
      6:46
    
  
  
  your first name now you don't want this within quotes because then you're literally
  


  
    
      6:53
    
  
  
  printing the word first name you could use your variable along
  


  
    
      6:59
    
  
  
  with some text by using what is called an F string that's the easiest way to display a variable so you type f then a
  


  
    
      7:07
    
  
  
  set of quotes the f means format so let's say the word hello then
  


  
    
      7:14
    
  
  
  we will add our variable we will insert our variable into this text when using an F string to do that you need a set of
  


  
    
      7:21
    
  
  
  curly braces then insert your variable so the result is hello whatever your
  


  
    
      7:28
    
  
  
  first name is in my case bro let's create another variable let's say we have a variable of
  


  
    
      7:36
    
  
  
  food food equals think of your favorite food for me I will type
  


  
    
      7:43
    
  
  
  Pizza let's print the following you like add a placeholder
  


  
    
      7:50
    
  
  
  again I'm using an F string our variable of food hello bro
  


  
    
      7:56
    
  
  
  you like pizza let's create an email use your own email or make up one
  


  
    
      8:03
    
  
  
  let's say my email is bro1 123
  


  
    
      8:10
    
  
  
  fake.com then let's print our email your email is at a placeholder
  


  
    
      8:19
    
  
  
  display our email variable your email is bro1 123
  


  
    
      8:27
    
  
  
  fake.com so these are string I'm going to add a comment that these
  


  
    
      8:32
    
  
  
  are strings a string is a series of characters they can include numbers but
  


  
    
      8:38
    
  
  
  we treat them as characters now we have integers an integer is a whole number an
  


  
    
      8:46
    
  
  
  example of this could be somebody's age how old are they according to my YouTube
  


  
    
      8:51
    
  
  
  statistics many of you are between the ages of 18 through 24 let's say that I'm
  


  
    
      8:56
    
  
  
  25 let me zoom in a little you're integer should not be within quotes
  


  
    
      9:02
    
  
  
  because it would be a string then technically if I would like to work with this variable again I'll use an F string
  


  
    
      9:10
    
  
  
  let's say you are at a placeholder display our age
  


  
    
      9:16
    
  
  
  variable years old you are 25 years
  


  
    
      9:22
    
  
  
  old another example of an integer could be a quantity you are buying a certain amount
  


  
    
      9:29
    
  
  
  of something maybe I am buying three items I wouldn't have half an item this
  


  
    
      9:35
    
  
  
  would be a float technically rather than an integer we are buying three of
  


  
    
      9:40
    
  
  
  something so let's print the following you are
  


  
    
      9:46
    
  
  
  buying at a placeholder display our quantity
  


  
    
      9:53
    
  
  
  items you are 25 years old you are buying three items
  


  
    
      10:00
    
  
  
  another example of an integer could be an amount of people let's say num of
  


  
    
      10:06
    
  
  
  students like a classroom there are 30 students in our
  


  
    
      10:11
    
  
  
  class then we will print your class has at a
  


  
    
      10:18
    
  
  
  placeholder students we will display the number of students num of
  


  
    
      10:26
    
  
  
  students your class has 30 students
  


  
    
      10:31
    
  
  
  those are integers they're whole numbers and again make sure they're not within quotes because then technically they
  


  
    
      10:37
    
  
  
  would be a string integers we can use in arithmetic Expressions if they were strings we
  


  
    
      10:45
    
  
  
  couldn't then we have floats float means floating Point
  


  
    
      10:51
    
  
  
  number a float is a number but it contains a decimal portion an example would be a price what is the price of
  


  
    
      10:58
    
  
  
  something $1.99 let's print our price print I'll
  


  
    
      11:03
    
  
  
  use an F string the price is add a placeholder display our
  


  
    
      11:10
    
  
  
  price the price is $10.99 let's preat our placeholder with
  


  
    
      11:15
    
  
  
  a unit of currency I'll pick American dollars but feel free to pick something else the price is
  


  
    
      11:22
    
  
  
  $10.99 so floats contain a decimal portion what about a grade point average
  


  
    
      11:28
    
  
  
  GP let's say my GPA is
  


  
    
      11:35
    
  
  
  3.2 then I will print your GPA
  


  
    
      11:43
    
  
  
  is display our GPA your GPA is
  


  
    
      11:50
    
  
  
  3.2 what about a distance a distance can contain a decimal portion
  


  
    
      11:56
    
  
  
  5.5 kilm Maybe then I will
  


  
    
      12:02
    
  
  
  print youan at a placeholder display our distance then I'll add km for kilometers
  


  
    
      12:10
    
  
  
  or you could add Mi for miles but I'll stick with kilometers you ran 5.5
  


  
    
      12:19
    
  
  
  km okay then we have booleans a Boolean is either true or
  


  
    
      12:27
    
  
  
  false let's say we're a student is student equals if we are a student we
  


  
    
      12:34
    
  
  
  could say that this is true true starts with a capital T if we weren't a student
  


  
    
      12:40
    
  
  
  let's say we graduate we could say that this is false again the first letter is
  


  
    
      12:46
    
  
  
  capital booleans only have two options true or false so let's say that I am a
  


  
    
      12:52
    
  
  
  student then I will print are you a student
  


  
    
      12:59
    
  
  
  then we will display our Boolean value of a student are you a student that is
  


  
    
      13:07
    
  
  
  true with Boolean values we really don't output them directly you're more likely
  


  
    
      13:12
    
  
  
  to see them used internally within a program such as when working with if statements this is a topic we'll discuss
  


  
    
      13:18
    
  
  
  in the future so don't worry you may see if is student if this variable is true
  


  
    
      13:27
    
  
  
  then we will print the following now we don't need to use an FST string we're not going to insert any variables
  


  
    
      13:34
    
  
  
  you are a student If This Were false we can add an else
  


  
    
      13:40
    
  
  
  Clause where we will print you are not a
  


  
    
      13:46
    
  
  
  student our variable of is student is true we will print the if statement you
  


  
    
      13:53
    
  
  
  are a student If This Were false we will print whatever is within else
  


  
    
      13:59
    
  
  
  you are not a student let's think of a few more examples is something for sale like a
  


  
    
      14:07
    
  
  
  car or a product of some sort let's say that is true I'll write another if
  


  
    
      14:13
    
  
  
  statement if for sale if this variable contains true we will do the
  


  
    
      14:20
    
  
  
  following let's print that item is for
  


  
    
      14:26
    
  
  
  sale else if it's false we will print something
  


  
    
      14:32
    
  
  
  else that item is not
  


  
    
      14:38
    
  
  
  available for sale is set to true this variable is true we will print
  


  
    
      14:44
    
  
  
  that item is for sale else if it were false we print that item is not
  


  
    
      14:52
    
  
  
  available one more example let's say we have a Boolean variable of is online is
  


  
    
      14:58
    
  
  
  somebody on online I will set that to true if is online if that's true we will
  


  
    
      15:07
    
  
  
  print you are online else we will
  


  
    
      15:12
    
  
  
  print you are offline is online is set to true we will
  


  
    
      15:19
    
  
  
  print you are online else if it were false we print your
  


  
    
      15:26
    
  
  
  offline all right everybody so those are variables a variable is a reusable container for a
  


  
    
      15:32
    
  
  
  value there's four basic data types for beginners a string which is a series of
  


  
    
      15:37
    
  
  
  text integers which are whole numbers floats which are numbers but they
  


  
    
      15:42
    
  
  
  contain a decimal portion and booleans which are either true or false they're
  


  
    
      15:48
    
  
  
  binary your assignment in the comment section is to post four variables post a
  


  
    
      15:54
    
  
  
  string an integer a float and a Boolean try and think a unique example if you
  


  
    
      16:00
    
  
  
  can and well everybody those are variables in Python all right everybody so we are
  


  
    
  3.type casting



  
    
      16:07
    
  
  
  moving on to type casting typ casting is the process of converting a variable
  


  
    
      16:12
    
  
  
  from one data type to another we have various functions to convert a value or
  


  
    
      16:18
    
  
  
  variable to a string an integer a float or a Boolean let's create some
  


  
    
      16:24
    
  
  
  variables we will create a name variable type in your full name name an age make up some
  


  
    
      16:33
    
  
  
  age a GPA for grade point average let's say minus
  


  
    
      16:38
    
  
  
  3.2 and a Boolean of a student are we currently a student let's
  


  
    
      16:44
    
  
  
  say that's true now you actually could get the data type of a variable or a value by using
  


  
    
      16:51
    
  
  
  the type function then pass in a value or variable however when I run this there's
  


  
    
      16:58
    
  
  
  no output so I need a print statement we will print what is returned
  


  
    
      17:04
    
  
  
  by the type function get the type of our name variable then print
  


  
    
      17:10
    
  
  
  it so our name variable is a string St Str our age
  


  
    
      17:16
    
  
  
  variable is an integer and int GPA is a
  


  
    
      17:25
    
  
  
  float is student is a Boolean using these typ cast functions we can convert
  


  
    
      17:31
    
  
  
  from one data type to another here's how let's start with something simple let's
  


  
    
      17:37
    
  
  
  convert our GPA to an integer currently it's a float I will reassign
  


  
    
      17:43
    
  
  
  GPA use the int function to typ cast to an integer then pass in my
  


  
    
      17:50
    
  
  
  GPA at the end we will print our GPA if we typ cast 3.2 to a whole
  


  
    
      17:57
    
  
  
  integer what would the result be a whole integer of three we truncate the decimal
  


  
    
      18:05
    
  
  
  portion let's convert our age to a floating Point number we will reassign our variable of
  


  
    
      18:11
    
  
  
  age use the typ cast function of float then insert our age
  


  
    
      18:17
    
  
  
  variable let's print our age variable and it should be a floating
  


  
    
      18:24
    
  
  
  Point number 25.0 now we'll cover strings let's typ
  


  
    
      18:31
    
  
  
  cast our age to be a string age equals call the typ cast function of string St
  


  
    
      18:38
    
  
  
  Str passing our age variable so the result is still going to
  


  
    
      18:45
    
  
  
  appear the same 25 however it's a string not an
  


  
    
      18:51
    
  
  
  integer and to prove that I will enclose my age variable with the type
  


  
    
      18:57
    
  
  
  function the type of variable age is a string it would be the same as if we're
  


  
    
      19:03
    
  
  
  taking this number and enclosing it within quotes So this would make a difference
  


  
    
      19:10
    
  
  
  because let's say that I add one to age age plus equals
  


  
    
      19:15
    
  
  
  1 well we would get a type error can only concatenate strings not integers to
  


  
    
      19:21
    
  
  
  a string however if I were to add a string of one to the end we would be using
  


  
    
      19:27
    
  
  
  string concat ation so let's say it's my birthday and I add one to 25 well since
  


  
    
      19:34
    
  
  
  we're working with strings now the result would be 251 I am 251 years
  


  
    
      19:41
    
  
  
  old so strings and numbers behave differently with numbers we can use them
  


  
    
      19:47
    
  
  
  within arithmetic Expressions strings not so much we will take our name
  


  
    
      19:53
    
  
  
  variable and typ cast it to a Boolean name
  


  
    
      19:59
    
  
  
  equals call the typ cast function of BU passing our name
  


  
    
      20:04
    
  
  
  variable this has an interesting result so I'm going to print name booleans are
  


  
    
      20:10
    
  
  
  either true or false if I typ cast my string of text into a
  


  
    
      20:16
    
  
  
  Boolean that gives me true now it really doesn't matter what I write here if I were to change my name
  


  
    
      20:23
    
  
  
  to a single character such as B this would still be true if our string
  


  
    
      20:29
    
  
  
  variable was empty there were no characters within it that would actually give us
  


  
    
      20:34
    
  
  
  false we could use this to check to see if somebody enters in their name or not if somebody types in their name then we
  


  
    
      20:41
    
  
  
  typ cast it to a Boolean if somebody skips entering in their name that would return false we could reprompt the user
  


  
    
      20:49
    
  
  
  to enter in their name again all right everybody so that is typ casting it is the process of converting a variable
  


  
    
      20:56
    
  
  
  from one data type to another this is especially useful with handling user input because user input is always
  


  
    
      21:04
    
  
  
  a string there may be at times where you want to convert it to an integer a float or a Boolean and well everybody that is
  


  
    
      21:11
    
  
  
  typ casting in Python all right everybody in this topic
  


  
    
  4.user input ⌨️



  
    
      21:17
    
  
  
  I'm going to show you how we can accept user input in Python we use the input function it's a function that prompts
  


  
    
      21:23
    
  
  
  the user to enter in data and it Returns the enter data as a string here's here's
  


  
    
      21:28
    
  
  
  an example to accept user input we will call the input function when I run this
  


  
    
      21:34
    
  
  
  program we need to enter in data to our console window like so then hit enter however we
  


  
    
      21:42
    
  
  
  need a prompt we need to tell the user what we want them to type in so let's ask a
  


  
    
      21:48
    
  
  
  question our prompt will be within quotes let's say what is your
  


  
    
      21:57
    
  
  
  name let's try this again what is your name I can type in something why don't
  


  
    
      22:02
    
  
  
  you go ahead and type in your full name then hit enter now with this input we're not
  


  
    
      22:09
    
  
  
  quite doing anything with it the input function is going to return some data as a string we can assign it to a variable
  


  
    
      22:16
    
  
  
  if we would like let's create a variable of name name equals our user
  


  
    
      22:23
    
  
  
  input then once we have our name let's print a message I'll use an F string we
  


  
    
      22:30
    
  
  
  will print hello add a placeholder then insert our name variable within that
  


  
    
      22:36
    
  
  
  placeholder let's try this what is your name type in your name
  


  
    
      22:42
    
  
  
  hit enter hello whatever your name is let's try a different name I will pick
  


  
    
      22:48
    
  
  
  SpongeBob many people are familiar with SpongeBob hello SpongeBob this time we will ask a user
  


  
    
      22:56
    
  
  
  how old they are let's assign a variable of age equals accept some user input we
  


  
    
      23:03
    
  
  
  need a prompt within quotes how old are
  


  
    
      23:09
    
  
  
  you once we have our age variable let's print I'll use an F string you are at a
  


  
    
      23:18
    
  
  
  placeholder our variable age years
  


  
    
      23:24
    
  
  
  old what is your name type in your name how old are you let's say that I'm
  


  
    
      23:32
    
  
  
  25 hello whatever your name is you are whatever your age is years
  


  
    
      23:39
    
  
  
  old all right so let's say that it's our birthday before we print our age
  


  
    
      23:45
    
  
  
  variable let's say happy
  


  
    
      23:50
    
  
  
  birthday since I'm not inserting any variables within this print statement this doesn't need to be an F string
  


  
    
      23:57
    
  
  
  you'll want to use an F string if you want to insert variables before we display the user's
  


  
    
      24:03
    
  
  
  age let's take the user's age and increase it by one we could say age
  


  
    
      24:08
    
  
  
  equals age + 1 but there's one problem with
  


  
    
      24:14
    
  
  
  this type in a name how old are you type in an
  


  
    
      24:20
    
  
  
  age and we have a problem we have a type error can only concatenate strings not
  


  
    
      24:27
    
  
  
  integers to strings when we accept user input we store that input as a string before we
  


  
    
      24:35
    
  
  
  increment our age by one we'll need to convert it to an integer we can't normally use strings within arithmetic
  


  
    
      24:42
    
  
  
  Expressions but we can do that with integers and floats though after we accept some user input for our age
  


  
    
      24:49
    
  
  
  variable we could take our age variable and typ cast it as an integer which we
  


  
    
      24:56
    
  
  
  talked about in the previous lesson so let's say age equals our age after we
  


  
    
      25:02
    
  
  
  typ cast it then increment it by one so type in your
  


  
    
      25:08
    
  
  
  name type in an age and we get this message hello your
  


  
    
      25:14
    
  
  
  name happy birthday you are whatever your age is years
  


  
    
      25:19
    
  
  
  old so strings we can't normally use with arithmetic Expressions we would
  


  
    
      25:24
    
  
  
  have to typ cast it to an integer or a float however we could condense some of these steps we're taking up an extra
  


  
    
      25:32
    
  
  
  line to type cast our age as an integer what we could do instead is that when we
  


  
    
      25:37
    
  
  
  accept our user input we can enclose the input function within a typ cast to int
  


  
    
      25:44
    
  
  
  and that would work the same type in your name type in an
  


  
    
      25:50
    
  
  
  age and this works the same and it takes less lines of code and is more readable
  


  
    
      25:56
    
  
  
  I would say when we accept user input it returns that input as a string data type
  


  
    
      26:02
    
  
  
  then we just have to typ cast it to another data type if we need to and in this case for age we do now we'll go
  


  
    
      26:09
    
  
  
  over a couple exercises because it's important to practice what you've learned in this first exercise we're
  


  
    
      26:15
    
  
  
  going to calculate the area of a rectangle we need to prompt the user to enter in a length and the width of a
  


  
    
      26:22
    
  
  
  rectangle so we will create a variable of length we will accept some user input
  


  
    
      26:28
    
  
  
  using the input function what is our prompt let's say enter the
  


  
    
      26:35
    
  
  
  length let's do this with width I'll just copy and paste what we have width
  


  
    
      26:41
    
  
  
  equals enter the width so we have the length and the
  


  
    
      26:47
    
  
  
  width to get the area of a rectangle we have to multiply the length by the width
  


  
    
      26:52
    
  
  
  so let's say area equals our length variable now to use mult multiplication
  


  
    
      26:59
    
  
  
  you use an asterisk we'll discuss different arithmetic operators in the next lesson so we have length time width
  


  
    
      27:06
    
  
  
  that is the area I'm going to print our area because I need to test something
  


  
    
      27:14
    
  
  
  enter the length let's say 5 5 in 5 cm doesn't matter enter the width six we
  


  
    
      27:23
    
  
  
  get a type error can't multiply sequence by non-int non- integer of type string
  


  
    
      27:30
    
  
  
  when we accept user input it returns a value of the string data type we can't use those strings in arithmetic
  


  
    
      27:37
    
  
  
  Expressions we're multiplying the length times the width we would need to tycast
  


  
    
      27:42
    
  
  
  them as an integer or a float since we're working with basic geometry such as calculating the area let's do float
  


  
    
      27:50
    
  
  
  so let's typ cast our user input as a float for both length and width
  


  
    
      28:00
    
  
  
  okay let's try this again let's say 5 * 6 the area that's returned to us is 30
  


  
    
      28:08
    
  
  
  30.0 this result contains a decimal it's a floating Point number a
  


  
    
      28:14
    
  
  
  float so when we print the area I'll use an F string this time the area is I'll
  


  
    
      28:22
    
  
  
  add a placeholder display our area variable let's add a unit of measurement
  


  
    
      28:28
    
  
  
  afterwards I'll pick centimet now since we're working with areas if we would
  


  
    
      28:33
    
  
  
  like to technically be accurate so we could say to the power of two or we
  


  
    
      28:38
    
  
  
  could add a superscript so if you would like superscript 2 and you're on Windows make sure numlock is on hold alt then
  


  
    
      28:46
    
  
  
  type on the numpad 0178 so we have a superscript of two
  


  
    
      28:53
    
  
  
  again it's not really necessary for this lesson I just think it'd be cool to include it because then it's technically
  


  
    
      29:00
    
  
  
  accurate all right let's say that the length is 6.1 and the width is
  


  
    
      29:07
    
  
  
  7.2 the area is 43.92 cm squared because we're working
  


  
    
      29:14
    
  
  
  with areas let's cover a second exercise this time we will create a shopping cart
  


  
    
      29:20
    
  
  
  program exercise two we're going to create a shopping cart program we need three variables an item a price and a
  


  
    
      29:28
    
  
  
  quantity of those items we will create a variable of item
  


  
    
      29:34
    
  
  
  we will accept some user input what item would you like to
  


  
    
      29:42
    
  
  
  buy what are we trying to purchase we'll keep the data type of the user input as
  


  
    
      29:47
    
  
  
  a string then we need a price what is the price of each item we're buying use the
  


  
    
      29:54
    
  
  
  input function what is the a
  


  
    
      30:00
    
  
  
  price a price should be a floating Point number for example we might have dollars
  


  
    
      30:05
    
  
  
  and sense we need a decimal so let's typ cast our input as a
  


  
    
      30:10
    
  
  
  float then a quantity we will accept some user
  


  
    
      30:16
    
  
  
  input our prompt will be how many would you
  


  
    
      30:25
    
  
  
  like quantities they should be whole numbers let's type cast our input as an
  


  
    
      30:32
    
  
  
  integer then we will have a total What's the total that we have to pay so let's
  


  
    
      30:38
    
  
  
  take the price of each item use an asterisk for multiply our
  


  
    
      30:44
    
  
  
  quantity then let's do a test run let's print our
  


  
    
      30:50
    
  
  
  total what item would you like to buy let's say a pizza what is the price $10.99
  


  
    
      30:58
    
  
  
  how many would you like I would like five pizzas and our total is
  


  
    
      31:06
    
  
  
  54.9 let's say that before we display the total let's print the following I'll
  


  
    
      31:12
    
  
  
  use an F string you have bought insert a placeholder display our
  


  
    
      31:20
    
  
  
  quantity X item or items I'll add SLS
  


  
    
      31:29
    
  
  
  then we will print I'll use an FST string again your total
  


  
    
      31:36
    
  
  
  is display our total what item would you like to buy I
  


  
    
      31:42
    
  
  
  would like to buy a pizza what is the price $10.99 how many would you like I would
  


  
    
      31:49
    
  
  
  like nine pizzas they're all for me I'm going to eat all of them you have bought 9 x pizzas your
  


  
    
      31:58
    
  
  
  total is 98.91%
  


  
    
      32:29
    
  
  
  all right everybody that is how to accept user input in Python and we've covered a few exercises in the next
  


  
    
      32:35
    
  
  
  topic we're going to create a Mad Libs game and that is how to accept user input in
  


  
    
      32:41
    
  
  
  Python all right everybody in this video we're going to create a game of Mad Libs not because we have to but because I
  


  
    
  5.madlibs game



  
    
      32:48
    
  
  
  want to it would be a good exercise for us just so we're more comfortable with accepting user input if you're not
  


  
    
      32:53
    
  
  
  familiar with Madlibs Madlibs is a word game where you create a story by filling in the blanks with random
  


  
    
      33:00
    
  
  
  words so we're going to create a story template the story is going to be missing some components we will fill in
  


  
    
      33:07
    
  
  
  those components with random words that we type in here's a story that I've written myself print use an FST string
  


  
    
      33:16
    
  
  
  today I went to a insert a placeholder
  


  
    
      33:22
    
  
  
  Zoo for our placeholder we'll insert an adjective we'll insert a variable named
  


  
    
      33:29
    
  
  
  adjective adjective adjective one you're going to get an English lesson today too
  


  
    
      33:35
    
  
  
  and adjective is a description of something so for our Zoo adjective one
  


  
    
      33:40
    
  
  
  could be expensive large dirty an adjective describe
  


  
    
      33:48
    
  
  
  something we'll fill this in when we accept user input for our second print statement
  


  
    
      33:54
    
  
  
  let's print the following in an
  


  
    
      33:59
    
  
  
  exhibit I saw a placeholder will include
  


  
    
      34:05
    
  
  
  a noun noun one a noun is a person place or thing in English maybe a gorilla a
  


  
    
      34:13
    
  
  
  gorilla named harambe for example print use an FST string let's
  


  
    
      34:20
    
  
  
  say our noun one whatever this is we can reuse variables was we will create a second
  


  
    
      34:29
    
  
  
  adjective adjective 2 we will be describing whatever noun
  


  
    
      34:35
    
  
  
  one is this person place or thing and we will insert a verb verb one a verb is an
  


  
    
      34:44
    
  
  
  action such as running or eating then for our last statement let's print I was
  


  
    
      34:53
    
  
  
  at a placeholder we'll create adjective three
  


  
    
      34:58
    
  
  
  adjective 3 will describe us now we're going to fill in these variables by accepting user input we're going to fill
  


  
    
      35:06
    
  
  
  in adjective one we'll accept user input using the input
  


  
    
      35:11
    
  
  
  function enter and adjective I'm going to add a reminder
  


  
    
      35:17
    
  
  
  that an adjective is a description of
  


  
    
      35:24
    
  
  
  something then we need noun one noun one equals
  


  
    
      35:30
    
  
  
  input enter a noun a noun is a person
  


  
    
      35:35
    
  
  
  place or thing then we have adjective two I'll
  


  
    
      35:41
    
  
  
  just copy adjective one paste it change one to
  


  
    
      35:46
    
  
  
  two then a verb verb one equals input enter a verb I want verb one to be
  


  
    
      35:55
    
  
  
  in current tense I'll ask ask the user to end the verb with ing enter a verb
  


  
    
      36:03
    
  
  
  ending withg then it's current tense our person
  


  
    
      36:10
    
  
  
  place or thing of noun one is currently doing something such as
  


  
    
      36:15
    
  
  
  eating and then adjective three and I'll just copy one of these adjectives
  


  
    
      36:20
    
  
  
  adjective three equals input enter an adjective okay and then we are ready to
  


  
    
      36:26
    
  
  
  run this enter an adjective an adjective describes something I will say
  


  
    
      36:34
    
  
  
  suspicious or some kids like to say sussy or sus even I've also heard of
  


  
    
      36:40
    
  
  
  kids nowadays using the word skibidi feel free to type in whatever you would like it is your story after all I'm
  


  
    
      36:48
    
  
  
  going to say suspicious enter a noun a person place
  


  
    
      36:53
    
  
  
  or thing I like to poke fun at Mark Zuckerberg so I'm going to say my person
  


  
    
      36:59
    
  
  
  is Mark Zuckerberg enter an adjective that is a
  


  
    
      37:05
    
  
  
  description angry enter a verb ending with ing so
  


  
    
      37:11
    
  
  
  it's current tense uh screeching enter an adjective
  


  
    
      37:19
    
  
  
  happy here's my story today I went to a suspicious zoo in an exhibit I saw a
  


  
    
      37:27
    
  
  
  Mark Zuckerberg Mark Zuckerberg was angry and screeching I was happy that's our game
  


  
    
      37:35
    
  
  
  of Mad Libs it's a word game where you create a story by filling in the blanks with random words also post the output
  


  
    
      37:43
    
  
  
  of your Mad Libs game in the comment section down below because I really want to read them I want to see what you guys
  


  
    
      37:48
    
  
  
  came up with and well everybody that is a Mad Libs game using
  


  
    
  6.arithmetic & math



  
    
      37:55
    
  
  
  python hey everybody in this video I'm going to show you all of the different math that we'll need throughout the rest
  


  
    
      38:01
    
  
  
  of the series I have a lot to cover and I'll split this video into different sections we'll cover some basic
  


  
    
      38:07
    
  
  
  arithmetic operators built-in math functions a few functions from the math
  


  
    
      38:12
    
  
  
  module and then a few exercises be sure to look at the time stamps if you would like to skip ahead to another section
  


  
    
      38:18
    
  
  
  let's begin with some really easy stuff we're going to cover some basic arithmetic operators let's say we have a
  


  
    
      38:24
    
  
  
  variable friends current ly you have zero friends
  


  
    
      38:29
    
  
  
  if you need to increment a variable by one you could say friends the name of
  


  
    
      38:35
    
  
  
  the variable equals the name of the variable again + one so the plus sign is
  


  
    
      38:41
    
  
  
  the addition operator and I think we do have a little bit of experience with that already so if I were to print my
  


  
    
      38:47
    
  
  
  variable friends guess what you now have one friend we could also shorten this line
  


  
    
      38:54
    
  
  
  of code you could say friends plus equals 1
  


  
    
      39:01
    
  
  
  that would do the same thing this is known as an augmented assignment
  


  
    
      39:06
    
  
  
  operator that will give you the same result I prefer to use augmented assignment operators just because they
  


  
    
      39:12
    
  
  
  take less text and I think they're easier to read now let's use subtraction friends equals
  


  
    
      39:20
    
  
  
  friends minus two so of course minus is the subtraction operator uh you have
  


  
    
      39:25
    
  
  
  netive -2 friends I guess if you were to use the augmented assignment operator that would be
  


  
    
      39:31
    
  
  
  friends minus equals 2 there you still have -2 friends okay
  


  
    
      39:38
    
  
  
  multiplication let's change friends to how about five friends equals friends
  


  
    
      39:46
    
  
  
  time 3 you now have 15 friends then the
  


  
    
      39:52
    
  
  
  augmented assignment operator version of this would be friends times equal
  


  
    
      40:01
    
  
  
  3 so again you have 15 friends let's cover
  


  
    
      40:07
    
  
  
  division friends equals friends divided
  


  
    
      40:12
    
  
  
  by 2 so we have 2.5 friends somebody was
  


  
    
      40:18
    
  
  
  cut in half we have half a friend maybe it's just their legs or torso or something then the augmented assignment
  


  
    
      40:24
    
  
  
  operator would be friends ID equal 2 and the result is still the
  


  
    
      40:33
    
  
  
  same now exponents friends equals friends to the power of two so if
  


  
    
      40:41
    
  
  
  friends is currently five friends to the power of two would be 5 * 5 which is
  


  
    
      40:50
    
  
  
  25 the augmented assignment operator version of this equation would be
  


  
    
      40:55
    
  
  
  friends exponent equals 2 and again friends is
  


  
    
      41:03
    
  
  
  25 then we have modulus modulus gives you the remainder of any division
  


  
    
      41:08
    
  
  
  suppose we have 10 friends instead of five I will assign a new variable
  


  
    
      41:14
    
  
  
  remainder remainder equals friends the percent sign is known as the modulus
  


  
    
      41:20
    
  
  
  operator it will give us the remainder of any Division if I were to divide my group of friends by three will have one
  


  
    
      41:28
    
  
  
  remaining I'll store the remainder within a separate variable we would have a remainder of one it's kind of like in
  


  
    
      41:34
    
  
  
  class when the teacher says for everybody in the class to go into groups at three then there's always that one
  


  
    
      41:39
    
  
  
  kid that's by themselves that's kind of the same concept we're dividing our friends into groups of three then the
  


  
    
      41:46
    
  
  
  modulus will give you the remainder if we divided our group of friends into groups of two well 10 divides by two
  


  
    
      41:53
    
  
  
  evenly so there is no remainder so that is the modulus oper operator it's fairly
  


  
    
      41:58
    
  
  
  popular to use this operator to find if a number is even or odd because it will divide by two evenly if that number is
  


  
    
      42:04
    
  
  
  even if the remainder is one that means that the original number is odd okay so yeah those are some basic arithmetic
  


  
    
      42:11
    
  
  
  operators addition subtraction multiplication division exponentiation then
  


  
    
      42:18
    
  
  
  modulus now what we're going to do is cover some built-in math related functions suppose we have three
  


  
    
      42:24
    
  
  
  variables x = 3.14 y =
  


  
    
      42:30
    
  
  
  4 Z = 5 it doesn't matter if these are floating Point numbers or whole integers
  


  
    
      42:37
    
  
  
  the first is the round function we have a variable named result I'm going to
  


  
    
      42:42
    
  
  
  round X so there is a built-in round function
  


  
    
      42:47
    
  
  
  after the set of parentheses we can add some value or variable to be rounded so
  


  
    
      42:53
    
  
  
  we will round x to the nearest whole integer then print the result so our
  


  
    
      43:00
    
  
  
  result is three so that's the round function with the absolute value
  


  
    
      43:07
    
  
  
  function we can find the absolute value of a number uh let's change y to be4
  


  
    
      43:13
    
  
  
  instead of four we'll take result equals ABS which
  


  
    
      43:19
    
  
  
  means absolute value of y the absolute value is the distance away from zero as
  


  
    
      43:25
    
  
  
  a whole number the absolute value of -4 is
  


  
    
      43:31
    
  
  
  4 let's change y back to four there's a built-in power
  


  
    
      43:39
    
  
  
  function result equals pow then we'll need a base and an
  


  
    
      43:46
    
  
  
  exponent what's y to the power of
  


  
    
      43:51
    
  
  
  3 that would be 4 * 4 * 4 which is 64
  


  
    
      43:56
    
  
  
  that the power function you can raise a base to a given power the next two are really useful
  


  
    
      44:04
    
  
  
  using the max function we can find the maximum value of various values what's
  


  
    
      44:10
    
  
  
  the maximum value between X Y and Z then I'll just need to store this value uh
  


  
    
      44:18
    
  
  
  results equals the max between X Y and Z well the maximum value is
  


  
    
      44:25
    
  
  
  five other wise there's
  


  
    
      44:31
    
  
  
  Min what's the minimum value between X Y and Z that would be
  


  
    
      44:38
    
  
  
  3.14 now in this next section we do have some very useful constants and functions from the math class but we'll need to
  


  
    
      44:45
    
  
  
  import the math module at the top of our text editor so import math if you need
  


  
    
      44:52
    
  
  
  the value of pi you'll type the name of the math module do PI and I'm just going
  


  
    
      44:59
    
  
  
  to print this print math. Pi the value of pi is
  


  
    
      45:06
    
  
  
  3.1459 and a bunch of digits that come after if you're working with physics I
  


  
    
      45:11
    
  
  
  do know that people use the constant e a lot we won't be using e in this video
  


  
    
      45:17
    
  
  
  series but if you ever need access to it just type math. e and that will give you
  


  
    
      45:22
    
  
  
  e which is 2.71 something something something I believe e is known as the exponential
  


  
    
      45:29
    
  
  
  constant if you need the square root of a number let's say result
  


  
    
      45:35
    
  
  
  equals math.sqrt we can place a variable or a
  


  
    
      45:41
    
  
  
  value within the square root function uh let's say we have X again x = 9 what is
  


  
    
      45:49
    
  
  
  the square root of x then I will print whatever the result is the square root of 9 is three that is
  


  
    
      45:58
    
  
  
  the square root function there's a ceiling function
  


  
    
      46:04
    
  
  
  result equals math do Seal Seal will always round a
  


  
    
      46:11
    
  
  
  floating Point number up suppose X is 9.1 so 9.1 rounded up is
  


  
    
      46:20
    
  
  
  10 otherwise there's floor which will always round a number down result equals
  


  
    
      46:26
    
  
  
  equal math. floor let's change X to
  


  
    
      46:31
    
  
  
  9.9 9.9 rounded down is nine those are some useful math functions let's go over
  


  
    
      46:39
    
  
  
  some exercises okay this first exercise we are going to calculate the circumference
  


  
    
      46:44
    
  
  
  of a circle we'll need the help of the math module because there's some good functions in there to calculate the
  


  
    
      46:51
    
  
  
  circumference of a circle the formula is 2 * < * r
  


  
    
      46:57
    
  
  
  let's ask a user for a radius because that's what R is we'll accept some user
  


  
    
      47:04
    
  
  
  input enter the radius of a
  


  
    
      47:10
    
  
  
  circle we will type cast the input as a floating Point
  


  
    
      47:16
    
  
  
  number to calculate the circumference again the equation is 2 *
  


  
    
      47:25
    
  
  
  pi we can get that from the math module times whatever the radius is and the
  


  
    
      47:31
    
  
  
  user is going to type that in then we will print whatever the circumferences print we'll use an FST
  


  
    
      47:39
    
  
  
  string the circumference is our variable
  


  
    
      47:47
    
  
  
  circumference enter the radius of a circle I'll enter 10 actually
  


  
    
      47:53
    
  
  
  10.5 their circumference is 65 .97 if you want to round and truncate some of
  


  
    
      47:59
    
  
  
  these numbers we can use the round function around circumference then round to a given
  


  
    
      48:06
    
  
  
  decimal place I'll round to two digits again 10.5 rounded is 65.9 7 you
  


  
    
      48:15
    
  
  
  could add a unit of measurement too let's say centim 10.5 is 65.9 7 cm all right that is the
  


  
    
      48:24
    
  
  
  first exercise for this next exercise let's calculate the area of a circle we'll
  


  
    
      48:30
    
  
  
  import the math module we'll ask for a radius much like before radius equals
  


  
    
      48:40
    
  
  
  input enter the radius of a circle we'll cast our input as a
  


  
    
      48:47
    
  
  
  floating Point number the equation for the area of a
  


  
    
      48:53
    
  
  
  circle is pi
  


  
    
      48:58
    
  
  
  times radius squared we could easily use the built-in power function to raise our
  


  
    
      49:04
    
  
  
  radius to the power of two then we will display the area print I'm using an F
  


  
    
      49:11
    
  
  
  string the area of the circle is our area to some unit of
  


  
    
      49:21
    
  
  
  measurement let's say centim squared and enter the radius of a circle
  


  
    
      49:29
    
  
  
  10.5 the area of the circle is 34636 but I would like to round this
  


  
    
      49:35
    
  
  
  number to two decimal places I'll use that round function and I'll Place area and the
  


  
    
      49:43
    
  
  
  number of digits to round two within this function let's try that again
  


  
    
      49:48
    
  
  
  10.5 the area of the circle is 34636 cm squared that is the second
  


  
    
      49:56
    
  
  
  exercise for this last program we're going to find the hypotenuse of a right triangle
  


  
    
      50:02
    
  
  
  the formula to calculate the hypotenuse of a right angled triangle is C = theare
  


  
    
      50:09
    
  
  
  < TK of A2 + b^2 we'll Begin by importing the math module we'll ask the
  


  
    
      50:15
    
  
  
  user for the lengths of side A and B A
  


  
    
      50:21
    
  
  
  equals input enter side
  


  
    
      50:27
    
  
  
  a we'll cast the input as a floating Point number we'll do the same thing with side
  


  
    
      50:36
    
  
  
  b b equals enter side
  


  
    
      50:44
    
  
  
  B now this part's going to be confusing we'll calculate C we'll need a^2 +
  


  
    
      50:50
    
  
  
  b^2 will take a to the power of two plus
  


  
    
      50:57
    
  
  
  B to the^ of two then we'll need the square root of all of this whatever the result is I
  


  
    
      51:05
    
  
  
  will surround this equation with math. square
  


  
    
      51:10
    
  
  
  root and that should give us our answer let's
  


  
    
      51:16
    
  
  
  print using an F string side C
  


  
    
      51:22
    
  
  
  equals whatever C is so enter side a three side B will be
  


  
    
      51:30
    
  
  
  four side C is five all right everybody so that was everything related to some
  


  
    
      51:36
    
  
  
  arithmetic operators and math related functions in Python and in the next video we're going to cover a few things
  


  
    
      51:42
    
  
  
  involving string [Music] formatting hey everybody in this topic
  


  
    
  7.if statements



  
    
      51:47
    
  
  
  I'm going to explain if statements an if statement is used to do some code only
  


  
    
      51:53
    
  
  
  if some condition we set is true l we could do something else it's a basic
  


  
    
      51:58
    
  
  
  form of decision making if it's true we do something if it's not true we don't do it let's ask a user for their age age
  


  
    
      52:07
    
  
  
  equals input enter your age I will type cast
  


  
    
      52:13
    
  
  
  the input as an integer depending on what the user's age
  


  
    
      52:18
    
  
  
  is we can do one of a few things let's pretend that the user would like to sign up for a credit card but in order to do
  


  
    
      52:25
    
  
  
  so their age needs to be greater than or equal to 18 well we can check that to
  


  
    
      52:30
    
  
  
  use an if statement type if then some condition what would we like to check
  


  
    
      52:36
    
  
  
  let's check to see if the user's age is greater than or equal to 18 then add a
  


  
    
      52:43
    
  
  
  colon then hit enter any code underneath the if statement should be indented make
  


  
    
      52:48
    
  
  
  sure to pay attention to that because that's easy to miss if the user's age is greater than or equal to 18 let's print
  


  
    
      52:56
    
  
  
  you are now signed up if I were to run this code I'll type
  


  
    
      53:03
    
  
  
  in my age I'll type 21 hit enter this statement is true therefore we will
  


  
    
      53:09
    
  
  
  execute any code found within the if statement you are now signed up what if this condition was not
  


  
    
      53:16
    
  
  
  true let's say my age is 13 well nothing happens if the condition we check is
  


  
    
      53:23
    
  
  
  instead false we skip over this code if you need to take a different course of action you could add an else
  


  
    
      53:31
    
  
  
  statement if this is true do this else we can do something
  


  
    
      53:37
    
  
  
  else let's print a different message you must be 18 plus to sign
  


  
    
      53:46
    
  
  
  up I'll type in my age again I'll say that I'm 13 hit enter you must be 18
  


  
    
      53:53
    
  
  
  plus to sign up that's basically an if statement do some code only if some
  


  
    
      53:59
    
  
  
  condition is true else you can do something else entirely it's a basic form of decision making the lse
  


  
    
      54:06
    
  
  
  statement is kind of like a last resort we can check more than one condition before reaching the lse statement we can
  


  
    
      54:13
    
  
  
  add an else if statement which we just shorten to e l
  


  
    
      54:18
    
  
  
  meaning else if else if let's check if age is less than zero
  


  
    
      54:27
    
  
  
  then we'll print a different message you haven't been born
  


  
    
      54:34
    
  
  
  yet now if I run this code I'll say that my age is NE
  


  
    
      54:40
    
  
  
  -1 this condition is false we skip this code this condition is true therefore we
  


  
    
      54:47
    
  
  
  will execute this code and we skip the lse statement you haven't been born yet
  


  
    
      54:53
    
  
  
  let's add another LF statement you can add as many El if statements as you want let's check to see if somebody's age is
  


  
    
      55:00
    
  
  
  greater than or equal to 100 we'll print a different message let's print you are too old to
  


  
    
      55:10
    
  
  
  sign up if I were to say my age is 111 years
  


  
    
      55:16
    
  
  
  old well it states you are now signed up the reason that we didn't reach this part of our else if statement that's
  


  
    
      55:23
    
  
  
  because this condition is still technically true you do need to pay attention to your order of if and else
  


  
    
      55:30
    
  
  
  if statements if I want to be sure that nobody over 100 is signing up I should
  


  
    
      55:36
    
  
  
  probably move this to the beginning if age is greater than or
  


  
    
      55:42
    
  
  
  equal to 100 then else if age is greater than or equal to 18 we'll do something
  


  
    
      55:50
    
  
  
  else and to your age I am 111 years old you are too old to sign up so those are
  


  
    
      55:56
    
  
  
  if statements if some condition is true do something else if you can check something else if no above conditions
  


  
    
      56:04
    
  
  
  are true you could do something else entirely it's kind of like the default here's another example we'll ask a user
  


  
    
      56:11
    
  
  
  if they would like some food response equals
  


  
    
      56:17
    
  
  
  input would you like food we'll have the user type in y for
  


  
    
      56:25
    
  
  
  yes or n for
  


  
    
      56:31
    
  
  
  no if our response now to check to see if two
  


  
    
      56:36
    
  
  
  values are equal you would use double equals if the response is equal to Y
  


  
    
      56:44
    
  
  
  then we will print have some
  


  
    
      56:50
    
  
  
  food the doubles equal sign is the comparison operator it will check to see
  


  
    
      56:55
    
  
  
  if two values are equal you don't want one equals because that's the assignment operator python in this case thinks
  


  
    
      57:02
    
  
  
  we're attempting to assign the character y to response so for comparisons use
  


  
    
      57:08
    
  
  
  double equals else we can
  


  
    
      57:15
    
  
  
  print no food for you so would you like food I'll type why
  


  
    
      57:23
    
  
  
  have some food let's try again I'll type no and
  


  
    
      57:28
    
  
  
  for no no food for you here's the third example we'll have
  


  
    
      57:34
    
  
  
  a user type in their name name equals input enter your
  


  
    
      57:42
    
  
  
  name if our name is equal to an empty string that means they didn't type in
  


  
    
      57:49
    
  
  
  anything so let's yell at the user you did not type in your
  


  
    
      58:00
    
  
  
  name else we will print using an F string hello whatever the name
  


  
    
      58:09
    
  
  
  is enter your name I'm just going to hit enter you did not type in your name
  


  
    
      58:15
    
  
  
  let's run this again I'll type in my name and we have executed the L
  


  
    
      58:20
    
  
  
  statement this time hello bro so one important thing that you
  


  
    
      58:25
    
  
  
  should know is the use of Boolean with if statements suppose we have some
  


  
    
      58:30
    
  
  
  Boolean variable named for sale I'll set this to be true now using an if
  


  
    
      58:36
    
  
  
  statement you can just use the Boolean variable in place of a condition because a condition would evaluate to be true or
  


  
    
      58:45
    
  
  
  false we could just say if for sale if that's true then let's
  


  
    
      58:53
    
  
  
  print this item is for
  


  
    
      58:58
    
  
  
  sale else we will print this item is not for sale for sale
  


  
    
      59:08
    
  
  
  is set to be true this item is for sale if this variable were
  


  
    
      59:15
    
  
  
  false well then the item is not for sale let's try a different variable how about
  


  
    
      59:22
    
  
  
  online if online
  


  
    
      59:27
    
  
  
  the user is online else the user is
  


  
    
      59:35
    
  
  
  offline so the user is offline I'll change the Boolean to true
  


  
    
      59:42
    
  
  
  the user is online so with if statements you can either write a condition or you could
  


  
    
      59:48
    
  
  
  use a Boolean all right everybody so those are if statements do some code only if some
  


  
    
      59:55
    
  
  
  condition is is true else you can do something else it's a basic form of decision making and those are if
  


  
    
      1:00:02
    
  
  
  statements in Python hey everybody this is a remake of
  


  
    
  8.calculator program



  
    
      1:00:08
    
  
  
  my python calculator program for absolute beginners all you need to know to complete this exercise is just if
  


  
    
      1:00:14
    
  
  
  statements and how they work so let's get started for this exercise a user is going to select an arithmetic Operator
  


  
    
      1:00:21
    
  
  
  Operator equals input we will ask the user to to enter n
  


  
    
      1:00:28
    
  
  
  operator this will be plus for addition minus for subtraction as risk for
  


  
    
      1:00:33
    
  
  
  multiplication and a forward slash for division you could enter more than this but I don't want to make this exercise
  


  
    
      1:00:40
    
  
  
  too complicated we will create a variable of num one to contain our first number let's say we would like to add
  


  
    
      1:00:47
    
  
  
  two numbers together what is the first number going to be enter the first number
  


  
    
      1:00:56
    
  
  
  and let's do this with the second number num two enter the second
  


  
    
      1:01:04
    
  
  
  number let me show you something I'm going to add num one and num two
  


  
    
      1:01:09
    
  
  
  together num one plus num two we'll do a test run enter an operator I would like to
  


  
    
      1:01:17
    
  
  
  use addition enter the first number 10 and 11 well the result is 101
  


  
    
      1:01:26
    
  
  
  when we accept user input they are string data types what we've ended up doing is string concatenation we've
  


  
    
      1:01:33
    
  
  
  concatenated the string of 11 to 10 that's why we ended up with 101 we'll have to convert these two
  


  
    
      1:01:40
    
  
  
  strings to be floating Point numbers by typ casting them as a
  


  
    
      1:01:49
    
  
  
  float so enclose your input functions with a typ cast a flat and now we should
  


  
    
      1:01:55
    
  
  
  be able to add those two numbers together so let's add 10 and 11 and we
  


  
    
      1:02:01
    
  
  
  get 21.0 depending on the operator that the user selects we'll use some if statements to determine that we will
  


  
    
      1:02:09
    
  
  
  check if our operator variable is equal to a character of
  


  
    
      1:02:16
    
  
  
  plus and for now I'll write pass as a placeholder we'll get back to this later
  


  
    
      1:02:21
    
  
  
  else if our operator is equal to minus we will use
  


  
    
      1:02:28
    
  
  
  subtraction and for now I'll write pass else if operator is equal to an
  


  
    
      1:02:34
    
  
  
  asterisk for multiplication we will multiply else if our operator is equal
  


  
    
      1:02:42
    
  
  
  to a forward slash for division we will divide if our operator is addition let's
  


  
    
      1:02:49
    
  
  
  create a variable of result result equals num one plus num
  


  
    
      1:02:55
    
  
  
  num two for subtraction it's going to be num one
  


  
    
      1:03:02
    
  
  
  minus num 2 multiplication would be num one times
  


  
    
      1:03:07
    
  
  
  num 2 then division would be num one divided
  


  
    
      1:03:13
    
  
  
  by num two then we just have to print the result print our
  


  
    
      1:03:19
    
  
  
  result be sure to do this with each of the LF statements as well and let's see what we have let's
  


  
    
      1:03:28
    
  
  
  add 5.5 + 6.9 that gives us
  


  
    
      1:03:35
    
  
  
  12.4 let's subtract 420 -
  


  
    
      1:03:41
    
  
  
  0.69 that gives us 41931 let's test
  


  
    
      1:03:47
    
  
  
  multiplication multiply 3.14 *
  


  
    
      1:03:52
    
  
  
  3.14 which gives us 9.85 96 then
  


  
    
      1:03:59
    
  
  
  division let's divide 69 by
  


  
    
      1:04:05
    
  
  
  13 and that gives us a really long number so you could round a number if
  


  
    
      1:04:10
    
  
  
  you would like we would enclose our result within the round
  


  
    
      1:04:16
    
  
  
  function and we'll just update each of these print statements this will round to the
  


  
    
      1:04:22
    
  
  
  nearest whole integer so let's divide 420 by
  


  
    
      1:04:28
    
  
  
  13 let's say that we would like three digits after the decimal within the
  


  
    
      1:04:33
    
  
  
  round function we could add comma 3 for three decimal
  


  
    
      1:04:39
    
  
  
  places enter an operator let's use division divide 420 by
  


  
    
      1:04:47
    
  
  
  69 so that gives me 6.87 so we can round to a given digit
  


  
    
      1:04:54
    
  
  
  after a decimal in in this case three places what if somebody types in an
  


  
    
      1:04:59
    
  
  
  operator that doesn't exist like the word pizza then I will divide two
  


  
    
      1:05:05
    
  
  
  numbers well let's add an L statement if somebody selects some input that is
  


  
    
      1:05:10
    
  
  
  invalid let's let them know I'll use an F string let's say that
  


  
    
      1:05:16
    
  
  
  the operator that the user has selected is not valid and let's try this
  


  
    
      1:05:24
    
  
  
  again enter operator Pizza enter the first number 420 and
  


  
    
      1:05:31
    
  
  
  69 Pizza is not valid let's say is not a valid operator instead that makes more
  


  
    
      1:05:39
    
  
  
  sense pizza will be my operator first number is 420 second
  


  
    
      1:05:45
    
  
  
  number is 69 Pizza is not a valid operator all right everybody so that is
  


  
    
      1:05:52
    
  
  
  a very simple python calculator program you can make make as a
  


  
    
      1:05:58
    
  
  
  beginner hey there it's me again in today's topic we're going to create a weight converter program in Python this
  


  
    
  9.weight conversion program 🏋️



  
    
      1:06:05
    
  
  
  is an exercise that will follow up the lesson on if statements we'll convert pounds to kilogram or kilog to pounds
  


  
    
      1:06:13
    
  
  
  the user is going to decide we will Begin by creating a weight variable we will assign some user
  


  
    
      1:06:19
    
  
  
  input enter your weight we will convert this input into a
  


  
    
      1:06:25
    
  
  
  floating Point number so add that cast then we will ask for a unit is this weight in kilog or
  


  
    
      1:06:33
    
  
  
  pounds input kilograms or
  


  
    
      1:06:41
    
  
  
  pounds we want the user to type in either K for kilogram or L for pounds
  


  
    
      1:06:48
    
  
  
  and these are capital letters by the way using an if statement let's first
  


  
    
      1:06:53
    
  
  
  check to see if our unit is equal to a capital K that means the
  


  
    
      1:06:59
    
  
  
  current weight is in kilogram we need to convert that weight to pounds let's reassign weight equal
  


  
    
      1:07:09
    
  
  
  to our weight times
  


  
    
      1:07:15
    
  
  
  2.205 else if unit is equal to l we need
  


  
    
      1:07:21
    
  
  
  to convert to kilog weight equals weight ided
  


  
    
      1:07:29
    
  
  
  2.205 else the user did not type in something that was valid let's
  


  
    
      1:07:34
    
  
  
  print using an F string unit was not
  


  
    
      1:07:42
    
  
  
  valid at the end of our program we will print the new weight I'll use an F
  


  
    
      1:07:48
    
  
  
  string your weight is our new weight after it's assigned
  


  
    
      1:07:56
    
  
  
  now we need a unit of measurement this is what I'm thinking we'll do within our if and else if statements let's reassign
  


  
    
      1:08:03
    
  
  
  our unit we're reassigning unit to be lbs for
  


  
    
      1:08:10
    
  
  
  pounds else if unit equals kgs for
  


  
    
      1:08:17
    
  
  
  kilogram in our results we will display our new unit let's take a look enter
  


  
    
      1:08:24
    
  
  
  your weight actually I'm just going to make one change I'm going to add colon
  


  
    
      1:08:29
    
  
  
  space there that's much better enter your weight let's say I'm 180 lb this is in
  


  
    
      1:08:38
    
  
  
  pounds I'll type capital L your weight in kilogram is 81.6 3 I think I'm going
  


  
    
      1:08:45
    
  
  
  to round this I will enclose the weight variable within a round function we will round to one decimal
  


  
    
      1:08:52
    
  
  
  place let's try this again ENT to your weight maybe I'm 81
  


  
    
      1:08:58
    
  
  
  kilg I'll type K for kilogram your weight is
  


  
    
      1:09:04
    
  
  
  178.6 lb let's make sure that this lse statement works too enter your weight 18
  


  
    
      1:09:11
    
  
  
  180 pizzas pizzas was not valid so we're
  


  
    
      1:09:16
    
  
  
  still displaying our output we would want to avoid that if somebody doesn't type in a valid unit so let's cut this
  


  
    
      1:09:23
    
  
  
  line then paste each within the if and else if
  


  
    
      1:09:29
    
  
  
  statements when we exit the else statement we're not printing the output so let's make sure that this
  


  
    
      1:09:36
    
  
  
  works and to your weight I am 180
  


  
    
      1:09:41
    
  
  
  pizzas pizza was not valid all right everybody well that is a
  


  
    
      1:09:46
    
  
  
  weight converter program in Python I thought this would be a helpful exercise now that we have finished the section on
  


  
    
      1:09:52
    
  
  
  if statements and yeah that is a weight converter program in
  


  
    
      1:09:58
    
  
  
  Python hey everybody in this topic we're going to create a temperature conversion program as an exercise we'll Begin by
  


  
    
  10.temperature conversion program 🌡️



  
    
      1:10:05
    
  
  
  asking what the current unit of measurement is unit equals we'll accept some user
  


  
    
      1:10:13
    
  
  
  input is this temperature
  


  
    
      1:10:19
    
  
  
  in Celsius or Fahrenheit
  


  
    
      1:10:29
    
  
  
  C slf then we will ask for the
  


  
    
      1:10:34
    
  
  
  temperature I'll store the temperature in a variable named temp meaning temperature temp equals
  


  
    
      1:10:42
    
  
  
  input enter the temperature then we should cast our user
  


  
    
      1:10:49
    
  
  
  input as a floating Point number if unit is equal to
  


  
    
      1:10:59
    
  
  
  C I'll fill this in momentarily I'm just going to write pass as a
  


  
    
      1:11:05
    
  
  
  placeholder else if unit is equal to F we will do something
  


  
    
      1:11:13
    
  
  
  else else let's print something just an error message of some sort using an
  


  
    
      1:11:20
    
  
  
  fstring unit is an invalid unit of
  


  
    
      1:11:29
    
  
  
  measurement Let's test this lse statement is the temperature in Celsius
  


  
    
      1:11:35
    
  
  
  or Fahrenheit what if I were to type K for Kelvin I'll make up some temperature like 100 K is an invalid unit of
  


  
    
      1:11:43
    
  
  
  measurement all right we know the L statement Works let's convert Fahrenheit to Celsius using this formula we will
  


  
    
      1:11:50
    
  
  
  take our temperature equals 9 * R
  


  
    
      1:11:58
    
  
  
  temp / 5 + 32 I'll take all of this and use the
  


  
    
      1:12:05
    
  
  
  round function we'll round to one decimal place then we will print the current
  


  
    
      1:12:12
    
  
  
  temperature in fahrenheit I'll use an F
  


  
    
      1:12:17
    
  
  
  string the temperature in Fahrenheit is
  


  
    
      1:12:26
    
  
  
  our temp variable degrees Fahrenheit Let's test this if
  


  
    
      1:12:33
    
  
  
  statement is the temperature in Celsius or Fahrenheit it is currently in Celsius what is 33° in Celsius converted
  


  
    
      1:12:42
    
  
  
  to Fahrenheit the temperature in Fahrenheit is 91.4 De all right so this section is
  


  
    
      1:12:50
    
  
  
  working let's work on the else statement else if our unit is currently inir
  


  
    
      1:12:55
    
  
  
  will convert to Celsius that formula is temp
  


  
    
      1:13:01
    
  
  
  equals our temperature - 32 * 5 /
  


  
    
      1:13:09
    
  
  
  9 then I will round the result to one decimal
  


  
    
      1:13:17
    
  
  
  place then we'll print the temperature in celsius the temperature in Celsius is is
  


  
    
      1:13:25
    
  
  
  temp de C for Celsius is the temperature in Celsius or
  


  
    
      1:13:32
    
  
  
  Fahrenheit it is currently in Fahrenheit enter the temperature
  


  
    
      1:13:40
    
  
  
  91.4 the temperature in Celsius is 33.0 De C well everybody that is a simple
  


  
    
      1:13:47
    
  
  
  temperature conversion program in Python
  


  
    
  11.logical operators 🌦️



  
    
      1:13:58
    
  
  
  all right people we're talking about logical operators today logical operators allow us to evaluate multiple
  


  
    
      1:14:04
    
  
  
  conditions we can link them together there's three we'll discuss or and not
  


  
    
      1:14:11
    
  
  
  we'll begin with OR with or we can check more than one condition if at least one
  


  
    
      1:14:16
    
  
  
  of those conditions is true then the entire statement is true here's an example let's say we have an outdoor
  


  
    
      1:14:23
    
  
  
  event and I will create two variables one temp meaning temperature let's say that this is in
  


  
    
      1:14:30
    
  
  
  Celsius 25° C pick Fahrenheit if you would like and I will create a Boolean
  


  
    
      1:14:36
    
  
  
  variable of is raining I will set that to be false it is currently not raining
  


  
    
      1:14:42
    
  
  
  if the temperature is too hot too cold or it's raining then I will cancel this
  


  
    
      1:14:48
    
  
  
  outdoor event we'll write an if statement to check that if our temp short for temperature is greater than
  


  
    
      1:14:56
    
  
  
  let's say 35 35° C then I'll use the or logical operator
  


  
    
      1:15:03
    
  
  
  or if our temp is less than zero or if is
  


  
    
      1:15:10
    
  
  
  raining is true if one of these conditions is true
  


  
    
      1:15:16
    
  
  
  we're going to cancel our outdoor event so let's print the following the outdoor
  


  
    
      1:15:23
    
  
  
  event is canell else we will print something
  


  
    
      1:15:31
    
  
  
  else the outdoor event is still
  


  
    
      1:15:39
    
  
  
  scheduled the temperature is reasonable and is raining is false it's not
  


  
    
      1:15:46
    
  
  
  raining so we print the else Clause the outdoor event is still
  


  
    
      1:15:51
    
  
  
  scheduled what if the temperature was really hot like 36°
  


  
    
      1:15:58
    
  
  
  C well the outdoor event is cancelled what if it's cold -5°
  


  
    
      1:16:05
    
  
  
  C the outdoor event is cancelled this condition was true therefore we execute
  


  
    
      1:16:10
    
  
  
  the if statement or what if the temperature is reasonable but it's raining is raining
  


  
    
      1:16:17
    
  
  
  is true well then the outdoor event is still canceled so with the or logical
  


  
    
      1:16:23
    
  
  
  operator at least one of these conditions needs to be true if one of these conditions is true you could
  


  
    
      1:16:29
    
  
  
  consider the entire statement true now let's cover and with and we can
  


  
    
      1:16:35
    
  
  
  link two conditions together both conditions must be true in order for that entire statement to be true so
  


  
    
      1:16:42
    
  
  
  again let's say we have temp short for temperature and we have a Boolean variable of is sunny I will set that to
  


  
    
      1:16:50
    
  
  
  be true we will check if our temp is greater than or equal to 28 degrees
  


  
    
      1:16:59
    
  
  
  C and is it sunny is
  


  
    
      1:17:04
    
  
  
  sunny if it's hot and if it's sunny if this is true let's print the
  


  
    
      1:17:11
    
  
  
  following it is hot outside for fun I'm going to add an
  


  
    
      1:17:17
    
  
  
  emoji but you don't have to I just think it's more entertaining that way but you do
  


  
    
      1:17:23
    
  
  
  you and I will press it is
  


  
    
      1:17:31
    
  
  
  sunny sometimes these emojis are formatted differently I'm just going to copy it from somewhere else that's
  


  
    
      1:17:36
    
  
  
  better currently the temperature is 25 25° C and it's sunny this condition was
  


  
    
      1:17:43
    
  
  
  false but this one is true with the and logical operator both conditions must be
  


  
    
      1:17:49
    
  
  
  true in order for us to execute this block of code if our temperature was 30 30 de C
  


  
    
      1:17:56
    
  
  
  well then both conditions are true it is hot outside and it is sunny
  


  
    
      1:18:02
    
  
  
  let's write a few more let's add else if else if the temp is less than or equal
  


  
    
      1:18:10
    
  
  
  to zero and is sunny we will print something
  


  
    
      1:18:16
    
  
  
  else it is cold outside I'll change the
  


  
    
      1:18:23
    
  
  
  Emoji and it is Sunny let's set the temperature to be
  


  
    
      1:18:29
    
  
  
  -5° C it is cold outside and it is sunny both these conditions are true so
  


  
    
      1:18:37
    
  
  
  we do this instead you can link as many conditions together as you would like let's see if
  


  
    
      1:18:43
    
  
  
  our temperature is within a certain range else if temp is less than
  


  
    
      1:18:50
    
  
  
  28 and our temp is greater than zero
  


  
    
      1:18:55
    
  
  
  and is sunny to check to see if something is within a certain range there is a
  


  
    
      1:19:01
    
  
  
  shortcut too py charm is recommending this we can simplify change
  


  
    
      1:19:07
    
  
  
  comparisons so this effectively does the same thing if 28 is greater than our
  


  
    
      1:19:12
    
  
  
  temp and our temp is greater than zero and it's sunny then we will print it is
  


  
    
      1:19:20
    
  
  
  warm outside rather than hot
  


  
    
      1:19:28
    
  
  
  and it's still sunny so let's say our temperature is 20° CSI and it's
  


  
    
      1:19:34
    
  
  
  sunny it is warm outside and it is sunny now we have the not logical
  


  
    
      1:19:41
    
  
  
  operator it inverts the condition we are checking to see if something is either not false or not true so let's check to
  


  
    
      1:19:49
    
  
  
  see if it's not Sunny really I'll just copy what we have and paste it
  


  
    
      1:19:58
    
  
  
  else if nut is
  


  
    
      1:20:03
    
  
  
  sunny then that means it's
  


  
    
      1:20:12
    
  
  
  cloudy and let's use a cloud
  


  
    
      1:20:19
    
  
  
  Emoji so basically not does the opposite of what you're looking for we are checking if not is sunny is sunny is
  


  
    
      1:20:27
    
  
  
  false then this condition is true okay let's say our temp is
  


  
    
      1:20:33
    
  
  
  208 is sunny is now false it is hot outside it is cloudy
  


  
    
      1:20:41
    
  
  
  what if our temperature was Zero it is cold outside it is cloudy
  


  
    
      1:20:48
    
  
  
  what if the temperature was reasonable like 20° C it is warm outside it is CL
  


  
    
      1:20:54
    
  
  
  cloudy so not it inverts the condition if it's true it's now false if it's
  


  
    
      1:21:00
    
  
  
  false it's now true all right everybody so those are logical operators they
  


  
    
      1:21:05
    
  
  
  allow us to evaluate multiple conditions with or at least one condition must be
  


  
    
      1:21:11
    
  
  
  true with and both conditions must be true and not not does the opposite it
  


  
    
      1:21:17
    
  
  
  inverts the condition we check if something is not false or not true and
  


  
    
      1:21:23
    
  
  
  well everybody those are local operators in Python hey everybody so today I got to
  


  
    
  12.conditional expressions



  
    
      1:21:30
    
  
  
  explain conditional expressions in Python a conditional expression is a
  


  
    
      1:21:35
    
  
  
  oneline shortcut for using an IFL statement if you're familiar with other programming languages this is also known
  


  
    
      1:21:42
    
  
  
  as the trary operator it behaves similarly using conditional Expressions
  


  
    
      1:21:47
    
  
  
  we can print or assign one of two values based on a condition here's the formula
  


  
    
      1:21:53
    
  
  
  return X if our condition is true else return y here's a basic example we will
  


  
    
      1:21:59
    
  
  
  create a variable for number just num let's say our number is five I'm going
  


  
    
      1:22:05
    
  
  
  to print then within our print statement I will write a conditional expression following this formula I'll just copy
  


  
    
      1:22:12
    
  
  
  and paste it let's check to see if our number is positive let's print the text
  


  
    
      1:22:19
    
  
  
  positive if our condition what are we checking let's check to see if if num is
  


  
    
      1:22:26
    
  
  
  greater than zero that means it's positive if this condition is false we
  


  
    
      1:22:31
    
  
  
  will instead print whatever comes after else else negative number is five that will
  


  
    
      1:22:38
    
  
  
  print positive if our number was neg5 well this condition would be false we
  


  
    
      1:22:44
    
  
  
  would instead print negative let's go over another let's check to see if our number
  


  
    
      1:22:50
    
  
  
  is even or odd let's set numb to be six
  


  
    
      1:22:56
    
  
  
  this time I will assign the result to a variable our result equals take our
  


  
    
      1:23:04
    
  
  
  formula let's assign even if our
  


  
    
      1:23:11
    
  
  
  num modulus 2 is our number divisible by two does that equal zero else return odd
  


  
    
      1:23:22
    
  
  
  then let's print our result
  


  
    
      1:23:27
    
  
  
  result number is six that is even if it's five then it's
  


  
    
      1:23:32
    
  
  
  odd assign even if our number is divisible by two else return
  


  
    
      1:23:40
    
  
  
  odd let's create variables A and B A will equal 6 B will equal
  


  
    
      1:23:50
    
  
  
  7 let's create a variable of Max num equals follow our formula
  


  
    
      1:23:59
    
  
  
  again return variable a if a is greater than b else return B between A and B
  


  
    
      1:24:08
    
  
  
  which is the maximum number that would be B of seven let's find the minimum
  


  
    
      1:24:14
    
  
  
  this time minum a if a is less than b else return
  


  
    
      1:24:23
    
  
  
  B the minimum number between six and seven is
  


  
    
      1:24:30
    
  
  
  six this time we'll take an age age equals 25 we will create a variable of status
  


  
    
      1:24:37
    
  
  
  equals use our formula again return a string of adult if our
  


  
    
      1:24:46
    
  
  
  age is greater than or equal to 18 else return a string of child then we will
  


  
    
      1:24:53
    
  
  
  print our status our age is 25 that's greater than or equal to 18 we will print adult if our
  


  
    
      1:25:00
    
  
  
  age was 13 then we are a child we will instead return
  


  
    
      1:25:06
    
  
  
  child let's work with the temperature temperature equals 30°
  


  
    
      1:25:13
    
  
  
  C so that's hot let's create a variable of weather
  


  
    
      1:25:19
    
  
  
  assign a string of hot if our temperature is greater than 20 else we
  


  
    
      1:25:27
    
  
  
  will return a string of cold what's the weather outside today based on the
  


  
    
      1:25:32
    
  
  
  temperature it is hot if our temperature was
  


  
    
      1:25:37
    
  
  
  20 then the weather is cold okay last
  


  
    
      1:25:42
    
  
  
  example we will work with a user role I will set this to be
  


  
    
      1:25:50
    
  
  
  admin we will Define a variable of access level
  


  
    
      1:25:55
    
  
  
  equals again follow our formula return the text of full access
  


  
    
      1:26:05
    
  
  
  if our condition of user rooll is equal
  


  
    
      1:26:10
    
  
  
  to a string of admin else we will
  


  
    
      1:26:15
    
  
  
  return limited access our user role is an admin let's
  


  
    
      1:26:22
    
  
  
  print our access level and we have full access but what if we were a
  


  
    
      1:26:27
    
  
  
  guest well then we have limited access all right everybody those are conditional Expressions they're a
  


  
    
      1:26:34
    
  
  
  oneline shortcut for the if else statement it's similar to the tary operator and other programming languages
  


  
    
      1:26:41
    
  
  
  using conditional Expressions we can print or assign one of two values based
  


  
    
      1:26:47
    
  
  
  on a condition you follow the formula of return X if our condition is true else
  


  
    
      1:26:53
    
  
  
  return y if it's false and well everybody those are a few examples of conditional expressions in
  


  
    
      1:27:02
    
  
  
  Python hey everybody in this topic I'm going to cover a few useful string Methods that you may be interested in
  


  
    
  13.string methods 〰️



  
    
      1:27:08
    
  
  
  then at the end of this video we will work on an exercise where we will validate some user input as we know a
  


  
    
      1:27:14
    
  
  
  string is just a series of characters let's ask a user for their full name
  


  
    
      1:27:20
    
  
  
  name equals input enter your full
  


  
    
      1:27:29
    
  
  
  name the first method I'll show you well technically this is a function the length function will give us the length
  


  
    
      1:27:36
    
  
  
  of a string how many characters is it we will find the length of our variable name after the user types in some input
  


  
    
      1:27:44
    
  
  
  this function returns an integer I'll store that result within a variable uh let's just say result then I will print
  


  
    
      1:27:52
    
  
  
  whatever the result is why don't you go ahead and type in your
  


  
    
      1:27:57
    
  
  
  full name the length of this string in my
  


  
    
      1:28:03
    
  
  
  example is eight characters that does include spaces too 1 2 3 4 5 6 7 8 if
  


  
    
      1:28:11
    
  
  
  you ever need the length of a string there is the length function let's move on if we were to type our variable name
  


  
    
      1:28:18
    
  
  
  followed by a DOT we have access to a whole bunch of different methods we have
  


  
    
      1:28:23
    
  
  
  the the find method the find method will return the first occurrence of a given
  


  
    
      1:28:29
    
  
  
  character the position let's find any spaces I'll store the results within a
  


  
    
      1:28:36
    
  
  
  variable named result I will type in my full
  


  
    
      1:28:43
    
  
  
  name the first occurrence of a space that's what we set is at position three
  


  
    
      1:28:48
    
  
  
  when working with indexes we always begin with zero this first character would have an index of 0 then 1 2 3
  


  
    
      1:28:57
    
  
  
  that's why the find method returned three in place of four let's find the first occurrence of a capital
  


  
    
      1:29:05
    
  
  
  B see it's zero how about
  


  
    
      1:29:12
    
  
  
  oh for me that would be two so remember it's always the first occurrence if you
  


  
    
      1:29:18
    
  
  
  need the last occurrence there is a different method which is all R find R meaning
  


  
    
      1:29:26
    
  
  
  reverse we will find the last occurrence of an
  


  
    
      1:29:33
    
  
  
  o that has a position of five 0 1 2 3 4
  


  
    
      1:29:39
    
  
  
  5 if python isn't able to locate a given character it will return ne1 let's find
  


  
    
      1:29:45
    
  
  
  any I don't know uh
  


  
    
      1:29:52
    
  
  
  Q's python could not find any lowercase cues the rfind method will return -1 if
  


  
    
      1:29:58
    
  
  
  there are no results we can capitalize the first letter in a string by using the capitalize function
  


  
    
      1:30:06
    
  
  
  name. capitalize this method will return a
  


  
    
      1:30:12
    
  
  
  string I will reassign that to name then we will print our name
  


  
    
      1:30:19
    
  
  
  capitalized I'll be sure to type in my name all lowercase
  


  
    
      1:30:24
    
  
  
  since this is all one string only the first letter is capitalized even though I'm including a first and last name the
  


  
    
      1:30:32
    
  
  
  upper method will take all of the characters in a string then make them all uppercase follow your variable that
  


  
    
      1:30:39
    
  
  
  contains a string followed by Dot Upper then I will reassign the result to my
  


  
    
      1:30:45
    
  
  
  name variable to overwrite it enter your full name all of the letters are now
  


  
    
      1:30:52
    
  
  
  uppercase there is also lower to make all of the characters
  


  
    
      1:30:57
    
  
  
  lowercase name equals name do
  


  
    
      1:31:05
    
  
  
  lower yep all the characters are lowercase now the is digit method will
  


  
    
      1:31:11
    
  
  
  return either true or false if a string contains only digits the result is a
  


  
    
      1:31:17
    
  
  
  Boolean true or false I'll store that within a variable named result then
  


  
    
      1:31:22
    
  
  
  print result so if I were to type in my full
  


  
    
      1:31:27
    
  
  
  name is digit returns false there are not only digits within that string if my
  


  
    
      1:31:34
    
  
  
  string was some combination of alphabetical characters and numbers this method will still return
  


  
    
      1:31:40
    
  
  
  false it only returns true if my string only contains
  


  
    
      1:31:45
    
  
  
  digits I'll just type in one 23 see that's true that is the isdigit
  


  
    
      1:31:52
    
  
  
  method otherwise wi we have is Alpha name. is
  


  
    
      1:31:59
    
  
  
  Alpha the is Alpha method will return a Boolean true or false depending if a
  


  
    
      1:32:05
    
  
  
  string contains only alphabetical characters I'll type in my full name so
  


  
    
      1:32:11
    
  
  
  the reason that this came up false is because my full name contains a space which is not an alphabetical
  


  
    
      1:32:19
    
  
  
  character if I typed in my full name excluding any spaces this would now be
  


  
    
      1:32:24
    
  
  
  true is Alpha would also return false if my name contained any sort of digits
  


  
    
      1:32:29
    
  
  
  foro 1 23 and that is also false that is the is Alpha
  


  
    
      1:32:36
    
  
  
  method now let's ask for a phone number phone number equals
  


  
    
      1:32:45
    
  
  
  input enter your phone number with the phone number they
  


  
    
      1:32:52
    
  
  
  typically contain dashes let's count how many dashes are going to be in somebody's phone
  


  
    
      1:32:58
    
  
  
  number phone number dot count method let's count the amount
  


  
    
      1:33:05
    
  
  
  of dashes so place a character within the account method this method will
  


  
    
      1:33:11
    
  
  
  return an integer let's store that within a variable results equals phone number. count
  


  
    
      1:33:18
    
  
  
  method so type in some phone number 1-23
  


  
    
      1:33:24
    
  
  
  4-56 7-8 901 we have three dashes within the
  


  
    
      1:33:30
    
  
  
  string 1 2 3 that is the count method we can count how many characters are within
  


  
    
      1:33:37
    
  
  
  a string we also have the replace method honestly the replace method is probably
  


  
    
      1:33:44
    
  
  
  one of the most useful methods of strings we can replace any occurrence with one character with another replace
  


  
    
      1:33:52
    
  
  
  let's replace any dashes with maybe a space this method will
  


  
    
      1:33:58
    
  
  
  return a new string I'm going to reassign this to our phone number variable then print the phone
  


  
    
      1:34:05
    
  
  
  number enter your phone number 1-2 3 4-56 7-8
  


  
    
      1:34:12
    
  
  
  901 so here's my new phone number but we've replaced all of the dashes with
  


  
    
      1:34:17
    
  
  
  spaces even better yet we could eliminate all the dashes completely by replacing the dashes or another
  


  
    
      1:34:24
    
  
  
  character with an empty string 1-2 3 4-56 7-
  


  
    
      1:34:33
    
  
  
  8901 here's our new phone number without any dashes we've replaced all dashes
  


  
    
      1:34:38
    
  
  
  with an empty string no characters if you would like a comprehensive list of all of the string Methods available to
  


  
    
      1:34:45
    
  
  
  you you can use the help function type in the data type Str strr meaning string
  


  
    
      1:34:50
    
  
  
  then I will print whatever the result is
  


  
    
      1:34:58
    
  
  
  here's a bunch of methods you might be interested in in the future capitalize case fold Center count en code ends with
  


  
    
      1:35:07
    
  
  
  just to name a few all right everybody here's an exercise for you we will
  


  
    
      1:35:12
    
  
  
  validate some user input we would like a user to enter in a valid username
  


  
    
      1:35:18
    
  
  
  however there's a couple rules the username can be no more than 12 characters long
  


  
    
      1:35:24
    
  
  
  the username must not contain any spaces and the username must not contain any
  


  
    
      1:35:31
    
  
  
  digits let's assign a variable named username equals
  


  
    
      1:35:37
    
  
  
  input enter a usern
  


  
    
      1:35:42
    
  
  
  name first let's check to see if our user input is more than 12 characters
  


  
    
      1:35:47
    
  
  
  long we can do that using the length function we will find the length of our
  


  
    
      1:35:53
    
  
  
  username the length function returns an integer let's check to see if the length of our
  


  
    
      1:36:00
    
  
  
  username is greater than 12 characters if it is we'll print a
  


  
    
      1:36:07
    
  
  
  message your user name can't be more than 12
  


  
    
      1:36:16
    
  
  
  characters else we will print using an FST
  


  
    
      1:36:22
    
  
  
  string well welcome whatever our username variable
  


  
    
      1:36:27
    
  
  
  is let's try it I'll type in my first name last name then add a whole bunch of
  


  
    
      1:36:34
    
  
  
  characters afterwards your username can't be more than 12
  


  
    
      1:36:40
    
  
  
  characters let's type in something that's under 12 characters yep and that appears to work
  


  
    
      1:36:48
    
  
  
  okay so we have accomplished task number one our username can't be more than 12
  


  
    
      1:36:54
    
  
  
  characters next our username must not contain any
  


  
    
      1:37:00
    
  
  
  spaces we can use the find method of a string username doind we will find any
  


  
    
      1:37:07
    
  
  
  spaces that's a character if no spaces are found this
  


  
    
      1:37:12
    
  
  
  method will return -1 using an else if
  


  
    
      1:37:18
    
  
  
  statement I'll add not if the find method of username
  


  
    
      1:37:27
    
  
  
  equals -1 if the result is not -1 meaning we
  


  
    
      1:37:34
    
  
  
  found a space we will print your username can't contain
  


  
    
      1:37:44
    
  
  
  spaces I'll type in my first and last name you might need to think of
  


  
    
      1:37:49
    
  
  
  something that's underneath 12 characters your username can't contain spaces so we have accomplished rule
  


  
    
      1:37:57
    
  
  
  number two three username must not contain digits we can use the is Alpha method of
  


  
    
      1:38:05
    
  
  
  strings the is Alpha method returns a Boolean if a string only contains
  


  
    
      1:38:10
    
  
  
  alphabetical characters so let's copy that I'll add another LF statement not
  


  
    
      1:38:18
    
  
  
  username is Alpha
  


  
    
      1:38:23
    
  
  
  then we will print your username
  


  
    
      1:38:30
    
  
  
  can't contain numbers I guess technically is Alpha would check for
  


  
    
      1:38:36
    
  
  
  spaces too but I'd rather have that be handled within a different if
  


  
    
      1:38:41
    
  
  
  statement all right I'll type in a username I'll include some
  


  
    
      1:38:47
    
  
  
  digits your username can't contain numbers all right I think we've
  


  
    
      1:38:52
    
  
  
  accomplished this let me make up a username following these three rules yep it seems to check out all
  


  
    
      1:39:01
    
  
  
  right everybody and that is a few useful string Methods that you may be interested
  


  
    
      1:39:07
    
  
  
  in hey everybody in this topic I'm going to explain string indexing indexing
  


  
    
  14.string indexing ✂️



  
    
      1:39:13
    
  
  
  allows us to access the elements of a sequence using a set of square brackets
  


  
    
      1:39:18
    
  
  
  also known as the indexing operator using this set of square brackets following a string there are up to three
  


  
    
      1:39:25
    
  
  
  fields that we can fill in we can access a starting point in the string an ending
  


  
    
      1:39:30
    
  
  
  point and a step here's an example suppose we have a credit card number
  


  
    
      1:39:36
    
  
  
  credit number equals and I'll just make up some number 1 2 3 4-5 6 7 8-
  


  
    
      1:39:45
    
  
  
  9012 d34 5 6 good enough if I need the
  


  
    
      1:39:50
    
  
  
  first character within the string I can type Ty the name of my string variable
  


  
    
      1:39:55
    
  
  
  followed by the indexing operator which is a set of square brackets the first position has an index of zero computers
  


  
    
      1:40:03
    
  
  
  always start with zero so that's why the first index is zero then I'm going to go ahead and print this print credit card
  


  
    
      1:40:10
    
  
  
  number at index of zero that would be one if I were to
  


  
    
      1:40:15
    
  
  
  change the index to be one 0 1 that should be two index 2
  


  
    
      1:40:23
    
  
  
  would technically be three then four is the dash within our string as you can see here with the
  


  
    
      1:40:30
    
  
  
  indexing operator there's up to three fields that we can fill in a start and
  


  
    
      1:40:35
    
  
  
  and step if you have just one field listed without any colons it's assumed
  


  
    
      1:40:40
    
  
  
  you're filling in the starting position so now what if you would like the first four digits of the
  


  
    
      1:40:47
    
  
  
  string well we would type the name of our string variable indexing operator
  


  
    
      1:40:54
    
  
  
  we'll need a starting index colon then an ending index the first four digits
  


  
    
      1:41:01
    
  
  
  would be 0 colon 4 then I will print
  


  
    
      1:41:09
    
  
  
  this and I'm just going to turn this first line into a comment yeah there we go we have the
  


  
    
      1:41:15
    
  
  
  first four digits of our credit card number 1 2 3 4 just so you know with the ending Index this index is exclusive
  


  
    
      1:41:23
    
  
  
  this first number would be 0er 1 2 3 4 so we did not include that Dash within
  


  
    
      1:41:30
    
  
  
  the number the starting index is inclusive the ending index is exclusive
  


  
    
      1:41:35
    
  
  
  so you can omit the zero in the beginning you could just say colon 4 python assumes the starting position
  


  
    
      1:41:42
    
  
  
  will be the beginning of the string so that would work too let's get the next
  


  
    
      1:41:48
    
  
  
  set of digits 56 78 credit number indexing operator Ator let's find where
  


  
    
      1:41:54
    
  
  
  the starting index would be 0 1 2 3 4 5
  


  
    
      1:42:00
    
  
  
  5 colon 6 7 8
  


  
    
      1:42:06
    
  
  
  9 then we will print whatever is
  


  
    
      1:42:11
    
  
  
  here the next set of digits is 5 6 7 8 maybe we need the last 12 digits well
  


  
    
      1:42:18
    
  
  
  what we could do in that case we will take our string variable credit number
  


  
    
      1:42:24
    
  
  
  set the starting index to be let's see 0 1 2 3 4
  


  
    
      1:42:30
    
  
  
  5 five colon if you need everything up to the end of the string you don't need
  


  
    
      1:42:35
    
  
  
  to list an ending index just be sure to add that colon python then assumes you need everything up to the end of the
  


  
    
      1:42:42
    
  
  
  string so I will print whatever we have then we should have everything
  


  
    
      1:42:47
    
  
  
  besides the first four digits yep 5 67 8 9 012 34 5
  


  
    
      1:42:54
    
  
  
  6 you could also use a negative index credit number if you need the last
  


  
    
      1:43:01
    
  
  
  last character in a string you would set the index to be -1 then I will print
  


  
    
      1:43:07
    
  
  
  this print credit number at index of -1 that would be
  


  
    
      1:43:14
    
  
  
  6 -2 is 5 -3 is 4-4
  


  
    
      1:43:23
    
  
  
  is three and then 5 would be that Dash right here yeah you can use negative indexes too let's talk about step using
  


  
    
      1:43:31
    
  
  
  the step field we can access the characters in a string by a given step we can count by twos or we can count by
  


  
    
      1:43:39
    
  
  
  threes so here's an example so let's take our credit number if we're not filling in the starting or ending Fields
  


  
    
      1:43:47
    
  
  
  but we need a step we would need two colons then python is assuming everything from the beginning of the
  


  
    
      1:43:53
    
  
  
  string to the end then our step will be two this will print every second
  


  
    
      1:43:59
    
  
  
  character within our string yeah here we are we have 1 3 Dash
  


  
    
      1:44:05
    
  
  
  6 8 9 1 so on and so
  


  
    
      1:44:11
    
  
  
  forth if I were to change the step to three we would count every third
  


  
    
      1:44:16
    
  
  
  character beginning with 1 4 6 Das
  


  
    
      1:44:24
    
  
  
  1 3 6 all right here's a practical example let's create a program to get
  


  
    
      1:44:30
    
  
  
  the last four digits of a credit card number I'm going to assign this to a new
  


  
    
      1:44:37
    
  
  
  variable last digits equals our credit
  


  
    
      1:44:46
    
  
  
  number indexing operator so we need the last four digits where would the
  


  
    
      1:44:51
    
  
  
  starting index begin well we could use negative indexing this last digit is1 -2
  


  
    
      1:44:58
    
  
  
  -34 we will begin at4 colon we can omit the ending index
  


  
    
      1:45:06
    
  
  
  python assumes we need the rest of the string then really that's all we need so let's
  


  
    
      1:45:12
    
  
  
  print I'll use an F string uh maybe some xes maybe we're
  


  
    
      1:45:17
    
  
  
  hiding somebody's credit card number except the last four digits
  


  
    
      1:45:23
    
  
  
  okay then variable last
  


  
    
      1:45:29
    
  
  
  digits all right and here's our credit card number where only the last four digits are visible hey you know what
  


  
    
      1:45:36
    
  
  
  let's add one more exercise let's reverse the characters in The String I'm
  


  
    
      1:45:41
    
  
  
  going to reassign credit number equals credit
  


  
    
      1:45:47
    
  
  
  number if we need the entire string we don't necessarily need a starting index
  


  
    
      1:45:53
    
  
  
  or an ending index but for the step this will be negative -1 will reverse a
  


  
    
      1:45:59
    
  
  
  string then let's print whatever our new credit card number is print credit
  


  
    
      1:46:06
    
  
  
  number and yeah there is our credit number backwards to reverse a string you
  


  
    
      1:46:12
    
  
  
  set the step to be NE -1 so yeah everybody that is string indexing in
  


  
    
      1:46:17
    
  
  
  Python we can access elements of a sequence using the indexing operator which is a set of straight brackets you
  


  
    
      1:46:24
    
  
  
  can list a starting position ending position and even a step if you need to skip over characters but yeah that is
  


  
    
      1:46:31
    
  
  
  string indexing in Python hey everybody in this topic I'm
  


  
    
  15.format specifiers



  
    
      1:46:37
    
  
  
  going to explain format specifiers format specifiers when used in the context of an F string they allow us to
  


  
    
      1:46:44
    
  
  
  format a value based on what flags are inserted following your value you would
  


  
    
      1:46:49
    
  
  
  type a colon and then some Flags depending on what flags you insert it will format your output a certain way
  


  
    
      1:46:56
    
  
  
  you could add decimal point Precision allocate space zero pad values left
  


  
    
      1:47:03
    
  
  
  justify right justify Center align all sorts of things let's have some practice
  


  
    
      1:47:09
    
  
  
  I'll create three prices price one price two price
  


  
    
      1:47:16
    
  
  
  three price one will be 3.14159 these values aren't in and cents
  


  
    
      1:47:23
    
  
  
  yet but they will be price two will be
  


  
    
      1:47:44
    
  
  
  [Music]
  


  
    
      1:47:52
    
  
  
  is price two price three is price three within our placeholder following the
  


  
    
      1:47:58
    
  
  
  value we can add a Colin then some Flags those flags are the format specifiers
  


  
    
      1:48:05
    
  
  
  they will format our value a particular way depending on what we insert after the colon to add decimal point Precision
  


  
    
      1:48:14
    
  
  
  you would type after the colon dot then the amount of decimals to be displayed
  


  
    
      1:48:20
    
  
  
  maybe two then F meaning Flo Point number let's do that with price two and
  


  
    
      1:48:25
    
  
  
  price three colon. 2f price one is now 3.14 price two is
  


  
    
      1:48:34
    
  
  
  987 65 price 3 is 12.34 I think I'm going to add some
  


  
    
      1:48:40
    
  
  
  dollar signs before the placeholder yeah that's much better for
  


  
    
      1:48:46
    
  
  
  Less Precision maybe one decimal place you can change the two to a one so. onef
  


  
    
      1:48:54
    
  
  
  each number only displays one decimal .1 6.3 whereas in 3F would display three
  


  
    
      1:49:02
    
  
  
  decimal places1 142 650 340 even though price two and price
  


  
    
      1:49:10
    
  
  
  three only have two decimal places in the original numbers we will concatenate some additional zeros to allocate space
  


  
    
      1:49:17
    
  
  
  to display a value after the colon add some number some number for that many spaces how about
  


  
    
      1:49:29
    
  
  
  10 each value now has a total of 10 spaces to display the output 1 2 3 4 5 6
  


  
    
      1:49:37
    
  
  
  7 8 9 10 if you were to preedee a number with zero well these numbers would be zero
  


  
    
      1:49:47
    
  
  
  padded each number is now zero padded to left justify a value you would use a
  


  
    
      1:49:53
    
  
  
  left angle bracket all these numbers are now left
  


  
    
      1:50:00
    
  
  
  Justified then we have all of the space after they're all uniform right justify
  


  
    
      1:50:07
    
  
  
  would be a right angle bracket and I believe that's the
  


  
    
      1:50:14
    
  
  
  default cental line I believe is the carrot
  


  
    
      1:50:21
    
  
  
  symbol yep our numbers are now centered if you have any positive values
  


  
    
      1:50:27
    
  
  
  and you would like to display a plus sign just use
  


  
    
      1:50:36
    
  
  
  plus any positive number is preceded with the plus sign any negative number is preceded with the negative sign or
  


  
    
      1:50:43
    
  
  
  you could use a space for any positive numbers so colon
  


  
    
      1:50:49
    
  
  
  space these numbers are lined up evenly even though we have a negative number number in here there is a thousand
  


  
    
      1:50:54
    
  
  
  separator which is a comma we should probably increase the
  


  
    
      1:51:00
    
  
  
  value of our prices 3,00 9,870
  


  
    
      1:51:08
    
  
  
  1,200 each thousand's place is now separated with a comma we could also mix
  


  
    
      1:51:13
    
  
  
  and match Flags I would like a thousand separator along with decimal point
  


  
    
      1:51:19
    
  
  
  Precision of two decimal places
  


  
    
      1:51:24
    
  
  
  and why not I will preedee each number with a plus sign if it's
  


  
    
      1:51:31
    
  
  
  positive yep here we are so based on what you're looking for you can add some combination of flags so yeah those are
  


  
    
      1:51:39
    
  
  
  format specifiers everybody within your placeholder insert your value a colon
  


  
    
      1:51:46
    
  
  
  then certain Flags based on what you're looking for exactly but yeah those are just a few
  


  
    
      1:51:51
    
  
  
  formats specified in Python hey everybody in this topic I'm
  


  
    
  16.while loops ♾️



  
    
      1:51:57
    
  
  
  going to explain while Loops a while loop will execute some code while some
  


  
    
      1:52:02
    
  
  
  condition remains true here's an example we'll use an if statement first we will ask a user for their name name equals
  


  
    
      1:52:10
    
  
  
  input enter your name if our name is equal to an empty
  


  
    
      1:52:18
    
  
  
  string that means the user didn't type in anything let's let's print a
  


  
    
      1:52:23
    
  
  
  message you did not enter your name
  


  
    
      1:52:29
    
  
  
  else we will print using an F string
  


  
    
      1:52:34
    
  
  
  hello our users's name if I were to skip this
  


  
    
      1:52:41
    
  
  
  prompt we would execute this if statement then we continue with the rest of the program what if I would like to
  


  
    
      1:52:47
    
  
  
  continually prompt the user to type in their name we can't continue until they type in something something well we
  


  
    
      1:52:53
    
  
  
  could replace this if statement with a while loop while this condition is true
  


  
    
      1:53:00
    
  
  
  continue to execute this code within the while loop I'm going to reprompt the user to type in a
  


  
    
      1:53:07
    
  
  
  name then if we were to exit the while loop then we will print hello whatever
  


  
    
      1:53:13
    
  
  
  your name is so let's run this enter your name I'm going to hit enter you did
  


  
    
      1:53:19
    
  
  
  not enter your name enter your name no no no okay I give up I'll type in my first
  


  
    
      1:53:24
    
  
  
  name hit enter hello whatever your first name is while this condition remains
  


  
    
      1:53:30
    
  
  
  true execute this code potentially forever until this condition is no
  


  
    
      1:53:35
    
  
  
  longer true so that's one of the main benefits of a while loop if it's not true then you exit out of the while loop
  


  
    
      1:53:42
    
  
  
  and that's why we're able to continue then print our name hello name you do want some way to escape out of the while
  


  
    
      1:53:48
    
  
  
  loop otherwise you'll run into what's known as an infinite Loop so let's say while name is equal to an empty string
  


  
    
      1:53:57
    
  
  
  we will print you did not enter your name so I'm going to hit enter so we are
  


  
    
      1:54:03
    
  
  
  stuck in an infinite Loop we can't actually escape this Loop we didn't give ourselves an exit
  


  
    
      1:54:09
    
  
  
  strategy that's why previously we repr prompted the user to type in something we're giving them a chance to escape in
  


  
    
      1:54:15
    
  
  
  a way it kind of works like an if statement but instead of executing some code once it's potentially infinite here
  


  
    
      1:54:22
    
  
  
  here's another example this time let's ask for a user's age age equals and I will convert the
  


  
    
      1:54:29
    
  
  
  input to an integer enter your
  


  
    
      1:54:34
    
  
  
  age we'll need the user to type in a positive number while age is less than
  


  
    
      1:54:44
    
  
  
  zero let's print a message to let the user know that they can't do that age can't be
  


  
    
      1:54:53
    
  
  
  negative then we need some strategy to escape let's reprompt the user to enter
  


  
    
      1:54:59
    
  
  
  in their age once they type in something that's valid we can escape out of the while
  


  
    
      1:55:05
    
  
  
  loop so let's print using an FST string you
  


  
    
      1:55:11
    
  
  
  are age years old so enter your age I'm going to say
  


  
    
      1:55:18
    
  
  
  negative 1 age can't be negative --2
  


  
    
      1:55:23
    
  
  
  1 million okay I give up how about 21 you are 21 years old so that was another
  


  
    
      1:55:29
    
  
  
  example while our age variable is less than zero repeat this code forever let's
  


  
    
      1:55:35
    
  
  
  go over example three I'm going to introduce some logical operators we will have the user
  


  
    
      1:55:42
    
  
  
  type in a food they like food equals input enter a food you like but in order
  


  
    
      1:55:51
    
  
  
  to escape I need to press Q to quit while food is equal to the letter
  


  
    
      1:56:01
    
  
  
  Q continue this while loop however I'm going to make one change we want to exit
  


  
    
      1:56:08
    
  
  
  the while loop when they press Q so you could say while not food equals Q So
  


  
    
      1:56:16
    
  
  
  within this while loop let's print the food that they stated that they like I'll use an F string you like your
  


  
    
      1:56:24
    
  
  
  variable food then we will prompt the user to enter in another food that they like
  


  
    
      1:56:30
    
  
  
  enter another food you like Q to quit then once we escape the while loop
  


  
    
      1:56:35
    
  
  
  we will print just buy okay enter a food you like C to quit
  


  
    
      1:56:42
    
  
  
  I like pizza you like pizza I like sushi you like sushi I like Ramen you like
  


  
    
      1:56:50
    
  
  
  Ramen okay this program kind of lame so I'm going to press Q to quit and we escape the while loop we have printed by
  


  
    
      1:56:58
    
  
  
  so you could do something while something is not true by using the not logical operator all right last example
  


  
    
      1:57:05
    
  
  
  example four we will use the or logical operator we'll ask a user to type in a
  


  
    
      1:57:10
    
  
  
  number between 1 and 10 let's say num equals
  


  
    
      1:57:17
    
  
  
  input enter a number between 1 through
  


  
    
      1:57:24
    
  
  
  10 then I will typ cast the input as an
  


  
    
      1:57:30
    
  
  
  integer while our number is less than one or our number is greater than 10
  


  
    
      1:57:40
    
  
  
  let's reprompt the user let's print using an FST string our variable
  


  
    
      1:57:47
    
  
  
  num is not valid then we will reprompt the
  


  
    
      1:57:53
    
  
  
  user enter a number between 1 and 10 once we escape the while loop then we
  


  
    
      1:57:59
    
  
  
  will print our number using an FST string your number is our variable
  


  
    
      1:58:07
    
  
  
  num enter a number between 1 through 10 0 Z is not valid
  


  
    
      1:58:15
    
  
  
  1 100 nope uh five your number is five
  


  
    
      1:58:21
    
  
  
  that's an example example of how you can add logical operators to Wild Loops while this condition is true or this
  


  
    
      1:58:28
    
  
  
  condition is true execute this code Forever all right everybody so those are while Loops a while loop will execute
  


  
    
      1:58:35
    
  
  
  some code while some condition remains true it's fairly useful for verifying
  


  
    
      1:58:40
    
  
  
  user input if a user types in some input that is not valid you can reprompt them
  


  
    
      1:58:45
    
  
  
  and there's many other uses that we'll discuss in the future but yeah those are while Loops in Python
  


  
    
  17.compound interest calculator



  
    
      1:58:53
    
  
  
  why hello everybody in today's video we'll be creating a compound interest calculator in Python for those that
  


  
    
      1:58:59
    
  
  
  don't know interest is a charge for the privilege of borrowing money to some individual or organization when you
  


  
    
      1:59:06
    
  
  
  place money in a bank account you typically acre interest we'll create a program to tell you what your new
  


  
    
      1:59:11
    
  
  
  balance will be after acre interest for so many years but the user is going to
  


  
    
      1:59:16
    
  
  
  decide the initial principle that's the investment the rate of interest and the time and years that this balance has
  


  
    
      1:59:22
    
  
  
  been acre interest so let's begin let's declare three variables a principle a
  


  
    
      1:59:28
    
  
  
  rate that is rate of interest and time time will be in years we've recently
  


  
    
      1:59:34
    
  
  
  learned about while Loops I would like to include those within this program just so we get the hang of using them we
  


  
    
      1:59:39
    
  
  
  will ask the user to type in an initial principal investment we will continue to prompt the user to type in a principle
  


  
    
      1:59:46
    
  
  
  that's above zero our condition will be while principal is less than or equal
  


  
    
      1:59:52
    
  
  
  equal to zero we will take our principal assign it some user
  


  
    
      1:59:58
    
  
  
  input enter the principal
  


  
    
      2:00:04
    
  
  
  amount then we would like to typ cast our input as a floating Point
  


  
    
      2:00:10
    
  
  
  number if our user input principal is less than or equal to zero we need to
  


  
    
      2:00:17
    
  
  
  inform the user principal
  


  
    
      2:00:22
    
  
  
  can't be less than or equal to
  


  
    
      2:00:29
    
  
  
  zero so I'm going to test my program by printing the principle at the end just
  


  
    
      2:00:36
    
  
  
  temporarily enter the principal amount I can't type A negative number and continue what if my investment was
  


  
    
      2:00:44
    
  
  
  $1,000 principal can't be less than or equal to zero how about zero nope can't
  


  
    
      2:00:49
    
  
  
  do that either is a th000 okay yep a th000 works that is for the
  


  
    
      2:00:55
    
  
  
  principle let's copy this while loop paste it replace principle with rate
  


  
    
      2:01:01
    
  
  
  this is the rate of interest enter the interest
  


  
    
      2:01:08
    
  
  
  rate interest rate can't be less than or equal to
  


  
    
      2:01:14
    
  
  
  zero and let's copy this again paste it change rate to time
  


  
    
      2:01:25
    
  
  
  let's typ cast our input as an integer because we're working with whole years enter the time in
  


  
    
      2:01:34
    
  
  
  years time can be less than or equal to zero I'm going to print my principle
  


  
    
      2:01:42
    
  
  
  rate and time we have
  


  
    
      2:01:48
    
  
  
  principle rate time okay we know that principle
  


  
    
      2:01:55
    
  
  
  Works enter the interest rate can my interest rate be ne1 no it can't can it
  


  
    
      2:02:01
    
  
  
  be zero nope how about 10 10% all right that works time can time be zero no it
  


  
    
      2:02:09
    
  
  
  can't can my time be netive 1 no it can't what about 3 years all right so we
  


  
    
      2:02:15
    
  
  
  know that our while Loops are working now here's the formula to calculate interest let's say our
  


  
    
      2:02:22
    
  
  
  total that's our total balance equals our principal
  


  
    
      2:02:29
    
  
  
  times 1 + r rate / 100 I'm going to
  


  
    
      2:02:35
    
  
  
  enclose this function with the set of parentheses this portion of our function will take our interest rate which is a
  


  
    
      2:02:41
    
  
  
  whole number then create a decimal enclose this function within the power
  


  
    
      2:02:46
    
  
  
  function raise this function to the power of time and that is how to
  


  
    
      2:02:52
    
  
  
  calculate compound interest then we will print the New Balance I'll use an FST
  


  
    
      2:03:00
    
  
  
  string balance after our variable
  


  
    
      2:03:05
    
  
  
  time the word years I'll add a placeholder we will add
  


  
    
      2:03:11
    
  
  
  our total then I'll include a dollar sign maybe this will be in dollars but pick
  


  
    
      2:03:17
    
  
  
  any unit of currency you would like I will format this variable with the format specify fire we will display two
  


  
    
      2:03:23
    
  
  
  decimal places 2f okay let's try this enter the
  


  
    
      2:03:29
    
  
  
  principal amount I invest $1,000 into maybe the stock market the interest rate is maybe 10%
  


  
    
      2:03:37
    
  
  
  this year the time in years will be one so after one year at 10% interest my
  


  
    
      2:03:44
    
  
  
  new balance is $1,100 let's try it one more time for good measure maybe $500 with an interest
  


  
    
      2:03:52
    
  
  
  rate of seven over 2 years your new balance would be $572
  


  
    
      2:03:57
    
  
  
  45 all right now there is another way of writing this program what if we would like to allow the user to enter in
  


  
    
      2:04:04
    
  
  
  values that are equal to zero while principle is less than zero if principal
  


  
    
      2:04:11
    
  
  
  is less than zero principal can't be less than zero let's do that for
  


  
    
      2:04:19
    
  
  
  rate interest can't be less than
  


  
    
      2:04:24
    
  
  
  zero time time can't be less than zero here's
  


  
    
      2:04:30
    
  
  
  what happens to our program remember that we're declaring our variables at the top uh nothing happens we go straight to
  


  
    
      2:04:37
    
  
  
  the results so the reason that this is happening is that when we reach the wild
  


  
    
      2:04:42
    
  
  
  Loops this condition is false from the beginning we never end up entering these while Loops we skip over them because
  


  
    
      2:04:50
    
  
  
  these three conditions are all false we can write a different variation of this while loop where we could say while true
  


  
    
      2:04:59
    
  
  
  true is a Boolean that means this while loop will continue forever unless we explicitly break out of the while loop
  


  
    
      2:05:06
    
  
  
  we're going to add an else Clause else we will break break will
  


  
    
      2:05:12
    
  
  
  break out of a loop with our second while loop change rate is less than zero to while true
  


  
    
      2:05:20
    
  
  
  then we will add an else CLI laws else break out of the loop while
  


  
    
      2:05:29
    
  
  
  true else break out of the loop we should be able to enter zero
  


  
    
      2:05:35
    
  
  
  values in now enter the principal amount 0 0 0 balance after 0 years is
  


  
    
      2:05:45
    
  
  
  0 this should work the same as before but we should be allowed to enter in zero values $1,000
  


  
    
      2:05:53
    
  
  
  interest rate of zero after one year is still $1,000 well okay then everybody I
  


  
    
      2:06:00
    
  
  
  thought that would be an interesting project to create now that we know how while loops work you could write either a standard while loop with a condition
  


  
    
      2:06:06
    
  
  
  such as principal is less than or equal to zero or you could say while true this
  


  
    
      2:06:13
    
  
  
  Loop would continue forever you would need to explicitly break out of the while loop using this break keyword
  


  
    
      2:06:20
    
  
  
  which we'll cover again in four Loops but yeah that is a compound interest calculator in
  


  
    
      2:06:27
    
  
  
  Python hey everybody in this topic I need to explain for Loops a for Loop will execute a block of code a fixed
  


  
    
  18.for loops



  
    
      2:06:35
    
  
  
  number of times you can iterate over a range a string a sequence anything that
  


  
    
      2:06:41
    
  
  
  is considered iterable I'll have more examples for you in future topics there is a lot of overlap where you could use
  


  
    
      2:06:47
    
  
  
  either a while loop or a for Loop but for Loops tend to be better in situations where you have to do something only a fixed number of times
  


  
    
      2:06:55
    
  
  
  here's an example suppose we need to count to 10 if we were to use a for Loop we could write something like this we
  


  
    
      2:07:01
    
  
  
  would type four then we would need some sort of counter typically you see people
  


  
    
      2:07:06
    
  
  
  write x 4 x in then we will use the
  


  
    
      2:07:11
    
  
  
  range function what number would we like to start at I would like to start at 1
  


  
    
      2:07:18
    
  
  
  then count to 10 but the second number is X exclusive so really we're going to
  


  
    
      2:07:23
    
  
  
  write 11 if we want to count to 10 so then colon then hit enter whatever code
  


  
    
      2:07:29
    
  
  
  you would like to repeat a certain number of times you will list underneath the for Loop and make sure the code is indented too I will print whatever our
  


  
    
      2:07:37
    
  
  
  counter X is when I run this code we will begin at one then stop once we
  


  
    
      2:07:42
    
  
  
  reach 11 so yeah there we are we have begun at one and we have counted all the way to
  


  
    
      2:07:49
    
  
  
  10 so that's the basic syntax for for Loop for some counter really you can
  


  
    
      2:07:54
    
  
  
  name this anything sometimes you'll see people name this as counter and that would work too but
  


  
    
      2:08:00
    
  
  
  let's stick with x in some range where would we like to begin where do we stop
  


  
    
      2:08:08
    
  
  
  okay now let's count backwards let's start at 10 then count down to zero when we escape the for Loop let's
  


  
    
      2:08:15
    
  
  
  print happy New Year when we print Happy New Year we are
  


  
    
      2:08:22
    
  
  
  outside of the for Loop to count backwards you can enclose your range function within the Reversed
  


  
    
      2:08:28
    
  
  
  function reversed so we begin at 10 count down to
  


  
    
      2:08:36
    
  
  
  one then print happy New Year in this case to count backwards you would enclose the range function within the
  


  
    
      2:08:43
    
  
  
  Reversed function there is an additional parameter too you could add that is the step if you would like to count by twos
  


  
    
      2:08:50
    
  
  
  you would add comma two so I'm going to get rid of happy New
  


  
    
      2:08:55
    
  
  
  Year let's print the numbers 1 through 10 but we will count by
  


  
    
      2:09:00
    
  
  
  twos and this does begin at one though so 1 3 5 7 9 if you were to change the
  


  
    
      2:09:07
    
  
  
  step to three you would count by threes beginning at 1 4 7 10 so the range
  


  
    
      2:09:14
    
  
  
  function isn't the only thing you can iterate over you can iterate over a string let's say we have a credit card
  


  
    
      2:09:19
    
  
  
  number credit card equals I'll make up some credit card number with
  


  
    
      2:09:28
    
  
  
  dashes that is good enough for X in credit card print x x will hold our
  


  
    
      2:09:36
    
  
  
  current position at first it'll be one then 2 3 4 dash so on and so forth so
  


  
    
      2:09:42
    
  
  
  here's our credit card number 1 2 3 4-5 6 78 I think you get the idea so you
  


  
    
      2:09:49
    
  
  
  can iterate over a string with the for loop as well we'll have a few projects involving that there are two useful
  


  
    
      2:09:56
    
  
  
  keywords as well these aren't exclusive to for Loops you can use these within while Loops as well they are continue
  


  
    
      2:10:02
    
  
  
  and break suppose we going to count to 20 for X in range we will begin at one
  


  
    
      2:10:10
    
  
  
  stop at 21 I think this is kind of a dumb example but it gets the point across 13
  


  
    
      2:10:15
    
  
  
  is considered an unlucky number right what if our counter reaches 13 I would like to skip over it well we can do that
  


  
    
      2:10:22
    
  
  
  with the continue keyword if x is equal to 13 we will
  


  
    
      2:10:28
    
  
  
  continue and skip over that iteration else we will print whatever
  


  
    
      2:10:33
    
  
  
  our counter is so let's take a look yeah we have the numbers 1 through
  


  
    
      2:10:41
    
  
  
  20 but we have skipped the number 13 to skip over an iteration you can use
  


  
    
      2:10:47
    
  
  
  the continue keyword whereas the break keyword we will break up of this Loop
  


  
    
      2:10:52
    
  
  
  entirely if x is equal to 13 then
  


  
    
      2:10:57
    
  
  
  break so yeah we have only counted to 12 once we reach 13 we have escaped the
  


  
    
      2:11:03
    
  
  
  loop so yeah everybody those are four Loops you can execute a block of code a
  


  
    
      2:11:08
    
  
  
  fixed number of times you can iterate over a range a string a sequence
  


  
    
      2:11:14
    
  
  
  anything that is considered iterable there is a lot of overlap where you could use either a while loop or a for
  


  
    
      2:11:19
    
  
  
  Loop while Loops tend to be better if you need to execute something possibly infinite amount of times such as when
  


  
    
      2:11:26
    
  
  
  you're accepting user input for example but yeah everybody those are four Loops in
  


  
    
  19.countdown timer program



  
    
      2:11:33
    
  
  
  Python what is going on everybody in today's topic we're going to be creating a countdown timer in Python we'll be
  


  
    
      2:11:40
    
  
  
  using what we learned in the previous topics let's begin we'll need to import the time module there's a pretty cool
  


  
    
      2:11:47
    
  
  
  function within the time module that is the sleep function type time do sleep
  


  
    
      2:11:53
    
  
  
  add a set of parenthesis within the set of parenthesis our program will
  


  
    
      2:11:59
    
  
  
  essentially sleep for a given amount of seconds like three after 3 seconds let's
  


  
    
      2:12:05
    
  
  
  print something this is just a demonstration times
  


  
    
      2:12:12
    
  
  
  up when I execute this code nothing happens for 3 seconds but after 3
  


  
    
      2:12:17
    
  
  
  seconds passes it displays our message times up so you can use the sleep function of the time module to sleep for
  


  
    
      2:12:24
    
  
  
  a given amount of time we will ask the user how long would they like to set the timer for we will create a variable
  


  
    
      2:12:32
    
  
  
  let's say my time my time will be in
  


  
    
      2:12:37
    
  
  
  seconds we will create a prompt enter the time in
  


  
    
      2:12:44
    
  
  
  seconds then we should typ cast our input as an integer
  


  
    
      2:12:51
    
  
  
  we'll need to create a loop we could use either a while loop or a four Loop there's a lot of overlap where you could
  


  
    
      2:12:57
    
  
  
  use either one I'll use a four Loop in this case four we'll need some sort of counter X in our
  


  
    
      2:13:06
    
  
  
  range Z through my
  


  
    
      2:13:12
    
  
  
  time after each iteration we will sleep for 1 second Let's test what we have so
  


  
    
      2:13:19
    
  
  
  far I would like to sleep for 3
  


  
    
      2:13:24
    
  
  
  seconds I think that's approximately three but now we are going to print whatever X is print x x is our
  


  
    
      2:13:35
    
  
  
  counter 0o 1 2 times up we're getting
  


  
    
      2:13:41
    
  
  
  somewhere but I would like to count backwards what we could do is enclose
  


  
    
      2:13:46
    
  
  
  our range function within the reverse function
  


  
    
      2:13:52
    
  
  
  but another technique that we can use is by using a step let's replace zero with my
  


  
    
      2:13:59
    
  
  
  time then end at zero but we will set the step to be Nega -1 then we can
  


  
    
      2:14:06
    
  
  
  increment backwards using this function that's another technique too to count backwards so let's wait for 3 seconds 3
  


  
    
      2:14:14
    
  
  
  2 1 times up now let's display a digital
  


  
    
      2:14:20
    
  
  
  clock of some sort but we would have to calculate how many hours minutes and seconds there are so let's calculate
  


  
    
      2:14:27
    
  
  
  seconds seconds equals x x is our counter
  


  
    
      2:14:32
    
  
  
  remember modulus 60 within our print statement we'll use
  


  
    
      2:14:37
    
  
  
  an F string we are displaying hours minutes and seconds I'll add some
  


  
    
      2:14:43
    
  
  
  placeholders for each of these fields we have seconds with our digital clock we
  


  
    
      2:14:49
    
  
  
  can't go above 60 for either seconds or minutes that's why I'm using modulus 60
  


  
    
      2:14:54
    
  
  
  the modulus operator gives you the remainder of any division let's begin at 11 so 11 10 9 so it is counting down but
  


  
    
      2:15:05
    
  
  
  I would like to add some zero padding and we can do that with a format specifier after seconds I will add colon
  


  
    
      2:15:13
    
  
  
  I need to display two digits then zero pad those digits let's try that again I
  


  
    
      2:15:19
    
  
  
  will wait for 11 seconds seconds 11 10 9 yeah and we do have some zero padding so
  


  
    
      2:15:26
    
  
  
  that's looking more and more like a digital clock let's add minutes then so to calculate minutes let's assign
  


  
    
      2:15:34
    
  
  
  variable minutes equal to x / 60 because
  


  
    
      2:15:40
    
  
  
  there's 60 seconds within a minute but then I'm going to typ cast the result as an
  


  
    
      2:15:48
    
  
  
  integer modulus 60 we would not like this field of minutes to go above 60 so
  


  
    
      2:15:55
    
  
  
  let's add a placeholder we're displaying minutes format specifier
  


  
    
      2:16:02
    
  
  
  02 now I'm going to wait for 65 seconds that is 1 minute and 5
  


  
    
      2:16:08
    
  
  
  Seconds then I just want to be sure that we go below a minute yep it's working then let's
  


  
    
      2:16:16
    
  
  
  calculate hours oh by the way to stop your program from running hit this red square up in the corner Corner let's
  


  
    
      2:16:22
    
  
  
  calculate hours hours equals x /
  


  
    
      2:16:28
    
  
  
  3,600 there's 3,600 seconds in an hour then we will typ cast the result as
  


  
    
      2:16:35
    
  
  
  an integer within our FST string we will
  


  
    
      2:16:42
    
  
  
  display ours format specifier
  


  
    
      2:16:47
    
  
  
  02 then I will run this program let's wait for for 3,65 seconds that is 1 hour and 5
  


  
    
      2:16:56
    
  
  
  Seconds and I just want to be sure that we go below 1 hour yeah all right so
  


  
    
      2:17:02
    
  
  
  that works so the reason that I didn't add modulus 24 I don't have days within my
  


  
    
      2:17:09
    
  
  
  fstring we can display any amount of hours I will exclude modulus
  


  
    
      2:17:15
    
  
  
  24 all right everybody well I thought that'd be some good practice with working with loops we should try and do
  


  
    
      2:17:20
    
  
  
  a as many exercises as we can and yeah that is a countdown timer program in
  


  
    
  20.nested loops



  
    
      2:17:28
    
  
  
  Python hey everybody so I guess in today's topic I'm going to be explaining nested Loops it looks like so a nested
  


  
    
      2:17:34
    
  
  
  Loop think of it as a loop found within the code of another loop you have a loop
  


  
    
      2:17:39
    
  
  
  right any code within that Loop is indented underneath that Loop well you could have a looping structure found
  


  
    
      2:17:46
    
  
  
  within the code of another looping structure the loop on the outside is the outer loop the internal Loop within the
  


  
    
      2:17:52
    
  
  
  outer loop is known as the inner loop where you'll encounter nested Loops it's really situational you could have a
  


  
    
      2:17:59
    
  
  
  while loop inside of a while loop a for Loop inside of a for Loop a for Loop inside of a while loop a while loop inside of a for Loop Etc so here's a
  


  
    
      2:18:07
    
  
  
  demonstration let's begin by displaying the numbers 1 through 9 but we'll use a loop for x x is our counter in range 1
  


  
    
      2:18:18
    
  
  
  comma 10 remember that the second number in this case 10 that's
  


  
    
      2:18:23
    
  
  
  exclusive then I will print our counter X this program will print the numbers 1
  


  
    
      2:18:31
    
  
  
  through 9 now we have an exercise at the end of this topic I should probably explain this feature so with a print
  


  
    
      2:18:38
    
  
  
  statement we end each print statement with a new line character if I need all of these numbers on the same line at the
  


  
    
      2:18:45
    
  
  
  end of my print statement I can add comma end equals an empty
  


  
    
      2:18:51
    
  
  
  string normally with a print statement each ends with a new line character but we can set that to be something
  


  
    
      2:18:58
    
  
  
  else so when I run this again all of these numbers are on the same line or
  


  
    
      2:19:03
    
  
  
  you could add a different symbol like Dash or a space each of these characters is now
  


  
    
      2:19:09
    
  
  
  separated with the space but let's stick with an empty string okay so we have used a loop to
  


  
    
      2:19:16
    
  
  
  count the numbers 1 through 9 what if I would like to repeat this three times
  


  
    
      2:19:22
    
  
  
  Well I could create another loop for X in range you could say 1 comma 4 or you
  


  
    
      2:19:30
    
  
  
  could just say three either way whatever code is within this Loop will be executed three times let's cut
  


  
    
      2:19:38
    
  
  
  our original for Loop then place it within the code of our new loop our
  


  
    
      2:19:44
    
  
  
  outer loop will have this code repeat entirely three separate times uh but we
  


  
    
      2:19:50
    
  
  
  do have one thing we need to pay attention to we have two counters with the same name you'll want to be sure
  


  
    
      2:19:56
    
  
  
  that they're different let's rename the counter of the inner loop to be y instead of X and be sure to change that
  


  
    
      2:20:03
    
  
  
  here as well now when I run this code we're completing let's see 27 iterations to
  


  
    
      2:20:11
    
  
  
  exit this four Loop we need to count the numbers 1 through n once we do so that
  


  
    
      2:20:16
    
  
  
  is one iteration of the outer loop but our outer loop is saying hey we still need three total iterations now if you
  


  
    
      2:20:23
    
  
  
  would like these on separate lines let's make this look a little different let's add each iteration of the outer loop
  


  
    
      2:20:29
    
  
  
  onto a new line so within the outer loop but not within the inner loop I'm going to
  


  
    
      2:20:37
    
  
  
  create just a blank print statement this will just print a new line let's try this
  


  
    
      2:20:42
    
  
  
  again with the inner loop we count the numbers 1 through n after we exit the for Loop we will print a new line then
  


  
    
      2:20:50
    
  
  
  repeat this all over again until our outer loop is satisfied so that's basically a nested loop it's just a loop
  


  
    
      2:20:57
    
  
  
  that's inside of another looping structure so let's create a project we're going to print a rectangle made of
  


  
    
      2:21:03
    
  
  
  some symbol that we set we'll have the user type in how many rows and columns this rectangle will have we'll reuse
  


  
    
      2:21:09
    
  
  
  this code that we have already written so this time let's accept some user input rows equals
  


  
    
      2:21:18
    
  
  
  input enter the number of rows then we
  


  
    
      2:21:23
    
  
  
  should typ cast this input as an integer let's copy this line paste it
  


  
    
      2:21:30
    
  
  
  change rows to columns for the second line enter the number of
  


  
    
      2:21:37
    
  
  
  columns then let's create a symbol symbol equals
  


  
    
      2:21:42
    
  
  
  input enter a symbol to
  


  
    
      2:21:47
    
  
  
  use we already have this rectangle structure right think of it as the outer loop is in charge of the rows let's
  


  
    
      2:21:55
    
  
  
  change in range three to in range rows the in Loop will be in charge of
  


  
    
      2:22:01
    
  
  
  the columns for y in range
  


  
    
      2:22:07
    
  
  
  columns we will print our symbol whatever the user chooses so let's try
  


  
    
      2:22:12
    
  
  
  this again enter the number of rows how about four rows 10 columns I'll use a dollar sign
  


  
    
      2:22:22
    
  
  
  so here's our rectangle we have four rows then 10 columns 1 2 3 4 5 6 7 8 9
  


  
    
      2:22:33
    
  
  
  10 let's try it one more time three rows five columns and I'll use an
  


  
    
      2:22:41
    
  
  
  asterisk yep three rows five columns so yeah that's a nested Loop
  


  
    
      2:22:47
    
  
  
  really it's just a loop that's inside of another loop Loop the type of loop really doesn't matter as well as what's
  


  
    
      2:22:54
    
  
  
  within each loop it's just a situation where you have a loop inside of another loop and yeah those are nested Loops in
  


  
    
      2:23:02
    
  
  
  Python well hello everybody today I will be explaining a few different types of collections in Python there's four
  


  
    
  21.lists, sets, and tuples



  
    
      2:23:09
    
  
  
  general purpose collections three of them are lists sets and tles there are
  


  
    
      2:23:14
    
  
  
  also dictionaries but I'll save that for the next topic because they can be kind of tricky a collection I would think of
  


  
    
      2:23:20
    
  
  
  them as a single variable and I'm saying that within quotes that is used to store
  


  
    
      2:23:26
    
  
  
  multiple values that's how I would explain a collection to a beginner for example let's say we have a variable
  


  
    
      2:23:32
    
  
  
  variable fruit fruit equals some value like apple and then I can print this
  


  
    
      2:23:39
    
  
  
  fruit which is Apple I could turn this variable into a collection by
  


  
    
      2:23:45
    
  
  
  surrounding my values with either a set of square brackets for a list curly braces for a set or parenthesis for a
  


  
    
      2:23:52
    
  
  
  tuple let's begin with the list if I would like to store more than one value in this variable I will surround my
  


  
    
      2:23:58
    
  
  
  values with a set of square brackets this variable is now a list I can store
  


  
    
      2:24:04
    
  
  
  multiple values separated with a comma not only do we have an apple in this variable but we have an
  


  
    
      2:24:10
    
  
  
  orange a banana and coconut one naming convention that I
  


  
    
      2:24:18
    
  
  
  like to use if I declare a collection such as a list set or toule I like to take the variable name and make it
  


  
    
      2:24:24
    
  
  
  plural just so that it's more obvious that this is a collection of values technically in the English language
  


  
    
      2:24:31
    
  
  
  fruit would still be plural English is a weird language we now have a list of
  


  
    
      2:24:36
    
  
  
  fruit named fruits if I were to print my list this is the result we have all of
  


  
    
      2:24:43
    
  
  
  our values enclosed with a set of square brackets to access one of these elements
  


  
    
      2:24:48
    
  
  
  found within your list you can use the index operator much like what we can do with strings the first element would
  


  
    
      2:24:55
    
  
  
  have an index of zero that would print my value Apple index of one would be my orange
  


  
    
      2:25:03
    
  
  
  two is banana three coconut what about four we don't have a value
  


  
    
      2:25:11
    
  
  
  there list index out of range each value in a collection is also known as an
  


  
    
      2:25:17
    
  
  
  element if we attempt to access an element that's not not found within our collection you'll run into an index
  


  
    
      2:25:23
    
  
  
  error with the index operator you could set a beginning index an ending index
  


  
    
      2:25:29
    
  
  
  and a step I would like the first three elements you could say zero colon
  


  
    
      2:25:36
    
  
  
  three that would give me Apple orange banana technically you don't even need the zero you need that colon though we
  


  
    
      2:25:43
    
  
  
  can even use a step I would like every second element apple banana it's every second
  


  
    
      2:25:49
    
  
  
  element beginning from index zero maybe I would like my fruit backwards I'll set the step to be 1 coconut banana orange
  


  
    
      2:25:57
    
  
  
  Apple you can use the index operator with collections much like you can use with strings another cool thing you can
  


  
    
      2:26:04
    
  
  
  do too with collections is that you can iterate over them with the for Loop for
  


  
    
      2:26:09
    
  
  
  X in my collection fruits what would we like to do I will
  


  
    
      2:26:15
    
  
  
  print whatever X is so we have iterated over our list
  


  
    
      2:26:20
    
  
  
  Apple orange banana coconut now X isn't really too descriptive what you'll see some people do is that with their
  


  
    
      2:26:27
    
  
  
  collection name it's plural their counter will be the singular version of that word if our collection name is
  


  
    
      2:26:33
    
  
  
  fruits let's rename X as fruit singular it's not mandatory but that's a
  


  
    
      2:26:41
    
  
  
  common convention it's more readable that way for every fruit in fruits If
  


  
    
      2:26:46
    
  
  
  This Were cars you could say for car in Cars our counter is storing whatever
  


  
    
      2:26:52
    
  
  
  value is within our collection so what are all the different methods that we can use with collections to list the
  


  
    
      2:26:58
    
  
  
  different methods that are available to a collection you can use the dur function within this function add your
  


  
    
      2:27:06
    
  
  
  collection fruits but we would need to print this let's surround this function with a
  


  
    
      2:27:12
    
  
  
  print statement these are all in alphabetical order we have attributes which I have
  


  
    
      2:27:18
    
  
  
  not explained yet but I in a future topic but if we scroll to the end we
  


  
    
      2:27:24
    
  
  
  have a bunch of different methods that this list can perform append clear copy count extend index insert pop remove
  


  
    
      2:27:31
    
  
  
  reverse and sort if you would like a description of each of these methods there is a help function help add your
  


  
    
      2:27:38
    
  
  
  collection to the parentheses then we would need to print
  


  
    
      2:27:46
    
  
  
  this here's the description of all the methods and attributes for example we have our sort method and here's a
  


  
    
      2:27:53
    
  
  
  description sort the list in ascending order and return none and then a bunch of other stuff if you ever forget what
  


  
    
      2:27:59
    
  
  
  you're capable of with a list or other collection you can always use the help function to print a description of the
  


  
    
      2:28:05
    
  
  
  attributes and methods available if you need the length of how many elements are within a collection there is the length
  


  
    
      2:28:14
    
  
  
  function return the length of my list fruits then let's print it
  


  
    
      2:28:21
    
  
  
  there's four elements within my list the length function returns four if I were
  


  
    
      2:28:26
    
  
  
  to add an extra element like a pineapple then that number would be
  


  
    
      2:28:32
    
  
  
  five let's remove that using the in operator we can find if a value is
  


  
    
      2:28:38
    
  
  
  within a collection is our value Apple in
  


  
    
      2:28:45
    
  
  
  fruits but then we would need to print this this operator will return a Boolean so let's print whatever that
  


  
    
      2:28:52
    
  
  
  is is Apple in fruits that is true but is
  


  
    
      2:28:59
    
  
  
  pineapple pineapple is not it's false you can use the in operator to find if a
  


  
    
      2:29:04
    
  
  
  value is within a list and that applies for your other collections too with lists they're ordered and
  


  
    
      2:29:11
    
  
  
  changeable duplicates are okay we can change one of these values after we
  


  
    
      2:29:16
    
  
  
  create our list let's take fruits at index of
  


  
    
      2:29:21
    
  
  
  zero I will set this equal to be a pineapple then let's iterate over our
  


  
    
      2:29:28
    
  
  
  fruit using a for Loop okay the first element is no longer
  


  
    
      2:29:34
    
  
  
  an apple it's a pineapple then orange banana coconut using an index you can reassign one of the values if I were to
  


  
    
      2:29:41
    
  
  
  change zero to one well now we have an apple pineapple banana
  


  
    
      2:29:47
    
  
  
  coconut let's cover some of the methods that are found within a list we can append an
  


  
    
      2:29:53
    
  
  
  element type the name of the list do append what would we like to append to
  


  
    
      2:29:59
    
  
  
  the end of this list let's append a pineapple I'm going to get rid of this
  


  
    
      2:30:05
    
  
  
  for Loop I'm just going to display my list there we have an apple an orange banana coconut pineapple to add an
  


  
    
      2:30:11
    
  
  
  element to the end of a list use the append method to remove an element you can use
  


  
    
      2:30:17
    
  
  
  the remove method fruits. remove let's remove our
  


  
    
      2:30:22
    
  
  
  Apple our apple is no longer there we have an orange banana coconut using the
  


  
    
      2:30:28
    
  
  
  insert method we can insert a value at a given index fruits.
  


  
    
      2:30:34
    
  
  
  insert list an index zero would be the beginning then a value
  


  
    
      2:30:42
    
  
  
  pineapple now we have a pineapple Apple orange banana coconut the sort method
  


  
    
      2:30:48
    
  
  
  will sort a list for roots. sort these are all in alphabetical order
  


  
    
      2:30:54
    
  
  
  now apple banana coconut orange to reverse a list you would use
  


  
    
      2:31:00
    
  
  
  the reverse method fruits. reverse coconut banana orange Apple
  


  
    
      2:31:08
    
  
  
  however these are not in Reverse alphabetical order these elements are reversed based on the order in which we
  


  
    
      2:31:13
    
  
  
  place them if you would like reverse alphabetical order you can first sort
  


  
    
      2:31:18
    
  
  
  and then reverse now we have orange coconut banana apple to clear a list use the clear
  


  
    
      2:31:26
    
  
  
  method fruits. clear all of the elements are
  


  
    
      2:31:32
    
  
  
  gone we can return the index of a value let's return the index of
  


  
    
      2:31:38
    
  
  
  Apple fruits. index list an
  


  
    
      2:31:44
    
  
  
  element then we will need to print this let's print the index that is
  


  
    
      2:31:52
    
  
  
  returned the index of Apple is zero
  


  
    
      2:31:57
    
  
  
  coconut that would be three what if we don't find a value like a
  


  
    
      2:32:04
    
  
  
  pineapple well we have an error pineapple is not in list you could count
  


  
    
      2:32:09
    
  
  
  the amount of times that a value is found within a list because duplicates are okay fruits. count let's count how
  


  
    
      2:32:18
    
  
  
  many bananas are in this list banana then print
  


  
    
      2:32:26
    
  
  
  it one banana is found within this list how about
  


  
    
      2:32:32
    
  
  
  pineapples there are zero now those are lists surround your values with a set of
  


  
    
      2:32:38
    
  
  
  square brackets these values are ordered and changeable duplicates are okay now
  


  
    
      2:32:44
    
  
  
  let's talk about the next collection which is a set to create a set surround your values instead with with a set of
  


  
    
      2:32:50
    
  
  
  curly braces our collection of fruits is now a set a set has different benefits
  


  
    
      2:32:56
    
  
  
  the values are unordered and immutable meaning we can't alter these values
  


  
    
      2:33:02
    
  
  
  however we can add and remove elements a set does not include any duplicates I'm going to delete these
  


  
    
      2:33:08
    
  
  
  methods then print fruits we have all of the same values
  


  
    
      2:33:14
    
  
  
  but they're not in the same order as they were originally a set is unordered if I were to run this again they will
  


  
    
      2:33:20
    
  
  
  likely be in a different order see now we have a banana apple coconut orange to display all of the different attributes
  


  
    
      2:33:27
    
  
  
  and methods of a set you can use the dur
  


  
    
      2:33:33
    
  
  
  function and here's all of them some of these methods are a little more advanced but there's a few we might recognize
  


  
    
      2:33:39
    
  
  
  like add clear copy for an in-depth description of these methods you can use the help
  


  
    
      2:33:46
    
  
  
  function much like what we did before to find the length of our set we can use the length function which is
  


  
    
      2:33:54
    
  
  
  four we can use the in operator to find if a value is found within this
  


  
    
      2:33:59
    
  
  
  set unfortunately pineapples are not within our set now if I was to use the
  


  
    
      2:34:05
    
  
  
  index operator of my set this is what would happen we have an error set object is
  


  
    
      2:34:13
    
  
  
  not subscriptable we're not able to use indexing on a set because they're unordered much like what we can do with
  


  
    
      2:34:19
    
  
  
  a list or string we can't change the values of a set but we could add a
  


  
    
      2:34:24
    
  
  
  remove elements let's use the add method to add guess what a
  


  
    
      2:34:32
    
  
  
  pineapple that is okay orange Apple pineapple coconut
  


  
    
      2:34:37
    
  
  
  banana we can remove an element fruits. remove let's remove our
  


  
    
      2:34:44
    
  
  
  Apple our apple is gone coconut orange banana
  


  
    
      2:34:50
    
  
  
  we can pop the pop method will remove whatever
  


  
    
      2:34:56
    
  
  
  element is first but it's going to be random though orange coconut banana apple
  


  
    
      2:35:02
    
  
  
  coconut banana apple banana coconut you can clear fruits.
  


  
    
      2:35:11
    
  
  
  CLE the elements of our set are gone those are a few of the more useful methods for beginners as a summary a set
  


  
    
      2:35:19
    
  
  
  is a collection that is unordered and immutable you can't change the values but adding and removing elements is okay
  


  
    
      2:35:26
    
  
  
  no duplicates are allowed let's try that real quick I'm going to add a second
  


  
    
      2:35:32
    
  
  
  coconut yeah see we only still have one coconut sets may work well if you're working with constants maybe colors for
  


  
    
      2:35:40
    
  
  
  example you need to find if a color is within a set all right now lastly let's talk about tupples a tupple is a
  


  
    
      2:35:47
    
  
  
  collection that is surrounded with a set of parentheses topples are ordered and unchangeable
  


  
    
      2:35:53
    
  
  
  duplicates are okay one benefit of a topple over a list is that topples are faster than lists if you're working with
  


  
    
      2:36:00
    
  
  
  a collection and it's okay if the collection is ordered and unchangeable you might as well use a tupple because
  


  
    
      2:36:06
    
  
  
  it's faster when I print our topple all of these values are surrounded with a set of parentheses again we have the dur
  


  
    
      2:36:13
    
  
  
  function to display the attributes and methods there's not as many for a tle for methods we only have count and index
  


  
    
      2:36:21
    
  
  
  again there's also help to display a description of these attributes and methods you can find the
  


  
    
      2:36:28
    
  
  
  length of a tle with the length function we have five elements within here using
  


  
    
      2:36:33
    
  
  
  the in operator we can find if a value is found within our tupple our pineapple is not within our
  


  
    
      2:36:40
    
  
  
  fruits so there's only two methods we have access to let's find the index of Apple fruits.
  


  
    
      2:36:47
    
  
  
  index Apple then I will print whatever is
  


  
    
      2:36:53
    
  
  
  returned apple is found at index zero there's also count fruits.
  


  
    
      2:36:59
    
  
  
  count how many coconuts are found within our tupple fruits count the Coconuts then print
  


  
    
      2:37:09
    
  
  
  this how many coconuts we have two coconuts and then again with any of
  


  
    
      2:37:15
    
  
  
  these collections they're iterable so you can iterate over them using a for Loop for fruit and
  


  
    
      2:37:22
    
  
  
  fruits yep Apple orange banana coconut coconut all right everybody so those are
  


  
    
      2:37:28
    
  
  
  collections think of them as a single variable used to store multiple values
  


  
    
      2:37:33
    
  
  
  there's four general purpose collections for beginners lists sets tles and then
  


  
    
      2:37:39
    
  
  
  dictionaries which we'll talk about next each of them has unique benefits lists are ordered and changeable duplicates
  


  
    
      2:37:46
    
  
  
  are okay a set is unordered and immutable but adding and removing
  


  
    
      2:37:51
    
  
  
  elements is okay no duplicates allowed a tupple is ordered and unchangeable
  


  
    
      2:37:57
    
  
  
  duplicates are okay and they are faster than lists use topples if you can over a
  


  
    
      2:38:02
    
  
  
  list but yeah those are a few collections in Python hello everybody today we will be
  


  
    
  22.shopping cart program



  
    
      2:38:10
    
  
  
  creating a shopping cart program this program will be an exercise to follow the previous lesson on lists sets and
  


  
    
      2:38:17
    
  
  
  tles the more that we practice with those collections the better we'll be at using them so I thought we'd create an
  


  
    
      2:38:23
    
  
  
  exercise to get the hang of it before moving on in this program we will have two lists Foods these lists will be
  


  
    
      2:38:30
    
  
  
  empty we'll declare them but not use them quite yet and prices then a total total equals z the
  


  
    
      2:38:40
    
  
  
  reason that I'm not using topples is that tles are unchangeable we're going to ask a user what food they would like
  


  
    
      2:38:47
    
  
  
  to buy we can't depend any elements to a tle we're not using sets because sets
  


  
    
      2:38:52
    
  
  
  are unordered I mean I guess technically you could but at the end of this program I'm going to print our shopping cart in
  


  
    
      2:38:58
    
  
  
  order so I think lists would probably be the best we have an empty list of foods and an empty list of prices we'll use a
  


  
    
      2:39:06
    
  
  
  while loop while true if our condition is set to True
  


  
    
      2:39:12
    
  
  
  we'll need some way to break out of the while loop we'll need a break statement somewhere we'll get to that later we
  


  
    
      2:39:18
    
  
  
  will ask the user what food would they like to buy let's declare variable food
  


  
    
      2:39:24
    
  
  
  equal to input enter a food to
  


  
    
      2:39:31
    
  
  
  buy to exit the while loop you need to press Q Q2
  


  
    
      2:39:39
    
  
  
  quit then let's check if food is equal
  


  
    
      2:39:45
    
  
  
  to Q lowercase Q then we will break we're not done with the program but
  


  
    
      2:39:51
    
  
  
  let's at least test it Pizza
  


  
    
      2:39:57
    
  
  
  hamburger hot dog Q to quit okay it looks like it works now what if somebody
  


  
    
      2:40:03
    
  
  
  types in uppercase q Pizza hamburger uppercase q well we
  


  
    
      2:40:11
    
  
  
  can't actually quit after accepting our user input if
  


  
    
      2:40:16
    
  
  
  food. lower method this will take our input make it lowercase just for a
  


  
    
      2:40:23
    
  
  
  comparison let's try that again Pizza
  


  
    
      2:40:29
    
  
  
  hamburger I'll type capital Q to quit and that is valid follow food with the
  


  
    
      2:40:35
    
  
  
  lower method to temporarily make the user input lowercase just in case they type in
  


  
    
      2:40:41
    
  
  
  capital Q if the user doesn't want to quit let's add an else
  


  
    
      2:40:46
    
  
  
  statement else let's take our Foods use the append method then add whatever
  


  
    
      2:40:52
    
  
  
  food the user typed in we'll also need a price let's ask a user for the
  


  
    
      2:40:59
    
  
  
  price price equals input enter the price of let's use an F
  


  
    
      2:41:10
    
  
  
  string a whatever food the user types in pick a unit of currency I'll pick
  


  
    
      2:41:18
    
  
  
  dollars we are working with numbers we should typ cast our input as a floating
  


  
    
      2:41:23
    
  
  
  Point number since we're working with prices so we will accept a price add our
  


  
    
      2:41:30
    
  
  
  food item to our list of foods do the same thing with prices prices do append
  


  
    
      2:41:37
    
  
  
  whatever the price was and that is the while loop Let's test this program again to be sure that
  


  
    
      2:41:43
    
  
  
  everything's working pizza pizza will be $59
  


  
    
      2:41:50
    
  
  
  999 enter a food to buy Hamburger hamburgers will be
  


  
    
      2:41:55
    
  
  
  350 hot dog hot dogs will be 175 I would like to quit I will type either capital
  


  
    
      2:42:02
    
  
  
  Q or lowercase Q both will work and we have escaped the while loop so the while
  


  
    
      2:42:07
    
  
  
  loop is now complete outside of the while loop let's display our shopping cart let's print some decorative
  


  
    
      2:42:15
    
  
  
  text maybe five dashes your cart then another five
  


  
    
      2:42:22
    
  
  
  dashes I will then iterate over all of the elements found within my Foods
  


  
    
      2:42:27
    
  
  
  list for every food in my list of
  


  
    
      2:42:33
    
  
  
  foods let's print each food item let's take a look so far again we have a pizza
  


  
    
      2:42:40
    
  
  
  the price was $5.99 hamburger the price was
  


  
    
      2:42:46
    
  
  
  350 hot dog 175 CU to quit Okay your
  


  
    
      2:42:53
    
  
  
  cart that will display the individual list items if you would rather have these list items arranged horizontally
  


  
    
      2:43:00
    
  
  
  in one line you can add this keyword end equals
  


  
    
      2:43:05
    
  
  
  this end keyword will replace the new line character at the end of a print statement with some other character like
  


  
    
      2:43:11
    
  
  
  a space let's try that again I'll try not to take too much time
  


  
    
      2:43:18
    
  
  
  pizza $ 5.99 hamburger
  


  
    
      2:43:25
    
  
  
  350 hot dog 175 you to quit yeah that's much better
  


  
    
      2:43:34
    
  
  
  we are horizontally listing all of the different items within our list you could revert back to the vertical list
  


  
    
      2:43:40
    
  
  
  if you'd prefer that I'll keep my output like this then we will need to iterate and add up all the prices for every
  


  
    
      2:43:47
    
  
  
  price in prices we do have a total variable that we declared let's utilize that total equals
  


  
    
      2:43:56
    
  
  
  total plus price otherwise we could shorten this to plus equals price that
  


  
    
      2:44:02
    
  
  
  would do the same thing then we will display the total print I'll use an F
  


  
    
      2:44:10
    
  
  
  string your total is I'll add a unit of
  


  
    
      2:44:15
    
  
  
  currency I picked the dollar sign whatever the total is okay let's run this program One Last
  


  
    
      2:44:24
    
  
  
  Time enter a food to buy pizza which was
  


  
    
      2:44:29
    
  
  
  $5.99 hamburger which was 350 hot
  


  
    
      2:44:35
    
  
  
  dogs they are 175 CU to quit here's your shopping cart I'm just
  


  
    
      2:44:42
    
  
  
  going to add one new line real quick right before we display the total just an empty print statement
  


  
    
      2:44:58
    
  
  
  here are the results your cart Pizza hamburger hot dog your total is
  


  
    
      2:45:05
    
  
  
  $124 all right everybody well that is a shopping cart program I thought this would be a fun exercise to follow the
  


  
    
      2:45:11
    
  
  
  previous lesson on lists sets and topples and well yeah that is a shopping
  


  
    
      2:45:17
    
  
  
  cart program in Python hey what's going on everybody so today
  


  
    
  23.2D collections



  
    
      2:45:23
    
  
  
  I'm going to be explaining 2D lists 2D meaning two-dimensional you do also have
  


  
    
      2:45:28
    
  
  
  the capability of creating 2D tuples I thought today we would use 2D lists just because they're pretty flexible a
  


  
    
      2:45:35
    
  
  
  two-dimensional list is just a list made up of lists it's really useful if you
  


  
    
      2:45:40
    
  
  
  ever need a grid or Matrix of data kind of like an Excel spreadsheet let's create three lists a list of fruit
  


  
    
      2:45:51
    
  
  
  vegetables and meat I'm going to speed up this video feel free to pause if you need to catch
  


  
    
      2:46:11
    
  
  
  up here I have three lists a list of fruit vegetables and meat each of these
  


  
    
      2:46:16
    
  
  
  lists is a one-dimensional list to create a two-dimensional list well you would begin by creating a
  


  
    
      2:46:22
    
  
  
  one-dimensional list let's create a list of groceries all I would need to do is add
  


  
    
      2:46:28
    
  
  
  my individual lists as elements to the outer list the 2D list we have fruits
  


  
    
      2:46:35
    
  
  
  vegetables and meats normally to print a list or your
  


  
    
      2:46:41
    
  
  
  other collections you would print the name of the list in my list fruits I have apple
  


  
    
      2:46:48
    
  
  
  Orange banana coconut to access or change one of the elements you would type the name of the list then use the
  


  
    
      2:46:54
    
  
  
  index operator so fruits at index of zero is a pineapple
  


  
    
      2:47:00
    
  
  
  again with a 2d list it's a little different if I were to print my 2D list
  


  
    
      2:47:05
    
  
  
  of groceries we would lay out the entire 2D list flat we have individual lists
  


  
    
      2:47:13
    
  
  
  separated with a comma all enclosed within a set of square brackets taking the elements found within our 2D list
  


  
    
      2:47:20
    
  
  
  I'm going to line these up kind of like this it kind of represents a gitter matrix with rows and columns each
  


  
    
      2:47:27
    
  
  
  individual list resembles a row each element resembles a column if I were to
  


  
    
      2:47:32
    
  
  
  print groceries at index zero in place of returning one element found within
  


  
    
      2:47:38
    
  
  
  one of the lists that would return an entire row so groceries at index zero is
  


  
    
      2:47:44
    
  
  
  my fruits list groceries at index one is my vegetables list groceries at index 2
  


  
    
      2:47:51
    
  
  
  is my Meats list for one of the elements found within one of the rows you would need two
  


  
    
      2:47:58
    
  
  
  indices if I need the Apple from the first row within my 2D list of groceries
  


  
    
      2:48:03
    
  
  
  that would be row0 column Z it's kind of like coordinates row 0 column 0 that
  


  
    
      2:48:11
    
  
  
  would be my Apple 01 which is an
  


  
    
      2:48:17
    
  
  
  orange 0 02 is banana 03 is coconut for
  


  
    
      2:48:22
    
  
  
  the next row I would set the first index to be one row one column zero that would be
  


  
    
      2:48:30
    
  
  
  celery I'm going to speedrun this real quick just to show you all the different elements one one is carrots one two is
  


  
    
      2:48:37
    
  
  
  potatoes if we try to access 1 three that index is out of range because
  


  
    
      2:48:43
    
  
  
  we only have three elements within this row so then the next row would have an
  


  
    
      2:48:49
    
  
  
  index of two column zero would be
  


  
    
      2:48:54
    
  
  
  chicken 21 is fish 22 is turkey 23 is out of bounds to access an
  


  
    
      2:49:02
    
  
  
  element from a 2d list you would need two indices in place of one because using just one would return the entire
  


  
    
      2:49:09
    
  
  
  row like so now when you declare a 2d list you don't need to necessarily give
  


  
    
      2:49:15
    
  
  
  each inner list a name we could do something like this
  


  
    
      2:49:21
    
  
  
  I'm going to replace these names with the
  


  
    
      2:49:27
    
  
  
  rows I'm just going to put these on a new line to make it more
  


  
    
      2:49:35
    
  
  
  readable there that would work too just separate each inner list with a comma
  


  
    
      2:49:41
    
  
  
  then enclose everything with the set of square brackets if you ever need to iterate over the elements of a 2d list
  


  
    
      2:49:47
    
  
  
  you can use NE Loops if I were to use a single for Loop let's say for every uh
  


  
    
      2:49:54
    
  
  
  maybe collection for every collection in
  


  
    
      2:50:00
    
  
  
  groceries let's print what our collection
  


  
    
      2:50:06
    
  
  
  is using a single four Loop would iterate over the rows but to also
  


  
    
      2:50:11
    
  
  
  iterate over the elements found within each row we would use a nested Loop for every food in our
  


  
    
      2:50:22
    
  
  
  collection let's print what our food is using nested Loops we can iterate
  


  
    
      2:50:30
    
  
  
  over all of the elements found within our 2D list but I'm going to make this more organized like that grid structure
  


  
    
      2:50:35
    
  
  
  we have I'm going to replace the new line character at the end of a print statement with a
  


  
    
      2:50:41
    
  
  
  space then when we exit the nested loop I will print a new line by using just an empty print statement
  


  
    
      2:50:48
    
  
  
  there that kind of resembles our grid structure we have rows and we have columns with
  


  
    
      2:50:55
    
  
  
  two-dimensional collections you're not limited to just lists you could create a list of tles so the inner rows will be
  


  
    
      2:51:03
    
  
  
  surrounded with a set of parenthesis you know this is also valid
  


  
    
      2:51:10
    
  
  
  too or you could make a 2d tupple it's a tupple that's made up of tuples you
  


  
    
      2:51:16
    
  
  
  could make a tupple made up of sets sets are enclosed with a set of curly
  


  
    
      2:51:25
    
  
  
  braces here we have a tuple made of sets use whatever is best for your own
  


  
    
      2:51:31
    
  
  
  programs let's go over an exercise let's create a two-dimensional keypad that you
  


  
    
      2:51:36
    
  
  
  would normally find on a phone we have three data types a list a set or a
  


  
    
      2:51:42
    
  
  
  tupple the elements in a set are unordered so we can't use that these numbers need to be in order
  


  
    
      2:51:49
    
  
  
  if we have the option A tupple is faster than a list a tupple is ordered and unchangeable so we should use it if we
  


  
    
      2:51:56
    
  
  
  can and that's perfectly fine let's create a 2d tupple this time I will name
  


  
    
      2:52:01
    
  
  
  this 2D tupple numpad we have an outer set of parenthesis then an inner set of
  


  
    
      2:52:07
    
  
  
  parentheses for each row we will have four rows the first row will be 1 2 3 the
  


  
    
      2:52:17
    
  
  
  second row I'm going to put put this on a new line 4 5
  


  
    
      2:52:23
    
  
  
  6 the next row will be 7 89 then the last row will be an asteris
  


  
    
      2:52:30
    
  
  
  character then zero then the pound sign so numpad in
  


  
    
      2:52:37
    
  
  
  this case is a 2d tupple let's use a for Loop to iterate over every row this will
  


  
    
      2:52:43
    
  
  
  be the outer loop for every maybe Row for every row in
  


  
    
      2:52:50
    
  
  
  numpad let's begin by printing our
  


  
    
      2:52:55
    
  
  
  row so we're printing every Row in our numpad but I'd like to remove the
  


  
    
      2:53:01
    
  
  
  parentheses let's create a nested Loop for every maybe num for Num in
  


  
    
      2:53:12
    
  
  
  row print whatever that num is we have one long vertical line let's
  


  
    
      2:53:20
    
  
  
  replace the new line character at the end of our print statement with the
  


  
    
      2:53:26
    
  
  
  space then when we escape the nested Loop let's print a new
  


  
    
      2:53:32
    
  
  
  line and there is our telephone number pad you can see it's a grid made up of
  


  
    
      2:53:37
    
  
  
  rows and columns so yeah that's a 2d list well a 2d collection it's a
  


  
    
      2:53:43
    
  
  
  collection that's made up of collections then with our numpad we made a 2d tupple
  


  
    
      2:53:48
    
  
  
  if you ever need a grid or Matrix of data a 2d collection would work perfect and there you have it everybody those
  


  
    
      2:53:54
    
  
  
  are 2D collections in Python hello again everybody so today
  


  
    
  24.quiz game



  
    
      2:54:01
    
  
  
  we're going to create a quiz game in Python let's declare all of the different Collections and variables that
  


  
    
      2:54:07
    
  
  
  we'll need first we will need a tuple of questions a 2d tle of
  


  
    
      2:54:15
    
  
  
  options my quiz will have five questions but you can add more or less
  


  
    
      2:54:23
    
  
  
  questions then a tuple of answers a list of guesses we will be
  


  
    
      2:54:31
    
  
  
  appending guesses to our list that's why we're using a list rather than a tupple a score variable which I will set
  


  
    
      2:54:39
    
  
  
  to be zero then question number this variable will keep track of
  


  
    
      2:54:44
    
  
  
  what number question we're on all right let's begin with our questions I have
  


  
    
      2:55:13
    
  
  
  five here are my questions they're all science related feel fre free to choose your own this is what I have how many
  


  
    
      2:55:21
    
  
  
  elements are in the periodic table which animal lays the largest eggs what is the
  


  
    
      2:55:26
    
  
  
  most abundant gas in Earth's atmosphere how many bones are in the human body which planet in the solar system is the
  


  
    
      2:55:33
    
  
  
  hottest these are the questions but we'll need options let's add four
  


  
    
      2:55:38
    
  
  
  options for every question that's why we're using a two-dimensional tupple each inner tupple will consist of four
  


  
    
      2:55:45
    
  
  
  elements
  


  
    
      2:55:54
    
  
  
  they will be options A B
  


  
    
      2:55:59
    
  
  
  C or D let's copy these elements then paste them within each
  


  
    
      2:56:08
    
  
  
  tle this first element corresponds to my first question how many elements are in
  


  
    
      2:56:13
    
  
  
  the periodic table I'll come up with some answers
  


  
    
      2:56:20
    
  
  
  I'll add some answers for the rest of these tuples too
  


  
    
      2:56:50
    
  
  
  we have a coule of correct answers the orders are c
  


  
    
      2:56:57
    
  
  
  d a a b if you come up with your own options
  


  
    
      2:57:06
    
  
  
  your answers may be different now that we have all of our different Collections and variables taken care of let's
  


  
    
      2:57:12
    
  
  
  display each question I will iterate over our Tuple of questions they are
  


  
    
      2:57:17
    
  
  
  iterable for every question in questions I'm going to print some
  


  
    
      2:57:24
    
  
  
  decorative text I think that's probably
  


  
    
      2:57:30
    
  
  
  good then I will print each question we're iterating over so let's see what
  


  
    
      2:57:36
    
  
  
  we have so far there's all five questions after we display every
  


  
    
      2:57:43
    
  
  
  question I need to display every option for every op option in options our
  


  
    
      2:57:52
    
  
  
  options options is a 2d tupple let's add the index operator the
  


  
    
      2:57:59
    
  
  
  index is going to be our question number variable it's a number so at first we're
  


  
    
      2:58:05
    
  
  
  accessing options at index of zero then 1 2 3 4
  


  
    
      2:58:11
    
  
  
  5 we will print every option in options
  


  
    
      2:58:16
    
  
  
  at a given row number Let's test this okay we have some options but all of these options are for
  


  
    
      2:58:24
    
  
  
  the first question we will need to increment our question number so let's
  


  
    
      2:58:29
    
  
  
  do that maybe here question number plus equals
  


  
    
      2:58:40
    
  
  
  1 that is much better before iterating the question number we will ask the user
  


  
    
      2:58:46
    
  
  
  for a guess guess equals
  


  
    
      2:58:52
    
  
  
  input enter a b c
  


  
    
      2:59:02
    
  
  
  d in case the user types in something that's lowercase I will follow this input with the upper method to make the
  


  
    
      2:59:09
    
  
  
  user input uppercase we will take our list of
  


  
    
      2:59:15
    
  
  
  guesses use the append method add our guess to that
  


  
    
      2:59:21
    
  
  
  list if our guess is equal to the
  


  
    
      2:59:26
    
  
  
  answers tupple at index of question number that means the user guessed the
  


  
    
      2:59:33
    
  
  
  right answer let's increase the user score score plus equals 1 then print the
  


  
    
      2:59:39
    
  
  
  word correct correct else we will print
  


  
    
      2:59:50
    
  
  
  incorrect I'll use an F
  


  
    
      2:59:55
    
  
  
  string our answers at index of question
  


  
    
      3:00:02
    
  
  
  number is the correct answer all right let's answer
  


  
    
      3:00:08
    
  
  
  some of these questions C correct which animal lays
  


  
    
      3:00:16
    
  
  
  the largest eggs um um definitely the whale because the whale is the largest creature
  


  
    
      3:00:22
    
  
  
  right incorrect D is the correct answer what is the most abundant gas in Earth's atmosphere nitrogen correct how many
  


  
    
      3:00:30
    
  
  
  bones are in the human body D that is incorrect A is the right answer which
  


  
    
      3:00:35
    
  
  
  planet in the solar system is the hottest Mercury because it's closest to the Sun right wrong incorrect B is the correct
  


  
    
      3:00:43
    
  
  
  answer we're keeping track of our answer successfully once we complete all the questions let's print the
  


  
    
      3:00:51
    
  
  
  results I'm going to add some decorative text not necessary but I think it would
  


  
    
      3:00:56
    
  
  
  look cool I will display the
  


  
    
      3:01:05
    
  
  
  results we will iterate over all of the answers and the
  


  
    
      3:01:11
    
  
  
  guesses print answers
  


  
    
      3:01:18
    
  
  
  I'm going to set the ending character to be an empty
  


  
    
      3:01:23
    
  
  
  string for every answer in
  


  
    
      3:01:30
    
  
  
  answers print each answer I will set the ending character
  


  
    
      3:01:37
    
  
  
  to be a space to separate each answer then I'll add a new print
  


  
    
      3:01:43
    
  
  
  line let's do this with guesses change answers to guesses for
  


  
    
      3:01:50
    
  
  
  every guess in guesses print each guess
  


  
    
      3:01:57
    
  
  
  okay I'm going to run this again I'm just going to make up some answers a b c d a here are the correct
  


  
    
      3:02:06
    
  
  
  answers here are the guesses I guess none of them right then we will print a
  


  
    
      3:02:12
    
  
  
  score score equals take our score
  


  
    
      3:02:17
    
  
  
  divided by I'm going to use the length function then pass in our questions how
  


  
    
      3:02:24
    
  
  
  many elements are within our questions tble then I will multiply all of this by
  


  
    
      3:02:29
    
  
  
  100 to give us a percentage then typ cast this whole formula as an
  


  
    
      3:02:36
    
  
  
  integer so we're basically just reassigning our score variable then let's print using an F
  


  
    
      3:02:43
    
  
  
  string your score is our score
  


  
    
      3:02:49
    
  
  
  variable then add percent I'm going to intentionally get all the answers right
  


  
    
      3:02:56
    
  
  
  c d a a b here are the answers here are your
  


  
    
      3:03:03
    
  
  
  guesses your score is 100% this time I'll try and get a few incorrect intentionally c c c c c your score is
  


  
    
      3:03:14
    
  
  
  20% all right everybody well that is a quiz game feel free to add more or less
  


  
    
      3:03:19
    
  
  
  questions or come up with your own questions and that is a quiz game written in
  


  
    
  25.dictionaries



  
    
      3:03:27
    
  
  
  Python hey everybody in today's video I'm going to explain dictionaries a dictionary is one of the four basic
  


  
    
      3:03:33
    
  
  
  collection types for beginners a dictionary consists of key value pairs they are ordered and changeable no
  


  
    
      3:03:40
    
  
  
  duplicates allowed a few examples of key value pairs could be an ID and a name an
  


  
    
      3:03:46
    
  
  
  item and a price but in today's example we'll create a dictionary of countries and capitals
  


  
    
      3:03:53
    
  
  
  let's name our dictionary capitals capitals equals enclose your dictionary
  


  
    
      3:03:58
    
  
  
  with a set of curly braces much like what you do with sets the first country will be the USA to add a value to this
  


  
    
      3:04:06
    
  
  
  key type colon then some other value the capital of the USA will be Washington
  


  
    
      3:04:16
    
  
  
  DC separate at each key value pair with a comma then we can add another key
  


  
    
      3:04:21
    
  
  
  value pair so the capital of India that will be New Delhi We'll add
  


  
    
      3:04:30
    
  
  
  two more China the capital is
  


  
    
      3:04:36
    
  
  
  Beijing Russia the capital is Moscow I think
  


  
    
      3:04:43
    
  
  
  that's good enough just as a reminder if you would like to see all of the different in attributes and methods of a dictionary
  


  
    
      3:04:50
    
  
  
  you can use the dur function pass in your dictionary capitals then we'll need
  


  
    
      3:04:55
    
  
  
  to print this here's all the different attributes
  


  
    
      3:05:00
    
  
  
  and methods of a dictionary if you would like an in-depth description of all these attributes and methods you can use
  


  
    
      3:05:07
    
  
  
  the help function uh that's herp help there we go
  


  
    
      3:05:18
    
  
  
  so yeah that's just a reminder all right let's cover a few of the methods to get one of the values
  


  
    
      3:05:24
    
  
  
  from a dictionary you would get the key type the name of the dictionary capitals
  


  
    
      3:05:31
    
  
  
  doget let's get the capital of the USA then we'll print
  


  
    
      3:05:39
    
  
  
  it the value associated with this key the USA is Washington DC if I picked a
  


  
    
      3:05:46
    
  
  
  different country like like India well then we would get that Associated value which is New Delhi
  


  
    
      3:05:54
    
  
  
  another thing if python doesn't find a key this is what will be returned let's get Japan which is not in our
  


  
    
      3:06:01
    
  
  
  dictionary this method would return none we can use this within an if
  


  
    
      3:06:08
    
  
  
  statement if capitals do get
  


  
    
      3:06:14
    
  
  
  Japan if a value is returned then we will
  


  
    
      3:06:19
    
  
  
  print that Capital exists
  


  
    
      3:06:25
    
  
  
  else we will print that Capital doesn't
  


  
    
      3:06:33
    
  
  
  exist so Japan is not in our dictionary that Capital doesn't exist but Russia
  


  
    
      3:06:39
    
  
  
  is that Capital does exist that's how to check to see if a key is within our
  


  
    
      3:06:45
    
  
  
  dictionary you can use the get method All Right Moving On Let's update our
  


  
    
      3:06:51
    
  
  
  dictionary capitals do update So within a set of curly braces I will add a key
  


  
    
      3:06:59
    
  
  
  then a value Germany followed
  


  
    
      3:07:05
    
  
  
  by Berlin then let's print our dictionary I'll use a print statement
  


  
    
      3:07:11
    
  
  
  print capitals yeah and there's Germany right
  


  
    
      3:07:16
    
  
  
  there use using the update method we can insert a new key value pair or update an
  


  
    
      3:07:21
    
  
  
  existing key value pair let's also change one of the existing values with our key USA let's update the capital to
  


  
    
      3:07:29
    
  
  
  be Detroit yeah see the value has been updated the capital of the USA is now
  


  
    
      3:07:37
    
  
  
  Detroit Michigan to remove a key value pair you can use the pop method then passing a
  


  
    
      3:07:44
    
  
  
  key let's remove China China no longer exists within our
  


  
    
      3:07:50
    
  
  
  dictionary it's gone you can remove the latest key value pair within a dictionary by using the pop item method
  


  
    
      3:07:58
    
  
  
  capitals do pop item with pop item you don't need to pass in a key pop item
  


  
    
      3:08:06
    
  
  
  will remove the latest key value pair that was inserted then we have clear
  


  
    
      3:08:11
    
  
  
  capitals do clear that will clear the dictionary it's pretty self-explanatory
  


  
    
      3:08:18
    
  
  
  the next few methods are a little tricky to explain to get all of the keys within
  


  
    
      3:08:23
    
  
  
  the dictionary but not the values there is a keys method capitals dokeys I think
  


  
    
      3:08:31
    
  
  
  I'm going to insert this within a variable Keys equals capitals do Keys
  


  
    
      3:08:37
    
  
  
  let's see what happens when we print this the keys method will return all of
  


  
    
      3:08:43
    
  
  
  the keys within our dictionary technically Keys is an object which resembles a list I haven't discussed
  


  
    
      3:08:49
    
  
  
  object-oriented programming yet this is a little bit above our level if you ever need the keys in a dictionary you can
  


  
    
      3:08:55
    
  
  
  use the keys method one use is that we can use that within a for Loop they're iterable for every key in capitals
  


  
    
      3:09:04
    
  
  
  dokeys method let's print every
  


  
    
      3:09:09
    
  
  
  key if at any time you need to iterate over all the keys you can use a for Loop
  


  
    
      3:09:15
    
  
  
  to iterate over every key that is returned from the keys method of your dictionary there's also the values
  


  
    
      3:09:22
    
  
  
  method to get all of the values within your dictionary there is a values
  


  
    
      3:09:28
    
  
  
  method values equals capitals Dov values
  


  
    
      3:09:34
    
  
  
  method then let's print our values like before with the keys method
  


  
    
      3:09:42
    
  
  
  the values method will return an object which resembles a list let's iterate and
  


  
    
      3:09:47
    
  
  
  print over every value within our dictionary for every value in capitals
  


  
    
      3:09:54
    
  
  
  Dov values print every
  


  
    
      3:10:02
    
  
  
  value here are all the values within our dictionary this next one is probably the
  


  
    
      3:10:08
    
  
  
  most tricky it is the items method capitals do items I will assign what is
  


  
    
      3:10:14
    
  
  
  returned to a variable named items then we will print
  


  
    
      3:10:20
    
  
  
  items items returns a dictionary object which resembles a 2d list of Tes it's
  


  
    
      3:10:27
    
  
  
  really complicated how might this be useful this time we're going to use a for Loop to print every key comma value
  


  
    
      3:10:36
    
  
  
  in capitals do items method we have in essence two counters
  


  
    
      3:10:42
    
  
  
  this time I will print using an F string f every key value pair I will print
  


  
    
      3:10:50
    
  
  
  every key as well as every value in our print
  


  
    
      3:10:56
    
  
  
  statement so there's our dictionary laid out we have iterated over every key
  


  
    
      3:11:01
    
  
  
  value pair it's kind of an advanced topic but I thought I would at least bring it up now so yeah that's a
  


  
    
      3:11:06
    
  
  
  dictionary everybody it's a collection of key value pairs they are ordered and
  


  
    
      3:11:11
    
  
  
  changeable no duplicates allowed you have a bunch of different methods such as get up dat pop pop item clear then
  


  
    
      3:11:19
    
  
  
  you can get the keys the values or both which is the items method we'll be using
  


  
    
      3:11:25
    
  
  
  dictionaries in a few game programs we'll be making in the future and well yeah those are dictionaries in
  


  
    
      3:11:32
    
  
  
  Python hey everybody today we will be creating a program to mimic a concession stand much like what you would see at a
  


  
    
  26.concession stand program



  
    
      3:11:39
    
  
  
  movie theater we will be utilizing a dictionary to keep track of a menu item and an Associated price more or less
  


  
    
      3:11:46
    
  
  
  this is just a program to help us get used to working with dictionaries let's begin we'll create a dictionary named
  


  
    
      3:11:53
    
  
  
  menu what items are on the menu will'll need an item and a price I'll think of
  


  
    
      3:11:58
    
  
  
  some I'm going to speed up this video feel free to pause if you need more time
  


  
    
      3:12:19
    
  
  
  and here's my menu everybody I thought of a few food items you might find at a movie theater concession stand pizza
  


  
    
      3:12:25
    
  
  
  nachos popcorn fries chips soft pretzels soda lemonade movie theater popcorn is
  


  
    
      3:12:31
    
  
  
  really expensive for some reason okay we have our menu a user is going to select specific keys from this menu depending
  


  
    
      3:12:38
    
  
  
  on what the key is we can get the associated value to calculate a total to keep track of the user selected items I
  


  
    
      3:12:45
    
  
  
  will create an empty list named cart I will also declare a variable named total to keep track of
  


  
    
      3:12:51
    
  
  
  the total we need to lay this dictionary down flat to display it to a user well
  


  
    
      3:12:57
    
  
  
  we do have the items method of a dictionary which we covered in the last video for every key value in our
  


  
    
      3:13:06
    
  
  
  dictionary menu do items method the items method of our dictionary will
  


  
    
      3:13:12
    
  
  
  return a key and a value during each iteration I'm simply going to print
  


  
    
      3:13:18
    
  
  
  every key and value I'll use an FST string I will print every key colon
  


  
    
      3:13:25
    
  
  
  space then a value let's take a look so
  


  
    
      3:13:31
    
  
  
  far here's our menu I'll make a few changes the price will be in dollar and
  


  
    
      3:13:37
    
  
  
  cents but feel free to pick your own unit of currency I'll precede my value with the dollar sign then using a format
  


  
    
      3:13:44
    
  
  
  specifier I will display two decimal places
  


  
    
      3:13:50
    
  
  
  2f that's better I will line up all the keys after the key I will add a format
  


  
    
      3:13:58
    
  
  
  specifier then allocate 10 spaces yeah look at that it's all lined
  


  
    
      3:14:04
    
  
  
  up now before and after displaying our menu with this for loop I will add some decorative
  


  
    
      3:14:11
    
  
  
  text let's say menu
  


  
    
      3:14:20
    
  
  
  then outside of the for Loop I'll display a bunch of
  


  
    
      3:14:28
    
  
  
  dashes yeah look at that let's move on to the next step we will ask a user for some input
  


  
    
      3:14:36
    
  
  
  what item would they like to buy from the menu while our condition will be true if our condition is set to True
  


  
    
      3:14:44
    
  
  
  we'll need to break out of this Loop one way or another we will ask for some user input food
  


  
    
      3:14:50
    
  
  
  equals input select an
  


  
    
      3:14:57
    
  
  
  item Q2
  


  
    
      3:15:02
    
  
  
  quit if food is equal to a lowercase Q
  


  
    
      3:15:08
    
  
  
  then we will break Let's test it select an
  


  
    
      3:15:14
    
  
  
  item Pizza nachos
  


  
    
      3:15:19
    
  
  
  soda Q to quit yeah it works okay what if the user types in capital Q well we
  


  
    
      3:15:27
    
  
  
  can't escape the while loop if a user types in capital Q we're
  


  
    
      3:15:32
    
  
  
  assuming that they would like to quit when we accept our user input I'm going to add do lower method this will take
  


  
    
      3:15:39
    
  
  
  our user input and make it all lowercase so we should be able to
  


  
    
      3:15:44
    
  
  
  acknowledge any uppercase letters yeah it works cool let's add an LSI
  


  
    
      3:15:52
    
  
  
  statement what if a user types in an item that's not on our menu well there
  


  
    
      3:15:57
    
  
  
  is a get method of dictionaries if menu. getet pass in our food which is
  


  
    
      3:16:06
    
  
  
  user input if the user selection is not within our menu as a key it will return
  


  
    
      3:16:13
    
  
  
  none so we can use that else if menu .g get food is not
  


  
    
      3:16:21
    
  
  
  none then we would like to append that food item to our cart
  


  
    
      3:16:28
    
  
  
  cart. append our food item so outside of the while loop I'm
  


  
    
      3:16:36
    
  
  
  going to print our cart temporarily just to test
  


  
    
      3:16:41
    
  
  
  it okay select an item Pizza soda
  


  
    
      3:16:47
    
  
  
  pretzel how about a potato Q to quit we have our pizza soda
  


  
    
      3:16:54
    
  
  
  and pretzel but not our potato we don't want that in our cart because that's not on the menu yeah you can just add that
  


  
    
      3:17:00
    
  
  
  line else if menu item. get food is not none that will complete our wild Loop
  


  
    
      3:17:08
    
  
  
  let's calculate a total for every food in our cart let's
  


  
    
      3:17:14
    
  
  
  take our total variable set this equal to Total plus then we need a value
  


  
    
      3:17:22
    
  
  
  associated with a key plus
  


  
    
      3:17:27
    
  
  
  menu. getet method get the food item found within our cart but I'm going to shorten this
  


  
    
      3:17:35
    
  
  
  to Total plus equals menu. getet the
  


  
    
      3:17:40
    
  
  
  value associated with this food in our cart I will also display that food item
  


  
    
      3:17:46
    
  
  
  print print food I'm going to avoid printing our food item on every line I
  


  
    
      3:17:52
    
  
  
  will set the ending character in our print statement just to be a space okay
  


  
    
      3:17:58
    
  
  
  let's see what we have so far I would like popcorn
  


  
    
      3:18:04
    
  
  
  soda pretzel C to quit popcorn soda pretzel
  


  
    
      3:18:11
    
  
  
  then we will display the total I will print a new line
  


  
    
      3:18:18
    
  
  
  print I'll use an upst string total
  


  
    
      3:18:27
    
  
  
  is add a unit of currency total I'll add a format specifier 2f to display two
  


  
    
      3:18:34
    
  
  
  decimal places I'm going to add one line of decorative
  


  
    
      3:18:40
    
  
  
  text let's copy maybe this
  


  
    
      3:18:52
    
  
  
  all right let's test it
  


  
    
      3:18:58
    
  
  
  out select an item popcorn
  


  
    
      3:19:05
    
  
  
  pretzel soda potato CU
  


  
    
      3:19:11
    
  
  
  quit all right here's our cart popcorn pretzel soda we did not include the
  


  
    
      3:19:16
    
  
  
  potato that was not found within our dictionary the total is $1250 well there you have it everybody
  


  
    
      3:19:24
    
  
  
  that is a concession stand program the point of this program was to help us get used to working with dictionaries a
  


  
    
      3:19:30
    
  
  
  dictionary is a collection of key value pairs such as an item and a price and
  


  
    
      3:19:36
    
  
  
  yeah that's a concession stand program in Python well hello again everybody it's
  


  
    
  27.random numbers



  
    
      3:19:44
    
  
  
  me in today's topic I'm going to show you how we can generate some random numbers in Python then at the end of
  


  
    
      3:19:50
    
  
  
  this video as an exercise we're going to create a number guessing program let's begin we will be importing the random
  


  
    
      3:19:57
    
  
  
  module type import random the random module gives us access to a lot of
  


  
    
      3:20:02
    
  
  
  useful methods involving random numbers for a comprehensive list you can use the
  


  
    
      3:20:07
    
  
  
  help function pass in the random module and then we would want to print this
  


  
    
      3:20:16
    
  
  
  here's what we all have access to we have a shuffle method set State
  


  
    
      3:20:22
    
  
  
  seed sample random range random random int random bytes and there's a ton of
  


  
    
      3:20:29
    
  
  
  others but we'll discuss a few of the more useful methods for beginners for a random whole integer maybe you're
  


  
    
      3:20:35
    
  
  
  rolling a six-sided dice you would type the name of the random module dot that a
  


  
    
      3:20:40
    
  
  
  method for a random whole integer type Rand int add a set of parentheses within
  


  
    
      3:20:47
    
  
  
  the set of parentheses you will list a range if I'm rolling a six-sided dice I
  


  
    
      3:20:52
    
  
  
  would like the numbers 1 through six 1 comma 6 then I will assign what is
  


  
    
      3:20:58
    
  
  
  returned to maybe a variable print whatever my number
  


  
    
      3:21:05
    
  
  
  is my random number is a four 3 1 4 all
  


  
    
      3:21:11
    
  
  
  right I tend to play a lot of Dungeons and Dragons we use polyhedral dice that have more or less than six sides there
  


  
    
      3:21:18
    
  
  
  is a 20-sided dice for a random number between 1 and 20 I would set the range
  


  
    
      3:21:24
    
  
  
  to be 1 comma 20 here I rolled a 16 and a s and an 8 within the Rand int
  


  
    
      3:21:32
    
  
  
  method you can place variables as well as long as they contain numbers I will create a variable named low I'll set
  


  
    
      3:21:39
    
  
  
  that equal to one and a variable named High I will set that to be 100 I will replace the
  


  
    
      3:21:46
    
  
  
  numbers with my variables that behave as numbers give me a random integer between
  


  
    
      3:21:52
    
  
  
  my low variable and high variable so between 1 and 100 in this example I have
  


  
    
      3:21:58
    
  
  
  rolled a75 now in 88 if you need a random floating Point number you can use the
  


  
    
      3:22:04
    
  
  
  random method random. random then let's assign this to a
  


  
    
      3:22:10
    
  
  
  variable number equals the random method of the random module that would return a
  


  
    
      3:22:16
    
  
  
  random floating Point number between 0 and 1 you can pick a random Choice from a
  


  
    
      3:22:23
    
  
  
  sequence in the future we're going to create a game of rock paper scissors let's say we have a tuple of
  


  
    
      3:22:31
    
  
  
  options options equals
  


  
    
      3:22:36
    
  
  
  rock paper scissors we are accessing the random
  


  
    
      3:22:42
    
  
  
  module dot then use the choice method place your sequence within the choice
  


  
    
      3:22:48
    
  
  
  method give me a random Choice from options I will store this within a
  


  
    
      3:22:54
    
  
  
  variable let's say option equals random Choice from my options then I will print
  


  
    
      3:23:02
    
  
  
  the option our computer has generated scissors paper rock so the choice method is a
  


  
    
      3:23:10
    
  
  
  great use for games if you ever need a random element now there's also Shuffle
  


  
    
      3:23:16
    
  
  
  this time maybe we have a deck of cards cards equals I guess I'll use a list
  


  
    
      3:23:22
    
  
  
  this
  


  
    
      3:23:32
    
  
  
  time I have a list of cards that you would normally find within a deck of playing cards well besides the suit 2
  


  
    
      3:23:39
    
  
  
  through 10 Jack queen king Ace using the shuffle method I can Shuffle this
  


  
    
      3:23:45
    
  
  
  sequence access the random module do shuffle pass in your
  


  
    
      3:23:51
    
  
  
  sequence in my case it's cards then I will print cards yeah look at that my cards are now
  


  
    
      3:23:59
    
  
  
  shuffled in the future we'll be creating a game of Black Jack the shuffle method will be used then to shuffle our deck of
  


  
    
      3:24:06
    
  
  
  cards those are a few methods found within the random module for some practice let's create a number guessing
  


  
    
      3:24:12
    
  
  
  game as an exercise hey everybody so today we're
  


  
    
  28.number guessing game



  
    
      3:24:17
    
  
  
  going to create a number guessing game using python this is a project meant for beginners by completing this project it
  


  
    
      3:24:24
    
  
  
  will help us reinforce our understanding of previous topics let's begin we will import the random module we'll need to
  


  
    
      3:24:32
    
  
  
  pick a random number the random module is going to handle that for us what is the arrange of random numbers for our
  


  
    
      3:24:39
    
  
  
  number guessing game we'll store those as variables we will have one variable
  


  
    
      3:24:45
    
  
  
  named lowest number I'll set that to be one as well as a variable for highest number which I will
  


  
    
      3:24:52
    
  
  
  set to be 100 feel free to pick a different range if you would like I'll set the range to be 1 through 100 a
  


  
    
      3:25:00
    
  
  
  random number will be selected between this range which will be stored within a
  


  
    
      3:25:05
    
  
  
  variable named answer what is the correct answer so to choose a random number between these two values we will
  


  
    
      3:25:13
    
  
  
  access the random module called the Rand int method we will choose a random
  


  
    
      3:25:19
    
  
  
  integer between these two values the two arguments will be lowest
  


  
    
      3:25:25
    
  
  
  num comma highest num for the second
  


  
    
      3:25:31
    
  
  
  argument let's perform a test run I will print my
  


  
    
      3:25:37
    
  
  
  answer the number is going to be between 1 and
  


  
    
      3:25:43
    
  
  
  100 okay we know that that works here's a few more
  


  
    
      3:25:49
    
  
  
  variables we need to keep track of the number of wrong guesses which I will store as a variable named
  


  
    
      3:25:55
    
  
  
  guesses we want the user to keep guessing as long as our application is
  


  
    
      3:26:00
    
  
  
  running we will create a Boolean variable of is running which we will set
  


  
    
      3:26:05
    
  
  
  to be true once the user wins the game we will set is running to be
  


  
    
      3:26:13
    
  
  
  false we will print a welcome message
  


  
    
      3:26:18
    
  
  
  let's say python number guessing
  


  
    
      3:26:25
    
  
  
  game we will prompt the user I'll use an F string select a number between I'll add
  


  
    
      3:26:35
    
  
  
  two placeholders select a number between our
  


  
    
      3:26:41
    
  
  
  lowest number and our highest number
  


  
    
      3:26:47
    
  
  
  python number guessing game select a number between 1 and 100 now if I was to
  


  
    
      3:26:52
    
  
  
  change the range of these variables that should be reflected temporarily I changed the
  


  
    
      3:26:59
    
  
  
  lowest number to be 10 and the highest number to be 1,000 but let's set that
  


  
    
      3:27:06
    
  
  
  back between 1 and 100 is good we'll need a while loop to continue
  


  
    
      3:27:12
    
  
  
  the game each round we will say y while is
  


  
    
      3:27:18
    
  
  
  running since is running is a Boolean we don't need to say while is running equals true we can just say while is
  


  
    
      3:27:25
    
  
  
  running while this value remains true continue playing the game we will ask the user for some input
  


  
    
      3:27:34
    
  
  
  we will create a local variable of guess guess equals use the input function then enter
  


  
    
      3:27:42
    
  
  
  a prompt enter your guess there's one thing we want to
  


  
    
      3:27:50
    
  
  
  check python number guessing game select a number between 1 and 100 and to your guess what if somebody doesn't type in a
  


  
    
      3:27:57
    
  
  
  number like they type in the word Pizza we should let the user know that that's an invalid
  


  
    
      3:28:04
    
  
  
  guess we'll write the following if statement if our guess use the is digit
  


  
    
      3:28:13
    
  
  
  method if our guess is a digit a number then we will execute any code underneath
  


  
    
      3:28:19
    
  
  
  this if statement for the time being I'll WR pass we'll get back to that later else we will do something
  


  
    
      3:28:26
    
  
  
  else let's print the following print invalid
  


  
    
      3:28:34
    
  
  
  guess let's copy this print statement because I'm lazy and I don't feel like typing it
  


  
    
      3:28:40
    
  
  
  out please select a number between our lowest
  


  
    
      3:28:46
    
  
  
  number and our highest number let's try that again I will guess Pizza which isn't a
  


  
    
      3:28:54
    
  
  
  number and we get the message invalid guess please select a number between 1
  


  
    
      3:29:00
    
  
  
  and 100 all right that works underneath our if statement we'll write the
  


  
    
      3:29:06
    
  
  
  following once we get a guess that is a digit we need to convert it to a number
  


  
    
      3:29:11
    
  
  
  because when you accept user input it's a string we will reassign our guess
  


  
    
      3:29:17
    
  
  
  equal to typ cast our guess as an
  


  
    
      3:29:23
    
  
  
  integer then increase the number of guesses by one guesses plus equals 1
  


  
    
      3:29:29
    
  
  
  because we have already made one guess here's another scenario what if somebody guesses a
  


  
    
      3:29:36
    
  
  
  number outside of this range like one kajillion well we should give a warning
  


  
    
      3:29:43
    
  
  
  that that guess isn't valid if our guess is lower than the lowest
  


  
    
      3:29:53
    
  
  
  number or our guess is greater than the highest
  


  
    
      3:29:59
    
  
  
  number we will print the following that number is out of
  


  
    
      3:30:08
    
  
  
  range and I will reprompt the
  


  
    
      3:30:13
    
  
  
  user please select a number between between the lowest number and the highest
  


  
    
      3:30:20
    
  
  
  number let's perform a test run I will guess one
  


  
    
      3:30:25
    
  
  
  kajillion that number is out of range please select a number between 1 and 100
  


  
    
      3:30:32
    
  
  
  We'll add an lse if statement else if our guess is less than our answer we will
  


  
    
      3:30:40
    
  
  
  print the following to low try
  


  
    
      3:30:48
    
  
  
  again else if our guess is greater than our
  


  
    
      3:30:55
    
  
  
  answer we will print to high try again if our guess
  


  
    
      3:31:03
    
  
  
  isn't less than our answer and our guess isn't greater than our answer that means we must have the correct answer within
  


  
    
      3:31:11
    
  
  
  an L statement we will print I'll use an F string
  


  
    
      3:31:16
    
  
  
  string correct the answer was insert our answer
  


  
    
      3:31:23
    
  
  
  our answer variable then print the number of guesses it
  


  
    
      3:31:29
    
  
  
  took number of guesses add a placeholder place in our guesses within
  


  
    
      3:31:37
    
  
  
  the placeholder now to escape the while loop we will take our Boolean variable
  


  
    
      3:31:42
    
  
  
  of is running which is normally true and set that to be false to
  


  
    
      3:31:47
    
  
  
  escape and that should be all we need let's run this one last time python number guessing game select
  


  
    
      3:31:54
    
  
  
  a number between 1 and 100 let's select a number right in the middle 50 too low
  


  
    
      3:32:01
    
  
  
  try again so the number is between 50 and 100 75 too high it's between 50 and 75 then
  


  
    
      3:32:12
    
  
  
  62 too high
  


  
    
      3:32:18
    
  
  
  56 53 55 correct the answer was 55 number of
  


  
    
      3:32:26
    
  
  
  guesses it took me six all right everybody that is a python number guessing game you yourself can
  


  
    
      3:32:33
    
  
  
  create as a mini project hey everybody in today's topic I
  


  
    
  29.rock, paper, scissors game



  
    
      3:32:39
    
  
  
  thought we would create a game of rock paper scissors now that we know how the random module Works let's begin by by
  


  
    
      3:32:46
    
  
  
  importing the random module we will create some options we will use a tupple
  


  
    
      3:32:52
    
  
  
  we're not going to be changing the options so a tuple would be better than a list we have three options
  


  
    
      3:32:59
    
  
  
  rock paper or scissors I'll create a variable named
  


  
    
      3:33:06
    
  
  
  player to store the Player's Choice for now I'm going to set this to be none as
  


  
    
      3:33:12
    
  
  
  well as a computer our computer is going to pick a random Choice from these
  


  
    
      3:33:17
    
  
  
  options rock paper or scissors in order to do so we can use the choice method of
  


  
    
      3:33:23
    
  
  
  the random module random. choice pick a random Choice from
  


  
    
      3:33:31
    
  
  
  options let's have the player enter in some
  


  
    
      3:33:37
    
  
  
  input enter a
  


  
    
      3:33:43
    
  
  
  choice Rock paper
  


  
    
      3:33:50
    
  
  
  scissors then we will display the Player's Choice and the computer's Choice I'll use an FST
  


  
    
      3:33:58
    
  
  
  string player colon space the variable
  


  
    
      3:34:04
    
  
  
  player let's copy that paste it then change player to
  


  
    
      3:34:12
    
  
  
  computer let's see what we have so far enter a choice rock paper
  


  
    
      3:34:18
    
  
  
  scissors so I pick Rock the computer picks scissors let's try it again just
  


  
    
      3:34:23
    
  
  
  for good measure I pick paper this time the computer picks
  


  
    
      3:34:29
    
  
  
  scissors I pick scissors the computer picks paper okay we know that the computer is successfully picking a
  


  
    
      3:34:35
    
  
  
  random Choice from our options now what if the player picks something that's not within this tupple such as the gun well
  


  
    
      3:34:44
    
  
  
  we would want to stop that right we need the user to pick a valid option only rock paper or scissors I think what
  


  
    
      3:34:51
    
  
  
  we'll do is that when we accept the user input let's place it within a while loop so indent this
  


  
    
      3:34:57
    
  
  
  line while this condition is going to be kind of weird while our player variable
  


  
    
      3:35:04
    
  
  
  is not in our tle options let's try this again to see what
  


  
    
      3:35:10
    
  
  
  happens I pick the gun enter a choice all right well if I can't pick a gun how
  


  
    
      3:35:16
    
  
  
  about a sponge well I can't pick that either rock that works our condition is while
  


  
    
      3:35:24
    
  
  
  the player variable is not found within our options if the player doesn't pick
  


  
    
      3:35:30
    
  
  
  one of these options this while loop will continue forever once we pick something that's within our options we
  


  
    
      3:35:37
    
  
  
  then escape the while loop let's check some win conditions now if the player is
  


  
    
      3:35:44
    
  
  
  equal to computer that means it's a tie I will
  


  
    
      3:35:50
    
  
  
  print it's a tie I'll add a few else if statements
  


  
    
      3:35:56
    
  
  
  else if the player is equal to rock I'll
  


  
    
      3:36:01
    
  
  
  use the and logical operator and the computer is equal to
  


  
    
      3:36:08
    
  
  
  scissors that means you win let's print you win let's add another condition else
  


  
    
      3:36:17
    
  
  
  if the player picks paper and the
  


  
    
      3:36:25
    
  
  
  computer picks Rock then you also win you
  


  
    
      3:36:34
    
  
  
  win else if the player picks
  


  
    
      3:36:40
    
  
  
  scissors and the computer and the computer picks
  


  
    
      3:36:48
    
  
  
  paper then we will print you win
  


  
    
      3:36:55
    
  
  
  else if the Player's Choice is not the same as the computer's and we don't meet
  


  
    
      3:37:01
    
  
  
  any win conditions that must mean we lose print you
  


  
    
      3:37:08
    
  
  
  lose let's see if this works enter a choice rock paper scissors I pick the
  


  
    
      3:37:13
    
  
  
  gun nope I can't pick that I pick Rock I pick Rock the computer picks scissors
  


  
    
      3:37:19
    
  
  
  you win let me see if I can lose I'll pick paper you win
  


  
    
      3:37:25
    
  
  
  again scissors I need to stop winning I need to see if the lose condition
  


  
    
      3:37:31
    
  
  
  works okay it's a tie at least but I need to lose all right there we go I pick Rock
  


  
    
      3:37:38
    
  
  
  the computer picks paper you lose what if the user would like to play again
  


  
    
      3:37:43
    
  
  
  let's place all of this code with within a wild Loop let's do so right about here
  


  
    
      3:37:49
    
  
  
  now I'm not going to write while true like I normally do this time I'm going to create a variable let's say running
  


  
    
      3:37:57
    
  
  
  is our game running I will set that to be true while running equals true or we
  


  
    
      3:38:07
    
  
  
  could shorten this to just while running that's simpler I will place all of this code
  


  
    
      3:38:14
    
  
  
  within the wild Loop to mass indent some code just highlight all of the code then press tab hey everybody this is bro from
  


  
    
      3:38:21
    
  
  
  the future I forgot to explain something the reason I'm not setting the condition of my while loop to be true is that if
  


  
    
      3:38:28
    
  
  
  you have a lot of code within a while loop it can be really difficult to find where the break statement is if I set my
  


  
    
      3:38:35
    
  
  
  condition to be a Boolean variable such as running it's a lot easier to find any
  


  
    
      3:38:40
    
  
  
  instance where I use this variable if I were to highlight it we can see that running is found down here here if I
  


  
    
      3:38:46
    
  
  
  need to change any instance of this variable and rename it to something you can refactor let's rename running as
  


  
    
      3:38:53
    
  
  
  maybe playing then I will refactor so my variable running is now playing and that
  


  
    
      3:39:00
    
  
  
  change was made down here too so it's a coding preference every time we start a new game I will reset the player as well
  


  
    
      3:39:07
    
  
  
  as the computer let's move these two lines into the while loop at the beginning so when we start a new game we
  


  
    
      3:39:15
    
  
  
  will reset the player the computer will pick a new random choice so let's see what we have so
  


  
    
      3:39:21
    
  
  
  far Rock I pick Rock the computer picks Rock it's a tie then we have to play
  


  
    
      3:39:28
    
  
  
  again so paper you lose scissors it's a
  


  
    
      3:39:33
    
  
  
  tie now what if we would like to escape the while loop after our wi conditions
  


  
    
      3:39:38
    
  
  
  I'm going to create a temporary variable let's name this play again then we will
  


  
    
      3:39:44
    
  
  
  ask for some user input play again question
  


  
    
      3:39:51
    
  
  
  mark y sln meaning yes or no if the user types
  


  
    
      3:39:57
    
  
  
  in something that's capital I'm going to use the lower method to make it lowercase so if our play again variable
  


  
    
      3:40:05
    
  
  
  is equal to Y we would like to escape what I would
  


  
    
      3:40:10
    
  
  
  like to do is I would like to see if the player types in something that's not y I
  


  
    
      3:40:16
    
  
  
  will precede this condition with the not logical operator if the user does not
  


  
    
      3:40:24
    
  
  
  want to play again then let's take our Boolean variable running normally it's
  


  
    
      3:40:30
    
  
  
  true and set that to be false running equals false that means we will escape the wild
  


  
    
      3:40:38
    
  
  
  Loop once we escape the while loop I will print thanks for playing
  


  
    
      3:40:46
    
  
  
  now I'm going to change this momentarily I just want to test it Rock play again
  


  
    
      3:40:52
    
  
  
  yes paper play again yes scissors you lose play again nope thanks
  


  
    
      3:41:00
    
  
  
  for playing this is entirely optional I try and create as few variables as possible I would personally rather avoid
  


  
    
      3:41:08
    
  
  
  creating a variable here another way in which I could write this is that I can get rid of this variable
  


  
    
      3:41:19
    
  
  
  let's move if notot in front of the input and follow our input here then use
  


  
    
      3:41:28
    
  
  
  the comparison operator and add a colon if the user's
  


  
    
      3:41:34
    
  
  
  input after making it lowercase does not equal a y for yes set
  


  
    
      3:41:41
    
  
  
  running to be false so that should work the same Rock play again yes enter a choice paper
  


  
    
      3:41:51
    
  
  
  play again no thanks for playing this line would work the same but it's a
  


  
    
      3:41:56
    
  
  
  little more complex for beginners to read or you can use the other method that I showed you all right everybody
  


  
    
      3:42:02
    
  
  
  well that's a game of rock paper scissors hello everybody today we will
  


  
    
  30.dice roller program



  
    
      3:42:08
    
  
  
  be creating a dice roller program in Python we will be utilizing some aski art I'll post all of the ask ke art that
  


  
    
      3:42:15
    
  
  
  we'll need in the description of this video you can copy and paste it to save time if you'd like all right let's get
  


  
    
      3:42:21
    
  
  
  started everybody we will Begin by importing the random module because we will be rolling some random numbers
  


  
    
      3:42:27
    
  
  
  between 1 through six if we're going to create some esy art we'll be utilizing Unicode characters to enter in a Unicode
  


  
    
      3:42:35
    
  
  
  character it really varies depending on your operating system I think the easiest way would just be to use Python
  


  
    
      3:42:41
    
  
  
  to enter a Unicode character type award slash then a given code for each character here are all of the codes that
  


  
    
      3:42:47
    
  
  
  we'll
  


  
    
      3:42:57
    
  
  
  need after writing these seven Unicode characters let's run this program these
  


  
    
      3:43:03
    
  
  
  symbols that are output let's copy them I'll add them to a comment then we can
  


  
    
      3:43:09
    
  
  
  delete this line these are the Unicode characters we'll need to build some asy art some dice
  


  
    
      3:43:15
    
  
  
  each die will be made out of five lines let's begin with the first we'll
  


  
    
      3:43:22
    
  
  
  need a left corner nine dashes then the right
  


  
    
      3:43:30
    
  
  
  corner for the second line copy this vertical bar add nine
  


  
    
      3:43:38
    
  
  
  spaces then a vertical bar we can copy this whole line paste it two times
  


  
    
      3:43:46
    
  
  
  let's use the left bottom corner add nine of these
  


  
    
      3:43:52
    
  
  
  dashes then the bottom right corner and here's a basic box shape
  


  
    
      3:43:58
    
  
  
  depending on what the number die is we can add one of these bullet points for a one we can add that right to the middle
  


  
    
      3:44:04
    
  
  
  so that's good for now we'll delete this later let's create a dictionary I will name this dictionary dice
  


  
    
      3:44:13
    
  
  
  art our dictionary is made out of key value pairs so the keys will be the
  


  
    
      3:44:18
    
  
  
  numbers 1 through six beginning with one the value will be a tupple it's a
  


  
    
      3:44:25
    
  
  
  dictionary made out of key value pairs where the value is a tupple within the
  


  
    
      3:44:31
    
  
  
  tupple let's add these lines each separated with the comma
  


  
    
      3:44:47
    
  
  
  I'm going to format these so they form a box shape let's take our bullet point place
  


  
    
      3:44:55
    
  
  
  it right in the middle then add a comma to the end of this key value pair that is the first key value pair let's copy
  


  
    
      3:45:03
    
  
  
  all of this paste it again change one to two let's move this bullet point we need two
  


  
    
      3:45:10
    
  
  
  bullet points about right here and here
  


  
    
      3:45:15
    
  
  
  let's repeat this process for Keys 3 through
  


  
    
      3:45:41
    
  
  
  six be sure to get rid of the comma at the end and here is our dictionary of dice art
  


  
    
      3:45:49
    
  
  
  each key is a number each value is a tupple made of strings let's create a list of dice our
  


  
    
      3:45:58
    
  
  
  dice will be numbers randomly generated between 1 and six a total to calculate
  


  
    
      3:46:05
    
  
  
  the total I'll set that to be zero then we will ask a user for a
  


  
    
      3:46:10
    
  
  
  number of dice this will will be some
  


  
    
      3:46:16
    
  
  
  input how many dice then typ cast the input as an
  


  
    
      3:46:23
    
  
  
  integer we don't want somebody to write you know 2.5 dice you can't roll half a die to generate a random number you can
  


  
    
      3:46:30
    
  
  
  use the Rand int method of the random module we need a random number between 1
  


  
    
      3:46:37
    
  
  
  and six then we need to append this number to our list of dice dice data
  


  
    
      3:46:45
    
  
  
  pend then we can move this line to within the append
  


  
    
      3:46:50
    
  
  
  method we need to do this a number of times depending on how many dice the user enters in we can place this line
  


  
    
      3:46:57
    
  
  
  within a four Loop for every die in our
  


  
    
      3:47:04
    
  
  
  range number of dice this will be a number let's print our list of dice to
  


  
    
      3:47:11
    
  
  
  see what numbers we have in here how many dice I would like five dice 5 3 3 4
  


  
    
      3:47:18
    
  
  
  6 okay we know that that works let's calculate a total we'll need to iterate
  


  
    
      3:47:23
    
  
  
  and sum all of the elements within our list we can do that with the for Loop
  


  
    
      3:47:30
    
  
  
  for every die in our list dice take our
  


  
    
      3:47:36
    
  
  
  total variable plus equals the current value within our
  


  
    
      3:47:42
    
  
  
  dice then we will print a total I'll use an F string total colon
  


  
    
      3:47:49
    
  
  
  space our total variable let's see what we have so
  


  
    
      3:47:56
    
  
  
  far how many dice I would like five dice our total is 19 now between these two
  


  
    
      3:48:02
    
  
  
  for Loops we will display our ASI art the easiest way would be to create some
  


  
    
      3:48:08
    
  
  
  nested for Loops the outer for Loop will be in charge of the number of dice for
  


  
    
      3:48:14
    
  
  
  every die in our range number of
  


  
    
      3:48:23
    
  
  
  dice the inner for Loop will be in charge of printing every
  


  
    
      3:48:30
    
  
  
  tupple for every line in then to get a
  


  
    
      3:48:35
    
  
  
  value in our dictionary we would type the name of the dictionary dice art then
  


  
    
      3:48:41
    
  
  
  use the get method what are we getting we're getting a value at a given key
  


  
    
      3:48:48
    
  
  
  let's take our list of numbers dice at index of D our
  


  
    
      3:48:55
    
  
  
  counter depending on what the user types in for the number of dice D will begin at one then
  


  
    
      3:49:01
    
  
  
  increment within the inner four Loop we will print the line so let's take a look
  


  
    
      3:49:10
    
  
  
  how many dice I would like three Dice and here's our aski art six + 2 + 4 that
  


  
    
      3:49:16
    
  
  
  equals 12 if you would prefer we can display all of these dice on a single horizontal
  


  
    
      3:49:24
    
  
  
  line instead of one vertical line it's a little more tricky though if you would prefer that approach let's turn this
  


  
    
      3:49:31
    
  
  
  chunk of code into comments we will write this nested Loop
  


  
    
      3:49:36
    
  
  
  a little different so each tupple is made up of five elements
  


  
    
      3:49:42
    
  
  
  right so if we're printing a horizontal line let's say we roll the numbers 1
  


  
    
      3:49:48
    
  
  
  through 3 we would first need to display this line of the first dice then the
  


  
    
      3:49:54
    
  
  
  first line of the second dice then the first line of the third dice during the
  


  
    
      3:50:00
    
  
  
  next iteration of the outer loop we would display the second line of the first dice the second line of the second
  


  
    
      3:50:06
    
  
  
  dice the second line of the third dice so it's a little more complex let's
  


  
    
      3:50:12
    
  
  
  create an outer loop that will iterate five times for every line in range
  


  
    
      3:50:21
    
  
  
  five then the nested Loop will be for every die in
  


  
    
      3:50:28
    
  
  
  dice how many dice do we have within our
  


  
    
      3:50:33
    
  
  
  list we will print we're going to get one of the values found at one of the
  


  
    
      3:50:38
    
  
  
  numbers that we roll take our dictionary of dice art
  


  
    
      3:50:45
    
  
  
  do get then a number 1 through six that will be the value found within
  


  
    
      3:50:52
    
  
  
  our list of dice get the current die remember that this is a number 1 through
  


  
    
      3:50:58
    
  
  
  six we would then need one of the elements found within our Tuple so get
  


  
    
      3:51:03
    
  
  
  the first line then the second line third fourth
  


  
    
      3:51:10
    
  
  
  fifth so let's add the index operator place our counter of line
  


  
    
      3:51:16
    
  
  
  within the index operator let's see what we have so far we need to add one more thing how
  


  
    
      3:51:22
    
  
  
  many dice three this is an Abomination there's one
  


  
    
      3:51:27
    
  
  
  more change we need to make at the end of our print statement let's set the ending character to be an
  


  
    
      3:51:35
    
  
  
  empty string and that should fix that how many dice three okay we're getting better
  


  
    
      3:51:42
    
  
  
  results then when we escape the inner loop we will print a new line how many dice
  


  
    
      3:51:49
    
  
  
  three and there we are 3 + 6 + 1 is 10
  


  
    
      3:51:55
    
  
  
  all right everybody so that is a dice roller program it is kind of complex but I thought this might be a good exercise
  


  
    
      3:52:02
    
  
  
  if you would like a copy of this code I will post all of this in the comment section down below and well yeah that's
  


  
    
      3:52:07
    
  
  
  a dice roller program in Python hey everybody today I need to
  


  
    
  31.functions



  
    
      3:52:13
    
  
  
  explain function funs think of a function as a block of reusable code to invoke a function you place a set of
  


  
    
      3:52:20
    
  
  
  parentheses after the function name to invoke it here's a scenario I need to
  


  
    
      3:52:25
    
  
  
  sing Happy Birthday three times I know it's a weird example but it makes a lot of sense just trust me on this if I need
  


  
    
      3:52:32
    
  
  
  to sing Happy Birthday three times I would write something like this I'm going to create my own version of the
  


  
    
      3:52:38
    
  
  
  Happy Birthday song
  


  
    
      3:52:45
    
  
  
  this is one verse if I need to repeat this code three times without using functions I could either repeat this
  


  
    
      3:52:52
    
  
  
  code or maybe place it within a loop so here's my Happy Birthday song
  


  
    
      3:52:58
    
  
  
  three times but there's a better way of handling this that doesn't involve repeating our code or using Loops what
  


  
    
      3:53:05
    
  
  
  if I could write this code once then reuse it whenever I need to that's where functions come in to define a function
  


  
    
      3:53:12
    
  
  
  you would type DF then a unique function name let's name this function the happy
  


  
    
      3:53:19
    
  
  
  birthday function add a set of parentheses a colon any code that belongs to the function you'll want to
  


  
    
      3:53:26
    
  
  
  indent underneath then to invoke this function I would type the name of the
  


  
    
      3:53:31
    
  
  
  function happy birthday add a set of parentheses and that's
  


  
    
      3:53:36
    
  
  
  it when you invoke this function you will execute this code once if I need to
  


  
    
      3:53:42
    
  
  
  execute this code three times I would just call it two more times happy birthday happy birthday
  


  
    
      3:53:48
    
  
  
  happy birthday to invoke a function you type the function name then add a set of parentheses I like to think of the
  


  
    
      3:53:54
    
  
  
  parentheses as a pair of telephones talking to each other you call a function to invoke it hey happy birthday
  


  
    
      3:54:00
    
  
  
  function execute your code with functions you are able to send data directly to a function using what are
  


  
    
      3:54:07
    
  
  
  known as arguments you can send values or variables directly to a function place any data within the set of
  


  
    
      3:54:13
    
  
  
  parentheses I'll send my function a first name any data you send a function are known as arguments but you need a
  


  
    
      3:54:21
    
  
  
  matching set of parameters that are in order what exactly is the data we're sending in well it's a name I will add
  


  
    
      3:54:28
    
  
  
  one parameter to my happy birthday function I will name this data name a parameter is kind of like a temporary
  


  
    
      3:54:35
    
  
  
  variable that's used within a function I'm going to replace this instance of you with a name I will use an F string
  


  
    
      3:54:44
    
  
  
  repl place you with a placeholder I will add my parameter name so happy birthday
  


  
    
      3:54:50
    
  
  
  to bro we could pass in some other names what about
  


  
    
      3:54:57
    
  
  
  Steve and Joe here we are happy birthday to bro
  


  
    
      3:55:04
    
  
  
  happy birthday to Steve happy birthday to Joe when you invoke a function you can send more than one argument let's
  


  
    
      3:55:11
    
  
  
  send an age this time I'll send 20
  


  
    
      3:55:16
    
  
  
  30 and 40 but when I run this we have an error we're passing in two arguments but
  


  
    
      3:55:24
    
  
  
  our function is set up only to take one I would need a matching number of arguments to invoke this function we
  


  
    
      3:55:31
    
  
  
  will need two parameters we have a name and we have an
  


  
    
      3:55:36
    
  
  
  age then let's use this age you are let's make this line an F
  


  
    
      3:55:43
    
  
  
  string a age years old let's try that
  


  
    
      3:55:49
    
  
  
  again happy birthday to bro you are 20 years old happy birthday to Steve you
  


  
    
      3:55:55
    
  
  
  are 30 years old happy birthday to Joe you are 40 years old when you invoke a function you can pass in some data those
  


  
    
      3:56:02
    
  
  
  are known as arguments but you'll need a matching set of parameters the order does matter let's see what happens when
  


  
    
      3:56:09
    
  
  
  I switch these two parameters age then name
  


  
    
      3:56:15
    
  
  
  happy birthday 220 you are bro years old happy birthday 230 you are Steve years
  


  
    
      3:56:21
    
  
  
  old happy birthday 240 you are Joe years old so the position of the parameters
  


  
    
      3:56:27
    
  
  
  does matter same thing goes with the arguments you also could name these parameters something unique maybe X and
  


  
    
      3:56:34
    
  
  
  Y happy birthday to X you are y years old that's also valid let's try another
  


  
    
      3:56:42
    
  
  
  example I'm going to create a function to display an
  


  
    
      3:56:48
    
  
  
  invoice there will be three parameters a username an amount and a due
  


  
    
      3:56:57
    
  
  
  date let's print hello I should make this an FST
  


  
    
      3:57:04
    
  
  
  string username we'll use another FST
  


  
    
      3:57:11
    
  
  
  string your bill of
  


  
    
      3:57:18
    
  
  
  amount let's preedee this placeholder with the unit of currency I will also add a format specifier point
  


  
    
      3:57:27
    
  
  
  2f is do on our due date whatever that
  


  
    
      3:57:33
    
  
  
  parameter is to invoke this function we will type the function's name add a set
  


  
    
      3:57:38
    
  
  
  of parentheses a username an amount and a due date let's make up some username
  


  
    
      3:57:46
    
  
  
  an amount I guess $42.50 I'm just making up a number
  


  
    
      3:57:51
    
  
  
  here then a due date the 1st of January I guess here's my invoice hello bro code
  


  
    
      3:57:58
    
  
  
  your bill of $42.50 is due on January 1st let's change these arguments Joe Schmo is the
  


  
    
      3:58:06
    
  
  
  username he owes $100 and 1 Penny due on
  


  
    
      3:58:12
    
  
  
  the 1st of February or or January 2nd depending on how you read dates in your region hello Joe Mo your bill of $100
  


  
    
      3:58:20
    
  
  
  And1 is due on 1/2 that's another example now we need to explain the
  


  
    
      3:58:26
    
  
  
  return statement return is a statement that is used to end a function and send
  


  
    
      3:58:31
    
  
  
  a result back to the caller here's an example we have a variable z z will
  


  
    
      3:58:37
    
  
  
  equal will invoke a function to add two numbers together such as the numbers one
  


  
    
      3:58:43
    
  
  
  and two when we invoke a function we can send some data back after adding one and two
  


  
    
      3:58:50
    
  
  
  we will send the result which would be three then this value can be assigned to a variable then we can print whatever Z
  


  
    
      3:58:58
    
  
  
  is so let's create some functions let's create a function to add two numbers
  


  
    
      3:59:03
    
  
  
  together the parameters will be X and Y let's say Z
  


  
    
      3:59:10
    
  
  
  equal x + y then we will return our value Z so I'm not going to
  


  
    
      3:59:18
    
  
  
  print Z directly right now let's subtract X and Y subtract z = xus y return
  


  
    
      3:59:30
    
  
  
  Z multiply x *
  


  
    
      3:59:38
    
  
  
  y then divide
  


  
    
      3:59:44
    
  
  
  x / y return Z let's invoke our add function pass in two numbers 1 and two
  


  
    
      3:59:52
    
  
  
  then I'm going to print the result after adding these two numbers
  


  
    
      3:59:58
    
  
  
  together the result is three what about
  


  
    
      4:00:03
    
  
  
  subtract subtract 1 and two the result is -
  


  
    
      4:00:08
    
  
  
  1 multiply the result is
  


  
    
      4:00:15
    
  
  
  two then divide 1 / 2 is 0.5 after we resolve
  


  
    
      4:00:23
    
  
  
  this function a value is returned just imagine that after we finish this function this function becomes whatever
  


  
    
      4:00:29
    
  
  
  is returned three this function becomes - 1 this function becomes 2 this
  


  
    
      4:00:36
    
  
  
  function becomes 0.5 let's write something a little more
  


  
    
      4:00:42
    
  
  
  complex we will create a function to create a full name
  


  
    
      4:00:47
    
  
  
  create name we'll need two parameters for a first name and a last name I'll
  


  
    
      4:00:53
    
  
  
  name these first and last what do we want to do within this function let's capitalize the user's
  


  
    
      4:01:00
    
  
  
  first name first equals first. capitalize
  


  
    
      4:01:05
    
  
  
  method then do the same thing with the last name last equals last. capitalize
  


  
    
      4:01:15
    
  
  
  then I'm going to return the user's first name plus their last name then
  


  
    
      4:01:20
    
  
  
  I'll add a space in between their first and last name this is also valid outside of the
  


  
    
      4:01:26
    
  
  
  function let's create a full name variable then invoke the create name
  


  
    
      4:01:32
    
  
  
  function so this function is going to capitalize the first and last name for us I'll type in my first name all
  


  
    
      4:01:39
    
  
  
  lowercase same thing with my last name then let's let's print our full
  


  
    
      4:01:47
    
  
  
  name and here is my full name variable we sent our function some arguments we
  


  
    
      4:01:52
    
  
  
  have some parameters set up we took those values made them uppercase then concatenated these strings together then
  


  
    
      4:02:00
    
  
  
  return them as a single string let's try this with a different name
  


  
    
      4:02:05
    
  
  
  SpongeBob SquarePants SpongeBob now has a full
  


  
    
      4:02:11
    
  
  
  name the first and last names are now cap ized using the return statement you can return some data back to the place
  


  
    
      4:02:18
    
  
  
  in which you call a function well everybody that's a function it's a section of reusable code to call a
  


  
    
      4:02:25
    
  
  
  function you type the function's name add a set of parentheses you can send a function some data which are known as
  


  
    
      4:02:32
    
  
  
  arguments but you'll need a matching set of parameters you also do have the option of returning some data back to
  


  
    
      4:02:39
    
  
  
  the place in which you invoke a function we'll be using functions a lot in the future but we will get more practice
  


  
    
      4:02:45
    
  
  
  with them and those are functions in Python hey everybody today I'm going to
  


  
    
  32.default arguments



  
    
      4:02:52
    
  
  
  explain default arguments default arguments are a default value for
  


  
    
      4:02:57
    
  
  
  certain parameters the default is used when that argument is omitted when you invoke a function in the last topic we
  


  
    
      4:03:04
    
  
  
  discussed positional arguments today we will be examining default arguments then in future topics we'll examine keyword
  


  
    
      4:03:11
    
  
  
  and arbitrary arguments let's begin in let's define a function to calculate net
  


  
    
      4:03:17
    
  
  
  price there will be three parameters an original list
  


  
    
      4:03:22
    
  
  
  price a discount if there is one and sales
  


  
    
      4:03:29
    
  
  
  tax we will return a net price and here's the
  


  
    
      4:03:34
    
  
  
  formula list price times 1 minus our discount
  


  
    
      4:03:42
    
  
  
  percentage times 1 plus our sales tax maybe I'm buying a
  


  
    
      4:03:49
    
  
  
  PlayStation 5 for $500 I will pass in 500 for the list price well I can't actually execute this
  


  
    
      4:03:57
    
  
  
  function without also passing in an argument for Discount and tax perhaps the discount is zero and the sales tax
  


  
    
      4:04:04
    
  
  
  is 5% 0.05 well this would work and I should probably put this within a print
  


  
    
      4:04:10
    
  
  
  statement so you can see it there we are my total is
  


  
    
      4:04:16
    
  
  
  $525 the list price of 500 no discount and 5% sales tax now suppose that maybe
  


  
    
      4:04:24
    
  
  
  90% of the time when we're executing this function most of the time discount is zero and our sales tax is almost
  


  
    
      4:04:31
    
  
  
  always the same what we could do to make this function a little more flexible is to set these two parameters to have a
  


  
    
      4:04:38
    
  
  
  default value in place of sending in three arguments we can pass in one then
  


  
    
      4:04:43
    
  
  
  s our discount and our tax to have a default value so I will set discount to
  


  
    
      4:04:48
    
  
  
  be zero and tax to be 0.05 meaning 5% so
  


  
    
      4:04:54
    
  
  
  this function would work our total is 525 and that's assuming that our
  


  
    
      4:04:59
    
  
  
  discount is zero and our tax is 5% the nice thing about using default arguments
  


  
    
      4:05:05
    
  
  
  is that let's say that somebody has a discount well this function would also accept up to two additional
  


  
    
      4:05:12
    
  
  
  arguments so let's print our net price 500 and our customer has a coupon
  


  
    
      4:05:21
    
  
  
  for 10% off I'll add a second argument of
  


  
    
      4:05:26
    
  
  
  0.1 if we're passing in an argument for our discount we'll use whatever is passed in rather than the default our
  


  
    
      4:05:33
    
  
  
  total now is $472 or maybe this
  


  
    
      4:05:38
    
  
  
  time they are not paying sales tax I will set the sales tax to be zero
  


  
    
      4:05:45
    
  
  
  now the customer total is $450 so that's kind of the nice thing about default arguments it makes your
  


  
    
      4:05:51
    
  
  
  functions more flexible and it can reduce the number of arguments especially if the arguments that you're
  


  
    
      4:05:56
    
  
  
  passing in tend to be consistent most of the time people don't have a discount and almost everybody is paying 5% sales
  


  
    
      4:06:03
    
  
  
  tax why pass an arguments if we don't have to Let's cover an exercise we'll create a count up timer we will import
  


  
    
      4:06:11
    
  
  
  the time module we will Define this function define count there will be two
  


  
    
      4:06:18
    
  
  
  arguments start and end for X in
  


  
    
      4:06:27
    
  
  
  range start comma and within the range
  


  
    
      4:06:33
    
  
  
  function the second argument is exclusive so I'm going to add one to the end of our
  


  
    
      4:06:39
    
  
  
  time then I will print X to make this thread that's running the program sleep
  


  
    
      4:06:45
    
  
  
  you can access the time modules Sleep Method pass in one for one
  


  
    
      4:06:51
    
  
  
  second then outside of the for Loop let's print the word
  


  
    
      4:06:56
    
  
  
  done to invoke this function I need to pass in two arguments a start time and
  


  
    
      4:07:02
    
  
  
  an end time I'll set the start time to be zero the end time to be 10 10
  


  
    
      4:07:08
    
  
  
  seconds so we start at zero then we will increment by one every second I'll speed
  


  
    
      4:07:14
    
  
  
  up the video I think you get the idea but we'll stop at
  


  
    
      4:07:20
    
  
  
  10 let's assume that most of the time a user would like to begin at zero well we
  


  
    
      4:07:25
    
  
  
  don't necessarily need to pass that in as an argument let's set our start parameter to have a default value of
  


  
    
      4:07:32
    
  
  
  zero we only need to pass in one argument but we do have a problem
  


  
    
      4:07:38
    
  
  
  non-default arguments should follow default arguments so if you use any
  


  
    
      4:07:43
    
  
  
  default arguments you'll want to be sure that they're after any positional arguments so let's reverse these and
  


  
    
      4:07:51
    
  
  
  that should work so now when I run this program it's assuming we'd like to start at
  


  
    
      4:07:58
    
  
  
  zero but we'll need to pass in an ending amount of seconds when do we want to
  


  
    
      4:08:04
    
  
  
  stop that works the same but now we do have the option of starting at a different number this time let's end at
  


  
    
      4:08:12
    
  
  
  30 but we will begin at 15 we're beginning at 15 then we will
  


  
    
      4:08:19
    
  
  
  count to 30 I'll speed up the
  


  
    
      4:08:26
    
  
  
  video there we are all right everybody so in conclusion default arguments they
  


  
    
      4:08:31
    
  
  
  are default values for certain parameters the default value is used when an argument is omitted they can
  


  
    
      4:08:38
    
  
  
  make your functions more flexible and reduce the number of arguments you have to pass in especially if those arguments
  


  
    
      4:08:44
    
  
  
  are consistent most of the time so those are default arguments and in the next topic we will discuss keyword arguments
  


  
    
      4:08:50
    
  
  
  and well yeah those are default arguments in Python hey friends it's me again today
  


  
    
  33.keyword arguments 🗝️



  
    
      4:08:58
    
  
  
  I'm going to explain keyword arguments a keyword argument is an argument preceded
  


  
    
      4:09:03
    
  
  
  by an identifier it has a few benefits it helps with readability and the Order of the arguments doesn't matter if
  


  
    
      4:09:10
    
  
  
  they're keywords keyword arguments are one of four basic styles of arguments we
  


  
    
      4:09:15
    
  
  
  discuss positional default then next we'll discuss arbitrary but today we'll be focusing on keyword suppose I have a
  


  
    
      4:09:22
    
  
  
  function to display a message like a greeting I will name this function the
  


  
    
      4:09:27
    
  
  
  hello function we will need a greeting a title Mr Mrs
  


  
    
      4:09:34
    
  
  
  doctor a first name then a last name all I'm going to do within this
  


  
    
      4:09:40
    
  
  
  function is print an F string I will print my
  


  
    
      4:09:47
    
  
  
  greeting the user's title first
  


  
    
      4:09:54
    
  
  
  name last name then to invoke the hello function I
  


  
    
      4:09:59
    
  
  
  will need to pass in four arguments a greeting a title a first name and a last
  


  
    
      4:10:04
    
  
  
  name so for my greeting let's say hello the title will be Mr
  


  
    
      4:10:14
    
  
  
  the first name will be SpongeBob last name
  


  
    
      4:10:20
    
  
  
  SquarePants so you know this does work we're currently using positional arguments the position of these
  


  
    
      4:10:26
    
  
  
  arguments does matter so what if I were to switch these around we have hello
  


  
    
      4:10:32
    
  
  
  SpongeBob SquarePants followed by Mister hello SpongeBob SquarePants Mis an
  


  
    
      4:10:38
    
  
  
  optional feature when sending arguments to a function is that we could turn these into into keyword arguments prefix
  


  
    
      4:10:45
    
  
  
  any arguments with the name of the parameter followed by equals title equals
  


  
    
      4:10:51
    
  
  
  Mister first equals SpongeBob last equals SquarePants then
  


  
    
      4:10:57
    
  
  
  with these keyword arguments the order really doesn't matter maybe we move the first name to the
  


  
    
      4:11:04
    
  
  
  end and the still would print out is the same thing we have title first name last name if you're mixing and matching
  


  
    
      4:11:11
    
  
  
  positional arguments and key word arguments you want to be sure that the positional arguments are first so if I
  


  
    
      4:11:17
    
  
  
  was to move the string or greeting to the end well this technically wouldn't work
  


  
    
      4:11:24
    
  
  
  we have a syntax error positional arguments follow keyword arguments so make sure any positional arguments are
  


  
    
      4:11:31
    
  
  
  first before using any keyword arguments two helpful benefits of using keyword
  


  
    
      4:11:36
    
  
  
  arguments is that it helps with readability and the Order of the arguments doesn't matter we know what
  


  
    
      4:11:41
    
  
  
  this argument is as well as is these two title last name first
  


  
    
      4:11:46
    
  
  
  name let's say we have a first name and a last name John
  


  
    
      4:11:55
    
  
  
  James these two names kind of sound like first names is our first name John or is
  


  
    
      4:12:00
    
  
  
  it James we could use keyword arguments to clarify which is which you thought
  


  
    
      4:12:05
    
  
  
  John was the first name but it's actually the last name and the first name is
  


  
    
      4:12:11
    
  
  
  James then our title is still the same hello Mr James John Let's cover another
  


  
    
      4:12:18
    
  
  
  example I'm going to print the numbers 1 through 10 using a for Loop for X in
  


  
    
      4:12:25
    
  
  
  range 1 comma 11 because the second argument is exclusive then I will print
  


  
    
      4:12:33
    
  
  
  X after each print statement we print a new line do you remember in previous topics how we would follow our print
  


  
    
      4:12:40
    
  
  
  statement with comma and than a new character such as a
  


  
    
      4:12:46
    
  
  
  space while end is a keyword argument found within the built-in print
  


  
    
      4:12:51
    
  
  
  statement in place of ending each print statement with a new line we are using this keyword argument of end and sending
  


  
    
      4:12:59
    
  
  
  it to be a space another one is separate that's found within the print statement maybe we have some
  


  
    
      4:13:06
    
  
  
  numbers they're all separate
  


  
    
      4:13:12
    
  
  
  strings the numbers 1 through 5 I can use the separate keyword argument then
  


  
    
      4:13:18
    
  
  
  separate each of these strings with a given character or characters I will separate each of these strings with a
  


  
    
      4:13:25
    
  
  
  dash a lot of built-in functions such as the print function they have some keyword arguments you can use let's go
  


  
    
      4:13:33
    
  
  
  over an exercise now we're going to create a function to generate a phone number but we'll need
  


  
    
      4:13:39
    
  
  
  to pass in a country code area code the first three digits in the last four digits let's define this function as
  


  
    
      4:13:46
    
  
  
  Define get phone to get a phone number we have a country
  


  
    
      4:13:53
    
  
  
  code area code first meaning first few digits then
  


  
    
      4:14:00
    
  
  
  last meaning last few digits we will return an F
  


  
    
      4:14:05
    
  
  
  string we will place our country code first Dash then our area code
  


  
    
      4:14:14
    
  
  
  Dash the first few digits Dash the last few
  


  
    
      4:14:21
    
  
  
  digits my phone number phone num equals I will invoke the get phone number
  


  
    
      4:14:27
    
  
  
  function we just created but we'll need a country code an area
  


  
    
      4:14:35
    
  
  
  code first few digits then last few digits and remember the order doesn't
  


  
    
      4:14:41
    
  
  
  necessarily matter usually I try and be consistent with the order of the parameters make up a phone number I'm in
  


  
    
      4:14:48
    
  
  
  the United States my country code is one area code 1 2
  


  
    
      4:14:54
    
  
  
  3 the next few digits will be 456 the last few will be 7890 then let's print this phone number
  


  
    
      4:15:01
    
  
  
  print phone num and here is my phone number although
  


  
    
      4:15:08
    
  
  
  you can change it up based on how you do phone numbers in your country this is typically how you would see a phone
  


  
    
      4:15:14
    
  
  
  number in the United States all right everybody so those are keyword arguments they are just arguments preceded by an
  


  
    
      4:15:21
    
  
  
  identifier that matches the name of a function's parameters it does help with readability and the Order of the
  


  
    
      4:15:27
    
  
  
  arguments doesn't matter when invoking a function it could be helpful to identify some of these arguments and well
  


  
    
      4:15:34
    
  
  
  everybody those are keyword arguments in
  


  
    
      4:15:39
    
  
  
  Python Hello friends it's me again today I need to explain arbitrary arguments
  


  
    
  34.args & **kwargs



  
    
      4:15:44
    
  
  
  arbitrary meaning a varying amount of arguments we don't know how many arguments the user is going to pass in
  


  
    
      4:15:50
    
  
  
  when they invoke a function to accept a varying amount of arguments developers tend to use these parameters of args and
  


  
    
      4:15:57
    
  
  
  quars args means arguments quars means keyword arguments you would want to
  


  
    
      4:16:03
    
  
  
  prefix each of these parameters with the unpacking operator which is an asterisk when you invoke a function that has args
  


  
    
      4:16:10
    
  
  
  or quars as parameters you will pack all of those arguments into a tupple if it's
  


  
    
      4:16:15
    
  
  
  args or a dictionary if the parameters quars let's go over an example I will
  


  
    
      4:16:21
    
  
  
  create a function to add two numbers together Define add function there will
  


  
    
      4:16:28
    
  
  
  be two parameters a comma B all I'm going to do
  


  
    
      4:16:33
    
  
  
  is return a + b i will invoke this function pass in
  


  
    
      4:16:39
    
  
  
  two arguments because we have two parameter set up one comma 2 then I'm going to print the
  


  
    
      4:16:48
    
  
  
  result big surprise there my function return three all right well what if I
  


  
    
      4:16:53
    
  
  
  would like to pass in three parameters this time well I can no longer use this
  


  
    
      4:16:58
    
  
  
  function the add function takes two positional arguments but three were given I could modify this function so
  


  
    
      4:17:05
    
  
  
  that it could accept a varying amount of arguments any amount I'm going to replace the parameters with asterisk
  


  
    
      4:17:13
    
  
  
  than the word args meaning arguments so when we use the unpacking operator
  


  
    
      4:17:18
    
  
  
  what's going to happen now is that with the arguments that we pass into this function we will pack them all into a
  


  
    
      4:17:24
    
  
  
  tupple and if you don't believe me let's test it I'm going to print the type of
  


  
    
      4:17:31
    
  
  
  args then I'm going to remove this print statement for now my parameter args is a tupple that I
  


  
    
      4:17:38
    
  
  
  could work with we can use the built-in methods of this tupple or we could iterate over
  


  
    
      4:17:43
    
  
  
  it I'm going to iterate over this Tuple for every ARG in args for every argument
  


  
    
      4:17:52
    
  
  
  in arguments what we'll do is create a variable named total to keep track of the
  


  
    
      4:17:58
    
  
  
  total total plus equals the current Arc that we're iterating over then at the
  


  
    
      4:18:05
    
  
  
  end I will return the total let's print the result print add
  


  
    
      4:18:11
    
  
  
  these three numbers together there we are my total is six then we can pass in any amount of arguments for this
  


  
    
      4:18:19
    
  
  
  time maybe five or even
  


  
    
      4:18:24
    
  
  
  one with my parameter args you can change this name to something else like
  


  
    
      4:18:29
    
  
  
  nums meaning numbers for every num in
  


  
    
      4:18:35
    
  
  
  nums total plus equals num this would work too the name of the parameter isn't
  


  
    
      4:18:42
    
  
  
  as important as as the unpacking Operator just by typical naming conventions people tend to stick with
  


  
    
      4:18:47
    
  
  
  args but the parameter name can vary let's try a different example let's
  


  
    
      4:18:53
    
  
  
  create a function to display somebody's name display name we will accept a varying amount of
  


  
    
      4:19:01
    
  
  
  arguments use the unpacking operator then follow the unpacking operator with the unique parameter name for every ARG
  


  
    
      4:19:10
    
  
  
  in args let's print each argument then replace the ending
  


  
    
      4:19:17
    
  
  
  character of my print statement with a space now sometimes people can have a
  


  
    
      4:19:22
    
  
  
  varying number of names in their full name there can be a first name middle name last name maen name a title Etc so
  


  
    
      4:19:31
    
  
  
  I'm going to pass in just a first name and a last name
  


  
    
      4:19:38
    
  
  
  SpongeBob SquarePants if if I need to add a middle
  


  
    
      4:19:43
    
  
  
  name I can do that SpongeBob Herold SquarePants or a
  


  
    
      4:19:50
    
  
  
  title Dr SpongeBob Herold
  


  
    
      4:19:56
    
  
  
  SquarePants the third yeah as I was saying with the
  


  
    
      4:20:02
    
  
  
  unpacking operator followed by a unique parameter name you can pack all of these
  


  
    
      4:20:07
    
  
  
  arguments into a tuple which you can use within this function
  


  
    
      4:20:13
    
  
  
  now let's discuss quars you use two unpacking operators then typically
  


  
    
      4:20:18
    
  
  
  people follow this with the word quars meaning keyword arguments it allows you
  


  
    
      4:20:23
    
  
  
  to pass multiple keyword arguments which we discussed in the last topic I think
  


  
    
      4:20:28
    
  
  
  this would be great for an address Define print address
  


  
    
      4:20:36
    
  
  
  function use double asterisks then we can add a parameter name but people
  


  
    
      4:20:41
    
  
  
  usually stick with with quars meaning keyword arguments just as a placeholder
  


  
    
      4:20:47
    
  
  
  I'm going to type pass pass doesn't do anything I want this program to be able to run we'll get back to this function
  


  
    
      4:20:52
    
  
  
  momentarily I'm going to invoke this function print
  


  
    
      4:20:58
    
  
  
  address then pass in multiple keyword arguments with an address you would
  


  
    
      4:21:03
    
  
  
  typically have a street a
  


  
    
      4:21:09
    
  
  
  city state depending on what country you live in you may have more or less of
  


  
    
      4:21:14
    
  
  
  these keyword arguments I live in the United States we have a state then a zip
  


  
    
      4:21:21
    
  
  
  code okay my street will be I'm just making something up here one two three
  


  
    
      4:21:26
    
  
  
  fake Street City will be
  


  
    
      4:21:31
    
  
  
  Detroit State Michigan ZIP code 5 43 2
  


  
    
      4:21:39
    
  
  
  1 just to make this look better I'm going to place each of these keyword arguments on a new line for me that's
  


  
    
      4:21:45
    
  
  
  just more readable but you do you when I pass in these keyword arguments we will
  


  
    
      4:21:50
    
  
  
  pack them into a dictionary just to prove it let's print
  


  
    
      4:21:55
    
  
  
  the type of quars look at that class
  


  
    
      4:22:02
    
  
  
  dictionary within this function you can treat quars as if it's a dictionary there's a lot of built-in methods or we
  


  
    
      4:22:09
    
  
  
  could iterate over the keys the values or both to to iterate over the values let's say for every value in our
  


  
    
      4:22:17
    
  
  
  dictionary quars Dov values method print every
  


  
    
      4:22:26
    
  
  
  value here's all the values for the keys let's change this for Loop to be for
  


  
    
      4:22:33
    
  
  
  every key in quars do Keys method print
  


  
    
      4:22:38
    
  
  
  every key here are the keys for both you could
  


  
    
      4:22:43
    
  
  
  say for every key comma value in quars
  


  
    
      4:22:48
    
  
  
  do items method print every key actually let me turn this into an F
  


  
    
      4:22:54
    
  
  
  string print every key colon
  


  
    
      4:23:03
    
  
  
  value the items method will return key value pairs we can pass in a varying
  


  
    
      4:23:09
    
  
  
  amount of keyword arguments I'm going to add an apartment number
  


  
    
      4:23:15
    
  
  
  apartment equals
  


  
    
      4:23:21
    
  
  
  100 our keyword argument of apartment was packed into a dictionary along with all these other keyword arguments so
  


  
    
      4:23:28
    
  
  
  that's kind of nice we can pass in a varying amount of keyword arguments let's cover an exercise we're going to
  


  
    
      4:23:33
    
  
  
  use both args and quarks together we will print a shipping label
  


  
    
      4:23:40
    
  
  
  Define shipping label function the parameters will be
  


  
    
      4:23:45
    
  
  
  both ARS comma quars then just for now I'm going to write past just so that
  


  
    
      4:23:53
    
  
  
  this program will work for now we'll fill in the shipping label function momentarily when we invoke the shipping
  


  
    
      4:23:58
    
  
  
  label function we will first pass in any positional arguments followed by keyword
  


  
    
      4:24:04
    
  
  
  arguments and it won't work the other way around I'll prove that in a little bit so let's say we have doctor
  


  
    
      4:24:15
    
  
  
  SpongeBob SquarePants the
  


  
    
      4:24:22
    
  
  
  thir then I'll add my keyword arguments I'm going to put this on a new line
  


  
    
      4:24:27
    
  
  
  Street equals 123 Fake
  


  
    
      4:24:33
    
  
  
  Street Apartment equals
  


  
    
      4:24:38
    
  
  
  100 City equals Detroit
  


  
    
      4:24:46
    
  
  
  State equals Michigan zip equal
  


  
    
      4:24:54
    
  
  
  54321 when we invoke this function we have a mix of arbitrary positional
  


  
    
      4:24:59
    
  
  
  arguments and arbitrary keyword arguments this shipping label function
  


  
    
      4:25:05
    
  
  
  is designed to accept both you do need args first followed by quars this
  


  
    
      4:25:10
    
  
  
  program will run but if we have have it the other way around quars followed by
  


  
    
      4:25:16
    
  
  
  args it's not going to function properly you can see that we have a syntax
  


  
    
      4:25:22
    
  
  
  error with your parameters make sure that your keyword arguments follow your positional arguments let's iterate over
  


  
    
      4:25:29
    
  
  
  the positional arguments first for every ARG in
  


  
    
      4:25:35
    
  
  
  ARS let's print each ARG then I will change the ending
  


  
    
      4:25:41
    
  
  
  character of my print statement to be a space Here's the name of the user who
  


  
    
      4:25:46
    
  
  
  we're shipping something to with the shipping label function I will print a new line then we
  


  
    
      4:25:53
    
  
  
  will iterate over all the keyword arguments for every value in my
  


  
    
      4:26:00
    
  
  
  dictionary quars do values method I will print each
  


  
    
      4:26:08
    
  
  
  value then I will change the ending character of my print statement to be a
  


  
    
      4:26:14
    
  
  
  space all right it's not looking too bad so far if you were to remove some keyword
  


  
    
      4:26:20
    
  
  
  arguments or some positional arguments this should work still which
  


  
    
      4:26:25
    
  
  
  it does I'm going to change the format of this address slightly let's add our
  


  
    
      4:26:30
    
  
  
  street on one line then the city state and zip code on the next line let's get
  


  
    
      4:26:37
    
  
  
  rid of this four Loop to print the street I'm going to print
  


  
    
      4:26:42
    
  
  
  use an FST string add a placeholder quars doget method I'm going
  


  
    
      4:26:50
    
  
  
  to get the street key with this get method you'll probably need to place
  


  
    
      4:26:55
    
  
  
  them within single quotes because if you use double quotes python gets confused as to where this FST string ends we will
  


  
    
      4:27:02
    
  
  
  use single quotes Let's test it all right we have a street on the next line
  


  
    
      4:27:08
    
  
  
  we will print the city state and zip
  


  
    
      4:27:13
    
  
  
  print fing placeholder quars doget
  


  
    
      4:27:20
    
  
  
  within single quotes the city I'll add another
  


  
    
      4:27:27
    
  
  
  placeholder quars doget
  


  
    
      4:27:33
    
  
  
  State then quars doget
  


  
    
      4:27:38
    
  
  
  zip let's see what we have all right not too bad what if the user has an apartment
  


  
    
      4:27:45
    
  
  
  keyword apartment equals number
  


  
    
      4:27:51
    
  
  
  100 well we should probably add that too within this top print statement I will add another
  


  
    
      4:27:58
    
  
  
  placeholder invoke the get method of the dictionary the key we are looking for is
  


  
    
      4:28:05
    
  
  
  apartment Dr SpongeBob SquarePants 123 Fake Street apartment number 100 Detroit
  


  
    
      4:28:10
    
  
  
  Michigan 5432 1 what if our print statement is set up to display a street
  


  
    
      4:28:16
    
  
  
  and an apartment but the user doesn't have an apartment this would display none and we
  


  
    
      4:28:23
    
  
  
  don't want that I'm thinking what we'll do is we'll place this print statement within an if
  


  
    
      4:28:29
    
  
  
  statement what we'll check is if
  


  
    
      4:28:35
    
  
  
  apartment in quars if there's an apartment key in
  


  
    
      4:28:43
    
  
  
  quars our dictionary then print this line else we will
  


  
    
      4:28:52
    
  
  
  print just the
  


  
    
      4:28:57
    
  
  
  street the person doesn't have an apartment we won't print the apartment then but if they do have an apartment
  


  
    
      4:29:04
    
  
  
  apartment equals number 100 then we will 1 2 3 fake Street
  


  
    
      4:29:11
    
  
  
  apartment number 100 here's a challenge round what if a user has a PO Box let's change apartment
  


  
    
      4:29:18
    
  
  
  to P box the string will be P box number 1,1
  


  
    
      4:29:27
    
  
  
  I suppose I'll add an else if statement else
  


  
    
      4:29:33
    
  
  
  if PO Box in our dictionary
  


  
    
      4:29:40
    
  
  
  quars let's print the the street I'll copy this line paste
  


  
    
      4:29:46
    
  
  
  it followed by a second print statement quars doget PO
  


  
    
      4:29:57
    
  
  
  Box there we are Dr SpongeBob SquarePants 123 Fake Street p. box 1001
  


  
    
      4:30:04
    
  
  
  Detroit Michigan 54321 all right everybody those are arbitrary arguments when you invoke a
  


  
    
      4:30:10
    
  
  
  function you can pass in a a varying amount of arguments set up your parameter to be args for a varying
  


  
    
      4:30:16
    
  
  
  amount of non-keyword arguments or quars for a varying amount of keyword
  


  
    
      4:30:22
    
  
  
  arguments you can set up both in your parameters which we did for this exercise and well everybody those are
  


  
    
      4:30:28
    
  
  
  arbitrary arguments in Python hey everybody so today I got to
  


  
    
  35.iterables



  
    
      4:30:35
    
  
  
  talk about iterables in Python and iterable it's a category any object or
  


  
    
      4:30:40
    
  
  
  collection that can return its elements one at a time is considered an iterable
  


  
    
      4:30:46
    
  
  
  if an object or a collection is considered an iterable then it can be iterated over in a loop for example
  


  
    
      4:30:53
    
  
  
  let's create a list of numbers numbers equals a list I'll add the numbers 1 through 5 to keep it
  


  
    
      4:30:59
    
  
  
  simple lists are considered iterable we can use them within a for
  


  
    
      4:31:04
    
  
  
  Loop in the context of a for loop we're going to be given each element one at a
  


  
    
      4:31:10
    
  
  
  time each element that we're working with we can give a temporary nickname let's say
  


  
    
      4:31:17
    
  
  
  number for every number in my iterable of numbers let's just print each
  


  
    
      4:31:26
    
  
  
  number this will give us 1 through 5 the name of the current element in our
  


  
    
      4:31:32
    
  
  
  iterable should be descriptive of what we're iterating over for example I don't want to rename the current number that
  


  
    
      4:31:38
    
  
  
  we're working with as something like blah blah blah you know this would work but other
  


  
    
      4:31:44
    
  
  
  people looking over your code might not understand what a blah blah blah is and I don't blame them each element that
  


  
    
      4:31:51
    
  
  
  we're given from our iterable the name should be descriptive of what we're given or you might see item for every
  


  
    
      4:31:59
    
  
  
  item in numbers print each item that's also a good choice now you could even iterate
  


  
    
      4:32:06
    
  
  
  backwards by enclosing our iterable within the Reversed function
  


  
    
      4:32:12
    
  
  
  so take our iterable of numbers and reverse it then we get the numbers 5 4 3
  


  
    
      4:32:19
    
  
  
  2 1 if you would rather not print each element on a new line we can replace the
  


  
    
      4:32:24
    
  
  
  new line character at the end of print statements with something else print is a function we can pass in a keyword
  


  
    
      4:32:30
    
  
  
  argument of end rather than end each line with a new line character let's end
  


  
    
      4:32:36
    
  
  
  with the space this will space out each of the elements or we could replace it with
  


  
    
      4:32:41
    
  
  
  something else or what about a dash after each element append a dash
  


  
    
      4:32:48
    
  
  
  character we could even add multiple characters such as a space a dash and a space if we so
  


  
    
      4:32:55
    
  
  
  choose it's up to you tuples are also iterable let's convert our list to a
  


  
    
      4:33:02
    
  
  
  tupple by enclosing our numbers within a set of parentheses and I no longer want this
  


  
    
      4:33:08
    
  
  
  reversed for every number in my itable of numbers print each number then again
  


  
    
      4:33:15
    
  
  
  we get the numbers 1 through 5 let's cover
  


  
    
      4:33:21
    
  
  
  sets I will create a set of fruit which I will name fruits for a set enclose any values
  


  
    
      4:33:28
    
  
  
  within a set of curly braces let's add a string of Apple a string of orange a
  


  
    
      4:33:35
    
  
  
  string of banana and a string of coconut
  


  
    
      4:33:41
    
  
  
  so with our for Loop let's say for every fruit in my iterable of fruits I will
  


  
    
      4:33:48
    
  
  
  print each fruit that would give me apple banana orange
  


  
    
      4:33:54
    
  
  
  coconut now sets they're actually not reversible I will attempt to enclose our
  


  
    
      4:34:00
    
  
  
  iterable of fruits within the Reversed function here's what happens we have a
  


  
    
      4:34:06
    
  
  
  type error set object is not reversible sets you can't rever
  


  
    
      4:34:12
    
  
  
  verse let's cover strings I will create a string of name type in your full name
  


  
    
      4:34:19
    
  
  
  I'll use my YouTube channel name for every character in my iterable of name I
  


  
    
      4:34:27
    
  
  
  would like to print each
  


  
    
      4:34:32
    
  
  
  character maybe I would rather not have each character end with a new line I
  


  
    
      4:34:37
    
  
  
  will set the keyword argument of end to be a space
  


  
    
      4:34:44
    
  
  
  last we have dictionaries which are the most complicated let's name this dictionary my
  


  
    
      4:34:50
    
  
  
  dictionary dictionaries you enclose with a set of krly braces kind of like a set
  


  
    
      4:34:56
    
  
  
  but each element is a key value pair I will add a key of A with an Associated
  


  
    
      4:35:02
    
  
  
  value of one a key of B which has a value of two a key of C which has a
  


  
    
      4:35:10
    
  
  
  value of three if you iterate over a dictionary the
  


  
    
      4:35:15
    
  
  
  dictionary is going to return all the keys but not the values we'll test that
  


  
    
      4:35:20
    
  
  
  for every key in my iterable of my dictionary let's print each
  


  
    
      4:35:28
    
  
  
  key this would give me the keys of a b and c but none of the values 1 2 or
  


  
    
      4:35:36
    
  
  
  three if you need the values we're going to follow this iterable of my dictionary
  


  
    
      4:35:42
    
  
  
  use the built-in values method this will return all the values
  


  
    
      4:35:47
    
  
  
  of your dictionary as an iterable but let's rename a key as value because now
  


  
    
      4:35:54
    
  
  
  we're working with the values then we're given all the values 1
  


  
    
      4:35:59
    
  
  
  2 and three if you need both the keys and the values you're going to use the
  


  
    
      4:36:05
    
  
  
  items method we'll be given both a key and a
  


  
    
      4:36:11
    
  
  
  value make sure that the value and the key is separated with the comma let's print each key followed by
  


  
    
      4:36:18
    
  
  
  the value we get the key of A with its value of 1 b 2 c
  


  
    
      4:36:27
    
  
  
  3 we can reformat the output however we want let's use an F string I will add
  


  
    
      4:36:33
    
  
  
  two placeholders let's print each key equals then the
  


  
    
      4:36:39
    
  
  
  value a equals = 1 b = 2 c = 3 okay everybody so those are iterables
  


  
    
      4:36:48
    
  
  
  an object or collection that can return its elements one at a time is considered an iterable meaning that object or
  


  
    
      4:36:55
    
  
  
  collection can be iterated over using a loop and well everybody those are
  


  
    
      4:37:00
    
  
  
  iterables in Python hello again so today I got to
  


  
    
  36.membership operators



  
    
      4:37:06
    
  
  
  talk about membership operators in Python they are the operators in and not
  


  
    
      4:37:12
    
  
  
  in they're used to test whether a value or a variable is found within a sequence
  


  
    
      4:37:17
    
  
  
  which include but are not limited to Strings lists topples sets or dictionaries here's an example I'm going
  


  
    
      4:37:25
    
  
  
  to create a word a secret word let's say apple I'm going to turn this into a game
  


  
    
      4:37:32
    
  
  
  I will have a user guess a letter I will accept some user
  


  
    
      4:37:38
    
  
  
  input guess a letter in the
  


  
    
      4:37:43
    
  
  
  secret word what I would like to do is check to
  


  
    
      4:37:48
    
  
  
  see if my letter is found in my word I can write the following statement if our
  


  
    
      4:37:56
    
  
  
  letter in our word in is going to return a Boolean
  


  
    
      4:38:02
    
  
  
  value of true if that letter is found or false if it's not so if our letter is
  


  
    
      4:38:08
    
  
  
  found I'm going to print the following statement I'll use an F string there is a add a placeholder
  


  
    
      4:38:17
    
  
  
  insert our letter else let's
  


  
    
      4:38:23
    
  
  
  print I'll use an F string our letter was not
  


  
    
      4:38:31
    
  
  
  found Let's test this guess a letter in the secret word I will guess a capital A
  


  
    
      4:38:38
    
  
  
  so all these letters are uppercase do take note of that is there an a there is an a let's guess
  


  
    
      4:38:46
    
  
  
  a letter that's not within this word such as z z was not found the in
  


  
    
      4:38:52
    
  
  
  membership operator will test to see if a value or a variable is found within a
  


  
    
      4:38:58
    
  
  
  sequence if it is it returns true if not it returns false or for the inverse you
  


  
    
      4:39:04
    
  
  
  could say not in if letter is not in word we would have to flip these
  


  
    
      4:39:10
    
  
  
  statements around
  


  
    
      4:39:19
    
  
  
  if this value or variable is not found in this sequence it returns true
  


  
    
      4:39:25
    
  
  
  otherwise false so it does the opposite of in guess a letter in the secret word
  


  
    
      4:39:31
    
  
  
  is there an e there is an e is there a q q was not found depending
  


  
    
      4:39:38
    
  
  
  on the statement you're trying to write you can use either in or not in whichever makes more sense in that
  


  
    
      4:39:44
    
  
  
  context let's go over another example we were searching for a value or a variable
  


  
    
      4:39:50
    
  
  
  found within a string let's try a set list tles and sets are going to behave
  


  
    
      4:39:55
    
  
  
  similarly I will create a set of students for a set you need a set of
  


  
    
      4:40:01
    
  
  
  curly braces let's add a few student names such as
  


  
    
      4:40:06
    
  
  
  SpongeBob Patrick and Sandy
  


  
    
      4:40:13
    
  
  
  I will have a user type in a student to search for we will accept some user
  


  
    
      4:40:20
    
  
  
  input enter the name of a
  


  
    
      4:40:25
    
  
  
  student we're going to check if our student is
  


  
    
      4:40:31
    
  
  
  in our sequence of students if in returns true let's print
  


  
    
      4:40:38
    
  
  
  the following I'll use an F string insert our student is a
  


  
    
      4:40:47
    
  
  
  student else we will print I'll use an F
  


  
    
      4:40:52
    
  
  
  string insert that student was not
  


  
    
      4:40:59
    
  
  
  found enter the name of a student let's search for SpongeBob
  


  
    
      4:41:04
    
  
  
  SpongeBob is a student enter the name of a student let's attempt Squidward
  


  
    
      4:41:10
    
  
  
  Squidward was not found and much like the first example we
  


  
    
      4:41:16
    
  
  
  can do the opposite see if a value or a variable is not in a
  


  
    
      4:41:21
    
  
  
  sequence we would have to switch these statements
  


  
    
      4:41:28
    
  
  
  around enter the name of a student is Sandy a student Sandy is a student enter
  


  
    
      4:41:35
    
  
  
  the name of a student is Laria student Laria was not found now now we'll cover dictionaries I
  


  
    
      4:41:43
    
  
  
  will create a dictionary of grades student grades like a grade
  


  
    
      4:41:48
    
  
  
  book let's say that the student of Sandy she will be a key has a value of
  


  
    
      4:41:57
    
  
  
  a Squidward the key of Squidward has a
  


  
    
      4:42:03
    
  
  
  value of B SpongeBob he is also a
  


  
    
      4:42:09
    
  
  
  key SpongeBob has a grade of C then
  


  
    
      4:42:15
    
  
  
  Patrick Patrick has a grade of
  


  
    
      4:42:22
    
  
  
  D here is my dictionary of grades then we'll search for a student
  


  
    
      4:42:29
    
  
  
  student equals input enter the name of a
  


  
    
      4:42:37
    
  
  
  student we'll check if Let Me Close the this if our
  


  
    
      4:42:43
    
  
  
  student is found within grades then I will print the
  


  
    
      4:42:48
    
  
  
  following we're looking for keys is there a matching key if we find that
  


  
    
      4:42:53
    
  
  
  student I'll make this an F string let's display the associated value of that
  


  
    
      4:43:00
    
  
  
  key student students
  


  
    
      4:43:07
    
  
  
  grade is I'll add a placeholder once we find a student we
  


  
    
      4:43:12
    
  
  
  have to get that value at the given key to do that we'll take our dictionary
  


  
    
      4:43:18
    
  
  
  of grades at index of student this will retrieve the value at a given
  


  
    
      4:43:25
    
  
  
  key if we don't find a student we'll output the following again I'll use an FST
  


  
    
      4:43:33
    
  
  
  string student was not found so now if I search for a student
  


  
    
      4:43:41
    
  
  
  such as SpongeBob we're given a grade we're given the value at that key that
  


  
    
      4:43:46
    
  
  
  we're searching for Let's test Sandy Sand's great as a
  


  
    
      4:43:54
    
  
  
  Squidward Squidward's great as B and Patrick Patrick's great is D but Larry
  


  
    
      4:44:02
    
  
  
  is not a student if I search for him well Larry was not
  


  
    
      4:44:07
    
  
  
  found let's go over one last example we're going to create a variable of
  


  
    
      4:44:13
    
  
  
  email it's going to be a string type in whatever your email is Bro Code
  


  
    
      4:44:21
    
  
  
  gmail.com I would like to see if this email is valid does it contain at and a
  


  
    
      4:44:27
    
  
  
  period I will write if our value of at
  


  
    
      4:44:32
    
  
  
  that character is in our email and a period is in email
  


  
    
      4:44:42
    
  
  
  we have two conditions check if at is an email and check if a period is an email
  


  
    
      4:44:48
    
  
  
  if so it's a valid email then we'll print valid
  


  
    
      4:44:56
    
  
  
  email else we will print invalid
  


  
    
      4:45:04
    
  
  
  email is my email valid that email is valid I'll get rid of the app
  


  
    
      4:45:12
    
  
  
  invalid email I'll get rid of the period following
  


  
    
      4:45:18
    
  
  
  Gmail that email is also invalid in this example we're checking
  


  
    
      4:45:24
    
  
  
  two conditions if this value is found within this sequence and this value is
  


  
    
      4:45:30
    
  
  
  found within this sequence all right everybody so those are membership operators in and not in
  


  
    
      4:45:38
    
  
  
  they will return a Boolean based on whether a value or a variable is found within a sequence which include but are
  


  
    
      4:45:45
    
  
  
  not limited to Strings lists tles sets or dictionaries and well everybody those
  


  
    
      4:45:51
    
  
  
  are membership operators in Python hey what's going on everybody so
  


  
    
  37.list comprehensions



  
    
      4:45:57
    
  
  
  in today's video I got to explain list comprehensions in Python a list comprehension is a concise way to create
  


  
    
      4:46:04
    
  
  
  lists in Python they're Compact and easier to read than traditional Loops
  


  
    
      4:46:09
    
  
  
  basically you have to follow the this formula for every value in something that's iterable meaning you can Loop
  


  
    
      4:46:16
    
  
  
  through it check some condition then do this expression so let me give you an example with using a traditional Loop
  


  
    
      4:46:23
    
  
  
  then you'll be able to see why a list comprehension is useful we're going to create a list and double the numbers 1
  


  
    
      4:46:29
    
  
  
  through 10 doubles equals an empty list using a
  


  
    
      4:46:35
    
  
  
  traditional for Loop we will say for every value let's say X
  


  
    
      4:46:41
    
  
  
  in range 1 through 11 remember that in the range function the second number is
  


  
    
      4:46:47
    
  
  
  exclusive this will give you the numbers 1 through 10 for the first iteration X
  


  
    
      4:46:52
    
  
  
  is going to be 1 then 2 3 all the way up until 10 so we'll iterate 10 times
  


  
    
      4:46:59
    
  
  
  during each iteration I'm going to take my list of doubles use the built-in
  


  
    
      4:47:04
    
  
  
  append method we will append X during each iteration that's going to be the
  


  
    
      4:47:10
    
  
  
  value time 2 so if I were to print my list of
  


  
    
      4:47:16
    
  
  
  doubles here's the result we have the numbers 1 through 10 all doubled 2 4 6 8
  


  
    
      4:47:23
    
  
  
  10 12 14 16 18 20 so this is a lot to write we can use a list comprehension to
  


  
    
      4:47:30
    
  
  
  make this code more Compact and easier to read here's how we need a name for
  


  
    
      4:47:36
    
  
  
  this list let's say doubles equals an empty list within our list list will
  


  
    
      4:47:41
    
  
  
  follow this formula we have an expression for Value
  


  
    
      4:47:48
    
  
  
  in iterable and optionally we can check a condition we'll do this in exercises
  


  
    
      4:47:53
    
  
  
  later on in this topic we'll begin with for every value let's say X in our
  


  
    
      4:48:00
    
  
  
  iterable our iterable is going to be a range 1 through 10 again for the first
  


  
    
      4:48:08
    
  
  
  iteration X will be 1 then the second iteration X will be 2 all the way up
  


  
    
      4:48:13
    
  
  
  until 10 during each iteration what would we like to do with X our value
  


  
    
      4:48:19
    
  
  
  let's take X multiply it by two and return it then if I was to print my list of
  


  
    
      4:48:27
    
  
  
  doubles we have the numbers 2 4 6 8 10 12 14 16 18 20 for every value in this
  


  
    
      4:48:34
    
  
  
  iterable do this multiply it by two this is a list comprehension it's a concise
  


  
    
      4:48:40
    
  
  
  way to create list in Python we'll go over a few exercises so this time we will triple
  


  
    
      4:48:47
    
  
  
  each number we'll create a list of triples equals let's say this time for
  


  
    
      4:48:53
    
  
  
  every Y in range 1 through 10 so we have to write
  


  
    
      4:49:00
    
  
  
  11 take Y and multiply it by 3 then we
  


  
    
      4:49:06
    
  
  
  will print our list of triples 3 6 9 12 15 18 so on and so forth let's Square
  


  
    
      4:49:13
    
  
  
  each number we'll create a list of squares for every Z in range 1-
  


  
    
      4:49:23
    
  
  
  10 to square a number we take that number multiply it by
  


  
    
      4:49:29
    
  
  
  itself so the numbers 1 through 10^ squar is 1 4 9 16 15 36 49 64 81 100 so
  


  
    
      4:49:40
    
  
  
  10 * 10 is 100 now we're going to work with strings we'll create a list of fruits
  


  
    
      4:49:48
    
  
  
  equals think of some fruit these are all going to be strings Apple
  


  
    
      4:49:54
    
  
  
  orange banana coconut I'm going to take each string in
  


  
    
      4:50:00
    
  
  
  this list and make it uppercase we could assign this to a new list such as uppercase
  


  
    
      4:50:07
    
  
  
  fruits or we can simply just reassign it just to keep it simple I'll reassign
  


  
    
      4:50:13
    
  
  
  it so again we're following this formula I like to begin with the four value in
  


  
    
      4:50:19
    
  
  
  iterable portion for every fruit in our iterable of fruits what do we want to do
  


  
    
      4:50:28
    
  
  
  well let's take each fruit take each fruit use the built-in upper method to make it
  


  
    
      4:50:34
    
  
  
  uppercase then I'm going to print my list of fruits
  


  
    
      4:50:41
    
  
  
  each string in this list is now all uppercase you could even cut down on one of the steps with our iterable of fruits
  


  
    
      4:50:49
    
  
  
  I will place this
  


  
    
      4:50:54
    
  
  
  list and this does work too although I do find this a little more difficult to read but you can take either option how
  


  
    
      4:51:02
    
  
  
  about instead of making each string uppercase we'll take the first letter of each string then put it within a new
  


  
    
      4:51:09
    
  
  
  list so let's take each fruit at index of zero that will give us the first
  


  
    
      4:51:15
    
  
  
  letter we'll place it within a new list of fruit chars meaning
  


  
    
      4:51:23
    
  
  
  characters here's the result a o b c for every fruit in our list of
  


  
    
      4:51:30
    
  
  
  fruits return the first character of each string a o b c now we'll work with
  


  
    
      4:51:38
    
  
  
  conditions we'll create a list of numbers both
  


  
    
      4:51:43
    
  
  
  negative and positive numbers equals let's say one -2 3 -4 5
  


  
    
      4:51:53
    
  
  
  -6 we'll create a list comprehension to create a new list where all of the numbers are positive our new list will
  


  
    
      4:52:01
    
  
  
  be positive nums equals we'll write a list comprehension for every let's say
  


  
    
      4:52:09
    
  
  
  num in Num numbers we'll write a
  


  
    
      4:52:15
    
  
  
  condition return this number if our num is greater than or equal to zero we
  


  
    
      4:52:23
    
  
  
  do need an expression if we're not modifying each value we can just return
  


  
    
      4:52:29
    
  
  
  the value of num during this exercise we're more focused on the if condition rather than
  


  
    
      4:52:36
    
  
  
  the expression if our value of num meets this condition simply return it and
  


  
    
      4:52:41
    
  
  
  place it within this new list let's print our list of positive
  


  
    
      4:52:47
    
  
  
  numbers and we have 135 let's do this with negative numbers
  


  
    
      4:52:53
    
  
  
  I'll just copy what we have and change a few things around this list will be negative numbers negative nums for every
  


  
    
      4:53:02
    
  
  
  num in numbers check this condition check to see if num is less than zero if
  


  
    
      4:53:08
    
  
  
  so return that number let's print our list of negative numbers -2 -4
  


  
    
      4:53:16
    
  
  
  -6 let's check to see if there's any even numbers even nums equals for every num
  


  
    
      4:53:26
    
  
  
  in numbers check to see if our num is
  


  
    
      4:53:31
    
  
  
  divisible by two and we can do that with the modulus operator followed by two the
  


  
    
      4:53:36
    
  
  
  modulus operator will give you the remainder of any Division if our number is even number modulus 2 will equal Zer
  


  
    
      4:53:45
    
  
  
  if it's even this is going to equal zero if it's odd it's going to be one we're not modifying our value we're just going
  


  
    
      4:53:52
    
  
  
  to return our number our list of even numbers should
  


  
    
      4:53:58
    
  
  
  be -2 -4 -6 let me add one more value
  


  
    
      4:54:03
    
  
  
  let's add positive 8 -24 -6 positive 8
  


  
    
      4:54:11
    
  
  
  maybe we'll add one more -7 okay let's find any odd numbers let's
  


  
    
      4:54:18
    
  
  
  copy this line of code replace even numbers with odd numbers if num modulus 2 is equal to
  


  
    
      4:54:28
    
  
  
  one that means that number doesn't divide by two evenly then we'll print our odd
  


  
    
      4:54:34
    
  
  
  numbers 1 3 57 all these numbers are odd
  


  
    
      4:54:40
    
  
  
  here's the last exercise we'll create a list of
  


  
    
      4:54:47
    
  
  
  grades we'll create a new list of any grades that are considered passing meaning they scored 60 or above so let's
  


  
    
      4:54:55
    
  
  
  say one student has a grade of 85 another with of 42
  


  
    
      4:55:01
    
  
  
  79 90 56
  


  
    
      4:55:08
    
  
  
  61 let's say say 30 I will create a new list of passing
  


  
    
      4:55:16
    
  
  
  grades equals again follow this formula for every grade in
  


  
    
      4:55:23
    
  
  
  grades check our condition if our grade is greater than or equal to 60 we will
  


  
    
      4:55:32
    
  
  
  return the current grade then let's print our list of
  


  
    
      4:55:39
    
  
  
  passing grades that will give us 85 79 90 and 61
  


  
    
      4:55:46
    
  
  
  all of these grades are greater than or equal to 60 all right everybody so that
  


  
    
      4:55:52
    
  
  
  is a list comprehension it's a concise way to create lists in Python they're
  


  
    
      4:55:57
    
  
  
  Compact and easier to read than traditional Loops remember for every value in your iterable optionally you
  


  
    
      4:56:04
    
  
  
  can check a condition you can write an expression to modify that value if you choose and return something all right
  


  
    
      4:56:11
    
  
  
  everybody so those are list comprehensions in Python hey everybody so today I'm going
  


  
    
  38.match-case statements



  
    
      4:56:18
    
  
  
  to explain match case statements in Python if you're familiar with other programming languages this is also known
  


  
    
      4:56:25
    
  
  
  as a switch match case statements are alternatives to using many LF
  


  
    
      4:56:31
    
  
  
  statements we execute some code if a value matches a case the benefits of
  


  
    
      4:56:37
    
  
  
  using a match case statement is that they're cleaner and the syntax is more readable in this sample program I have a
  


  
    
      4:56:44
    
  
  
  function there is one parameter a day day will be a number ideally a number 1
  


  
    
      4:56:50
    
  
  
  through 7 depending on this number we'll return a string corresponding to the day of the week if day equals 1 then it is
  


  
    
      4:57:01
    
  
  
  Sunday two it is Monday all the way up to 7 where it will be Saturday I do have a
  


  
    
      4:57:10
    
  
  
  else Clause if we pass in something that's not valid like
  


  
    
      4:57:15
    
  
  
  pizza pizza is not a day but it really should be not a valid day a cleaner and
  


  
    
      4:57:21
    
  
  
  more readable alternative is to use a match case statement instead of many elif
  


  
    
      4:57:27
    
  
  
  statements here's how I'm going to take my if and many elif statements and
  


  
    
      4:57:33
    
  
  
  enclose them within a match case match case the case is going to be
  


  
    
      4:57:40
    
  
  
  the value we're examining the case will be day colon we're going to examine our value
  


  
    
      4:57:48
    
  
  
  of day against matching cases we're going to replace if day
  


  
    
      4:57:55
    
  
  
  equals with the following just simply case so let's do that with each of these
  


  
    
      4:58:01
    
  
  
  statements
  


  
    
      4:58:13
    
  
  
  if you have an else Clause you're instead going to have a case of
  


  
    
      4:58:18
    
  
  
  underscore an underscore and match case statement is a wild card we will perform
  


  
    
      4:58:24
    
  
  
  this case if there are no matching cases this case would function as the else
  


  
    
      4:58:29
    
  
  
  statement here's what we're working with now if I pass in one and return the day
  


  
    
      4:58:34
    
  
  
  of the week we would get Sunday two would be Monday 3
  


  
    
      4:58:42
    
  
  
  Tuesday 7 is Saturday and then let's try that
  


  
    
      4:58:48
    
  
  
  day of pizza that is not a valid day a match
  


  
    
      4:58:53
    
  
  
  case statement is an alternative to using many l statements I find this much
  


  
    
      4:58:58
    
  
  
  easier to read than the many l statements both would technically function let's go over a second example
  


  
    
      4:59:06
    
  
  
  we will create a function of is weekend we have to pass in a day this time our
  


  
    
      4:59:13
    
  
  
  day is going to be a string such as Monday the value for each case instead
  


  
    
      4:59:19
    
  
  
  of a number is going to be a string if our day matches a case of
  


  
    
      4:59:25
    
  
  
  Sunday let's return how about a Boolean of true we're checking to see if it's
  


  
    
      4:59:32
    
  
  
  the weekend if our day is equal to a case of
  


  
    
      4:59:37
    
  
  
  Monday then we will return false let's do this with the other days I'm going to
  


  
    
      4:59:43
    
  
  
  fast forward the
  


  
    
      5:00:02
    
  
  
  video we will call the function of is weekend then pass in a day of the week
  


  
    
      5:00:07
    
  
  
  such as Monday so is Sunday the weekend
  


  
    
      5:00:13
    
  
  
  that is true Monday that is false
  


  
    
      5:00:20
    
  
  
  Saturday that is true and we do have a wild card case if there are no
  


  
    
      5:00:25
    
  
  
  matches is pizza a day of the weekend that is false there is a way we can
  


  
    
      5:00:31
    
  
  
  modify this match case too we tend to be repeating ourselves a lot the days Monday through Friday all return false
  


  
    
      5:00:39
    
  
  
  we're going to use the or logical operator which is represented with a vertical bar if the case of
  


  
    
      5:00:48
    
  
  
  Saturday or Sunday return true if the case is
  


  
    
      5:00:54
    
  
  
  Monday or Tuesday you can get rid of that or
  


  
    
      5:01:05
    
  
  
  Wednesday or Thursday
  


  
    
      5:01:12
    
  
  
  or Friday then we will return
  


  
    
      5:01:20
    
  
  
  false we can keep our Wild Card case so is
  


  
    
      5:01:26
    
  
  
  Saturday part of the weekend that is true is
  


  
    
      5:01:31
    
  
  
  Monday false Sunday true Friday
  


  
    
      5:01:41
    
  
  
  false and pizza we have our Wild Card case that
  


  
    
      5:01:47
    
  
  
  gives us false all right everybody so those are match case statements they're similar to switches in other programming
  


  
    
      5:01:53
    
  
  
  languages they're an alternative to using many LF statements we execute some
  


  
    
      5:01:59
    
  
  
  code if a value matches a case the benefits is that the code is cleaner and
  


  
    
      5:02:05
    
  
  
  the syntax is more readable and well everybody those are match case statements in Python
  


  
    
      5:02:12
    
  
  
  on Hello friends it's me again today I'm going to explain modules a module is
  


  
    
  39.modules



  
    
      5:02:17
    
  
  
  just a python file containing code you want to include in your program you use the import keyword to include a module
  


  
    
      5:02:24
    
  
  
  you can use built-in modules or create your own sometimes it's useful to break up a large program into reusable
  


  
    
      5:02:31
    
  
  
  separate files for a list of all the modules found within the standard python Library you can use the help function
  


  
    
      5:02:37
    
  
  
  pass in the word modules and then we would need to print
  


  
    
      5:02:44
    
  
  
  this here are many of the different modules available to you a few you may recognize would be math string time one
  


  
    
      5:02:52
    
  
  
  of my favorite names of a module is the pickle module unfortunately it doesn't have anything to do with Pickles it's
  


  
    
      5:02:58
    
  
  
  used for serialization to list all of the different variables and functions found within the module you can place
  


  
    
      5:03:03
    
  
  
  that name of the module within the help function for example with the math module here are a few different
  


  
    
      5:03:10
    
  
  
  variables we would have access to and a few different functions to include a module we would
  


  
    
      5:03:16
    
  
  
  type import the name of the module for example math I now have access to everything found within the math module
  


  
    
      5:03:24
    
  
  
  including those variables and functions to access those variables and functions I would normally type the name of the
  


  
    
      5:03:29
    
  
  
  module dot the name of the variable or function such as Pi then let's print
  


  
    
      5:03:35
    
  
  
  this PI from the math module is 3.14 and some change another
  


  
    
      5:03:42
    
  
  
  way to import is to type import the name of the module as you can give your
  


  
    
      5:03:48
    
  
  
  module a nickname an alias whatever you think of such as m m short for math we
  


  
    
      5:03:54
    
  
  
  would no longer refer to this module as math we would refer to it as our Alias
  


  
    
      5:04:02
    
  
  
  M using an alias would reduce some of the typing you have to use if you have a very long module name another way to
  


  
    
      5:04:09
    
  
  
  import import is to use from the name of the module import something specific Pi
  


  
    
      5:04:15
    
  
  
  for instance you would no longer need the module name from math import Pi Pi would be
  


  
    
      5:04:23
    
  
  
  included within our namespace however I tend to not use from import as much just
  


  
    
      5:04:28
    
  
  
  because it's possible there could be name conflicts here's an example let's say from math import e e is an
  


  
    
      5:04:35
    
  
  
  exponential constant e is
  


  
    
      5:04:41
    
  
  
  2.71 what if I was to create a program where we have four variables named A B C
  


  
    
      5:04:47
    
  
  
  D A = 1 b = 2 c = 3 D = 4 then I'm going
  


  
    
      5:04:53
    
  
  
  to print E from the math module to the power of
  


  
    
      5:04:59
    
  
  
  a that would give me 2.71 then let's do this with b c and
  


  
    
      5:05:05
    
  
  
  d e to the power of b e to the power of C e to the power of D here are the
  


  
    
      5:05:12
    
  
  
  results let's say we have a different variable e e will be
  


  
    
      5:05:18
    
  
  
  five then I will print e to the power of E we have
  


  
    
      5:05:24
    
  
  
  imported E from the math module when we have declared all of these variables technically what we've done is we have
  


  
    
      5:05:31
    
  
  
  created another version of e we will end up using the second version rather than the version that we have imported from
  


  
    
      5:05:37
    
  
  
  the math module all my my results are now different and it's possible you may not realize it I like to be more
  


  
    
      5:05:44
    
  
  
  explicit I'm going to import math if I'm using a variable or function from a
  


  
    
      5:05:49
    
  
  
  module I much prefer to prefix that variable name or function with the name of the module in which it's from math. e
  


  
    
      5:05:57
    
  
  
  to the power of a to the power of B to the power of C to the power of d math. e
  


  
    
      5:06:03
    
  
  
  to the power of our variable e and these results are to be expected
  


  
    
      5:06:10
    
  
  
  Now to create a module what we're going to do is right click on our project folder go to new
  


  
    
      5:06:16
    
  
  
  python file think of a module name maybe example then click python
  


  
    
      5:06:22
    
  
  
  file we now have two tabs Main and example declare whatever you would like
  


  
    
      5:06:28
    
  
  
  within this module let's create our own variable Pi Pi equals
  


  
    
      5:06:34
    
  
  
  3.14159 then a few functions let's create a function to square an argument that's passed then Define Square we will
  


  
    
      5:06:42
    
  
  
  accept an argument which we will name X then return X to the^ of two let's
  


  
    
      5:06:51
    
  
  
  define a cube function we will accept one argument then return X to the^ of 3
  


  
    
      5:06:59
    
  
  
  maybe a circumference function Define circumference we will accept a
  


  
    
      5:07:05
    
  
  
  radius then return 2 * Pi * radius then
  


  
    
      5:07:12
    
  
  
  an area function to calculate the area of a circle we will accept a radius as
  


  
    
      5:07:17
    
  
  
  an argument then return Pi * radius to
  


  
    
      5:07:22
    
  
  
  the power of 2 all right here is our example module
  


  
    
      5:07:28
    
  
  
  within our main Python program let's import the name of our module which we named example we now have access to
  


  
    
      5:07:35
    
  
  
  everything within this module I'm going to declare a variable result and set it to the name of my
  


  
    
      5:07:42
    
  
  
  module do PI then I will print the result which is
  


  
    
      5:07:50
    
  
  
  3.14159 let's utilize the square function result equals example do Square
  


  
    
      5:07:58
    
  
  
  let's Square three which is n let's use the cube
  


  
    
      5:08:06
    
  
  
  function that would be 27
  


  
    
      5:08:13
    
  
  
  circumference that would give me 18.8 then
  


  
    
      5:08:19
    
  
  
  area that would be 28.2 that's how to create your own module it can be useful at times to
  


  
    
      5:08:26
    
  
  
  separate your program into individual files all right everybody in conclusion a module is just a file containing code
  


  
    
      5:08:33
    
  
  
  you want to include in your program you use import to include a module you can use built-in modules or create your own
  


  
    
      5:08:40
    
  
  
  if you do need a list of the modules available to you again you can use the help function then pass in the word modules and well everybody that's how to
  


  
    
      5:08:47
    
  
  
  get started with modules in Python hey friends it's me again today I'm going to explain both variable scope
  


  
    
  40.scope resolution



  
    
      5:08:55
    
  
  
  and scope resolution variable scope is where a variable is both visible and
  


  
    
      5:09:00
    
  
  
  accessible with scope resolution when we're using a variable there is a certain order known as the lb rule in
  


  
    
      5:09:07
    
  
  
  which we locate that variable local enclosed Global built-in we'll get to
  


  
    
      5:09:12
    
  
  
  this momentarily let's begin with variable scope I have two functions Function One function two within
  


  
    
      5:09:20
    
  
  
  function 1 a equal 1 then we print a within function 2 b equal 2 then we
  


  
    
      5:09:26
    
  
  
  print B if I were to invoke these functions let's invoke function one then
  


  
    
      5:09:31
    
  
  
  function two we would print one then two variables declared within a function
  


  
    
      5:09:38
    
  
  
  have a local scope variable a is local to function one variable B is local to
  


  
    
      5:09:44
    
  
  
  function 2 within function one if I were to print B and function two if I were to print a we would run into a name error
  


  
    
      5:09:52
    
  
  
  name B is not defined and the same thing would apply with a functions can't see
  


  
    
      5:09:58
    
  
  
  inside of other functions imagine that we're function one this is our house we
  


  
    
      5:10:03
    
  
  
  can see everything that's going on inside of our house but function two is our neighbor's house we can't see what's
  


  
    
      5:10:09
    
  
  
  going on inside of our neighbor's house we have no idea what B is with function 2 function 2 has no idea what a is
  


  
    
      5:10:17
    
  
  
  that's where variable scope comes in it's where a variable is visible and accessible functions can't see inside of
  


  
    
      5:10:24
    
  
  
  other functions but they can see inside of their own function that's why we sometimes pass arguments to functions so
  


  
    
      5:10:30
    
  
  
  that our functions are aware of them using this concept we could create different versions of the same variable
  


  
    
      5:10:37
    
  
  
  let's rename a to be X and B to be X as well then I will print
  


  
    
      5:10:44
    
  
  
  X we have two different versions of x a local version of X found within function
  


  
    
      5:10:50
    
  
  
  one and a local version of X found within function 2 whenever we utilize a variable we will first look to see if
  


  
    
      5:10:57
    
  
  
  there's any local instance of that variable if there isn't we would move to the enclosed scope with an enclosed
  


  
    
      5:11:04
    
  
  
  scope one example is when you have a function declared within another function I'm going to place function two
  


  
    
      5:11:11
    
  
  
  within function one this is allowed in Python this is a more advanced concept we'll cover this more in the future so
  


  
    
      5:11:18
    
  
  
  I'm going to eliminate this print statement let's get rid of function two at the end of function one we will
  


  
    
      5:11:25
    
  
  
  invoke function two like I said it's pretty complex we won't be using this until much later
  


  
    
      5:11:31
    
  
  
  within function two if I was to print X we would use the local version or x
  


  
    
      5:11:37
    
  
  
  equals 2 if I was to eliminate this variable
  


  
    
      5:11:42
    
  
  
  declaration we would use the enclosed version instead where x equals 1 there's
  


  
    
      5:11:47
    
  
  
  an order of operations use any local variables first then enclosed variables
  


  
    
      5:11:53
    
  
  
  we're printing X within function 2 since X wasn't found within the local scope we
  


  
    
      5:11:58
    
  
  
  would use x within the enclosed scope but like I said that's a more advanced topic you should at least be aware of it
  


  
    
      5:12:05
    
  
  
  let's move on to the global scope Global meaning outside of any function I will eliminate these variable
  


  
    
      5:12:13
    
  
  
  declarations within function one we're printing X and within function two we're also printing X I will declare a global
  


  
    
      5:12:20
    
  
  
  version of X where x equal 3 x is outside of any functions when I run this
  


  
    
      5:12:27
    
  
  
  program we're printing three twice once for function one and once for function 2
  


  
    
      5:12:34
    
  
  
  there's no longer a local version of X for both of these functions if there were we would end end up using these
  


  
    
      5:12:39
    
  
  
  local versions instead Function One prints one function two prints two if there's no local version as well as no
  


  
    
      5:12:47
    
  
  
  enclosed version we would move on to the global version where x equal 3 last in
  


  
    
      5:12:53
    
  
  
  our order is built in I think what we'll do though is from math import e e is an
  


  
    
      5:13:00
    
  
  
  exponential constant I'm going to print what e is e is
  


  
    
      5:13:06
    
  
  
  2.71 e is built in I will create a function to print e Define function one
  


  
    
      5:13:14
    
  
  
  all I'm doing is printing e then we should invoke it invoke function
  


  
    
      5:13:20
    
  
  
  one if I was to set e to be a different value like three what we're doing
  


  
    
      5:13:26
    
  
  
  technically is creating two different versions of e variables can share the same name as long as they're within a
  


  
    
      5:13:32
    
  
  
  different scope we have a buil-in version of e and a global version of e
  


  
    
      5:13:37
    
  
  
  if I was to print e now it would print my Global version because using the lb
  


  
    
      5:13:43
    
  
  
  order we would first look for any local version of e then enclosed version then
  


  
    
      5:13:49
    
  
  
  Global which we do have one of then lastly built-in all right everybody so
  


  
    
      5:13:54
    
  
  
  in conclusion variable scope is just where a variable is both visible and accessible python has a scope resolution
  


  
    
      5:14:01
    
  
  
  order lb if we're using a variable we will first look in the local scope for that
  


  
    
      5:14:06
    
  
  
  variable if we don't find that variable in the local scope we will move over to an enclosed scope then Global then
  


  
    
      5:14:13
    
  
  
  built-in we will have more practice with this in the future and well everybody that is both variable scope and scope
  


  
    
      5:14:20
    
  
  
  resolution in Python hey everybody so today I got to talk about this if statement if Dunder
  


  
    
  41.if name == 'main'



  
    
      5:14:27
    
  
  
  name is equal to a string of Dunder main when you see this if statement it's
  


  
    
      5:14:32
    
  
  
  usually followed by a call to a function named main or something similar a
  


  
    
      5:14:37
    
  
  
  majority of the driving code behind behind a program is usually found within some sort of main method when you see
  


  
    
      5:14:43
    
  
  
  this if statement basically speaking it means that this script can be imported
  


  
    
      5:14:48
    
  
  
  or it can run Standalone functions and classes in this module can be reused in other programs without the main block of
  


  
    
      5:14:55
    
  
  
  code running sometimes you would like the functionality of a program without executing the main body of code a good
  


  
    
      5:15:01
    
  
  
  example could be a library in a python Library we would like to import some of the useful functions such as the math
  


  
    
      5:15:08
    
  
  
  module but if we were to run that Library directly instead of importing it we could instead display a help page but
  


  
    
      5:15:15
    
  
  
  if we're importing that Library we don't necessarily want to display that help page only if we're running it directly
  


  
    
      5:15:21
    
  
  
  in many Python scripts you'll see the statement of if Thunder name is equal to main if we're not running this program
  


  
    
      5:15:28
    
  
  
  directly don't do it in this example we're going to delete our main python script be sure to recreate it at the end
  


  
    
      5:15:34
    
  
  
  of this topic in case I forget to mention that we will create two scripts go to file new python
  


  
    
      5:15:42
    
  
  
  file script one file new python file script
  


  
    
      5:15:52
    
  
  
  2 we have to add new run configurations for script one and script 2 so if you go
  


  
    
      5:15:58
    
  
  
  to the top go to run edit configurations we will add a new run
  


  
    
      5:16:03
    
  
  
  configuration select python select a new script path to script one
  


  
    
      5:16:09
    
  
  
  okay apply again we have to do this with script 2 add
  


  
    
      5:16:16
    
  
  
  python select a script path of script 2 okay apply then okay using the dropdown
  


  
    
      5:16:25
    
  
  
  menu we can select which run configuration we would like would we like to run our main python file but we
  


  
    
      5:16:31
    
  
  
  have deleted it do we want to run script one or script two for the time being
  


  
    
      5:16:37
    
  
  
  we'll select script one within script one if I was to
  


  
    
      5:16:42
    
  
  
  print then call the dur function dur meaning directory python has all of
  


  
    
      5:16:48
    
  
  
  these built-in attributes if you're not familiar with object-oriented programming for now think of an
  


  
    
      5:16:54
    
  
  
  attribute as a variable Dunder name is a special type of variable Dunder meaning
  


  
    
      5:17:00
    
  
  
  double underscore if I was to print what's contained within Dunder
  


  
    
      5:17:05
    
  
  
  name we would receive a string of Dunder main that's why in a script you may see
  


  
    
      5:17:11
    
  
  
  the statement if Dunder name is equal to a string of Dunder
  


  
    
      5:17:19
    
  
  
  main if so then you usually call a function named main to start your program I'm going to undo that so let's
  


  
    
      5:17:27
    
  
  
  import script 2 from script 2
  


  
    
      5:17:33
    
  
  
  import everything asterisk means everything within script script 2 I will
  


  
    
      5:17:40
    
  
  
  print Dunder name and we'll see what's within it again I'm running script
  


  
    
      5:17:48
    
  
  
  one within script two Dunder name is equal to a string of script two the name
  


  
    
      5:17:55
    
  
  
  of the Python script however within script one Dunder name is equal to a string of Dunder main
  


  
    
      5:18:03
    
  
  
  this means I am running script one directly let's delete this import then go to script 2 import script
  


  
    
      5:18:10
    
  
  
  one from script One Import asterisk meaning all we're now going to change
  


  
    
      5:18:17
    
  
  
  our run configuration from script one to script 2 we are running script 2
  


  
    
      5:18:23
    
  
  
  directly now Dunder name within script one is the name of the Python script
  


  
    
      5:18:28
    
  
  
  script one Dunder name within script 2 is now Dunder
  


  
    
      5:18:35
    
  
  
  main so by adding this if statement of Dunder name is equal to Dunder
  


  
    
      5:18:43
    
  
  
  main we can check to see which file is being run directly if Dunder name equals Dunder
  


  
    
      5:18:50
    
  
  
  main we will call a function of main to contain the main body of our program but
  


  
    
      5:18:55
    
  
  
  we need to Define this function define main our main function will contain the
  


  
    
      5:19:02
    
  
  
  majority of our python code anything that's not already within a function so let's print
  


  
    
      5:19:11
    
  
  
  this is script one then we'll Define another
  


  
    
      5:19:17
    
  
  
  function of favorite food we will have one parameter of
  


  
    
      5:19:23
    
  
  
  food let's print the following message I'll use an F string your favorite food is add a
  


  
    
      5:19:32
    
  
  
  placeholder add our parameter of food within our main function let's call
  


  
    
      5:19:38
    
  
  
  the favorite food function pass in your favorite food as a string I'll type in
  


  
    
      5:19:44
    
  
  
  pizza then let's print the word goodbye we're going to run script
  


  
    
      5:19:52
    
  
  
  one run it here's the result from the top down all of our code
  


  
    
      5:19:58
    
  
  
  is within functions we skip over it because we're not calling it quite yet the first thing we do in this program is
  


  
    
      5:20:04
    
  
  
  check this if statement if Dunder name is equal to Dunder are we running this program directly
  


  
    
      5:20:12
    
  
  
  which we are we're running script one if so call the main method to start the program we print this is script one your
  


  
    
      5:20:19
    
  
  
  favorite food is pizza goodbye now I'm going to go to script two delete our
  


  
    
      5:20:25
    
  
  
  print statement change the Run configuration to script 2 and run it nothing should
  


  
    
      5:20:31
    
  
  
  happen that's good now if we were missing this if statement of if under name is equal to Main
  


  
    
      5:20:38
    
  
  
  then we delete our main function here's what would happen we're importing script one but we're running
  


  
    
      5:20:45
    
  
  
  script two this is script one your favorite food is pizza goodbye I don't want this
  


  
    
      5:20:52
    
  
  
  code to execute we're not running it directly that's why we have that if statement if under name is equal to main
  


  
    
      5:21:00
    
  
  
  I only want to run this code if we're running it directly so what we'll do within script
  


  
    
      5:21:06
    
  
  
  2 now is Define a function of favorite drink there's one parameter of
  


  
    
      5:21:15
    
  
  
  drink I will print use an F string your favorite drink is I'll add a
  


  
    
      5:21:24
    
  
  
  placeholder we'll add our parameter of drink let's print the message this is script
  


  
    
      5:21:33
    
  
  
  2 we will call from script one the favorite food function
  


  
    
      5:21:39
    
  
  
  pass in your favorite food this time I'll say Sushi let's call our favorite drink
  


  
    
      5:21:46
    
  
  
  function favorite drink I'll pass in
  


  
    
      5:21:51
    
  
  
  coffee then we will print goodbye okay we are running script
  


  
    
      5:21:59
    
  
  
  2 this is script 2 your favorite food is Sushi your favorite drink is coffee
  


  
    
      5:22:04
    
  
  
  goodbye we're running script to but we're importing the functionality of the
  


  
    
      5:22:10
    
  
  
  favorite food function from script one sometimes from another python script you want to borrow something but you don't
  


  
    
      5:22:17
    
  
  
  want to run the main body of code directly I just want to borrow this function from script one and that's
  


  
    
      5:22:22
    
  
  
  it script 2 can be run as a standalone program but I can't import it without
  


  
    
      5:22:27
    
  
  
  this body of code running I can add that if statement if Thunder name is equal to a string of Thunder
  


  
    
      5:22:37
    
  
  
  main if we're running this program directly execute this code so let's call
  


  
    
      5:22:42
    
  
  
  a function of main Define main then Place main body of code within
  


  
    
      5:22:51
    
  
  
  it if I run script 2 we have the same message so by adding this if statement
  


  
    
      5:22:57
    
  
  
  of if name is equal to main this script can be run as a standalone program or it
  


  
    
      5:23:03
    
  
  
  can be imported a more practical example of this could be a python Library you can import the library for functionality
  


  
    
      5:23:11
    
  
  
  but if you run the library directly you could instead display a help page it is
  


  
    
      5:23:16
    
  
  
  good practice to include if Dunder name equals Dunder main it makes your code more modular helps with readability
  


  
    
      5:23:23
    
  
  
  leaves no Global variables and avoid unintended execution and well everybody
  


  
    
      5:23:29
    
  
  
  that is the purpose of if Dunder name equals Dunder Main in Python hey what's going on everybody so
  


  
    
  42.banking program



  
    
      5:23:36
    
  
  
  in this video we're going to create a very Simple banking program using python this is meant to be more of an exercise
  


  
    
      5:23:42
    
  
  
  to get us used to working with functions when creating a project I like to divide that project into smaller sections then
  


  
    
      5:23:48
    
  
  
  handle them one at a time so we'll do that by declaring all the functions we'll need first with the banking
  


  
    
      5:23:53
    
  
  
  program we'll need to show a user their balance we'll Define a function to show
  


  
    
      5:24:00
    
  
  
  balance for the time being I'll write pass just as a placeholder we'll need to make a deposit
  


  
    
      5:24:07
    
  
  
  Define deposit make
  


  
    
      5:24:12
    
  
  
  withdrawal Define withdraw near the end of this project we
  


  
    
      5:24:19
    
  
  
  will be creating a main function and placing the main body of our code within it we'll handle that near the end just
  


  
    
      5:24:25
    
  
  
  to contain everything we have our three functions with our banking program we'll need to show a balance make a deposit or
  


  
    
      5:24:33
    
  
  
  make a withdrawal what are some variables we'll need well we'll need a balance which I will set to be zero
  


  
    
      5:24:40
    
  
  
  initially I will also create a Boolean of is running this will be true if at
  


  
    
      5:24:46
    
  
  
  any time we said is running to be false we'll exit the program so with the majority of our code
  


  
    
      5:24:54
    
  
  
  we'll place it within a while loop while is running you can check to see if this
  


  
    
      5:24:59
    
  
  
  is equal to true but since this is a Boolean that's not necessary we will just say while is
  


  
    
      5:25:06
    
  
  
  running if is running becomes false false we'll exit the while loop within our while loop we'll print some sort of
  


  
    
      5:25:12
    
  
  
  Welcome message let's print banking
  


  
    
      5:25:20
    
  
  
  program then list some options let's print
  


  
    
      5:25:25
    
  
  
  one show
  


  
    
      5:25:31
    
  
  
  balance two deposit
  


  
    
      5:25:40
    
  
  
  three will be
  


  
    
      5:25:45
    
  
  
  withdraw four will be
  


  
    
      5:25:52
    
  
  
  exit afterwards we will set a choice variable to equal some user
  


  
    
      5:25:58
    
  
  
  input input enter your choice 1- 4 We're
  


  
    
      5:26:07
    
  
  
  encouraging a user to to type in a number 1 through 4 to select an option do they want to show their balance make
  


  
    
      5:26:13
    
  
  
  a deposit make a withdrawal or exit we'll add a few if and else if
  


  
    
      5:26:18
    
  
  
  statements let's check to see if the user's choice is equal to one that is a string
  


  
    
      5:26:26
    
  
  
  of one our user input is a string data type unless we were to typ cast it to something else if our choice is equal to
  


  
    
      5:26:33
    
  
  
  one we will call the function to show balance
  


  
    
      5:26:38
    
  
  
  else if our choice is equal to two we will make a deposit by calling
  


  
    
      5:26:46
    
  
  
  the deposit function else if choice is equal to
  


  
    
      5:26:54
    
  
  
  three we will call the withdraw
  


  
    
      5:27:01
    
  
  
  function else if choice is equal to 4 that means we would like to exit so we
  


  
    
      5:27:07
    
  
  
  need to exit this while loop we can do that by setting our variable of is running is this program running equal to
  


  
    
      5:27:15
    
  
  
  be false to exit if somebody types in some input that's not valid we can
  


  
    
      5:27:20
    
  
  
  handle that with an else statement else let's
  


  
    
      5:27:26
    
  
  
  print that is not a valid Choice okay let's see what we're working
  


  
    
      5:27:33
    
  
  
  with currently to test everything we haven't written anything within these functions yet show balance deposit or
  


  
    
      5:27:38
    
  
  
  withdraw so we can type 1 2 3 and for to
  


  
    
      5:27:46
    
  
  
  exit processed finished with exit Code Zero so we can't exit the program we
  


  
    
      5:27:51
    
  
  
  just have to select option four with this else statement this will execute if we type in something besides
  


  
    
      5:27:58
    
  
  
  the numbers 1 through 4 because there's no other options left so to test that
  


  
    
      5:28:03
    
  
  
  enter your choice 1 through four uh I'm just going to type the word poo that is not a valid
  


  
    
      5:28:10
    
  
  
  choice so we know that the L statement is working once we exit the while loop
  


  
    
      5:28:15
    
  
  
  let's print a message that
  


  
    
      5:28:21
    
  
  
  says thank you have a nice
  


  
    
      5:28:30
    
  
  
  day if I was to type for to exit we should exit the program thank you have a
  


  
    
      5:28:36
    
  
  
  nice day let's make that h capital now we'll work on our functions
  


  
    
      5:28:41
    
  
  
  beginning with show balance currently these two variables are Global we don't need to pass them as a parameter to
  


  
    
      5:28:48
    
  
  
  these functions quite yet we will be enclosing all of this code within a main function we'll handle that later though
  


  
    
      5:28:55
    
  
  
  so with show balance all we're going to do is print I'll use an F
  


  
    
      5:29:00
    
  
  
  string your balance is add a dollar sign or other
  


  
    
      5:29:07
    
  
  
  unit of currency of your choosing add a placeholder our balance
  


  
    
      5:29:12
    
  
  
  variable and let's see what we have I will type one to show balance
  


  
    
      5:29:20
    
  
  
  your balance is 0 I'll display our balance with two decimal places after I will add a format
  


  
    
      5:29:27
    
  
  
  specifier after balance colon. 2f will add two decimal places we covered format
  


  
    
      5:29:34
    
  
  
  specifiers in a previous topic so if I were to run this again type one we show $0 and 0 cents we're
  


  
    
      5:29:44
    
  
  
  displaying two floating Point decimal places now we need to make a deposit that'll be the next
  


  
    
      5:29:51
    
  
  
  function we will Define a local variable of amount equals accept some user
  


  
    
      5:29:58
    
  
  
  input enter an amount to be deposited
  


  
    
      5:30:08
    
  
  
  again when we accept user input it's a string we'll typ cast it to a number a
  


  
    
      5:30:13
    
  
  
  floating Point number because we have to include dollars and cents we'll add some checks though after
  


  
    
      5:30:20
    
  
  
  accepting some user input if our amount is greater than zero we don't want
  


  
    
      5:30:26
    
  
  
  anybody to make a negative deposit let's
  


  
    
      5:30:32
    
  
  
  print that's not a valid amount
  


  
    
      5:30:40
    
  
  
  else we are going to return our amount so this function is
  


  
    
      5:30:46
    
  
  
  going to return something so within our else if
  


  
    
      5:30:52
    
  
  
  statement we will take our balance plus equals the deposit we're
  


  
    
      5:30:59
    
  
  
  being returned with this will add our deposit to our balance balance plus
  


  
    
      5:31:04
    
  
  
  equals deposit let's try it
  


  
    
      5:31:10
    
  
  
  let's show our balance our balance is $0 we'll make a deposit of $100
  


  
    
      5:31:20
    
  
  
  exactly again we'll show our balance after making the deposit your balance is
  


  
    
      5:31:26
    
  
  
  $100 let's attempt to deposit negative money we'll select two to make a
  


  
    
      5:31:31
    
  
  
  deposit we'll deposit 42069
  


  
    
      5:31:37
    
  
  
  that's not a valid amount so we have a problem we have a type error unsupported operand for float
  


  
    
      5:31:46
    
  
  
  and nonone type so within this statement within if within our deposit function
  


  
    
      5:31:52
    
  
  
  we're not returning anything let's just return zero we have
  


  
    
      5:31:57
    
  
  
  to return something and within this if statement we didn't return anything previously will either return zero or
  


  
    
      5:32:05
    
  
  
  return a valid amount let's try this again let's make a deposit I will
  


  
    
      5:32:12
    
  
  
  attempt to deposit -420 69 that's not a valid amount our
  


  
    
      5:32:19
    
  
  
  program's not crashing that's good now we'll attempt to make a valid deposit
  


  
    
      5:32:25
    
  
  
  $50 And1 then show my balance your balance is $50 And1 Cent okay that is the
  


  
    
      5:32:33
    
  
  
  deposit function we'll work on the withdraw function next
  


  
    
      5:32:41
    
  
  
  we will create a local variable of amount accept some user
  


  
    
      5:32:46
    
  
  
  input enter amount to be
  


  
    
      5:32:54
    
  
  
  withdrawn our user input is going to be a string we will typ cast it to be a floating Point
  


  
    
      5:33:01
    
  
  
  number we need to check to see if our amount we're trying to withdraw
  


  
    
      5:33:07
    
  
  
  is greater than our balance users shouldn't be able to withdraw more money than what they have
  


  
    
      5:33:13
    
  
  
  in their bank account if the amount is greater than our balance that we have we
  


  
    
      5:33:18
    
  
  
  will print insufficient
  


  
    
      5:33:27
    
  
  
  funds else if the amount somebody's trying to withdraw is less than
  


  
    
      5:33:33
    
  
  
  zero we will print a different message
  


  
    
      5:33:39
    
  
  
  amount must be greater than
  


  
    
      5:33:45
    
  
  
  zero else we will return our valid
  


  
    
      5:33:50
    
  
  
  amount so with our if and else if statements we do need to return something if we take one of these
  


  
    
      5:33:56
    
  
  
  routes we will return
  


  
    
      5:34:02
    
  
  
  zero we're not making any changes within our else if statement
  


  
    
      5:34:08
    
  
  
  where we select choice three we're going to take our balance minus equals the
  


  
    
      5:34:15
    
  
  
  withdraw amount Let's test this banking program let's show our
  


  
    
      5:34:23
    
  
  
  balance our balance is zero we'll make a deposit of
  


  
    
      5:34:29
    
  
  
  $100 show my balance again your balance is $100 let's press three to withdraw money
  


  
    
      5:34:37
    
  
  
  enter amount to be withdrawn one1 kajillion dollar insufficient funds yeah no
  


  
    
      5:34:45
    
  
  
  kidding Let's attempt to withdraw money again we shouldn't be able to select a
  


  
    
      5:34:50
    
  
  
  negative amount negative $420 69 amount must be greater than
  


  
    
      5:34:57
    
  
  
  zero let's enter in a valid number this time I would like to withdraw
  


  
    
      5:35:03
    
  
  
  $49.99 that has appeared to work we'll show our balance again your balance is now
  


  
    
      5:35:09
    
  
  
  $501 then we can exit by pressing for to exit thank you and have a nice
  


  
    
      5:35:16
    
  
  
  day the last few changes I'm going to make is that I'm going to enclose all of this code our main portion of code
  


  
    
      5:35:23
    
  
  
  within a main function just to encapsulate all of our variables and help with
  


  
    
      5:35:28
    
  
  
  readability we will Define a function of main take all of our code within the
  


  
    
      5:35:34
    
  
  
  main body of our program and place it within the function I'm just going to select all of it and
  


  
    
      5:35:39
    
  
  
  indent it at the end of our program we need to call a main function to run
  


  
    
      5:35:46
    
  
  
  it if you're familiar with the statement of if Dunder name is equal to a string
  


  
    
      5:35:54
    
  
  
  of Dunder main that means this program can be imported or run stand alone it is good
  


  
    
      5:36:00
    
  
  
  practice to include this if statement we discussed this in the previous video if we're running this program directly
  


  
    
      5:36:07
    
  
  
  execute the main function however our variables of balance and is running they're now
  


  
    
      5:36:13
    
  
  
  enclosed within this local scope these other functions have no idea what these variables are of balance so we need to
  


  
    
      5:36:20
    
  
  
  pass in our balance to those functions of withdraw and show
  


  
    
      5:36:27
    
  
  
  balance when we show our balance we have to pass in our variable of balance same
  


  
    
      5:36:32
    
  
  
  thing with withdraw then set up those parameters within show balance we will
  


  
    
      5:36:38
    
  
  
  have one parameter of balance the same thing with withdraw the last thing I'm going to do
  


  
    
      5:36:44
    
  
  
  is add a little bit of text decoration around my program just to make it look
  


  
    
      5:36:49
    
  
  
  nice so I will print a bunch of asterisks it's not necessary but I think
  


  
    
      5:36:56
    
  
  
  it'll look
  


  
    
      5:37:04
    
  
  
  nice let's add some text decoration before and after the title of banking
  


  
    
      5:37:09
    
  
  
  program also before our choice basically whenever we print
  


  
    
      5:37:15
    
  
  
  anything we'll add some text
  


  
    
      5:37:24
    
  
  
  decoration let's do that with show balance our
  


  
    
      5:37:35
    
  
  
  deposit and within withdrawal
  


  
    
      5:37:47
    
  
  
  okay let's run this one last
  


  
    
      5:37:52
    
  
  
  time banking program let's show our
  


  
    
      5:37:58
    
  
  
  balance your balance is $0 we'll make it deposit $100
  


  
    
      5:38:04
    
  
  
  And1 show our balance again your balance is $100
  


  
    
      5:38:09
    
  
  
  And1 we will withdraw money enter an amount to be withdrawn
  


  
    
      5:38:16
    
  
  
  $11,000 insufficient funds let's try that again let's withdraw
  


  
    
      5:38:21
    
  
  
  $50 show our balance again $501 then press for to exit thank you
  


  
    
      5:38:27
    
  
  
  and have a nice day all right everybody that is a simple banking program you can write using
  


  
    
  43.slot machine



  
    
      5:38:34
    
  
  
  python hey everybody in today's video we're going to create a beginners slot machine program using python this
  


  
    
      5:38:40
    
  
  
  Project's meant for beginners so let's get started when creating a project I like to break up that project into
  


  
    
      5:38:46
    
  
  
  different sections then tackle them one at a time so with the slot machine what are some of the different functions
  


  
    
      5:38:52
    
  
  
  we'll need well we'll need to spin a row we'll Define a function to spin row as a
  


  
    
      5:38:59
    
  
  
  placeholder I'll write pass we'll return to this function later we need to display or print the
  


  
    
      5:39:06
    
  
  
  row print row if somebody gets matching symbols on
  


  
    
      5:39:14
    
  
  
  the slot machine we need to give them a payout we'll create a function to get
  


  
    
      5:39:20
    
  
  
  payout in this function we'll calculate what that payout is going to be but again we'll get to that later we'll
  


  
    
      5:39:27
    
  
  
  write the majority of our code within a main
  


  
    
      5:39:33
    
  
  
  function at the end of this program I will add the if statement of if Dunder
  


  
    
      5:39:38
    
  
  
  name is equal to a string of Dunder
  


  
    
      5:39:43
    
  
  
  main then we will call the main function which drives our code this program can
  


  
    
      5:39:49
    
  
  
  be imported or stand alone it is good practice to add this if statement a majority of the code we're going to
  


  
    
      5:39:54
    
  
  
  write is going to be within our main function So within our main function let's declare the variables we'll need
  


  
    
      5:40:00
    
  
  
  throughout this program we will need a starting balance which I will just name balance we will start with 100 00 as in
  


  
    
      5:40:09
    
  
  
  $100 we'll need to display some sort of Welcome message let's print something we
  


  
    
      5:40:15
    
  
  
  will print welcome to Let's name our game python
  


  
    
      5:40:22
    
  
  
  slots just for some flavor I'm going to add some text decoration just a bunch of as risks I think it'll look cool but you
  


  
    
      5:40:30
    
  
  
  don't have to Let's display our symbols we're going to use
  


  
    
      5:40:38
    
  
  
  symbols I'll add some emojis we'll use emojis in this program in place of images if you're on Windows you can hold
  


  
    
      5:40:45
    
  
  
  down the window key plus semicolon let's add a cherry you typically see a lot of
  


  
    
      5:40:51
    
  
  
  fruit in slot machines a
  


  
    
      5:40:57
    
  
  
  watermelon a lemon there's also a lot of bells for
  


  
    
      5:41:03
    
  
  
  some reason but we'll add those and a
  


  
    
      5:41:10
    
  
  
  star let me just align
  


  
    
      5:41:19
    
  
  
  everything let's do a test run welcome to python
  


  
    
      5:41:25
    
  
  
  slots let me make one adjustment okay I'm happy with
  


  
    
      5:41:32
    
  
  
  that so after our welcome message we'll continue playing this game while our
  


  
    
      5:41:38
    
  
  
  balance is greater than zero while we still have money we can continue playing
  


  
    
      5:41:44
    
  
  
  we will print I'll use an FST string current
  


  
    
      5:41:50
    
  
  
  balance colon space I'll add a placeholder pick a unit of currency I'll pick American dollars then we will
  


  
    
      5:41:58
    
  
  
  display the user's balance we will prompt the user to enter in their bet
  


  
    
      5:42:03
    
  
  
  which we will assign to a variable of BET so
  


  
    
      5:42:10
    
  
  
  input place your bet amount let's do a test
  


  
    
      5:42:18
    
  
  
  run welcome to python slots current balance $100 place your bet amount we
  


  
    
      5:42:25
    
  
  
  won't deduce the BET amount from the balance quite yet I just want to be sure that we can enter in something
  


  
    
      5:42:31
    
  
  
  $1 good $10 $100 what if somebody body types in a
  


  
    
      5:42:38
    
  
  
  word like pizza we need to prevent that input and correct
  


  
    
      5:42:45
    
  
  
  it we'll check if take our bet use the is digit method is our bet a digit if
  


  
    
      5:42:54
    
  
  
  somebody types in a word like pizza we need to tell them that's not valid so this will return true if our bet is a
  


  
    
      5:43:02
    
  
  
  digit but we're going to use the not logical operator if our our bet is not a
  


  
    
      5:43:09
    
  
  
  digit then do this we will
  


  
    
      5:43:14
    
  
  
  print please enter a valid
  


  
    
      5:43:19
    
  
  
  number followed by the continue keyword the continue keyword will skip the
  


  
    
      5:43:25
    
  
  
  current iteration of this Loop and start from the beginning Let's test
  


  
    
      5:43:33
    
  
  
  it place your bet amount Pizza please enter a valid number we have our
  


  
    
      5:43:39
    
  
  
  current balance again place your bet amount I'll type in one okay we did not get that message of
  


  
    
      5:43:46
    
  
  
  please enter a valid number this bet of $1 is valid so if our bet is a digit we'll
  


  
    
      5:43:54
    
  
  
  convert it to be an integer using typ casting because when you accept user input it's a string it has the string
  


  
    
      5:44:01
    
  
  
  data type let's reassign our bet type cast our bet as an integer
  


  
    
      5:44:10
    
  
  
  then we will check to see if our bet is greater than our balance people can't
  


  
    
      5:44:15
    
  
  
  bet money that they don't have if the bet is greater than the
  


  
    
      5:44:21
    
  
  
  current balance if bet is greater than balance we will print this message
  


  
    
      5:44:26
    
  
  
  instead insufficient funds then continue
  


  
    
      5:44:37
    
  
  
  if somebody tries to bet negative money or no money we'll add this statement if
  


  
    
      5:44:43
    
  
  
  bet is less than or equal to zero we will
  


  
    
      5:44:50
    
  
  
  print bet must be greater than zero and
  


  
    
      5:45:00
    
  
  
  continue if all these checks pass if our bet is not a digit if our bet is greater
  


  
    
      5:45:05
    
  
  
  than our balance or if our bet is greater than zero we will take our
  


  
    
      5:45:10
    
  
  
  original balance minus equals our bet to subtract
  


  
    
      5:45:18
    
  
  
  it let's do a test run place your bet amount pizza please
  


  
    
      5:45:25
    
  
  
  enter a valid number I will bet1 kajillion dollar insufficient funds
  


  
    
      5:45:33
    
  
  
  yeah no kidding 0 bet must be greater than zero what about
  


  
    
      5:45:40
    
  
  
  $1 our bet should be subtracted from our balance let's try 10 we are now down to
  


  
    
      5:45:48
    
  
  
  89 let's bet $90 insufficient funds
  


  
    
      5:45:55
    
  
  
  89 and that has appeared to work once we subtract our bet from our
  


  
    
      5:46:00
    
  
  
  balance we will call the function to spin row
  


  
    
      5:46:07
    
  
  
  this function is going to return a list which we will assign to be row row will
  


  
    
      5:46:14
    
  
  
  be a list using the spin row function we have to generate three random symbols
  


  
    
      5:46:19
    
  
  
  then return them within a list we'll work on the spin row function next within our spin row function we
  


  
    
      5:46:26
    
  
  
  will declare a list of symbols add your
  


  
    
      5:46:33
    
  
  
  symbols but these need to be strings
  


  
    
      5:46:39
    
  
  
  make sure they're all comma
  


  
    
      5:46:53
    
  
  
  separated there we go this is where list comprehensions can come in if you don't
  


  
    
      5:46:59
    
  
  
  know what a list comprehension is here's an alternative we will declare an empty list of results this is an empty list we
  


  
    
      5:47:08
    
  
  
  need a for Loop to generate three random symbols we could say
  


  
    
      5:47:13
    
  
  
  for symbol in range
  


  
    
      5:47:19
    
  
  
  three this for Loop will iterate three times during each iteration let's take
  


  
    
      5:47:25
    
  
  
  our empty list of results use the append method we will append a random.
  


  
    
      5:47:34
    
  
  
  choice among our symbols so we need to import the random
  


  
    
      5:47:42
    
  
  
  module we'll do so at the top import random we're telling the random module
  


  
    
      5:47:49
    
  
  
  to pick a random Choice from this list of symbols then we will append them to our
  


  
    
      5:47:55
    
  
  
  empty list of results after we escape the for Loop we will return our results
  


  
    
      5:48:04
    
  
  
  it's a list now a much better option is to use a list comprehension here's how
  


  
    
      5:48:11
    
  
  
  it's going to be a lot more concise we will return a list within the list we
  


  
    
      5:48:17
    
  
  
  will write a list comprehension for every let's say
  


  
    
      5:48:22
    
  
  
  symbol in range three there is no condition what do we
  


  
    
      5:48:29
    
  
  
  want to return during each iteration access the random module use
  


  
    
      5:48:35
    
  
  
  the choice method then pass in our symbols symbol isn't used in this
  


  
    
      5:48:43
    
  
  
  example what you may see people do is use an underscore as a placeholder
  


  
    
      5:48:48
    
  
  
  basically what we're saying is for every iteration in range three return a random
  


  
    
      5:48:54
    
  
  
  symbol that's all we need for the spin row function going back we have our list of
  


  
    
      5:49:01
    
  
  
  row afterwards I am going to print it to test it print row
  


  
    
      5:49:07
    
  
  
  and we should have three random symbols after making a bet all right it looks
  


  
    
      5:49:13
    
  
  
  like it's working we'll make a few changes
  


  
    
      5:49:20
    
  
  
  though instead of printing our row I'm going to print the word
  


  
    
      5:49:28
    
  
  
  spinning I will add a new line character just to give us some space like after
  


  
    
      5:49:33
    
  
  
  this word of spinning then we will call the print row
  


  
    
      5:49:40
    
  
  
  function we'll pass in one argument R row that's returned to us after we spin
  


  
    
      5:49:46
    
  
  
  the row so going to our print row function we need to set up one parameter
  


  
    
      5:49:52
    
  
  
  our row that we receive it's going to be a list one easy way to print the elements of a list is that we can print
  


  
    
      5:50:00
    
  
  
  pick some sort of separator for each item in the list for example I'll just print a space with strings there are bu
  


  
    
      5:50:07
    
  
  
  methods we will use the join method then pass in our list or other iterable
  


  
    
      5:50:13
    
  
  
  basically what we're saying using the join method we're going to take our iterable in this case our list join each
  


  
    
      5:50:19
    
  
  
  element by a space a space character here's the
  


  
    
      5:50:25
    
  
  
  result we have three symbols you could join them by a different character I'll
  


  
    
      5:50:31
    
  
  
  add a vertical bar and to your bet amount $1 now we
  


  
    
      5:50:36
    
  
  
  have a vertical bar between each of these symbols we could include more than one character I'll add a space before
  


  
    
      5:50:42
    
  
  
  and after this vertical bar just to space things out I think that looks a lot better and
  


  
    
      5:50:50
    
  
  
  you don't have to but I'm going to add some text decoration before and after I'll add a bunch of
  


  
    
      5:50:59
    
  
  
  asterisks let's see what we're working with not bad
  


  
    
      5:51:07
    
  
  
  so every time we make a bet we get a new set of symbols now what if all three symbols
  


  
    
      5:51:14
    
  
  
  match we need to calculate a payout and give it to the user because well they
  


  
    
      5:51:20
    
  
  
  won so after we print our row we will call the
  


  
    
      5:51:25
    
  
  
  get payout function but we will pass in our row it's a list and our bet how much
  


  
    
      5:51:33
    
  
  
  did we bet we will be returned with a pay out which we will add to our balance
  


  
    
      5:51:40
    
  
  
  let's go to the get payout function we're sending two arguments to
  


  
    
      5:51:47
    
  
  
  our get payout function a row and a bet
  


  
    
      5:51:52
    
  
  
  we have to check to see if each element in our row is all the same is it all the same character we can do that with an if
  


  
    
      5:52:00
    
  
  
  statement if our row at index of zero that's going to be the first symbol is
  


  
    
      5:52:06
    
  
  
  equal to row at index one that's the second symbol is equal to
  


  
    
      5:52:14
    
  
  
  row at the second index and that's the third symbol if all three symbols match
  


  
    
      5:52:20
    
  
  
  we have to return the BET multiplied within our if statement we will add another if
  


  
    
      5:52:26
    
  
  
  statement I will check to see if our row at index0 is equal to our first symbol of
  


  
    
      5:52:34
    
  
  
  cherry be sure to place it within quotes because it's a
  


  
    
      5:52:40
    
  
  
  string now the reason I'm only checking if row at index zero is a Cherry Emoji
  


  
    
      5:52:45
    
  
  
  all these symbols are going to be the same if we're within this if statement all of these symbols are going to match
  


  
    
      5:52:52
    
  
  
  we only need to check one of them it could be zero one or two but I'll just add zero they're all going to be the
  


  
    
      5:52:59
    
  
  
  same regardless if somebody has all cherries we will return their bet * 3
  


  
    
      5:53:07
    
  
  
  or some other amount you can make the payouts higher or lower else if row at index zero is equal
  


  
    
      5:53:16
    
  
  
  to a watermelon then we will return their bet
  


  
    
      5:53:23
    
  
  
  Time 4 so watermelons are worth more than
  


  
    
      5:53:28
    
  
  
  cherries else if row at index zero is equal to a lemon
  


  
    
      5:53:38
    
  
  
  we will return their bet Time
  


  
    
      5:53:43
    
  
  
  5 else if row at index zero is equal to
  


  
    
      5:53:49
    
  
  
  a bell let's give them times 10 return bet
  


  
    
      5:53:56
    
  
  
  time 10 else if row at index zero is is equal
  


  
    
      5:54:06
    
  
  
  to a star that's worth the most we will return their bet time 20
  


  
    
      5:54:15
    
  
  
  make sure we're not within our if statement anymore if all three symbols don't match within our list we don't
  


  
    
      5:54:21
    
  
  
  want to give the user anything they lost that spin we will return zero that's all
  


  
    
      5:54:27
    
  
  
  we need for the get payout function scrolling back down after receiving a
  


  
    
      5:54:33
    
  
  
  payout it's returned to us from this function we'll check to see if our
  


  
    
      5:54:38
    
  
  
  payout is greater than zero that means they want to spin I will
  


  
    
      5:54:45
    
  
  
  print I'll use an F string U1 I'll add a placeholder preced this
  


  
    
      5:54:52
    
  
  
  with a unit of currency I'll use dollars will display the
  


  
    
      5:54:58
    
  
  
  payout else if they did not receive a payout that means they lost that spin we
  


  
    
      5:55:04
    
  
  
  will print s sorry you lost this
  


  
    
      5:55:11
    
  
  
  round then take our balance this is our original balance
  


  
    
      5:55:17
    
  
  
  plus equals our payout in most cases the payout is going to be zero but if the
  


  
    
      5:55:23
    
  
  
  user wins something we will add that to the balance okay let's do a test
  


  
    
      5:55:29
    
  
  
  run I will bet $1 sorry you lost this round and my current balance is 99
  


  
    
      5:55:36
    
  
  
  let's bet again I'll just keep on doing this until I
  


  
    
      5:55:42
    
  
  
  win we're going to lose more times than what we
  


  
    
      5:55:51
    
  
  
  win okay see I got all Bells it says you won $10 once somebody runs out of money
  


  
    
      5:55:58
    
  
  
  we want to stop them from playing or if they would like to exit we'll create a variable of play again
  


  
    
      5:56:06
    
  
  
  we will accept some user input do you want to spin
  


  
    
      5:56:16
    
  
  
  again we'll add y for yes sln for
  


  
    
      5:56:23
    
  
  
  no if our variable of play again does not equal a character of capital Y then
  


  
    
      5:56:31
    
  
  
  we will break to break out of this Loop let's do a test run and to your bet
  


  
    
      5:56:37
    
  
  
  amount I'll just bet a dollar do you want to spin again if I type in anything besides a capital Y we will exit I will
  


  
    
      5:56:44
    
  
  
  type in no then we
  


  
    
      5:56:49
    
  
  
  exit and to your bet amount I'll bet a dollar if somebody were to type in a
  


  
    
      5:56:55
    
  
  
  lowercase y that doesn't register we'll make it uppercase by following our input with the upper method to make it
  


  
    
      5:57:02
    
  
  
  uppercase place your bet a dollar hey I won I won $3 do you want to play again
  


  
    
      5:57:08
    
  
  
  I'll type in a lowercase y yes I would like to play again but I did not hold
  


  
    
      5:57:14
    
  
  
  shift in order to make this a capital Y that will still register and our current
  


  
    
      5:57:19
    
  
  
  balance is $12 we're ahead currently place your bet amount I'll bet
  


  
    
      5:57:25
    
  
  
  $10 we lost this round I will press n
  


  
    
      5:57:30
    
  
  
  because I don't want to play again then we exit so at the end of our program
  


  
    
      5:57:37
    
  
  
  I will print I'll use an F string game over
  


  
    
      5:57:43
    
  
  
  your final balance is I'll add a placeholder pick a unit of currency I'll
  


  
    
      5:57:50
    
  
  
  pick dollars display our balance then I'll just add some text decoration
  


  
    
      5:57:55
    
  
  
  before and after to make it all look
  


  
    
      5:58:02
    
  
  
  nice okay let's play this one last time enter your bet amount I'll bet a
  


  
    
      5:58:07
    
  
  
  dollar sorry you lost this round do you want to spin again yes I do I will bet
  


  
    
      5:58:13
    
  
  
  $5 you lost spin again yes I will bet
  


  
    
      5:58:18
    
  
  
  10 20 again I'll bet 20 I keep
  


  
    
      5:58:27
    
  
  
  losing I'm running out of money guys hey I won $10 though do you want to spin again no game over your final balance is
  


  
    
      5:58:36
    
  
  
  $1 that's why you shouldn't gamble you tend to lose more money than what you gain all right everybody so that is a
  


  
    
      5:58:42
    
  
  
  slot machine program you can write using python hello everybody today I'm going
  


  
    
  44.encryption program



  
    
      5:58:47
    
  
  
  to show you how we can write a substitution Cipher encryption program basically speaking what we're going to
  


  
    
      5:58:53
    
  
  
  do is that we have a message to hide the message we can encrypt it by replacing
  


  
    
      5:58:59
    
  
  
  every instance of one character with another chosen at random using the same
  


  
    
      5:59:04
    
  
  
  key we can then decrypt to the message when I was at my University I took an intro to cyber security course I turned
  


  
    
      5:59:12
    
  
  
  this program in as a final assignment and I did get an A on it I don't know maybe it'll help you at the very least
  


  
    
      5:59:18
    
  
  
  it's a good exercise all right let's get started everybody we will Begin by importing the random module as well as
  


  
    
      5:59:25
    
  
  
  the string module let's create a string of characters named
  


  
    
      5:59:31
    
  
  
  chariz whatever characters you would like to use for your encryption program list them here as a string however this
  


  
    
      5:59:38
    
  
  
  can be a lot to write I think a better solution would be to import some constants from the string module I'm
  


  
    
      5:59:45
    
  
  
  going to include some punctuation I will import the punctuation constant of the string
  


  
    
      5:59:51
    
  
  
  module how the heck do you spell punctuation okay that's right plus I
  


  
    
      5:59:57
    
  
  
  will add some digits string. digits constant plus string Dot
  


  
    
      6:00:08
    
  
  
  asky letters let's take a look at our character so
  


  
    
      6:00:16
    
  
  
  far we have one long string of characters what if I would like to
  


  
    
      6:00:21
    
  
  
  include a space a white space well there is a constant for that but that includes
  


  
    
      6:00:27
    
  
  
  things like carriage return that's going to warp our results let me show you just
  


  
    
      6:00:32
    
  
  
  for a demonstration string Dot Whit space plus all the other
  


  
    
      6:00:39
    
  
  
  stuff we have a carriage return and some other characters I would like to avoid that so in place of importing the Whit
  


  
    
      6:00:46
    
  
  
  space constant from the string module I'm going to add a space character
  


  
    
      6:00:51
    
  
  
  that's good enough here are all the characters I will be using this program feel free to
  


  
    
      6:00:57
    
  
  
  add more or less this is all one long string I'm going to turn the string into
  


  
    
      6:01:03
    
  
  
  a list where each character is an individual element to do that I'm going
  


  
    
      6:01:09
    
  
  
  to take our string of chars reassign it then typ cast my string of characters as
  


  
    
      6:01:17
    
  
  
  a list then let's print it again print chars instead of one long string we have
  


  
    
      6:01:25
    
  
  
  a list a list of all the characters we'll need I am then going to create a
  


  
    
      6:01:30
    
  
  
  key which we will Shuffle eventually key then to create a copy of a list you can
  


  
    
      6:01:36
    
  
  
  type the original list. copy method then I will print my
  


  
    
      6:01:44
    
  
  
  key I'm going to place these lists within an F
  


  
    
      6:01:53
    
  
  
  string
  


  
    
      6:01:59
    
  
  
  chars then key let's see what we have
  


  
    
      6:02:06
    
  
  
  we have two identical lists one for the original characters and the other for the key we're going to shuffle this
  


  
    
      6:02:16
    
  
  
  key random. shuffle pass in our list of
  


  
    
      6:02:23
    
  
  
  key look at that all of the characters are now shuffled in a random order what we'll be doing when somebody
  


  
    
      6:02:29
    
  
  
  types in some text to be encrypted we will replace every instance of one
  


  
    
      6:02:34
    
  
  
  character within that string let's say an O then replace it with another one
  


  
    
      6:02:40
    
  
  
  every time we run this program this key will be reshuffled let's ask for some user
  


  
    
      6:02:46
    
  
  
  input this part of our program we will do some
  


  
    
      6:02:51
    
  
  
  encryption plain text is the original message plain text equals we will accept
  


  
    
      6:02:58
    
  
  
  some user input enter a message
  


  
    
      6:03:03
    
  
  
  to encrypt cyppher text is the name of the
  


  
    
      6:03:09
    
  
  
  encrypted message that will be an empty string okay let's say a user types in a
  


  
    
      6:03:16
    
  
  
  message enter a message to encrypt I like pizza it's a very important
  


  
    
      6:03:23
    
  
  
  message every instance of a character within my plain text I will refer to the
  


  
    
      6:03:28
    
  
  
  key and replace that letter with a different one for example any z's I have two Z's in this program
  


  
    
      6:03:35
    
  
  
  will be replaced with let's see capital B every time we run this
  


  
    
      6:03:42
    
  
  
  program though it's going to shuffle the key so it's not going to be consistent what we're going to be doing is
  


  
    
      6:03:48
    
  
  
  iterating over every letter in our plain text for every letter in plain text
  


  
    
      6:03:55
    
  
  
  strings are iterable find the index of every letter
  


  
    
      6:04:00
    
  
  
  from our plain text within our list of characters let's assign a variable index
  


  
    
      6:04:07
    
  
  
  index equals take our list of chars use the
  


  
    
      6:04:12
    
  
  
  index method we are looking for that letter whatever letter we're currently on then return an
  


  
    
      6:04:20
    
  
  
  index then refer to our key get whatever letter is at that same index so we will
  


  
    
      6:04:26
    
  
  
  append that to our Cipher text it's currently an empty string Cypher text
  


  
    
      6:04:32
    
  
  
  plus equals our key at the given
  


  
    
      6:04:41
    
  
  
  index our Cipher text should be the encrypted message now let's print it out
  


  
    
      6:04:47
    
  
  
  print I'll use an FST string original
  


  
    
      6:04:52
    
  
  
  message let's print our plain text then our encrypted
  


  
    
      6:05:04
    
  
  
  message print our cyppher text string let's take a look so far enter a
  


  
    
      6:05:12
    
  
  
  message to encrypt I like pizza then here's the new encrypted
  


  
    
      6:05:19
    
  
  
  message every instance of a character within my plain text was replaced with another so for example any z's were
  


  
    
      6:05:26
    
  
  
  replaced with E I have two e within this encrypted message if I were to run this program again it would likely be
  


  
    
      6:05:32
    
  
  
  different I like pizza and here's my new encrypted message my
  


  
    
      6:05:39
    
  
  
  Z's were replaced with semicolons this time for every ladder in our plane text
  


  
    
      6:05:44
    
  
  
  get the index of each letter then refer to the key add the new character to our encrypted message it's probably best for
  


  
    
      6:05:51
    
  
  
  us not to display the characters and the key so let's hide those we will be reusing this key for
  


  
    
      6:05:59
    
  
  
  decryption now to decrypt the message let's copy this section of code paste
  


  
    
      6:06:06
    
  
  
  it we are now decrypting we will ask for some Cipher
  


  
    
      6:06:11
    
  
  
  text then reset our plain text for every letter in our Cipher text
  


  
    
      6:06:18
    
  
  
  refer to our key append a character to our plain
  


  
    
      6:06:27
    
  
  
  text within our list chars at a given index we will display our encrypted
  


  
    
      6:06:34
    
  
  
  message followed by the original message let's try it one last time enter
  


  
    
      6:06:40
    
  
  
  a message to encrypt I like
  


  
    
      6:06:46
    
  
  
  tacos here's my original message then the encrypted message if I were to
  


  
    
      6:06:52
    
  
  
  decrypt the encrypted message it should give me my original message I will type
  


  
    
      6:06:57
    
  
  
  in these characters exactly hit enter and here is my message
  


  
    
      6:07:03
    
  
  
  decrypted I like talking goes all right everybody so that is a substitution
  


  
    
      6:07:09
    
  
  
  Cipher encryption program for beginners when I was at University I did turn this program in for a final assignment for a
  


  
    
      6:07:16
    
  
  
  cyber security class and I did get an A on it so maybe it'll help you and well yeah that's an encryption program for
  


  
    
      6:07:22
    
  
  
  beginners in Python what's up everybody so in today's
  


  
    
  45.hangman game



  
    
      6:07:28
    
  
  
  video we're going to create a game of hangman using python I thought that this would be a good mini project for us
  


  
    
      6:07:34
    
  
  
  while learning to code it is important to create small projects as you go along here's one that we can make together
  


  
    
      6:07:40
    
  
  
  when creating a project I like to declare the various variables and data structures I'll need first followed by
  


  
    
      6:07:46
    
  
  
  the functions I'll need for this game we will need a set of words one of these
  


  
    
      6:07:52
    
  
  
  words is going to be chosen at random so let's create a few words I'll add some
  


  
    
      6:07:58
    
  
  
  fruit apple orange banana
  


  
    
      6:08:05
    
  
  
  coconut and one more pineapple using the random module let's
  


  
    
      6:08:12
    
  
  
  import that import random using the random module we will
  


  
    
      6:08:18
    
  
  
  pick one of these words at random we won't be able to see what it
  


  
    
      6:08:23
    
  
  
  is but we can guess what the word is one letter at a time once we reach six incorrect guesses we lose the game
  


  
    
      6:08:31
    
  
  
  before each guess we will display some asky art which trial name as hangman
  


  
    
      6:08:37
    
  
  
  art this will be a dictionary a dictionary where each key value pair contains a
  


  
    
      6:08:43
    
  
  
  tuple so this is a dictionary of we'll have a key which
  


  
    
      6:08:52
    
  
  
  will be a number and a tupple the key is going to represent the incorrect number
  


  
    
      6:08:57
    
  
  
  of guesses so we'll start at zero we will display a tupple which will contain
  


  
    
      6:09:02
    
  
  
  some aski art then let me just copy this for one incorrect guess we'll
  


  
    
      6:09:09
    
  
  
  display some different s art I'll just put each on a new line for
  


  
    
      6:09:19
    
  
  
  readability so we're going to go all the way up to six once we hit six incorrect guesses we
  


  
    
      6:09:25
    
  
  
  lose the game each key corresponds to the number
  


  
    
      6:09:33
    
  
  
  of incorrect guesses once we reach six we lose the game each Tuple that
  


  
    
      6:09:39
    
  
  
  corresponds to the incorrect number of guesses we will display a certain image
  


  
    
      6:09:44
    
  
  
  if you would like feel free to look in the description of this video if you would like to copy this to save you some time each topple will consist of three
  


  
    
      6:09:51
    
  
  
  rows three strings for no incorrect guesses where
  


  
    
      6:09:57
    
  
  
  incorrect guesses a zero we will display nothing we can't see our hangman person
  


  
    
      6:10:05
    
  
  
  for one incorrect guess we will display their head for two incorrect guesses we will
  


  
    
      6:10:11
    
  
  
  display their head and the main torso of their body which will represent with a vertical
  


  
    
      6:10:17
    
  
  
  bar let me copy this one for three incorrect guesses we will
  


  
    
      6:10:24
    
  
  
  display their left arm represented with the forward
  


  
    
      6:10:29
    
  
  
  slash with four incorrect guesses we will display their right arm however if you use a backs slash
  


  
    
      6:10:36
    
  
  
  that's an escape sequence within a string you have to use double backs slashes to literally print a
  


  
    
      6:10:43
    
  
  
  backslash so with five incorrect guesses we will display their left leg of the
  


  
    
      6:10:50
    
  
  
  person then once we reach six incorrect guesses we display the full person
  


  
    
      6:10:55
    
  
  
  that's when we lose the game when we see the entire person that's some asky Arch that we can use so let's test it just to
  


  
    
      6:11:03
    
  
  
  be sure that everything is working fine I will print my hangman
  


  
    
      6:11:10
    
  
  
  art at the Key of zero to represent no incorrect
  


  
    
      6:11:16
    
  
  
  guesses okay so when we display this person we're going to have to use some sort of loop for every let's say line in hangman
  


  
    
      6:11:26
    
  
  
  art at index of zero for zero incorrect guesses I will print each line
  


  
    
      6:11:37
    
  
  
  line with no incorrect guesses we don't display anything that's correct we can't see the person and
  


  
    
      6:11:44
    
  
  
  that's okay so with one incorrect guess display
  


  
    
      6:11:50
    
  
  
  the dictionary where the key is one that displays the person's
  


  
    
      6:11:57
    
  
  
  head two two would be the main torso of their body
  


  
    
      6:12:03
    
  
  
  three they're left arm four their right arm five their left
  


  
    
      6:12:12
    
  
  
  leg and six their right leg once we see the entire person we lose the
  


  
    
      6:12:18
    
  
  
  game so we can delete these two lines of code we no longer need them we know that our dictionary is
  


  
    
      6:12:25
    
  
  
  working I'm going to zoom out a little bit following our dictionary we'll declare the various functions we'll need
  


  
    
      6:12:31
    
  
  
  throughout this program we will Define a function to display man our hangman there will be
  


  
    
      6:12:39
    
  
  
  one parameter wrong guesses and then for the time being I'll
  


  
    
      6:12:45
    
  
  
  write pass we'll fill in this function later when we display our man we need to
  


  
    
      6:12:51
    
  
  
  know the number of incorrect guesses to display the Right
  


  
    
      6:12:57
    
  
  
  image we have a display man function and a
  


  
    
      6:13:02
    
  
  
  display hint function we will have a string of
  


  
    
      6:13:10
    
  
  
  hint then I'll write pass for now our hint is going to be a list a list of
  


  
    
      6:13:17
    
  
  
  underscore characters for each letter that we guess right will flip one of those underscores to be a letter if that
  


  
    
      6:13:24
    
  
  
  letter is correct I'll create a function of display
  


  
    
      6:13:30
    
  
  
  answer within this function we will display the correct answer either when we lose the game or win the game and I
  


  
    
      6:13:37
    
  
  
  will write pass we will create a function of main to contain the main
  


  
    
      6:13:43
    
  
  
  body of code of our program again I'll write pass for
  


  
    
      6:13:48
    
  
  
  now I'll add the following if statement if Dunder name is equal to a string of
  


  
    
      6:13:56
    
  
  
  Dunder main if we are running this file directly I would like to call the main
  


  
    
      6:14:01
    
  
  
  function to start the program all right let me zoom out this will be the main
  


  
    
      6:14:07
    
  
  
  skeletal structure of our program import the random module we have our set of
  


  
    
      6:14:12
    
  
  
  words we'll be importing more from a separate file near the end of this video we have a dictionary where the key is a
  


  
    
      6:14:19
    
  
  
  number to represent the number of incorrect guesses and a tuple to display some asky art we have four functions
  


  
    
      6:14:26
    
  
  
  display our man display the hint display the answer and the main function to contain the main body of code all right
  


  
    
      6:14:33
    
  
  
  let's work within our main function within our main function we will create a variable of answer what is
  


  
    
      6:14:41
    
  
  
  the correct answer that we have to guess I will access the random module call the
  


  
    
      6:14:46
    
  
  
  method of choice then pass in our set of words one of these words will be chosen
  


  
    
      6:14:53
    
  
  
  at random Let's test that I will print our
  


  
    
      6:14:58
    
  
  
  answer just temporarily we should get a random word
  


  
    
      6:15:03
    
  
  
  Apple Apple pineapple Apple I guess it really likes apple for some reason there we go we
  


  
    
      6:15:10
    
  
  
  have orange we are choosing a word at random we no longer need this print
  


  
    
      6:15:16
    
  
  
  statement looks like everything is working fine now we'll display our
  


  
    
      6:15:21
    
  
  
  hint our hint is going to be a list of underscore characters I need the number
  


  
    
      6:15:27
    
  
  
  of underscore characters to equal the number of characters in one of these
  


  
    
      6:15:32
    
  
  
  words that is chosen at random so I could multiply my list by the
  


  
    
      6:15:40
    
  
  
  length using the length function of my answer so let's print our
  


  
    
      6:15:47
    
  
  
  hint to see what we're working with with my selected word we have how
  


  
    
      6:15:54
    
  
  
  many underscores 1 2 3 4 5 6 7 okay we
  


  
    
      6:15:59
    
  
  
  have a different word 1 2 3 4 5 that is probably Apple it has five
  


  
    
      6:16:07
    
  
  
  characters all right so that's our hint it's a list of underscore characters
  


  
    
      6:16:13
    
  
  
  when we guess a letter if it's correct we'll fill in one of the underscores with that correct
  


  
    
      6:16:19
    
  
  
  character we need to keep track of the number of wrong guesses we'll create a variable of wrong guesses set that equal
  


  
    
      6:16:27
    
  
  
  to be zero when we start the game we're going to keep track of all of the incorrect guesses that we've made we
  


  
    
      6:16:33
    
  
  
  will create a set of guest letters for an empty set we'll call the
  


  
    
      6:16:40
    
  
  
  set function normally in Python you can't create an empty set with just a set of parentheses we have to use the
  


  
    
      6:16:46
    
  
  
  set function then I will create a Boolean variable of is
  


  
    
      6:16:51
    
  
  
  running set that to be true while our game is running continue playing once we
  


  
    
      6:16:57
    
  
  
  lose or win the game we will switch this to be false to exit the game we will
  


  
    
      6:17:03
    
  
  
  keep this as true when we initially run this program after we declare the variables we'll need within the main
  


  
    
      6:17:10
    
  
  
  function we'll create a loop a while loop while is running we don't need to
  


  
    
      6:17:16
    
  
  
  say while is running is equal to true we don't necessarily need to create that comparison we can just say while is
  


  
    
      6:17:23
    
  
  
  running while this is true continue doing some code so what would we like to
  


  
    
      6:17:29
    
  
  
  do let's call the function of display man but we have to pass in the wrong
  


  
    
      6:17:35
    
  
  
  number of guesses call our function of display man
  


  
    
      6:17:41
    
  
  
  pass in our variable of wrong guesses when we begin the game we would like to
  


  
    
      6:17:46
    
  
  
  display one of these images then we will display our hint then we'll call the function to display
  


  
    
      6:17:53
    
  
  
  our hint pass in our hint that was the list
  


  
    
      6:17:59
    
  
  
  of underscore characters to represent the answer we have to guess we will create a variable of guess and accept
  


  
    
      6:18:06
    
  
  
  some user input will'll prompt the user to enter a
  


  
    
      6:18:12
    
  
  
  letter just in case a user types in a character that's uppercase let's add the lower method to
  


  
    
      6:18:20
    
  
  
  make it lowercase so let's fill in our display man function there's not a lot to write
  


  
    
      6:18:26
    
  
  
  here when we call this function we need to display one of these images based on the wrong number of
  


  
    
      6:18:33
    
  
  
  guesses one of these Keys within the display man function
  


  
    
      6:18:40
    
  
  
  we'll create a for Loop for every line in my hangman art this
  


  
    
      6:18:48
    
  
  
  dictionary at the Key of wrong guesses this will be a number 0 through
  


  
    
      6:18:55
    
  
  
  six depending on what this number is I will print each
  


  
    
      6:19:01
    
  
  
  line print each line of that Tuple let's see what we're working with
  


  
    
      6:19:08
    
  
  
  we'll do a test run so we are displaying no person we
  


  
    
      6:19:13
    
  
  
  can't see them for testing purposes I am going to change wrong guesses to be one
  


  
    
      6:19:19
    
  
  
  we're displaying their head two displays their body
  


  
    
      6:19:25
    
  
  
  three displays their left arm four is their right
  


  
    
      6:19:31
    
  
  
  arm five their left leg leg and
  


  
    
      6:19:37
    
  
  
  six is their full body that's when we lose now you don't necessarily need to
  


  
    
      6:19:43
    
  
  
  do this but I'll add some text decoration before and after I'll add just a bunch of asterisks
  


  
    
      6:19:50
    
  
  
  before and after I think that looks better but you
  


  
    
      6:19:57
    
  
  
  do you let's be sure to set wrong gesses back to zero after we display our hangman we
  


  
    
      6:20:03
    
  
  
  have to display the hint what's the clue we're trying to solve so we will call our display hint function
  


  
    
      6:20:10
    
  
  
  and pass in our list of hint So within the display hint function
  


  
    
      6:20:16
    
  
  
  let me zoom out I will print the following between each character within
  


  
    
      6:20:21
    
  
  
  our hint each underscore we will display a space
  


  
    
      6:20:26
    
  
  
  character strings have a built in join method we'll call that then pass in our
  


  
    
      6:20:32
    
  
  
  hint for each character within our hint join it by an empty
  


  
    
      6:20:38
    
  
  
  space so now when we do a test run we are displaying an underscore to
  


  
    
      6:20:44
    
  
  
  represent each character each is separated with the space while we're here we'll fill in the
  


  
    
      6:20:52
    
  
  
  display answer function we just have to copy this line of code from display hint replace hint with answer and that's all
  


  
    
      6:20:59
    
  
  
  we need for the display answer function so let me test that real quick after playing our hint temporarily I will
  


  
    
      6:21:07
    
  
  
  display our answer just to be sure that it's working yep there's our hint and there's
  


  
    
      6:21:15
    
  
  
  our answer that we have to guess okay let's delete this line of code we don't want to display the
  


  
    
      6:21:21
    
  
  
  answer I was just testing it so the user is going to be able to type in a letter to guess such as a for example once we
  


  
    
      6:21:30
    
  
  
  guess a letter if that letter is found within the hint if it's one of these characters we need to switch that
  


  
    
      6:21:37
    
  
  
  underscore to be one of those characters so we'll write the following if statement if our guess is in our
  


  
    
      6:21:48
    
  
  
  answer in is a membership operator if this letter is found within our string
  


  
    
      6:21:53
    
  
  
  of answer we're going to create a loop we will create a loop that will iterate once for each character within the
  


  
    
      6:22:00
    
  
  
  answer but we don't know the length of the answer because python we'll choose it at random so let's say for every
  


  
    
      6:22:08
    
  
  
  index we can shorten this to I for I in
  


  
    
      6:22:14
    
  
  
  range the length of my
  


  
    
      6:22:19
    
  
  
  answer let's say the word is Apple the length of the word Apple has five characters this would return five for I
  


  
    
      6:22:28
    
  
  
  in range five then we will iterate five times we'll iterate this Loop once for
  


  
    
      6:22:33
    
  
  
  the number of characters within my answer we'll check during each iteration
  


  
    
      6:22:39
    
  
  
  if our answer at index of I during the first iteration that will be zero then
  


  
    
      6:22:46
    
  
  
  the second iteration it will be one then two so on and so forth strings are
  


  
    
      6:22:52
    
  
  
  iterable if our answer at index of I is equal to our guess if there's a match if
  


  
    
      6:22:59
    
  
  
  we guess the correct letter then we're going to take our hint
  


  
    
      6:23:06
    
  
  
  at that given index of I and set that equal to be our guess looks like this if
  


  
    
      6:23:13
    
  
  
  statement is outside of the while loop I'm just going to invent it by one somewhere within
  


  
    
      6:23:18
    
  
  
  it okay let's do a test run I'm going to guess the letter
  


  
    
      6:23:25
    
  
  
  A yes we have one a let's do something that's probably not in
  


  
    
      6:23:31
    
  
  
  here Q okay okay so there were no matches we don't end up doing
  


  
    
      6:23:37
    
  
  
  anything so what is this word probably this should be the word
  


  
    
      6:23:43
    
  
  
  orange so let's guess o r
  


  
    
      6:23:50
    
  
  
  n e g all right we know that it works
  


  
    
      6:23:56
    
  
  
  what if somebody types in some input that's not valid before checking if that guess is correct we'll do some input
  


  
    
      6:24:03
    
  
  
  validation what if the user types in a whole word like
  


  
    
      6:24:08
    
  
  
  pizza we want the user to only guess a single character not many
  


  
    
      6:24:13
    
  
  
  characters We'll add the following line if the length of Our Guest that we type
  


  
    
      6:24:21
    
  
  
  in does not equal one then I will print the following
  


  
    
      6:24:27
    
  
  
  message let's say invalid
  


  
    
      6:24:32
    
  
  
  input then we will use the keyword of continue to skip this
  


  
    
      6:24:38
    
  
  
  Loop continue okay enter a letter I will type
  


  
    
      6:24:44
    
  
  
  the word Pizza we get this message of invalid input we skip that Loop's current
  


  
    
      6:24:50
    
  
  
  iteration I will guess a there are two A's I will type banana and again we get
  


  
    
      6:24:57
    
  
  
  invalid input we have to guess one letter at a time what if somebody types in a number like one we would like to
  


  
    
      6:25:05
    
  
  
  prevent that so within this if statement I would
  


  
    
      6:25:12
    
  
  
  like to execute this code if our guess is not an alphabetical character I can
  


  
    
      6:25:18
    
  
  
  add the following or not take our guess dot use
  


  
    
      6:25:25
    
  
  
  the is Alpha method if our guess is an alphabetical
  


  
    
      6:25:31
    
  
  
  character this returns true if it's not an alphabetical character it's false so
  


  
    
      6:25:37
    
  
  
  we are checking if this is not an alphabetical character we execute this
  


  
    
      6:25:43
    
  
  
  code let's try this again I will type in one invalid
  


  
    
      6:25:49
    
  
  
  input 42069 invalid input let's say we guess the letter A
  


  
    
      6:25:57
    
  
  
  what if we type in a letter we have already guessed I will guess a again if they already guessed a letter I
  


  
    
      6:26:04
    
  
  
  don't want that to count we'll skip the current Loop iteration I'll add another if
  


  
    
      6:26:11
    
  
  
  statement if our guess is
  


  
    
      6:26:16
    
  
  
  in our set of guest letters then I will print the
  


  
    
      6:26:24
    
  
  
  following I'll use an F string our guess
  


  
    
      6:26:30
    
  
  
  is already guessed
  


  
    
      6:26:36
    
  
  
  oh one thing I'm forgetting once we check that our guest is not within our guest characters we'll take our guest
  


  
    
      6:26:43
    
  
  
  letters this is a set add the guess we're keeping track of the letters
  


  
    
      6:26:51
    
  
  
  we have already guessed so I will type let's guess a we
  


  
    
      6:26:57
    
  
  
  have one a if I were to guess a again we get that message of a is already guessed
  


  
    
      6:27:04
    
  
  
  and then be sure to add continue to skip the current Loop
  


  
    
      6:27:10
    
  
  
  iteration all right now going down to this if statement if guess is in our
  


  
    
      6:27:15
    
  
  
  answer if we guess a character that's incorrect we will take our variable of
  


  
    
      6:27:22
    
  
  
  wrong guesses incremented by one wrong guesses plus equals 1 let's do a test
  


  
    
      6:27:30
    
  
  
  run I will guess a there is an a what about Q There is no
  


  
    
      6:27:38
    
  
  
  Q we display our dictionary where the key is one we display that asky
  


  
    
      6:27:43
    
  
  
  art R is there an R yes there is an R this is probably
  


  
    
      6:27:52
    
  
  
  orange I would like to be sure we display the entire person I will guess some wrong
  


  
    
      6:28:01
    
  
  
  characters we know that that works now we need a win condition if we guess all of the correct characters and
  


  
    
      6:28:08
    
  
  
  display the entire word we'll work on that next if there are no underscore
  


  
    
      6:28:15
    
  
  
  characters not in our hint this will be true if there are no
  


  
    
      6:28:22
    
  
  
  underscore characters in our hint if underscores not in
  


  
    
      6:28:28
    
  
  
  hint we'll call our function of display man pass in the wrong number of guesses
  


  
    
      6:28:36
    
  
  
  call the function of display answer pass in our
  


  
    
      6:28:44
    
  
  
  answer we will print the text of you win then set our
  


  
    
      6:28:50
    
  
  
  Boolean variable of is running equal to be
  


  
    
      6:28:56
    
  
  
  false let's win this time I already know that this word is probably pineapple
  


  
    
      6:29:04
    
  
  
  let's guess something
  


  
    
      6:29:11
    
  
  
  incorrect there we go we have two wrong guesses but we have correctly guessed
  


  
    
      6:29:16
    
  
  
  the word pineapple you win and we exit the program what if we lose I'll add the
  


  
    
      6:29:23
    
  
  
  following if statement else if our variable of wrong
  


  
    
      6:29:29
    
  
  
  guesses is greater than or equal so the length of our hangman art is a total of
  


  
    
      6:29:37
    
  
  
  seven there's seven total keys but once we hit six we lose the
  


  
    
      6:29:47
    
  
  
  game with this LF statement if the length of our hangman
  


  
    
      6:29:54
    
  
  
  art the length of our hangman art is going to be seven so we are going to subtract one for six for a total of
  


  
    
      6:30:02
    
  
  
  six once our wrong guesses is greater than or equal to 6 that means we lose
  


  
    
      6:30:08
    
  
  
  the game we will call the display man function pass in the wrong number of
  


  
    
      6:30:14
    
  
  
  guesses display what the correct answer should have been display answer pass in
  


  
    
      6:30:20
    
  
  
  our answer we will print you
  


  
    
      6:30:27
    
  
  
  lose then take our Boolean variable of is running set that to be false
  


  
    
      6:30:36
    
  
  
  I'll guess incorrect
  


  
    
      6:30:43
    
  
  
  letters there the word was coconut we have six incorrect guesses we display the entire hangman the correct answer
  


  
    
      6:30:50
    
  
  
  was coconut you lose if you would like to import a larger variety of words we could create
  


  
    
      6:30:57
    
  
  
  a separate python file for that so within our project folder we will create a new python file I will name this
  


  
    
      6:31:04
    
  
  
  python file words list this will be a python
  


  
    
      6:31:11
    
  
  
  file let's take our set of words cut it I'll add a note that these are words
  


  
    
      6:31:20
    
  
  
  for Hangman game Words will be a set I recommend
  


  
    
      6:31:27
    
  
  
  looking online for a very large set of words that we can use then just copy and paste them within here while while
  


  
    
      6:31:34
    
  
  
  browsing online I found an extensive list of animals that I can use so here are all the possible words
  


  
    
      6:31:40
    
  
  
  for my game so from my main python file I have to import this module of words
  


  
    
      6:31:50
    
  
  
  list from the module of words list import
  


  
    
      6:31:57
    
  
  
  words and now I have a greater variety of words I can use let's run this one last time this word has four letters
  


  
    
      6:32:05
    
  
  
  I'll guess the vowels there's an a no E
  


  
    
      6:32:10
    
  
  
  I O there is an O is it
  


  
    
      6:32:16
    
  
  
  Goat nope t r
  


  
    
      6:32:23
    
  
  
  bore all right the word was bore you win all right everybody so that is a game of
  


  
    
      6:32:29
    
  
  
  hangman that we can create using python hey everybody so so we have finally made it to Python objectoriented
  


  
    
  46.python object oriented programming



  
    
      6:32:37
    
  
  
  Programming this is a very important topic in Python an object is a bundle of
  


  
    
      6:32:43
    
  
  
  related attributes and methods attributes are similar to variables to describe what the object has so look
  


  
    
      6:32:50
    
  
  
  around you right now you are surrounded by different Real World objects next to me I have a phone a cup and a book each
  


  
    
      6:32:58
    
  
  
  of these objects can have different attributes to represent it for example an attribute of the phone next to me
  


  
    
      6:33:05
    
  
  
  could be version number I could set that to be 13 is on could be another attribute is the phone powered on or not
  


  
    
      6:33:12
    
  
  
  that could be true or false or even a price I have a cup next to me what
  


  
    
      6:33:17
    
  
  
  liquid is within the cup in this case coffee what's the temperature of the cup is the cup empty is empty or even a book
  


  
    
      6:33:26
    
  
  
  What's the title of the book that could be a string how many pages does the book have Pages could be another attribute
  


  
    
      6:33:33
    
  
  
  now objects also have the capability to do things they have methods which are
  


  
    
      6:33:39
    
  
  
  functions that belong to an object people mix up functions and methods all
  


  
    
      6:33:44
    
  
  
  the time they're technically different even when teaching I tend to make that mistake calling a method a function and
  


  
    
      6:33:49
    
  
  
  a function of method usually people know what you're referring to though a method is a function that belongs within an
  


  
    
      6:33:56
    
  
  
  object what are some actions these objects can perform with a phone you can
  


  
    
      6:34:01
    
  
  
  make a call or receive a call call turn the phone on or turn the phone off those
  


  
    
      6:34:07
    
  
  
  could all be functions with a cup you could fill the cup drink from the cup or empty the cup with a book you can open
  


  
    
      6:34:14
    
  
  
  the book read the book and close the book an object is a bundle of related
  


  
    
      6:34:21
    
  
  
  attributes and methods they can represent real world items to create
  


  
    
      6:34:26
    
  
  
  many objects we'll need to utilize a Class A Class is a type of blueprint
  


  
    
      6:34:32
    
  
  
  used to design design the structure and layout of an object we need to design
  


  
    
      6:34:37
    
  
  
  what our objects have their attributes and what they can do their methods we
  


  
    
      6:34:43
    
  
  
  will create a class of car we will create some car objects class
  


  
    
      6:34:51
    
  
  
  car to construct a car object we need a special type of method called a
  


  
    
      6:34:56
    
  
  
  Constructor it works similarly to a function we will Define a function of
  


  
    
      6:35:03
    
  
  
  double underscore init meaning initialize double underscore again and
  


  
    
      6:35:09
    
  
  
  then follow this with a set of parentheses this is our Constructor method we need this method in order to
  


  
    
      6:35:15
    
  
  
  construct objects it's a Dunder method Dunder meaning double underscore that's
  


  
    
      6:35:20
    
  
  
  a future topic I don't want you to be overloaded with information right now all you need to know is that we need
  


  
    
      6:35:26
    
  
  
  this method in order to create objects this method behaves similar to a function we need to set up the
  


  
    
      6:35:33
    
  
  
  parameters self is already provided to us self means this object we're creating right
  


  
    
      6:35:39
    
  
  
  now this car so what are some attributes that a car should have a
  


  
    
      6:35:45
    
  
  
  model that could be a string like a BMW a year that could be a
  


  
    
      6:35:52
    
  
  
  number a color let's add a Boolean of four sale
  


  
    
      6:35:59
    
  
  
  is the car for sale or not that's true or false to assign these attributes
  


  
    
      6:36:04
    
  
  
  we're going to access self self do the name of the attribute self. model equals
  


  
    
      6:36:13
    
  
  
  the model we receive these are parameters when we receive the name of a model we will
  


  
    
      6:36:20
    
  
  
  assign it to this object let's do this with year self. year equals year self.
  


  
    
      6:36:29
    
  
  
  color equals color self. for for sale
  


  
    
      6:36:35
    
  
  
  equals for sale this is an example of a few attributes that a car might have a
  


  
    
      6:36:41
    
  
  
  model year color and if it's for sale or not represented by a Boolean now to
  


  
    
      6:36:47
    
  
  
  construct a car object we need a unique name for this car let's just say car one
  


  
    
      6:36:53
    
  
  
  car 1 equals take the name of the class add a set of parentheses to invoke The
  


  
    
      6:37:00
    
  
  
  Constructor we're going to do this almost exact L like a function we have parameter set up we need to send a
  


  
    
      6:37:07
    
  
  
  matching number of arguments self is provided to us behind the scenes automatically we need a model year color
  


  
    
      6:37:15
    
  
  
  and if it's for sale or not so pick a car if you're choosing I'll pick my favorite
  


  
    
      6:37:21
    
  
  
  car the model will be a Mustang for the year I'll go with the recent year of
  


  
    
      6:37:27
    
  
  
  2024 a color I'll pick red is the car for sale I like this car so no I will
  


  
    
      6:37:35
    
  
  
  set that to be false make sure false is capitalized let's see what happens if I
  


  
    
      6:37:41
    
  
  
  attempt to print our car object of car
  


  
    
      6:37:46
    
  
  
  one what we're given is the memory address of this car object where it's
  


  
    
      6:37:52
    
  
  
  located but I would like one of the attributes located at this memory
  


  
    
      6:37:57
    
  
  
  address instead of printing the object itself we're going to access one of the attributes found within this car
  


  
    
      6:38:04
    
  
  
  we will follow the name of the car with a DOT this dot it's known as the
  


  
    
      6:38:09
    
  
  
  attribute access operator I would like the model of car
  


  
    
      6:38:15
    
  
  
  one that would give me Mustang let's access the year take the
  


  
    
      6:38:21
    
  
  
  name of the car car one dot the year 2024 followed by the color car1
  


  
    
      6:38:32
    
  
  
  docolor red car one is it for sale we'll print
  


  
    
      6:38:40
    
  
  
  that that is false now let's create a second car
  


  
    
      6:38:45
    
  
  
  we're going to reuse this class to create a second car we will create Car 2
  


  
    
      6:38:51
    
  
  
  equals car we'll pass in some different arguments a Corvette the year will be
  


  
    
      6:38:58
    
  
  
  2025 the color will be blue is this car for sale let's say that is
  


  
    
      6:39:04
    
  
  
  true instead of accessing car 1's attributes let's access car 2's
  


  
    
      6:39:11
    
  
  
  attributes that would give us a Corvette the year is 2025 the color is blue for
  


  
    
      6:39:18
    
  
  
  sale is set to true or even a third car car 3 equals a
  


  
    
      6:39:24
    
  
  
  new car we will pass in a string of charger the year
  


  
    
      6:39:32
    
  
  
  2026 the color will be yellow is this car for sale let's say that is true as
  


  
    
      6:39:38
    
  
  
  well then I will print car 3's
  


  
    
      6:39:45
    
  
  
  attributes the model is charger the year is 2026 the color is yellow for sale is
  


  
    
      6:39:51
    
  
  
  set to True with classes they can take up a lot of space for better
  


  
    
      6:39:56
    
  
  
  organization you can place them within a new python file so let's cut our class
  


  
    
      6:40:04
    
  
  
  and we will create a new python file within our project folder file new
  


  
    
      6:40:10
    
  
  
  python file the name of this python file is going to be all lowercase
  


  
    
      6:40:17
    
  
  
  car then we will paste the class that we cut originally class car which has a capital
  


  
    
      6:40:26
    
  
  
  c so from our main python file we're going to import our car file our car
  


  
    
      6:40:32
    
  
  
  module from the name of the module car import
  


  
    
      6:40:37
    
  
  
  the name of the class car then when I run this program nothing should change
  


  
    
      6:40:43
    
  
  
  we should still have access to all of our car objects you could either keep your
  


  
    
      6:40:49
    
  
  
  classes within your main python file or import them if you would like to organize things let's talk about methods
  


  
    
      6:40:56
    
  
  
  methods are actions that our objects can perform within our class we will Define
  


  
    
      6:41:01
    
  
  
  a method of Drive self is going to be provided to us when we invoke the drive
  


  
    
      6:41:09
    
  
  
  function let's print you drive the car what other
  


  
    
      6:41:15
    
  
  
  things can cars do let's stop we will
  


  
    
      6:41:22
    
  
  
  print you stop the
  


  
    
      6:41:28
    
  
  
  car let's take car1 access the drive method
  


  
    
      6:41:35
    
  
  
  you drive the car car 2 also has a drive method you drive the car same thing with
  


  
    
      6:41:41
    
  
  
  car 3 you drive the car let's access the stop
  


  
    
      6:41:47
    
  
  
  method car one. stop car 2.
  


  
    
      6:41:54
    
  
  
  stop and car 3. stop these methods are identical for
  


  
    
      6:42:00
    
  
  
  each car object instead of printing the word car let's insert the model of the
  


  
    
      6:42:06
    
  
  
  car I will convert these print statements to F strings instead of the word car let's
  


  
    
      6:42:13
    
  
  
  add a placeholder let's add self. model self is referring to the object
  


  
    
      6:42:21
    
  
  
  we're currently working with use the attribute axis operator followed by the
  


  
    
      6:42:26
    
  
  
  name of the attribute let's also do this with the stop method self do
  


  
    
      6:42:36
    
  
  
  model let's take car one use the drive method you drive the Mustang car
  


  
    
      6:42:43
    
  
  
  one. stop you drive the Mustang you stop the
  


  
    
      6:42:49
    
  
  
  Mustang let's do this with Car 2 you drive the Corvette you stop the
  


  
    
      6:42:55
    
  
  
  Corvette car three you drive the charger you stop the
  


  
    
      6:43:01
    
  
  
  charger now now within our F strings let's also insert let's insert the
  


  
    
      6:43:08
    
  
  
  color I'll add a placeholder self. color
  


  
    
      6:43:13
    
  
  
  do this with stop as well self.
  


  
    
      6:43:20
    
  
  
  color you drive the yellow charger you stop the yellow charger car one you
  


  
    
      6:43:27
    
  
  
  drive the red Mustang you stop the red Mustang card to you drive the blue
  


  
    
      6:43:32
    
  
  
  Corvette you stop the blue Corvette let's add one last method let's create a method to describe
  


  
    
      6:43:40
    
  
  
  our car we'll print the details of the car let's print I'll use an F
  


  
    
      6:43:47
    
  
  
  string add three placeholders let's print
  


  
    
      6:43:53
    
  
  
  self.y year followed by self. color then self. model
  


  
    
      6:44:04
    
  
  
  we'll take car 1 use the describe method that we created describe car 1 car 1 is a 2024
  


  
    
      6:44:14
    
  
  
  red Mustang describe Car 2 Car 2 is a 2025 blue Corvette car 3 is a 2026
  


  
    
      6:44:24
    
  
  
  yellow charger all right everybody so those are objects in Python an object is
  


  
    
      6:44:30
    
  
  
  a bundle of related attributes attributes are variables that an object
  


  
    
      6:44:35
    
  
  
  has and methods methods are functions that belong to an object they Define
  


  
    
      6:44:42
    
  
  
  what this object can do and well everybody that is a summary of object-oriented programming using python
  


  
    
  47.class variables



  
    
      6:44:50
    
  
  
  hey everybody today I got to talk about class variables in Python class variables are shared among all instances
  


  
    
      6:44:58
    
  
  
  meaning objects created from a class instance variables are defined in inside
  


  
    
      6:45:03
    
  
  
  of the Constructor class variables are defined outside of the Constructor with
  


  
    
      6:45:08
    
  
  
  class variables they allow you to share data among all objects created from the
  


  
    
      6:45:13
    
  
  
  class with instance variables each object has their own version with a class variable all those objects share
  


  
    
      6:45:21
    
  
  
  one variable here's an example we will create a class of student we also need a
  


  
    
      6:45:29
    
  
  
  Constructor when we create a student object this construct structor is automatically going to be called but we
  


  
    
      6:45:35
    
  
  
  need to pass in some arguments we are provided with self self refers to the
  


  
    
      6:45:40
    
  
  
  object we're currently working with we will set up a name parameter and an age
  


  
    
      6:45:46
    
  
  
  parameter we will assign self the object we're currently working with set the
  


  
    
      6:45:52
    
  
  
  name attribute to equal the data for the name that we receive from this parameter
  


  
    
      6:45:58
    
  
  
  and self. AG equals age let's let's construct two student objects we will
  


  
    
      6:46:06
    
  
  
  have student one equals then call the Constructor for
  


  
    
      6:46:11
    
  
  
  student so type the name of the class followed by a set of parentheses to invoke it this will automatically call
  


  
    
      6:46:17
    
  
  
  The Constructor but we have to pass in data for the name and the age for the name let's pass in SpongeBob because
  


  
    
      6:46:25
    
  
  
  basically everybody in the world knows who SpongeBob is I don't know how old SpongeBob is we'll say he's 30 we'll
  


  
    
      6:46:32
    
  
  
  create another student object which we will refer to as student 2 we will call
  


  
    
      6:46:37
    
  
  
  the Constructor of our student class pass and data for the name and age
  


  
    
      6:46:43
    
  
  
  student two will be Patrick Patrick will be 35 okay let's make sure this works let's
  


  
    
      6:46:51
    
  
  
  print student 1's name followed by student 1's
  


  
    
      6:47:00
    
  
  
  age and we should get SpongeBob and his age is 30 let's print student 2's name
  


  
    
      6:47:07
    
  
  
  and student 2's age Patrick Patrick is 35 now we'll create a class variable
  


  
    
      6:47:14
    
  
  
  class variables are defined outside the Constructor and they are shared among all objects created from that class each
  


  
    
      6:47:22
    
  
  
  object has their own name and age property these are instance variables but class variables are defined outside
  


  
    
      6:47:29
    
  
  
  the Constructor each object will share this one variable so if we're working
  


  
    
      6:47:34
    
  
  
  with students let's say there is a class variable of class year what is the
  


  
    
      6:47:44
    
  
  
  graduating year of this class 2024 now let's print student 1's
  


  
    
      6:47:52
    
  
  
  graduating year print student one.
  


  
    
      6:47:59
    
  
  
  class year
  


  
    
      6:48:05
    
  
  
  okay so SpongeBob has a class year of 2024 that's when he's graduating let's
  


  
    
      6:48:11
    
  
  
  check student two Patrick is ages 35 his graduating
  


  
    
      6:48:19
    
  
  
  class year is 2024 now with class variables you can
  


  
    
      6:48:25
    
  
  
  access them through any one object such as student one or student 2 it's good practice to access a class variable by
  


  
    
      6:48:32
    
  
  
  the name of the class rather than any object created from the class since we're accessing class year we'll access
  


  
    
      6:48:40
    
  
  
  this class variable by the name of the class of student make sure the S is
  


  
    
      6:48:47
    
  
  
  capital this helps with Clarity and readability if I was looking at this print statement I can tell that class
  


  
    
      6:48:54
    
  
  
  year is a class variable because we're accessing it directly from the class and not any instance from this class without
  


  
    
      6:49:02
    
  
  
  looking at this class I can't tell if class year is an instance variable or a
  


  
    
      6:49:08
    
  
  
  class variable but if I access it via the class name it's more explicit so
  


  
    
      6:49:13
    
  
  
  it's good practice to access a class variable by the class name itself and not any one instance of this
  


  
    
      6:49:20
    
  
  
  class let's create another class variable we'll create a class variable
  


  
    
      6:49:26
    
  
  
  to keep track of how many students we have created this class variable will be num students meaning number of students
  


  
    
      6:49:35
    
  
  
  equals z So within our Constructor we can write any code that we want this
  


  
    
      6:49:40
    
  
  
  code will always be executed when we instantiate an object I would like to
  


  
    
      6:49:45
    
  
  
  take our number of students and increment it by one each time we construct a new student object so
  


  
    
      6:49:52
    
  
  
  instead of using self self refers to the object we're currently working with if we're constructing student one just
  


  
    
      6:49:59
    
  
  
  imagine we're replacing self with student one or student two if we were
  


  
    
      6:50:04
    
  
  
  constructing student two if we're going to be modifying a class variable in
  


  
    
      6:50:09
    
  
  
  place of self we'll use the name of the class student access our class of
  


  
    
      6:50:15
    
  
  
  student get the class variable of number of students then I will increment it by
  


  
    
      6:50:21
    
  
  
  one plus equals 1 we are constructing two student
  


  
    
      6:50:28
    
  
  
  objects I will print access our class of
  


  
    
      6:50:33
    
  
  
  student get the number of students and print it we're constructing two student
  


  
    
      6:50:39
    
  
  
  objects if I print the number of students that we have it should be two
  


  
    
      6:50:44
    
  
  
  then just to be sure that this is working let's construct a third student object student 3 equals student this
  


  
    
      6:50:53
    
  
  
  student will have a name of Squidward Squidward's age will be
  


  
    
      6:50:59
    
  
  
  55 now we have three students and for good measure let's construct one
  


  
    
      6:51:06
    
  
  
  more student 4 equals we will create a new student with a name of Sandy sy's
  


  
    
      6:51:15
    
  
  
  age will be 27 the number of students is now four
  


  
    
      6:51:20
    
  
  
  just as an exercise using an FST string let's print the student classes class year as well
  


  
    
      6:51:28
    
  
  
  as the number of students I will print use an fing
  


  
    
      6:51:33
    
  
  
  my graduating class of let's add a
  


  
    
      6:51:40
    
  
  
  placeholder access the class of student then access the class
  


  
    
      6:51:47
    
  
  
  Year my graduating class of 2024 has then we need the number of
  


  
    
      6:51:55
    
  
  
  students We'll add a placeholder access the class of student access the number of students
  


  
    
      6:52:03
    
  
  
  has blank students let's see if this works my
  


  
    
      6:52:10
    
  
  
  graduating class of 2024 has four students now if I were to change 2024 to
  


  
    
      6:52:17
    
  
  
  2025 my graduating class of 2025 has four
  


  
    
      6:52:22
    
  
  
  students let's print the name of each student these are instance variables
  


  
    
      6:52:28
    
  
  
  student one. name then we need Student two three and
  


  
    
      6:52:38
    
  
  
  four my graduating class of 2025 has four students SpongeBob Patrick
  


  
    
      6:52:44
    
  
  
  Squidward Sandy all right everybody so those are class variables class
  


  
    
      6:52:49
    
  
  
  variables are shared among all instances of a class they are defined outside of
  


  
    
      6:52:55
    
  
  
  the Constructor the benefit is that they allow you to share data among all objects created from that class and
  


  
    
      6:53:02
    
  
  
  while everybody those are class variables in Python what is going on everybody so
  


  
    
  48.inheritance 👨‍👦‍



  
    
      6:53:08
    
  
  
  today I got to talk about inheritance in Python inheritance allows a class to
  


  
    
      6:53:13
    
  
  
  inherit the attributes and methods from another class much like how a child in real life can inherit traits from A
  


  
    
      6:53:20
    
  
  
  parent by having a class inherit attributes and methods from another class this helps with code reusability
  


  
    
      6:53:27
    
  
  
  and extensibility in this example we're going to create an animal class the dog cat and mouse class will inherit
  


  
    
      6:53:34
    
  
  
  attributes and methods from the animal class we will create a class of
  


  
    
      6:53:40
    
  
  
  animal then I will Define The Constructor when we construct an animal
  


  
    
      6:53:47
    
  
  
  object let's pass in a name it's not required but it might be good for this
  


  
    
      6:53:53
    
  
  
  example we will assign the attribute of name equal to the name we
  


  
    
      6:53:58
    
  
  
  receive let's also add an attribute of is alive whenever we create an animal we
  


  
    
      6:54:05
    
  
  
  will set there is alive attribute to be true and that is a capital
  


  
    
      6:54:10
    
  
  
  T all animals can eat Define eat we will
  


  
    
      6:54:16
    
  
  
  print using an F string add a placeholder self. name the name of this
  


  
    
      6:54:23
    
  
  
  animal is eating all animals should be able to sleep Define
  


  
    
      6:54:31
    
  
  
  sleep print I'll use an FST string insert self. name is sleeping and that
  


  
    
      6:54:41
    
  
  
  is all we need for the animal class let's define class dog for a child class
  


  
    
      6:54:48
    
  
  
  to inherit the attributes and methods from another class after the class name that's going to inherit we need to add
  


  
    
      6:54:55
    
  
  
  an inheritance list with the set of parentheses then list the name of the class we're inheriting from the parent
  


  
    
      6:55:02
    
  
  
  the the dog class is going to inherit all of the attributes and methods of its parent
  


  
    
      6:55:07
    
  
  
  animal for the time being as a placeholder I'll add pass just to demonstrate this class cat is also going
  


  
    
      6:55:16
    
  
  
  to inherit from animal and class Mouse will also inherit
  


  
    
      6:55:24
    
  
  
  from animal okay I will collapse this for now
  


  
    
      6:55:30
    
  
  
  we'll create a dog object dog equals dog then pass it a name for this dog because
  


  
    
      6:55:36
    
  
  
  we have one parameter set up of name this dog will be
  


  
    
      6:55:41
    
  
  
  named Scooby as in Scooby-Doo cat equals call the cat
  


  
    
      6:55:50
    
  
  
  Constructor this cat will be named Garfield and
  


  
    
      6:55:56
    
  
  
  mouse mouse equals Mouse our Mouse will have a name of Mickey
  


  
    
      6:56:03
    
  
  
  even though there's nothing within this dog cat or Mouse class we should still have these attributes and these methods
  


  
    
      6:56:10
    
  
  
  if you inherit the animal class you should have a name attribute and is alive attribute set to true you can eat
  


  
    
      6:56:18
    
  
  
  and you can sleep let's print our dog's name dog.
  


  
    
      6:56:24
    
  
  
  name Scooby print dog. is alive
  


  
    
      6:56:34
    
  
  
  our dog is alive that is true let's have our dog object use the
  


  
    
      6:56:39
    
  
  
  eat method Scooby is eating and sleep dog.
  


  
    
      6:56:46
    
  
  
  sleep Scooby is sleeping let's replace dog with
  


  
    
      6:56:54
    
  
  
  cat the name of the cat is Garfield Garfield is alive Garfield is eating Garfield is sleeping and mouse
  


  
    
      6:57:03
    
  
  
  replace any instance of cat with mouse our mouse's name is Mickey Mickey
  


  
    
      6:57:08
    
  
  
  is alive Mickey is eating Mickey is sleeping even though these children classes are empty we're still inheriting
  


  
    
      6:57:16
    
  
  
  these attributes and methods from its parent of animal this is convenient because you don't need to copy and paste
  


  
    
      6:57:22
    
  
  
  these attributes and methods for every single class for example if I were to copy these attributes and methods and
  


  
    
      6:57:29
    
  
  
  paste them well we have a lot more codee to write
  


  
    
      6:57:35
    
  
  
  and as a consequence if I need to make a change to one of these methods I would have to do that to every single instance
  


  
    
      6:57:41
    
  
  
  of this method for example let's replace is sleeping with is asleep well now I
  


  
    
      6:57:48
    
  
  
  need to find every single Sleep Method and change it
  


  
    
      6:57:56
    
  
  
  manually it's not too bad if you only have a few classes but imagine if you have hundreds of classes that's going to
  


  
    
      6:58:02
    
  
  
  take a lot of work it's a lot easier to write the code once and then reuse it
  


  
    
      6:58:07
    
  
  
  and I only need to make that change in one place rather than make that change many times so let's change is sleeping
  


  
    
      6:58:14
    
  
  
  to is asleep and see if that works again Mickey is
  


  
    
      6:58:21
    
  
  
  asleep let's replace Mouse with dog Scooby is asleep not only that but
  


  
    
      6:58:30
    
  
  
  with children classes they can have their own attributes and methods that are different from one
  


  
    
      6:58:35
    
  
  
  another so dogs have all these attributes and methods and they can
  


  
    
      6:58:40
    
  
  
  speak let's create a speak method and I will print a unique message for dogs
  


  
    
      6:58:47
    
  
  
  woof cats will also have a speak method but it's going to be different cats will
  


  
    
      6:58:57
    
  
  
  meow then for our Mouse class they will squeak
  


  
    
      6:59:05
    
  
  
  let's have our dog
  


  
    
      6:59:10
    
  
  
  speak woof let's have our cat speak meow and our
  


  
    
      6:59:16
    
  
  
  Mouse squeak all right everybody so that's an introduction to inheritance inheritance
  


  
    
      6:59:23
    
  
  
  allows a class to inherit attributes and methods from another class much like in
  


  
    
      6:59:28
    
  
  
  real life a child can inherit traits from A parent these are also known as sub and super
  


  
    
      6:59:36
    
  
  
  classes which is a topic for another day inheritance helps with code reusability
  


  
    
      6:59:41
    
  
  
  and extensibility if all of these children classes inherit these attributes and methods from another
  


  
    
      6:59:47
    
  
  
  class we only need to write that code once and not copy it for every single class that needs it we can write and
  


  
    
      6:59:54
    
  
  
  change the code in one place for better reusability and extensibility and well everybody that is an introduction to
  


  
    
      7:00:00
    
  
  
  inheritance in Python hey everybody so today we got to talk about both multiple and multi-level
  


  
    
  49.multiple inheritance



  
    
      7:00:07
    
  
  
  inheritance we'll begin with multiple inheritance that's when a child class inherits from more than one parent class
  


  
    
      7:00:14
    
  
  
  for example a class of C can inherit the traits from both class A and B in Python
  


  
    
      7:00:21
    
  
  
  you can have more than one parent multi-level inheritance we'll talk about near the end of this topic so in this
  


  
    
      7:00:27
    
  
  
  example we're going to create two parent classes prey I'll write pass for
  


  
    
      7:00:33
    
  
  
  now and
  


  
    
      7:00:39
    
  
  
  Predator we'll create a class of rabbit a class of
  


  
    
      7:00:48
    
  
  
  Hawk then class
  


  
    
      7:00:54
    
  
  
  fish rabbit Hawk and fish are going to be children classes prey and Predator
  


  
    
      7:01:01
    
  
  
  will be parents if one of these classes rabbit hawk or fish inherit from prey they get the
  


  
    
      7:01:07
    
  
  
  ability to flee we will Define a method of flee all we'll do in this example is
  


  
    
      7:01:14
    
  
  
  print the following text this animal is fleeing if you're a
  


  
    
      7:01:21
    
  
  
  predator you get the method to hunt Define
  


  
    
      7:01:26
    
  
  
  hunt we will print this animal is is
  


  
    
      7:01:34
    
  
  
  hunting rabbits they will inherit from the prey class they're typically not Predators except that one rabbit and
  


  
    
      7:01:41
    
  
  
  Monty Python and the Holy Grail that's the exception rabbit will inherit the prey class then it gets access to a flea
  


  
    
      7:01:49
    
  
  
  method Hawks are predators they will inherit the Predator class now fish they
  


  
    
      7:01:56
    
  
  
  will hunt smaller fish and flee from bigger fish you could consider fish both
  


  
    
      7:02:02
    
  
  
  prey and predators so they will inherit both classes we will use multiple
  


  
    
      7:02:08
    
  
  
  inheritance they will inherit everything from the prey class and the Predator class now let's see if this does in fact
  


  
    
      7:02:15
    
  
  
  work now we'll create a rabbit object rabbit equals rabbit there are no parameter setup we don't need to send
  


  
    
      7:02:21
    
  
  
  any arguments to the Constructor Hawk equals Hawk and fish equals
  


  
    
      7:02:29
    
  
  
  fish so let's take our rabbit object and they should have a flea method rabbit.
  


  
    
      7:02:35
    
  
  
  flea method this animal is fleeing but they do not have a hunt method because they're not
  


  
    
      7:02:41
    
  
  
  Predators rabbit object has no attribute hunt Hawks can
  


  
    
      7:02:47
    
  
  
  hunt they're Predators they inherited that method this animal is hunting but
  


  
    
      7:02:53
    
  
  
  they can't flee they're not prey Hawk object has no attribute flea fish can do
  


  
    
      7:03:00
    
  
  
  both they inherit from the prey class and the Predator class fish. flee this animal is fleeing
  


  
    
      7:03:09
    
  
  
  fish. hunt this animal is hunting children
  


  
    
      7:03:14
    
  
  
  classes can inherit from more than one parent which is what we did for fish they are both prey and predators whereas
  


  
    
      7:03:22
    
  
  
  in rabbits are just prey Hawks are just Predators if you need to inherit from more than one parent you just add that
  


  
    
      7:03:28
    
  
  
  additional class to The Inheritance list with multi-level inheritance a parent
  


  
    
      7:03:35
    
  
  
  can inherit from another parent we will create a class of
  


  
    
      7:03:41
    
  
  
  animal and for now I'll write pass prey and Predator are going to inherit from
  


  
    
      7:03:47
    
  
  
  the animal class so we need to add animal to each inheritance
  


  
    
      7:03:53
    
  
  
  list let's say if you're an animal you get a method to eat all animals will eat
  


  
    
      7:04:01
    
  
  
  print this animal is eating and you can sleep
  


  
    
      7:04:08
    
  
  
  Define sleep print this animal is
  


  
    
      7:04:17
    
  
  
  sleeping so think of rabbit Hawk and fish as children classes prey and
  


  
    
      7:04:24
    
  
  
  Predator are those class's parents and animal is the grandparent prey and
  


  
    
      7:04:30
    
  
  
  Predator will inherit everything that the animal class has rabbit Hawk and fish will inherit everything the prey
  


  
    
      7:04:37
    
  
  
  and Predator classes have so now our rabbit Hawk and fish classes should have
  


  
    
      7:04:42
    
  
  
  the ability to eat and sleep and we'll test that rabbit.
  


  
    
      7:04:48
    
  
  
  eat this animal is eating rabbit. sleep this animal is sleeping let's
  


  
    
      7:04:55
    
  
  
  check out fish fish. eat this animal is eating fish. sleep
  


  
    
      7:05:03
    
  
  
  this animal is sleeping okay we're going to expand upon our example a little bit let me zoom out
  


  
    
      7:05:11
    
  
  
  each of our objects is going to have a name our rabbit will have a first name of bugs Hawk will be Tony as in Tony
  


  
    
      7:05:20
    
  
  
  Hawk our fish will be Nemo within our classes we don't have
  


  
    
      7:05:26
    
  
  
  any Constructor set up in which class should we assign the name attribute
  


  
    
      7:05:33
    
  
  
  let's do so within our animal class so we will Define a
  


  
    
      7:05:39
    
  
  
  Constructor to assign these attributes we will receive a
  


  
    
      7:05:44
    
  
  
  name we'll assign self. name equals name
  


  
    
      7:05:50
    
  
  
  now with these other classes if you're not assigning any attributes or if you don't need any other initialization
  


  
    
      7:05:56
    
  
  
  logic you don't need a Constructor we'll implicitly use the Constructor we inherit from the
  


  
    
      7:06:02
    
  
  
  parent let's convert each of these print statements to an F
  


  
    
      7:06:09
    
  
  
  string replace animal with self.
  


  
    
      7:06:21
    
  
  
  name now let's have our rabbit use the E
  


  
    
      7:06:28
    
  
  
  method oh we should get rid of this
  


  
    
      7:06:35
    
  
  
  there we go bugs is eating rabbit. sleep
  


  
    
      7:06:41
    
  
  
  bugs is sleeping rabbit. flee bugs is fleeing let's check out our
  


  
    
      7:06:47
    
  
  
  Hawk Hawks don't have a flea method because they're Predators not
  


  
    
      7:06:53
    
  
  
  prey let's eat Tony is eating let's sleep Tony is sleeping let's
  


  
    
      7:07:02
    
  
  
  hunt Tony is hunting let's check our fish next our fish can eat Nemo is
  


  
    
      7:07:09
    
  
  
  eating our fish can sleep Nemo is sleeping they can
  


  
    
      7:07:15
    
  
  
  flee Nemo is fleeing and Hunt Nemo is
  


  
    
      7:07:21
    
  
  
  hunting okay everybody that is both multiple and multi-level inheritance with multiple inheritance a
  


  
    
      7:07:29
    
  
  
  child can inherit from more than one parent class you just add each additional class to The Inheritance list
  


  
    
      7:07:36
    
  
  
  with multi-level inheritance a child can inherit from a parent which inherits
  


  
    
      7:07:42
    
  
  
  from another parent Class C can inherit from B where Class B inherits from a
  


  
    
      7:07:48
    
  
  
  think of C as the child b as the parent and a as the grandparent c will have all
  


  
    
      7:07:54
    
  
  
  the attributes and methods even available within the grandparent class of a and well everybody that is both
  


  
    
      7:08:01
    
  
  
  multiple and multi-level inheritance in Python hey everybody so today I got to
  


  
    
  50.super()



  
    
      7:08:06
    
  
  
  talk about the super function in Python super is a function it's used within a
  


  
    
      7:08:12
    
  
  
  child class to call methods from a parent class the child class is the
  


  
    
      7:08:17
    
  
  
  subass the parent class is the super class hence why this function is named the super function using the super
  


  
    
      7:08:24
    
  
  
  function it allows you to extend the functionality of the inherited methods here's an example we'll create a few
  


  
    
      7:08:30
    
  
  
  shape object objects we'll need to set up the classes though we'll have class
  


  
    
      7:08:36
    
  
  
  Circle for the time being I'll just write pass we'll fill it in later class
  


  
    
      7:08:44
    
  
  
  square and class
  


  
    
      7:08:49
    
  
  
  triangle for each of these classes in order to instantiate objects we'll need a Constructor we will Define our
  


  
    
      7:08:56
    
  
  
  Constructor our init method when creating circles what sorts
  


  
    
      7:09:02
    
  
  
  of attributes should a circle have let's say a color what's the color of the
  


  
    
      7:09:07
    
  
  
  circle is it filled or not fil will be another attribute and a
  


  
    
      7:09:14
    
  
  
  radius then let's assign these self. color equals the color that
  


  
    
      7:09:20
    
  
  
  we receive self. filled equals
  


  
    
      7:09:26
    
  
  
  filled self. rius equals radius
  


  
    
      7:09:32
    
  
  
  let's do this with the square and Triangle really I'll just copy our Constructor and paste it squares don't
  


  
    
      7:09:39
    
  
  
  have a radius with a square the width and the height are the same let's replace radius with width we'll also
  


  
    
      7:09:46
    
  
  
  keep the color and filled attributes self. width equals width now with
  


  
    
      7:09:54
    
  
  
  triangles again let's copy our Constructor we'll need a width and a height
  


  
    
      7:10:02
    
  
  
  self. height equals height so with programming we try not to
  


  
    
      7:10:08
    
  
  
  repeat ourselves if we don't have to what do all of these classes have in common they all share the attributes of
  


  
    
      7:10:15
    
  
  
  color and filled the ways in which they are different is that Circle has a radius
  


  
    
      7:10:22
    
  
  
  attribute square has a width triangle has a width and a height if we have to make any changes to one of these
  


  
    
      7:10:28
    
  
  
  attributes we would have to do so manually for example let's replace filled with is
  


  
    
      7:10:34
    
  
  
  filed now I need to look throughout my code for any instance of filled and replace it with is
  


  
    
      7:10:40
    
  
  
  filled it's a lot of work and I might make a mistake such as here and here it's
  


  
    
      7:10:48
    
  
  
  better to write your code once and try and reuse it so that's where inheritance and the super function can come in handy
  


  
    
      7:10:54
    
  
  
  we're going to take the attributes of color and is filled and place it within a parent class these children classes
  


  
    
      7:11:00
    
  
  
  will inherit those attributes so class what do they all have in common they're all shapes class
  


  
    
      7:11:08
    
  
  
  shape and for now I'll write pass circle is going to inherit from its parent of
  


  
    
      7:11:14
    
  
  
  shape that also applies with square and triangle we'll set up a Constructor for
  


  
    
      7:11:20
    
  
  
  shape Define init we will pass in the color and is
  


  
    
      7:11:29
    
  
  
  filled then we will assign these
  


  
    
      7:11:35
    
  
  
  attributes self. color equals color self. is filled equals is filled
  


  
    
      7:11:46
    
  
  
  we don't need to manually assign these attributes within each of these Constructors for the children instead what we have to do is
  


  
    
      7:11:53
    
  
  
  within the Constructor for each of these children classes we have to call the Constructor for the parent also known as
  


  
    
      7:12:00
    
  
  
  the super class of shape so we will eliminate these two lines of
  


  
    
      7:12:05
    
  
  
  code use the super function dot call The Constructor of the
  


  
    
      7:12:12
    
  
  
  parent that is the dunder init method but we need to pass in the color that we
  


  
    
      7:12:19
    
  
  
  receive and is filled this will be a Boolean and let's do this with the
  


  
    
      7:12:25
    
  
  
  square class and the triangle class
  


  
    
      7:12:31
    
  
  
  we still need radius for the circle width for the square width and height for the triangle we're going to call the
  


  
    
      7:12:37
    
  
  
  super function to take care of whatever attributes all these types of shapes have in common such as color and is
  


  
    
      7:12:44
    
  
  
  filled now let's see if this works let's construct a few objects we will create a circle named
  


  
    
      7:12:50
    
  
  
  Circle call The Constructor for Circle we have to pass in a color a Boolean if
  


  
    
      7:12:56
    
  
  
  it's filled or not and a radius so for the color of the circle let's say red
  


  
    
      7:13:03
    
  
  
  is filled let's say that is true and a radius of five you could even use
  


  
    
      7:13:09
    
  
  
  keyword arguments for better readability although not necessary but for clarity let's say color equals
  


  
    
      7:13:16
    
  
  
  red is filled equals true radius equals
  


  
    
      7:13:22
    
  
  
  5 let's see if this works I will print our Circle color
  


  
    
      7:13:33
    
  
  
  it is red print our colors is filled
  


  
    
      7:13:39
    
  
  
  attribute the circle is filled that is true and the
  


  
    
      7:13:44
    
  
  
  radius print Circle do radius the radius of the
  


  
    
      7:13:49
    
  
  
  circle is five we could even convert this to an F string I'll add a
  


  
    
      7:13:59
    
  
  
  placeholder then add centim
  


  
    
      7:14:04
    
  
  
  5 cm let's construct a square object square equals
  


  
    
      7:14:11
    
  
  
  Square we'll need a color is filled and a width I'll just copy what we have and make a few changes replace radius with
  


  
    
      7:14:20
    
  
  
  width the color will be blue is filled will be false the width will be six we
  


  
    
      7:14:27
    
  
  
  don't need a height because squares have an even width and height if we ever need the height we can assume it's the same
  


  
    
      7:14:33
    
  
  
  as the width in this case six let's check out our Square square. color
  


  
    
      7:14:39
    
  
  
  Square dot is filled Square do
  


  
    
      7:14:44
    
  
  
  width our square is blue it's not filled in the width is 6
  


  
    
      7:14:50
    
  
  
  cm let's create a triangle object triangle equals
  


  
    
      7:14:56
    
  
  
  triangle pass in our arguments the color will be yellow is
  


  
    
      7:15:02
    
  
  
  filled will be true the width will be seven and the height will be
  


  
    
      7:15:10
    
  
  
  eight let's print our triangle's color is it filled it's width and its
  


  
    
      7:15:21
    
  
  
  height our triangle is yellow it's filled in the width is 7 cm the height
  


  
    
      7:15:27
    
  
  
  is 8 cm so that's how you can use the super super function to reuse the Constructor
  


  
    
      7:15:33
    
  
  
  of a parent class we don't need to manually assign each of these attributes within each of the children classes we
  


  
    
      7:15:39
    
  
  
  can do that in just one place when we refer to Super imagine that we're replacing this with the parent class
  


  
    
      7:15:46
    
  
  
  name such as shape that might be a good way to think of
  


  
    
      7:15:52
    
  
  
  it use the Constructor of the parent class of shape and pass these arguments
  


  
    
      7:15:58
    
  
  
  in what you could do as well is is extend the functionality of a method So within our shape class let's create a
  


  
    
      7:16:06
    
  
  
  method of describe we will describe the attributes of this shape we will
  


  
    
      7:16:13
    
  
  
  print use an FST string when we want to describe our shape let's say it is at a
  


  
    
      7:16:20
    
  
  
  placeholder self. color what is the color of this shape and is it filled or
  


  
    
      7:16:27
    
  
  
  not and add a placeholder we'll use a turn AR operator print
  


  
    
      7:16:34
    
  
  
  filled if self. is filled is true else
  


  
    
      7:16:40
    
  
  
  we will print not
  


  
    
      7:16:45
    
  
  
  filled each of these types of shapes circle square and triangle will have
  


  
    
      7:16:51
    
  
  
  access to a describe method let's attempt to use it take our Circle use the describe
  


  
    
      7:16:58
    
  
  
  method that's inherited it is red and filled
  


  
    
      7:17:04
    
  
  
  Square it is blue and not filled triangle it is yellow and
  


  
    
      7:17:11
    
  
  
  filled so then we also have method overwriting what if we create a similar
  


  
    
      7:17:16
    
  
  
  method of describe within circle square and triangle let's do
  


  
    
      7:17:22
    
  
  
  that Define a describe
  


  
    
      7:17:27
    
  
  
  method within our Circle let's C calculate the area what's the area of the circle I'll use an F string it is a
  


  
    
      7:17:37
    
  
  
  circle with an area of then we'll calculate the area given the
  


  
    
      7:17:44
    
  
  
  radius to calculate the area of a circle we can take Pi I'll just say 3.14 just
  


  
    
      7:17:50
    
  
  
  to keep it simple times the radius squared self. radius times self.
  


  
    
      7:17:58
    
  
  
  rius if I were to call the describe method will we use the parents version
  


  
    
      7:18:03
    
  
  
  of describe or the child so let's take our Circle use the
  


  
    
      7:18:10
    
  
  
  describe method the result it is a circle with an area of
  


  
    
      7:18:17
    
  
  
  78.5 I should really add cenim squar after that ctim
  


  
    
      7:18:24
    
  
  
  squared this is called method overwriting if a child shares a similar method with a parent you'll use the
  


  
    
      7:18:31
    
  
  
  child's version and not the parents this is Method overwriting if you would like to extend the functionality of a method
  


  
    
      7:18:39
    
  
  
  from a parent you can use the super function not only do I want to use the describe method of the child I would
  


  
    
      7:18:45
    
  
  
  also like to use the describe method of the parent So within this function we will use the super function access the
  


  
    
      7:18:54
    
  
  
  describe method of the parent what we're doing is extending the functionality of the descrip
  


  
    
      7:19:02
    
  
  
  method it is a circle with an area of 78.5 CM squ the circle is red and it's
  


  
    
      7:19:10
    
  
  
  filled or you could change up the order let's use the parent classes
  


  
    
      7:19:17
    
  
  
  describe method and extend the functionality with our own print statement it is red and filled it is a
  


  
    
      7:19:24
    
  
  
  circle with an area of 78.5 CM squ let's finish this with the square and triangle
  


  
    
      7:19:30
    
  
  
  classes I'll copy what we have for the described method within the circle class but we'll make a different
  


  
    
      7:19:39
    
  
  
  calculation describe the square it is a square with an area of take self. width
  


  
    
      7:19:47
    
  
  
  times self. width the height and the width are going to be the same if it's a
  


  
    
      7:19:54
    
  
  
  square then describe our triangle
  


  
    
      7:20:01
    
  
  
  it is a triangle with an area of width time height we have a height in this case
  


  
    
      7:20:08
    
  
  
  divided two we've already described our Circle let's describe our
  


  
    
      7:20:14
    
  
  
  Square it is a square with an area of 36 CM squ it is blue and not filled let's
  


  
    
      7:20:21
    
  
  
  describe our triangle it is a triangle with an area of 28.0 CM squ it is yellow and filled
  


  
    
      7:20:30
    
  
  
  all all right everybody that is the super function it's used in a child class to call the methods from a parent
  


  
    
      7:20:36
    
  
  
  class also known as the super class it allows you to extend the functionality
  


  
    
      7:20:41
    
  
  
  of the inherited methods within a child class you could use it within a Constructor to assign any attributes
  


  
    
      7:20:48
    
  
  
  that all of its siblings have in common such as color or if that shape is filled
  


  
    
      7:20:54
    
  
  
  when used within any other method you can extend the functionality of that method not only are we printing this
  


  
    
      7:21:01
    
  
  
  message from the parent we're tacking on another print statement before that and well everybody that is the super
  


  
    
      7:21:07
    
  
  
  function in Python what is going on everybody so today I got to talk about
  


  
    
  51.polymorphism



  
    
      7:21:13
    
  
  
  polymorphism in Python polymorphism is a programming concept it's a Greek word
  


  
    
      7:21:18
    
  
  
  that means to have many forms or faces poly means many morph means form in
  


  
    
      7:21:24
    
  
  
  programming an object can take one of many forms there's two ways to achieve polymorphism one is through inheritance
  


  
    
      7:21:31
    
  
  
  an object could be treated of the same type as a parent class there's also duck
  


  
    
      7:21:37
    
  
  
  typing which we'll talk about in the next Topic in this video we're more focused on inheritance what we'll do in
  


  
    
      7:21:43
    
  
  
  this video is create a class of shape we'll write pass as a placeholder we
  


  
    
      7:21:49
    
  
  
  will create a class of circle which will inherit from shape again writing
  


  
    
      7:21:56
    
  
  
  pass class Square inherits from from
  


  
    
      7:22:02
    
  
  
  shape class triangle which inherits from
  


  
    
      7:22:10
    
  
  
  shape if I was to create a circle object Circle equals
  


  
    
      7:22:15
    
  
  
  Circle our Circle identifies as a circle and since our Circle class inherits from
  


  
    
      7:22:21
    
  
  
  the shape class our circle is also considered a shape it has two forms it's
  


  
    
      7:22:26
    
  
  
  a circle and it's a shape but our Circle isn't a square or a triangle that could
  


  
    
      7:22:31
    
  
  
  also apply to our Square class our square is a square our square
  


  
    
      7:22:37
    
  
  
  is also considered a shape but our square is not a circle or a triangle those are two possible forms for our
  


  
    
      7:22:43
    
  
  
  Square it's a square and a shape so let's say we would like to create a list of shapes what do they all have in
  


  
    
      7:22:50
    
  
  
  common well they're all shapes a descriptive name for this list would be shapes equals an empty list I will
  


  
    
      7:22:58
    
  
  
  instantiate a circle object object a square object and a triangle
  


  
    
      7:23:06
    
  
  
  object our circle is a circle and a shape our square is a square and a shape
  


  
    
      7:23:12
    
  
  
  our triangle is a triangle and a shape each of these objects has two forms or
  


  
    
      7:23:18
    
  
  
  two faces let's fill in some of these classes let's say that with our shape class we will define an area method
  


  
    
      7:23:26
    
  
  
  Define area I'm going to turn this into an abstract method meod I'll just write
  


  
    
      7:23:31
    
  
  
  pass to work with abstract classes we need to import that from ABC import
  


  
    
      7:23:39
    
  
  
  Capital ABC as well as abstract method
  


  
    
      7:23:44
    
  
  
  preceding the area method I will add a decorator of abstract method our circle
  


  
    
      7:23:50
    
  
  
  square and triangle classes they're all considered shapes they inherit from this class we need to Define an area method
  


  
    
      7:23:57
    
  
  
  for each since they're all considered a shape every shape has an area with our
  


  
    
      7:24:02
    
  
  
  class of circle let's define a Constructor Define in
  


  
    
      7:24:08
    
  
  
  nit we will pass in one argument a radius what is the radius of the circle
  


  
    
      7:24:14
    
  
  
  assign an attribute of radius equals the radius we receive let's do this with
  


  
    
      7:24:20
    
  
  
  square Define innit one parameter the length of a side
  


  
    
      7:24:28
    
  
  
  self. side equal side then
  


  
    
      7:24:33
    
  
  
  triangle Define init we have two parameters base and
  


  
    
      7:24:43
    
  
  
  height self. base equals base self.
  


  
    
      7:24:49
    
  
  
  height equals height all right now let's finish defining these area methods for
  


  
    
      7:24:54
    
  
  
  each class we will return
  


  
    
      7:25:02
    
  
  
  3.14 time self. radius to the^ of
  


  
    
      7:25:08
    
  
  
  two so given a radius that's how to calculate the area of a circle then with
  


  
    
      7:25:14
    
  
  
  our Square Define area we will
  


  
    
      7:25:22
    
  
  
  return self do side to the power of
  


  
    
      7:25:28
    
  
  
  two then with our triangle Define
  


  
    
      7:25:35
    
  
  
  area return self. Bas time self. height time
  


  
    
      7:25:45
    
  
  
  0.5 now we have to pass in some arguments for our Circle we need a radius I'll pick four for the square the
  


  
    
      7:25:52
    
  
  
  length of a side will be five then our triangle the base will be six the height
  


  
    
      7:25:57
    
  
  
  will be seven we're going to write a loop to iterate through our shapes for every shape in
  


  
    
      7:26:05
    
  
  
  shapes then we're going to print for every shape called the area
  


  
    
      7:26:14
    
  
  
  method and that would give me these numbers if you would like you can format
  


  
    
      7:26:19
    
  
  
  the output I'll just use an F
  


  
    
      7:26:25
    
  
  
  string I'll add cm squared
  


  
    
      7:26:35
    
  
  
  much better what if we were to create a class that's completely unrelated to
  


  
    
      7:26:41
    
  
  
  shapes I will create a class of
  


  
    
      7:26:47
    
  
  
  pizza I will Define a Constructor to construct a pizza object
  


  
    
      7:26:53
    
  
  
  we need a topping and a radius what is the radius of the pizza
  


  
    
      7:27:00
    
  
  
  self. topping equals topping self. rius equals
  


  
    
      7:27:09
    
  
  
  radius within my list of shapes I'll add a pizza object but I have to pass in a topping
  


  
    
      7:27:16
    
  
  
  such as pepperoni and what is the radius of the
  


  
    
      7:27:22
    
  
  
  pizza let's say 15 cm so our pizza our pizza class doesn't have an area method
  


  
    
      7:27:29
    
  
  
  here's what happens when I run this we get an attribute error Pizza
  


  
    
      7:27:35
    
  
  
  object has no attribute area our pizza object is considered a
  


  
    
      7:27:40
    
  
  
  pizza but it is not considered a shape it does not inherit from the shape class
  


  
    
      7:27:45
    
  
  
  at the top here you know what a pizza is circular it could be considered a circle
  


  
    
      7:27:51
    
  
  
  so how about this let's take the pizza class it will inherit from the circle
  


  
    
      7:27:56
    
  
  
  class and within our Circle class we're already assigning the radius to the radius attribute so instead of doing
  


  
    
      7:28:04
    
  
  
  that here within the Constructor for our pizza class let's call the super Constructor super which refers to the
  


  
    
      7:28:11
    
  
  
  parent use its Constructor then pass in the radius we
  


  
    
      7:28:16
    
  
  
  receive let's see if this works now that does here is the area of our
  


  
    
      7:28:24
    
  
  
  pizza our pizza is considered a pizza it inherits from the circle class so it's
  


  
    
      7:28:29
    
  
  
  also considered a circle and our Circle class inherits from the shape class our
  


  
    
      7:28:35
    
  
  
  pizza has three forms our pizza is considered a pizza it's also considered a circle and it's also considered a
  


  
    
      7:28:42
    
  
  
  shape it would make sense for it to fit into this list of shapes because our pizza also identifies as a shape so
  


  
    
      7:28:50
    
  
  
  that's polymorphism everybody it's a Greek word meaning to have many forms or faces poly meaning many morph meaning
  


  
    
      7:28:57
    
  
  
  form in Python there's two ways to achieve polymorphism one through inheritance an object could be treated
  


  
    
      7:29:04
    
  
  
  of the same type as a parent and there's also duck typing which we'll discuss more in the next topic stay tuned for
  


  
    
      7:29:11
    
  
  
  that and well everybody that's polymorphism in Python hey everybody so today I got to
  


  
    
  52.duck typing



  
    
      7:29:17
    
  
  
  talk about duck typing in Python duck typing is another way to achieve polymorphism besides using inheritance
  


  
    
      7:29:25
    
  
  
  objects can be treated as if they're a different type as long as they meet the minimum necessary at attributes and
  


  
    
      7:29:30
    
  
  
  methods required of them it follows this adage if it looks like a duck and quacks
  


  
    
      7:29:35
    
  
  
  like a duck it must be a duck as long as an object resembles another it could
  


  
    
      7:29:41
    
  
  
  also be treated of that type so in this example let's create a class of
  


  
    
      7:29:47
    
  
  
  animal we will have a class attribute of aive if you're an animal you will have
  


  
    
      7:29:53
    
  
  
  an attribute of aive you're a living creature let's create a class of dog
  


  
    
      7:30:00
    
  
  
  the dog class will inherit from the animal class they will inherit the alive
  


  
    
      7:30:05
    
  
  
  attribute let's also Define a speak method if you're a dog you gain the ability to speak we will
  


  
    
      7:30:14
    
  
  
  print woof then we'll create a cat class class cat inherits from animal for
  


  
    
      7:30:23
    
  
  
  the speak method we will print meow let's create a list of animals what
  


  
    
      7:30:29
    
  
  
  do these two classes have in common they both could be considered animals let's
  


  
    
      7:30:34
    
  
  
  create a list of animals we will construct a dog object
  


  
    
      7:30:40
    
  
  
  and a cat object if I was to write a for Loop for every animal in my list of
  


  
    
      7:30:48
    
  
  
  animals have each animal use its speak method which will result in the dog
  


  
    
      7:30:56
    
  
  
  going woof the cat going meow they're both speaking what if we add a class that has nothing
  


  
    
      7:31:02
    
  
  
  to do with animals like class car cars will have a horn method that's
  


  
    
      7:31:11
    
  
  
  how they speak when you honk the horn you will
  


  
    
      7:31:16
    
  
  
  print honk within my list of animals let's
  


  
    
      7:31:21
    
  
  
  create a car object it really doesn't belong in here but let's see what
  


  
    
      7:31:28
    
  
  
  happens we have an attribute error car object has no attribute
  


  
    
      7:31:34
    
  
  
  speak our car object doesn't have the minimum necessary attributes and
  


  
    
      7:31:40
    
  
  
  methods when iterating through this list of animals we're calling each animal speak method which our car object
  


  
    
      7:31:47
    
  
  
  doesn't have but it does have a horn method so what if we rename our horn
  


  
    
      7:31:52
    
  
  
  method as speak maybe it's an AI car or
  


  
    
      7:31:58
    
  
  
  something well this woodwork the dog goes woof the cat goes meow the car goes
  


  
    
      7:32:05
    
  
  
  honk so our car object it quacks like a duck we could
  


  
    
      7:32:11
    
  
  
  consider it a duck it has the minimum necessary methods to be considered an
  


  
    
      7:32:17
    
  
  
  animal animals inherit this alive attribute let's utilize that after the
  


  
    
      7:32:23
    
  
  
  animal speaks let's print their alive attribute print my animals Al live
  


  
    
      7:32:31
    
  
  
  attribute my car object doesn't have that attribute we get an attribute error
  


  
    
      7:32:37
    
  
  
  car object has no attribute alive but if I was to add that
  


  
    
      7:32:43
    
  
  
  attribute alive equals
  


  
    
      7:32:48
    
  
  
  false we have true for the dog it's living true for the cat it's living but
  


  
    
      7:32:54
    
  
  
  false for the car it's not living it's not a living creature my car meets the minimum
  


  
    
      7:33:00
    
  
  
  necessary requirements to be considered an animal if I were to set this to be
  


  
    
      7:33:07
    
  
  
  alive well then it would be a living car kind of like the movie Cars so with
  


  
    
      7:33:13
    
  
  
  python duck typing is another way to achieve polymorphism besides using
  


  
    
      7:33:18
    
  
  
  inheritance as long as an object has the minimum necessary attributes and methods you could treat it as a different type
  


  
    
      7:33:24
    
  
  
  of object if it looks like a duck and quacks like a duck it must be a duck
  


  
    
      7:33:30
    
  
  
  and well everybody that is duck typing in Python hey what's going on everybody
  


  
    
  53.static methods



  
    
      7:33:36
    
  
  
  today I'm going to talk about static methods in Python a static method is a method that belongs to a class rather
  


  
    
      7:33:44
    
  
  
  than any object from that class any instance instance methods we're already
  


  
    
      7:33:49
    
  
  
  familiar with them they are methods that belong to individual objects created from that class they're best for
  


  
    
      7:33:56
    
  
  
  operations on instances of that class any objects whereas static methods
  


  
    
      7:34:01
    
  
  
  they're best for utility functions within a class that do not need access to class data I'll demonstrate the
  


  
    
      7:34:08
    
  
  
  differences between an instance method and a static method we'll Begin by creating a class of
  


  
    
      7:34:15
    
  
  
  employee we'll need a Constructor let's define
  


  
    
      7:34:20
    
  
  
  that to create an employee object we'll need a name and a job
  


  
    
      7:34:26
    
  
  
  position we will assign self. name equals name
  


  
    
      7:34:33
    
  
  
  self.pos equals position we will create an instance
  


  
    
      7:34:39
    
  
  
  method of get info we will return employee info we will return an FST string where
  


  
    
      7:34:48
    
  
  
  we will display self. name equals
  


  
    
      7:34:57
    
  
  
  self.pos get info is an instance method each object that we create from this
  


  
    
      7:35:03
    
  
  
  class will have their own get info method to return the information on that object the object's name and the
  


  
    
      7:35:10
    
  
  
  object's position now we'll create a static method to create a static method we need
  


  
    
      7:35:16
    
  
  
  a decorator of static method static methods are best for General utility
  


  
    
      7:35:23
    
  
  
  functions within a class we'll Define a method to check to see if a job a
  


  
    
      7:35:29
    
  
  
  position is valid which we will name is valid
  


  
    
      7:35:35
    
  
  
  position so static methods they don't have self as the first argument we're not working with any objects created
  


  
    
      7:35:42
    
  
  
  from this class to check to see if a position is valid we will pass in a job position which I will name as
  


  
    
      7:35:51
    
  
  
  position I will create a list of valid
  


  
    
      7:35:57
    
  
  
  positions let's assume that our is the Crusty Crab what are some valid positions a manager is a valid position
  


  
    
      7:36:06
    
  
  
  a cashier a cook then let's say a
  


  
    
      7:36:13
    
  
  
  janitor then we will return we'll use a membership operator check if position that we
  


  
    
      7:36:22
    
  
  
  receive is in our list of valid positions
  


  
    
      7:36:30
    
  
  
  what we have done is that we have created a static method we don't need to rely on any objects to use this method
  


  
    
      7:36:37
    
  
  
  for example to use a static method we will use the name of the class rather than
  


  
    
      7:36:44
    
  
  
  any object that we create from this class such as this we don't need to do
  


  
    
      7:36:51
    
  
  
  that we type the class name followed by the static method is valid position
  


  
    
      7:37:02
    
  
  
  then I did set this up to accept one argument let's check to see if a cook is
  


  
    
      7:37:08
    
  
  
  a valid position then I do need to print this
  


  
    
      7:37:13
    
  
  
  what is the output a cook is a valid position what
  


  
    
      7:37:19
    
  
  
  about a rocket scientist that would probably be s's job
  


  
    
      7:37:25
    
  
  
  that is false a rocket scientist is not a valid position at the crusty
  


  
    
      7:37:30
    
  
  
  crab this is a static method it belongs to the class not any object created from
  


  
    
      7:37:36
    
  
  
  that class now let's create a few employee objects let's say employee 1
  


  
    
      7:37:42
    
  
  
  equals a new employee we have to pass in a name and a job Eugene will be the first name that's
  


  
    
      7:37:50
    
  
  
  Mr Krabs he will be a manager employee
  


  
    
      7:37:57
    
  
  
  2 equals employee
  


  
    
      7:38:02
    
  
  
  Squidward will be a cashier employee
  


  
    
      7:38:08
    
  
  
  3 equals employee employee 3 will be
  


  
    
      7:38:14
    
  
  
  SpongeBob SpongeBob will be a cook to call an instance method we have
  


  
    
      7:38:20
    
  
  
  to access one of the instances of the class in order to use it if I want to check the info on
  


  
    
      7:38:27
    
  
  
  employee 1 I will access that object that instance use the get info method then I
  


  
    
      7:38:35
    
  
  
  need to print it take employee one get the info Eugene
  


  
    
      7:38:43
    
  
  
  is the manager let's do this with employee 2 and employee
  


  
    
      7:38:50
    
  
  
  3 Eugene Mr Krabs is the manager Squidward is the cashier SpongeBob is
  


  
    
      7:38:56
    
  
  
  the cook for an instance method you access a object then call the instance
  


  
    
      7:39:01
    
  
  
  method with the static method you only need to access that class you don't even
  


  
    
      7:39:07
    
  
  
  need to create any objects from that class it's a general utility
  


  
    
      7:39:12
    
  
  
  method all right everybody those are static methods they're a method that belongs to a class rather than any
  


  
    
      7:39:19
    
  
  
  objects created from that class they're usually used for General utility functions that do not need access to
  


  
    
      7:39:26
    
  
  
  class data and well everybody those are static methods in Python hey what's going on people so
  


  
    
  54.class methods



  
    
      7:39:33
    
  
  
  today I got to talk about class methods in Python a class method allows operations related to the class itself
  


  
    
      7:39:40
    
  
  
  they take CLS as the first parameter whereas instance methods will take self
  


  
    
      7:39:46
    
  
  
  self refers to any object created from that class CLS meaning class refers to
  


  
    
      7:39:51
    
  
  
  the class not any objects here's an example we will create a class of
  


  
    
      7:39:57
    
  
  
  student we'll need a Constructor to construct some student
  


  
    
      7:40:03
    
  
  
  objects all students will have a name and a
  


  
    
      7:40:08
    
  
  
  GPA self. name equals name self. GPA
  


  
    
      7:40:14
    
  
  
  equals GPA we will also create a class variable for this demonstration of count we will
  


  
    
      7:40:23
    
  
  
  count how many students we create whenever we construct a student
  


  
    
      7:40:28
    
  
  
  object we will access the class of student take our count variable
  


  
    
      7:40:34
    
  
  
  increment it by one whenever we create a student object increase count by
  


  
    
      7:40:40
    
  
  
  one I will create an instance method of get
  


  
    
      7:40:47
    
  
  
  info instance methods have self as the first parameter we're referring to the
  


  
    
      7:40:52
    
  
  
  object we're currently working with I will return an F string where we will
  


  
    
      7:40:59
    
  
  
  display the students name and their GPA self.
  


  
    
      7:41:05
    
  
  
  name self. GPA I'll add a comment that this is an
  


  
    
      7:41:12
    
  
  
  instance method Now to create a class method to
  


  
    
      7:41:17
    
  
  
  work with class data we will declare a class method with a class method
  


  
    
      7:41:22
    
  
  
  decorator class method what we're going to do is Define
  


  
    
      7:41:28
    
  
  
  a method to get the count the class variable of count this method will be called get
  


  
    
      7:41:37
    
  
  
  count rather than self as the first parameter we'll be working with a class
  


  
    
      7:41:42
    
  
  
  CLS meaning class I will return an F
  


  
    
      7:41:47
    
  
  
  string total number of
  


  
    
      7:41:53
    
  
  
  students at a placeholder CLS count let's test this to call a class
  


  
    
      7:42:01
    
  
  
  method you take the name of the class followed by the class method get count
  


  
    
      7:42:07
    
  
  
  and then we do need to print this what is the count of my current
  


  
    
      7:42:14
    
  
  
  students total number of students is zero let's create a few student
  


  
    
      7:42:20
    
  
  
  objects we will create student one equals called the student Constructor we
  


  
    
      7:42:26
    
  
  
  have to pass in a name and a GPA let's say that the name is SpongeBob SpongeBob
  


  
    
      7:42:32
    
  
  
  has a GPA of 3.2 we'll create two more students student two student three
  


  
    
      7:42:40
    
  
  
  student two will be Patrick Patrick has a
  


  
    
      7:42:46
    
  
  
  2.0 then Sandy Sandy Smart in fact she's a genius she has a perfect
  


  
    
      7:42:53
    
  
  
  4.0 now let's count the number of students total number of students is
  


  
    
      7:43:00
    
  
  
  three when we call this class method we can access or modify class
  


  
    
      7:43:06
    
  
  
  data this class variable of count rather than using self we use CLS for the
  


  
    
      7:43:14
    
  
  
  class let's create one more class method this time I'll calculate the total GPA
  


  
    
      7:43:20
    
  
  
  of all my students we'll need a class variable to hold that data let's say total GPA
  


  
    
      7:43:29
    
  
  
  equals 0 whenever we construct a student object we will access our class of student get
  


  
    
      7:43:37
    
  
  
  the total GPA then add plus equals this student's
  


  
    
      7:43:44
    
  
  
  GPA that we have just created basically speaking the total GPA this variable is
  


  
    
      7:43:50
    
  
  
  going to accumulate all of the GPA of every student and store it as a sum to
  


  
    
      7:43:56
    
  
  
  find the average we're going to divide it by the count the number of students we'll do that within a class method to
  


  
    
      7:44:03
    
  
  
  create a class method again we need to use the class method decorator I will Define a method of get
  


  
    
      7:44:11
    
  
  
  average GPA the first parameter is CLS for
  


  
    
      7:44:16
    
  
  
  class I will check if CLS count the
  


  
    
      7:44:22
    
  
  
  count variable of my class is equal to zero that means if we
  


  
    
      7:44:27
    
  
  
  have no students if that's the case if there's no students we're going to return
  


  
    
      7:44:32
    
  
  
  zero because otherwise we're going to divide by zero and we'll get an
  


  
    
      7:44:38
    
  
  
  erir else we're going to return an F string follow this formula we're going
  


  
    
      7:44:45
    
  
  
  to take the total GPA of my class class. total GPA divided by class. count the
  


  
    
      7:44:53
    
  
  
  number of students we have that's how to calculate the average GPA after getting the count of the
  


  
    
      7:44:59
    
  
  
  number of students to access a class method we take the name of the class student call the class method get
  


  
    
      7:45:07
    
  
  
  average GPA then I will print
  


  
    
      7:45:15
    
  
  
  it total number of students is three the average GPA is 3.06
  


  
    
      7:45:22
    
  
  
  repeating after calculating the average I'm going to add a format specifier of
  


  
    
      7:45:27
    
  
  
  2f just around to two decimal places and I'll add average GPA coin
  


  
    
      7:45:35
    
  
  
  space then we'll calculate the average all right everybody those are
  


  
    
      7:45:41
    
  
  
  class methods instance methods are best for operations on instances of the class
  


  
    
      7:45:47
    
  
  
  any objects static methods are best for General utility functions which do not
  


  
    
      7:45:53
    
  
  
  need access to class data class methods are best used when we're working with
  


  
    
      7:45:59
    
  
  
  class level data or we require access to the class itself such as when we're working with class variables rather than
  


  
    
      7:46:06
    
  
  
  using self as the first parameter we're going to use CLS meaning class and well
  


  
    
      7:46:12
    
  
  
  everybody those are class methods in Python yo what's going on people so
  


  
    
  55.magic methods



  
    
      7:46:18
    
  
  
  today I'm going to explain magic methods in Python magic methods are also known as Dunder methods meaning double
  


  
    
      7:46:25
    
  
  
  underscore you typically find these within classes we're already familiar with one of them our Dunder init method
  


  
    
      7:46:32
    
  
  
  we have double underscores on the left and double underscores on the right but there are others I'll cover a few of the
  


  
    
      7:46:38
    
  
  
  more beginner friendly ones so what these methods do is that they're automatically called by using some of
  


  
    
      7:46:45
    
  
  
  pythons built-in operations such as printing an object seeing if two objects
  


  
    
      7:46:50
    
  
  
  are equal greater than or less than when we use many of Python's built-in operations with objects we can Define
  


  
    
      7:46:58
    
  
  
  and customize the behavior of those objects so in this demonstration I'm going to create a class of book we will
  


  
    
      7:47:05
    
  
  
  construct some book objects we will Define a magic method a Dunder method of
  


  
    
      7:47:11
    
  
  
  init to initialize these objects for a book we need a title an
  


  
    
      7:47:18
    
  
  
  author and the number of pages we'll say num
  


  
    
      7:47:23
    
  
  
  Pages self. tile equals title
  


  
    
      7:47:28
    
  
  
  self. author equals author self. number of
  


  
    
      7:47:36
    
  
  
  pages equals number of pages when we call the class of book we Are
  


  
    
      7:47:41
    
  
  
  automatically calling Dunder init so let's create a book object book one
  


  
    
      7:47:47
    
  
  
  equals book we need a title an author and number of pages so since we're dealing
  


  
    
      7:47:53
    
  
  
  with this topic of magic methods I'll pick some fantasy related books for my first book book I'll pick the
  


  
    
      7:48:00
    
  
  
  Hobbit that's the title the author is
  


  
    
      7:48:05
    
  
  
  JRR token the number of pages is 310 so for my next
  


  
    
      7:48:12
    
  
  
  book book two I will pick Harry
  


  
    
      7:48:19
    
  
  
  Potter and the philosopher
  


  
    
      7:48:26
    
  
  
  stone the author is J K rolling the number of pages is
  


  
    
      7:48:34
    
  
  
  223 then we have book three for my third book I will pick The
  


  
    
      7:48:42
    
  
  
  Lion the Witch and the
  


  
    
      7:48:49
    
  
  
  Wardrobe the author is CS Lewis the number of pages is
  


  
    
      7:48:56
    
  
  
  172 okay here are my three free book objects when we call the class of book
  


  
    
      7:49:01
    
  
  
  and pass an arguments we will call the dunder init method it's a magic method
  


  
    
      7:49:07
    
  
  
  it's automatically called behind the scenes within this magic method we can Define and customize the behavior of
  


  
    
      7:49:14
    
  
  
  objects and in this example we're just assigning the attributes of title author
  


  
    
      7:49:19
    
  
  
  and number of pages that is one built-in operation of python what would happen if
  


  
    
      7:49:25
    
  
  
  I was to print book one directly to the console here's what happens well we're given a
  


  
    
      7:49:32
    
  
  
  memory address here's book two and book three well we can customize this
  


  
    
      7:49:41
    
  
  
  Behavior we will use the dunder string method double underscore St Str meaning
  


  
    
      7:49:49
    
  
  
  string double underscore again we have one parameter of self instead of
  


  
    
      7:49:54
    
  
  
  returning a memory address we can customize this Behavior let's instead return an F
  


  
    
      7:50:01
    
  
  
  string I'll add two placeholders we will display self. tile the title of the book
  


  
    
      7:50:08
    
  
  
  by self. author and I'll place the title within
  


  
    
      7:50:13
    
  
  
  single quotes now let's print book one we have
  


  
    
      7:50:18
    
  
  
  The Hobbit by JRR token let's print book
  


  
    
      7:50:24
    
  
  
  two Harry Potter and the philosopher stone by JK Rowling and book three the
  


  
    
      7:50:30
    
  
  
  line the witch in The Wardrobe by CS Lewis so that is thunder string we can
  


  
    
      7:50:35
    
  
  
  return a string representation of the object when we print it directly to the
  


  
    
      7:50:41
    
  
  
  console here's another Dunder method we can check to see if two objects are equal I will
  


  
    
      7:50:48
    
  
  
  print is book one equal to book
  


  
    
      7:50:53
    
  
  
  two that gives me false if they were to have the same title
  


  
    
      7:51:00
    
  
  
  the same author and the same number of pages then python would say they're not
  


  
    
      7:51:07
    
  
  
  equal still so let's customize this
  


  
    
      7:51:13
    
  
  
  Behavior we will Define a method of Dunder equals which is just
  


  
    
      7:51:19
    
  
  
  EQ for parameters we have self the first book we're examining in this case book
  


  
    
      7:51:24
    
  
  
  one and other other means the other book we're examining two objects for
  


  
    
      7:51:31
    
  
  
  equality to do that we'll see if the title of two books and the author is the
  


  
    
      7:51:37
    
  
  
  same we'll disregard the number of pages you can have two different versions of
  


  
    
      7:51:42
    
  
  
  the same book they might have different font sizes or the dimensions of the physical Pages might be
  


  
    
      7:51:49
    
  
  
  different so we will return a Boolean value we will examine if self that's the
  


  
    
      7:51:55
    
  
  
  first book is the title attribute equal to our other books title and is
  


  
    
      7:52:04
    
  
  
  the author of the first book self. author equal to our other books
  


  
    
      7:52:10
    
  
  
  author if I were to run this we get false book one does not equal book two
  


  
    
      7:52:16
    
  
  
  but if they have the same title I'm going to replace these and the same
  


  
    
      7:52:23
    
  
  
  author then they would be equal and we'll disregard the number of pages
  


  
    
      7:52:29
    
  
  
  let's say that with this version of The Hobbit they're using a smaller font size so there's less
  


  
    
      7:52:35
    
  
  
  Pages we're using Dunder equals to compare if two objects are equal what if I was to print book two is
  


  
    
      7:52:45
    
  
  
  less than book three like what does that even mean and I'm just going to get rid of these two
  


  
    
      7:52:53
    
  
  
  lines type error less than is not supported between instances of book and
  


  
    
      7:52:58
    
  
  
  book so we can't use less than on two objects but we can customize that
  


  
    
      7:53:04
    
  
  
  behavior by using Dunder less than which is just LT we're examining one book and
  


  
    
      7:53:11
    
  
  
  the other book self and other let's compare the number of pages
  


  
    
      7:53:18
    
  
  
  we'll compare if the pages of book two is less than book three we will return a
  


  
    
      7:53:24
    
  
  
  Boolean value is self. number of pages less than
  


  
    
      7:53:32
    
  
  
  other number of pages so now this should not give us an
  


  
    
      7:53:38
    
  
  
  error book two does not have less Pages than book three another would be greater than I'll
  


  
    
      7:53:46
    
  
  
  just copy what we have Dunder GT for greater than for our first book of self
  


  
    
      7:53:52
    
  
  
  is it greater than the number of pages of the other book
  


  
    
      7:54:01
    
  
  
  well that's true the number of pages of book two is greater than book three let's use Thunder add to add the
  


  
    
      7:54:08
    
  
  
  pages of two books together what would happen if I were to add two books together book two plus book
  


  
    
      7:54:15
    
  
  
  3 well we get a type error unsupported operand for book and
  


  
    
      7:54:20
    
  
  
  book well to customize the behavior of addition we will Define Dunder add
  


  
    
      7:54:28
    
  
  
  we have self and other for the other object let's add the pages together of
  


  
    
      7:54:34
    
  
  
  two books maybe we need a summer reading list and we would like to see what the total number of pages is I will return
  


  
    
      7:54:42
    
  
  
  self. number of pages attribute plus our other books number of
  


  
    
      7:54:51
    
  
  
  pages that would give me 395 that's 223 + 172 heck I'll even put
  


  
    
      7:54:58
    
  
  
  this within an F string cuz why
  


  
    
      7:55:06
    
  
  
  not then I will add the word Pages 395
  


  
    
      7:55:13
    
  
  
  Pages within an object we can search for a keyword within one of the attributes
  


  
    
      7:55:19
    
  
  
  so let's find the word the lion within book three to do that I would write a statement like this Lion in book
  


  
    
      7:55:29
    
  
  
  three type error argument of type book is not
  


  
    
      7:55:35
    
  
  
  iterable we will Define Dunder
  


  
    
      7:55:40
    
  
  
  contains besides self we will pass in a keyword a keyword that we're searching
  


  
    
      7:55:47
    
  
  
  for I will return then we'll use the in membership operator is our keyword in
  


  
    
      7:55:55
    
  
  
  self. tile I'm looking for the word lion that's going to return true if lion is
  


  
    
      7:56:02
    
  
  
  in the title of this book or is our keyword in self. author maybe we're
  


  
    
      7:56:09
    
  
  
  searching for an author let's try that again that returns true lion is in book
  


  
    
      7:56:17
    
  
  
  three however lion is not within book one that's
  


  
    
      7:56:23
    
  
  
  false is rolling in book two that's the author
  


  
    
      7:56:29
    
  
  
  that is true is rolling in book three that is
  


  
    
      7:56:34
    
  
  
  false that is dund contains we are searching for a keyword in an
  


  
    
      7:56:41
    
  
  
  object now we could search for a key given an object for book one we'll use
  


  
    
      7:56:47
    
  
  
  the index operator and look up an attribute let's get the title of book
  


  
    
      7:56:54
    
  
  
  one the default behavior is that we get a type error book object is not
  


  
    
      7:57:01
    
  
  
  subscriptable so to customize this Behavior we will use dund get
  


  
    
      7:57:09
    
  
  
  item besides self we have one parameter of key we're accessing book attributes
  


  
    
      7:57:16
    
  
  
  by indexing with this object return the value at this key what's that
  


  
    
      7:57:22
    
  
  
  attribute we will check if our key that we receive
  


  
    
      7:57:28
    
  
  
  is equal to title which it is in this case we will return self. tile What's
  


  
    
      7:57:35
    
  
  
  the title of the book so that would give me The Hobbit
  


  
    
      7:57:41
    
  
  
  here's book two and book three what if the key is
  


  
    
      7:57:49
    
  
  
  author none we didn't set that up yet if key is equal to author
  


  
    
      7:57:59
    
  
  
  then return self. author the author of book three is CS
  


  
    
      7:58:07
    
  
  
  Lewis two is JK Rowling book one is JRR
  


  
    
      7:58:14
    
  
  
  tolken what about number of pages num Pages well we're not set up for that
  


  
    
      7:58:22
    
  
  
  yet I'm going to turn this into an El if statement else if
  


  
    
      7:58:28
    
  
  
  key is equal to num Pages then we will return self.
  


  
    
      7:58:38
    
  
  
  num Pages the number of pages in book one is
  


  
    
      7:58:44
    
  
  
  310 book two is 223 book three is
  


  
    
      7:58:50
    
  
  
  172 what if there is no key otherwise if there is no matching key I'll add an L
  


  
    
      7:58:56
    
  
  
  statement let let's return an F string key
  


  
    
      7:59:03
    
  
  
  placeholder our key that we pass in as an argument was not
  


  
    
      7:59:09
    
  
  
  found what do books not have well they don't have audio I guess unless it's an
  


  
    
      7:59:15
    
  
  
  audio book is there a key of audio in book three there is not key audio was
  


  
    
      7:59:22
    
  
  
  not found and I'll place that within single quotes
  


  
    
      7:59:28
    
  
  
  much better all right everybody so those are magic methods also known as Thunder
  


  
    
      7:59:33
    
  
  
  methods meaning double underscore they are automatically called by many of Python's built-in operations they allow
  


  
    
      7:59:40
    
  
  
  developers to define or customize the behavior of objects when we use those
  


  
    
      7:59:45
    
  
  
  built-in operations and well everybody those are magic methods in Python hey
  


  
    
  56.property ⚙️



  
    
      7:59:51
    
  
  
  everybody so in today's video I got to talk about the property decorator in Python the property decorator allows us
  


  
    
      7:59:57
    
  
  
  to Define a method as a property we can access it like it's an attribute one of
  


  
    
      8:00:02
    
  
  
  the benefits is that when Reading Writing or deleting attributes we can add additional Logic the property
  


  
    
      8:00:09
    
  
  
  decorator gives us a getter method to read a Setter method to write and a deleter method to delete when working
  


  
    
      8:00:16
    
  
  
  with attributes in this example we'll create a class of rectangle we need a Constructor let's
  


  
    
      8:00:23
    
  
  
  define that when constructing a rectangle object we will need a width and a
  


  
    
      8:00:30
    
  
  
  height we will assign the attribute of width equal to the width that we receive
  


  
    
      8:00:36
    
  
  
  when constructing this object self. height equals
  


  
    
      8:00:42
    
  
  
  height let's construct a rectangle object rectangle equals
  


  
    
      8:00:48
    
  
  
  rectangle we need to pass in a width and a height then I will print my rectangles
  


  
    
      8:00:55
    
  
  
  width rectangle. width and the height rectangle.
  


  
    
      8:01:02
    
  
  
  height with my rectangle the width is three the height is four using the property decorator when reading these
  


  
    
      8:01:09
    
  
  
  attributes of width or height I can write some additional logic let's say that when accessing the width or the
  


  
    
      8:01:15
    
  
  
  height I would like to display one digit after the decimal then add centimeters
  


  
    
      8:01:21
    
  
  
  here's one way in which I can do that for each of these attributes I'm going to create a method we will Define a
  


  
    
      8:01:27
    
  
  
  method of width no parameters besid self for now I'll write
  


  
    
      8:01:33
    
  
  
  pass and Define height preceding each of these methods I
  


  
    
      8:01:39
    
  
  
  will use the property decorator so at
  


  
    
      8:01:45
    
  
  
  property now when accessing the width or the height will be returned with whatever is Within These methods of
  


  
    
      8:01:51
    
  
  
  width and height but there's one change we're going to make to these attributes we'll set these attributes to be private
  


  
    
      8:01:58
    
  
  
  prefix each of these attributes with an underscore this tells you and other
  


  
    
      8:02:04
    
  
  
  developers that these attributes they're meant to be protected they're internal we shouldn't access the width or the
  


  
    
      8:02:10
    
  
  
  height directly outside of this class technically we could I will access the
  


  
    
      8:02:16
    
  
  
  internal version of width and height we get three and four but we do have a warning access to a protected
  


  
    
      8:02:23
    
  
  
  member width of a class that applies to height as well our width and our height
  


  
    
      8:02:28
    
  
  
  are only meant to be used inside of this class if we need to get the width and the height we will do so through these
  


  
    
      8:02:35
    
  
  
  getter methods provided by the property decorator so when accessing the width
  


  
    
      8:02:40
    
  
  
  let's return an F string I will access
  


  
    
      8:02:46
    
  
  
  self. private width add a format specifier to display one digit after the
  


  
    
      8:02:53
    
  
  
  decimal. 1f followed by centim we'll do this with the height as
  


  
    
      8:02:59
    
  
  
  well we will return self. private
  


  
    
      8:03:05
    
  
  
  height so now when we access the width or the height we will do so using these getter
  


  
    
      8:03:12
    
  
  
  methods if I access these private width and height attributes
  


  
    
      8:03:18
    
  
  
  instead again they will be three and four it's kind of like their raw these
  


  
    
      8:03:24
    
  
  
  attributes are meant to be used internally inside of the class so that that's the point of a getter method we
  


  
    
      8:03:29
    
  
  
  can add additional logic when reading one of these attributes when we try to get them we can also add Setter methods
  


  
    
      8:03:37
    
  
  
  if we would like to set or write these attributes here's how let's take our
  


  
    
      8:03:42
    
  
  
  width we will create a decorator of at width. Setter when attempting to set the width
  


  
    
      8:03:50
    
  
  
  we will do so using this method we will Define our method name of width we will have one parameter a new width we don't
  


  
    
      8:03:58
    
  
  
  want the parameter name to be the same as the method name that's why we're naming it something
  


  
    
      8:04:04
    
  
  
  different when setting the width let's check to see if the new width is greater
  


  
    
      8:04:10
    
  
  
  than zero if so we will take self. private
  


  
    
      8:04:15
    
  
  
  width equals our new width else let's print something let's
  


  
    
      8:04:24
    
  
  
  print width must be greater than
  


  
    
      8:04:31
    
  
  
  zero and let's do this with the
  


  
    
      8:04:36
    
  
  
  height height. Setter Define height pass in a
  


  
    
      8:04:43
    
  
  
  new height if our new height is greater than zero assign self. private height
  


  
    
      8:04:51
    
  
  
  equals the new height else print height must be greater than zero
  


  
    
      8:04:59
    
  
  
  before printing the width and the height let's take our rectangle width set it to be zero then
  


  
    
      8:05:05
    
  
  
  see what happens well we get that message width must be greater than zero if I were to
  


  
    
      8:05:13
    
  
  
  set width to be five well that does work our width is now five let's change the
  


  
    
      8:05:20
    
  
  
  height rectangle. height I will set this to be Nega 1
  


  
    
      8:05:27
    
  
  
  height must be greater than zero and the height hasn't changed what about six six does
  


  
    
      8:05:34
    
  
  
  work when using these Setter methods we can add additional logic when writing or
  


  
    
      8:05:40
    
  
  
  changing one of these attributes these are Setter methods now if you need to delete an
  


  
    
      8:05:46
    
  
  
  attribute here's how there is a delete keyword we will
  


  
    
      8:05:52
    
  
  
  delete our rectangle's width and delete our rectangle's height
  


  
    
      8:05:57
    
  
  
  in this series we really won't be using the delete keyword but you should still know that it exists so we will create a deleter
  


  
    
      8:06:05
    
  
  
  method at take one of the attributes in this example with we will create a
  


  
    
      8:06:11
    
  
  
  deleter method the method name will be width the name of the
  


  
    
      8:06:17
    
  
  
  attribute there will be no parameters besid self we will delete
  


  
    
      8:06:24
    
  
  
  self. private width then let's print something just to confirm that this was
  


  
    
      8:06:31
    
  
  
  deleted width has been deleted same thing applies to
  


  
    
      8:06:38
    
  
  
  height take the attribute of height Define
  


  
    
      8:06:44
    
  
  
  height delete private height height has been
  


  
    
      8:06:54
    
  
  
  deleted when deleting our width or our height we get that confirmation message
  


  
    
      8:06:59
    
  
  
  width has been deleted and height has been deleted all right everybody so that is the property decorator we can define a
  


  
    
      8:07:07
    
  
  
  method as a property meaning it can be accessed as if it was an attribute one
  


  
    
      8:07:12
    
  
  
  of the benefits is that we can add additional logic when we read write or delete attributes the property decorator
  


  
    
      8:07:20
    
  
  
  gives us a getter Setter and deleter method getter methods to read Setter
  


  
    
      8:07:25
    
  
  
  methods to write and delete methods to delete and well everybody that is the
  


  
    
      8:07:30
    
  
  
  property decorator in Python what is going on everybody so today I got to talk about decorators in
  


  
    
  57.decorators



  
    
      8:07:37
    
  
  
  Python a decorator is a function that extends the behavior of another function
  


  
    
      8:07:43
    
  
  
  without modifying That Base function we pass the base function as an argument to The Decorator function for example let's
  


  
    
      8:07:50
    
  
  
  say we have a base function of get ice cream and you can pass in a flavor of ice cream well some people might want
  


  
    
      8:07:56
    
  
  
  sprinkles on their ice cream and others may not they might just want plain vanilla well we could add sprinkles by
  


  
    
      8:08:02
    
  
  
  using a decorator we're extending the behavior of a function where we get ice cream where we're adding sprinkles but
  


  
    
      8:08:09
    
  
  
  we may not want to change the base function because some people don't like sprinkles think of decorators that way
  


  
    
      8:08:14
    
  
  
  we're adding something to a base function without changing it here's how to create a decorator let's start with
  


  
    
      8:08:20
    
  
  
  the base function we will create a function to get ice cream there will be
  


  
    
      8:08:26
    
  
  
  no parameters for now all we're going to do is print the following
  


  
    
      8:08:32
    
  
  
  message here is your ice cream and for fun I'll add an emoji because I like
  


  
    
      8:08:39
    
  
  
  emojis I'll add an ice cream Emoji to call this function all I got to do is
  


  
    
      8:08:45
    
  
  
  call the get ice cream function here is your ice cream here's
  


  
    
      8:08:50
    
  
  
  how to create a decorator a decorator is a function
  


  
    
      8:08:55
    
  
  
  we'll need to define it Define add sprinkles our decorator function is
  


  
    
      8:09:02
    
  
  
  going to have one parameter a function but we'll just rename it to Funk for
  


  
    
      8:09:08
    
  
  
  short we're going to pass a function to our decorator
  


  
    
      8:09:13
    
  
  
  function within our decorator function we will define an inner function of
  


  
    
      8:09:19
    
  
  
  wrapper currently there's no parameters we'll set that up later within this wrapper function we
  


  
    
      8:09:26
    
  
  
  will call the function that we receive this parameter then we will return our
  


  
    
      8:09:34
    
  
  
  wrapper function up until this point we've been returning values but now we're going to return an entire function
  


  
    
      8:09:41
    
  
  
  here's the basic formula to create a decorator to apply a decorator to a base function preceding that function you're
  


  
    
      8:09:49
    
  
  
  going to add at the name of The Decorator so add sprinkles is a decorator the base function is get ice
  


  
    
      8:09:57
    
  
  
  cream within our decorator how do we want to add sprinkles exactly currently our
  


  
    
      8:10:03
    
  
  
  decorator doesn't do anything here's what happens we just print here is your
  


  
    
      8:10:08
    
  
  
  ice cream let's say that before we're given our ice cream we'll print a statement that we add
  


  
    
      8:10:14
    
  
  
  sprinkles within our decorator imagine that we're replacing calling function
  


  
    
      8:10:20
    
  
  
  with this print statement let's create another print statement where we add sprinkles before
  


  
    
      8:10:26
    
  
  
  it I will print the following
  


  
    
      8:10:33
    
  
  
  message you add sprinkles and I'll add an emoji how about
  


  
    
      8:10:40
    
  
  
  confetti that could resemble sprinkles okay let's see what
  


  
    
      8:10:45
    
  
  
  happens you add sprinkles here is your ice cream we're decorating our base function
  


  
    
      8:10:52
    
  
  
  of get ice cream with a decorator of AD sprinkles where're not modifying the
  


  
    
      8:10:58
    
  
  
  base function we're extending it now we have a nested function of wrapper within
  


  
    
      8:11:03
    
  
  
  our decorator it is necessary to have this here's why so I'm not going to call
  


  
    
      8:11:08
    
  
  
  the get ice cream function quite yet so nothing should
  


  
    
      8:11:13
    
  
  
  happen if I was to remove this
  


  
    
      8:11:21
    
  
  
  wrapper well we'll end up calling this function as soon as we apply The Decorator we're not even calling
  


  
    
      8:11:27
    
  
  
  following the get ice cream function at all we only want to execute this code when we want ice cream not whenever we
  


  
    
      8:11:34
    
  
  
  apply The Decorator that's why we need that wrapper
  


  
    
      8:11:40
    
  
  
  function we'll get ice cream and add sprinkles only when we call that
  


  
    
      8:11:46
    
  
  
  function then at any point in my program if I call the get ice cream
  


  
    
      8:11:52
    
  
  
  function then we get ice cream with sprinkles let's apply more than one
  


  
    
      8:11:58
    
  
  
  decorator we'll create a decorator to add fudge Define add
  


  
    
      8:12:05
    
  
  
  fudge we have one parameter a function which we will rename as Funk we need an
  


  
    
      8:12:11
    
  
  
  inner rapper function this is so that we don't call this function when we apply a
  


  
    
      8:12:18
    
  
  
  decorator I will print you add fudge
  


  
    
      8:12:30
    
  
  
  close enough we'll add a bar of chocolate then call the base function
  


  
    
      8:12:36
    
  
  
  that we receive then we need to return the wrapper function all right given our base
  


  
    
      8:12:43
    
  
  
  function we can apply more than one decorator let's say that after adding
  


  
    
      8:12:48
    
  
  
  sprinkles we will apply The Decorator where we add fudge so
  


  
    
      8:12:54
    
  
  
  now we have the following output you add sprinkles you add fudge here is
  


  
    
      8:13:00
    
  
  
  your ice cream so with decorators you can apply more than one decorator to a base
  


  
    
      8:13:06
    
  
  
  function what if your base function accepts Arguments for example when we get our ice cream we need to pass in a
  


  
    
      8:13:13
    
  
  
  flavor like vanilla I will set up one parameter of
  


  
    
      8:13:19
    
  
  
  flavor I will convert our print statement to be an F string here is your
  


  
    
      8:13:25
    
  
  
  add a placeholder flavor of ice cream let's run this and
  


  
    
      8:13:31
    
  
  
  see what happens all right we have a type
  


  
    
      8:13:36
    
  
  
  air our wrapper function isn't set up to accept arguments what you'll see within
  


  
    
      8:13:41
    
  
  
  wrapper functions is that they'll have parameters of args and quars to accept any number of
  


  
    
      8:13:48
    
  
  
  arguments and keyword arguments then when you call your base
  


  
    
      8:13:53
    
  
  
  function in this case get ice cream we we will also set this up to accept any
  


  
    
      8:13:58
    
  
  
  number of arguments and keyword arguments let's do that within our ad fudge decorator too our wrapper function
  


  
    
      8:14:06
    
  
  
  will accept any number of arguments and keyword arguments same thing goes with the base function and now this should
  


  
    
      8:14:13
    
  
  
  work you add sprinkles you add fudge here is your vanilla ice
  


  
    
      8:14:19
    
  
  
  cream or any other flavor of your choosing like
  


  
    
      8:14:24
    
  
  
  chocolate you add sprinkles you add fudge here is your chocolate ice cream
  


  
    
      8:14:30
    
  
  
  all right everybody so those are decorators they're a function that extends the behavior of a base function
  


  
    
      8:14:37
    
  
  
  in this case get ice cream decorators extend a function without modifying it
  


  
    
      8:14:42
    
  
  
  if you would like to apply a decorator to a function you precede that function when you define it with at the name of
  


  
    
      8:14:49
    
  
  
  The Decorator and you can apply more than one and well everybody that is an introduction to decorators in Python
  


  
    
  58.exception handling



  
    
      8:14:57
    
  
  
  hey everybody so today I got to talk about exception handling in Python an exception is an event that interrupts
  


  
    
      8:15:04
    
  
  
  the normal flow of a program there are many different types of exceptions which include but are not limited to zero
  


  
    
      8:15:10
    
  
  
  division error exceptions when you attempt to divide a number by zero for example 1 divided 0 that would interrupt
  


  
    
      8:15:18
    
  
  
  our program we have a zero division error another is a type error that's if we attempt to perform an operation of a
  


  
    
      8:15:25
    
  
  
  value that's of the wrong data type for example 1 plus a string of one that would give us a type error
  


  
    
      8:15:33
    
  
  
  unsupported operand for INT and string value errors tend to happen when you
  


  
    
      8:15:38
    
  
  
  attempt to typ cast a value of the wrong data type so let's say we attempt to type cast the word Pizza as an
  


  
    
      8:15:47
    
  
  
  integer well Pizza isn't a number we have a value error invalid literal for
  


  
    
      8:15:52
    
  
  
  INT base with 10 pizza so exceptions will interrupt our program if they're
  


  
    
      8:15:57
    
  
  
  not handled gracefully and here's how we can do that there's three steps we can
  


  
    
      8:16:03
    
  
  
  write a try accept and finally block any code that's dangerous where it could
  


  
    
      8:16:09
    
  
  
  cause an error you'll place within a tri block for example anytime we accept user input that is considered dangerous code
  


  
    
      8:16:17
    
  
  
  because a user can type in anything so let's say we have a number number equals
  


  
    
      8:16:23
    
  
  
  we will accept some user input we will tell a user to enter a
  


  
    
      8:16:29
    
  
  
  number then we're going to typ cast it as an
  


  
    
      8:16:34
    
  
  
  integer then I'm going to print 1 divided by whatever the user types
  


  
    
      8:16:41
    
  
  
  in if I were to type in zero we get a zero division error if I type in the word Pizza we get
  


  
    
      8:16:49
    
  
  
  a value error we would like to prevent our program from stopping this code is
  


  
    
      8:16:54
    
  
  
  considered dangerous a user can really type in anything so we're going to surround this code within a tri
  


  
    
      8:17:01
    
  
  
  block we'll type try colon and then indent any code underneath it we're
  


  
    
      8:17:08
    
  
  
  going to try this code if an exception happens we will move on to step two
  


  
    
      8:17:13
    
  
  
  subsequently following the tri block we will add an accept block if we run into one of these
  


  
    
      8:17:21
    
  
  
  exceptions we can execute some alternative code for example a zero division error if somebody attempts to
  


  
    
      8:17:28
    
  
  
  divide a number by zero we can take a different course of action instead of our program crashing and coming to a
  


  
    
      8:17:35
    
  
  
  halt let's print you can't divide by
  


  
    
      8:17:43
    
  
  
  zero idiot let's attempt to divide by zero enter a number zero you can't divide by
  


  
    
      8:17:51
    
  
  
  zero idiot we have gracefully handled this exception so now let's say somebody
  


  
    
      8:17:57
    
  
  
  types in the word Pizza when we're asking for a number well we have a value error well we can chain accept blocks if
  


  
    
      8:18:05
    
  
  
  we encounter a value error let's add an accept block for that
  


  
    
      8:18:11
    
  
  
  accept value error we're going to
  


  
    
      8:18:16
    
  
  
  print enter only numbers
  


  
    
      8:18:22
    
  
  
  please enter a number I'll type in the word Pizza enter only numbers please
  


  
    
      8:18:28
    
  
  
  that's good we're not interrupting our program now what you may see some people do is they will just catch all
  


  
    
      8:18:35
    
  
  
  exceptions accept exception now this is actually
  


  
    
      8:18:40
    
  
  
  considered bad practice exception will catch all exceptions however it's too
  


  
    
      8:18:46
    
  
  
  broad of a clause it's good practice to tell the user what went wrong exactly if we
  


  
    
      8:18:52
    
  
  
  resort to just catching all exceptions you may see an error message such such as something went wrong I'm looking at
  


  
    
      8:19:01
    
  
  
  you Microsoft we want to tell the user what went wrong exactly I would only
  


  
    
      8:19:06
    
  
  
  catch all exceptions as a last resort first let's try and tell the user what went wrong
  


  
    
      8:19:12
    
  
  
  exactly so I'm going to undo all this code if there's an exception that occurs
  


  
    
      8:19:19
    
  
  
  it's not a zero division error and it's not a value error then we can add that catch all where we catch any unseen
  


  
    
      8:19:26
    
  
  
  except itions now lastly we have the finally block the finally block always executes
  


  
    
      8:19:33
    
  
  
  regardless if there's an exception or not it's usually used for any sort of cleanup that you need to do such as if
  


  
    
      8:19:40
    
  
  
  you're handling files you may try and open a file and then you'll want to be sure to close that file when you're done
  


  
    
      8:19:46
    
  
  
  with it that would be handled within the finally block but we'll get to file handling pretty soon in the next topic
  


  
    
      8:19:53
    
  
  
  so just for the time being I'm going to print do some cleanup
  


  
    
      8:20:00
    
  
  
  here all right let's test this enter a number I'm going to divide by zero you
  


  
    
      8:20:07
    
  
  
  can't divide by zero and we still execute the finally block enter a number I'll enter in
  


  
    
      8:20:14
    
  
  
  one 1 / 1 is 1 and we still execute that finally block the finally block will be
  


  
    
      8:20:22
    
  
  
  more useful in future videos all you need to know is that it always executes regardless if there's an exception or
  


  
    
      8:20:28
    
  
  
  not all right everybody so that's exception handling an exception is an event that interrupts the normal flow of
  


  
    
      8:20:34
    
  
  
  a program there are many different types of exceptions you can always look under the official python documentation for an
  


  
    
      8:20:40
    
  
  
  extensive list and well everybody that's exception handling in Python hey what's going on everybody
  


  
    
  59.file detection 🕵️‍♂️



  
    
      8:20:47
    
  
  
  today I'm going to show you how we can handle a basic file detection using python this topic is the first of many
  


  
    
      8:20:53
    
  
  
  involving a minseries on file handling using python first we'll need to cover file detection before we read and write
  


  
    
      8:21:00
    
  
  
  files to work with files using python we will import the OS module OS means
  


  
    
      8:21:06
    
  
  
  operating system this module provides a way for python programs to interact with the operating system be sure to import
  


  
    
      8:21:13
    
  
  
  the OS module at the top for my demonstration within my project folder
  


  
    
      8:21:19
    
  
  
  I'm going to create a new file new file I will name this file test and this will
  


  
    
      8:21:25
    
  
  
  be a plain text file it will have the file extension of txt this file really doesn't need to say
  


  
    
      8:21:32
    
  
  
  anything I'm just going to type I like pizza because I do the context doesn't matter we're not
  


  
    
      8:21:39
    
  
  
  going to be reading files in this video for convenience I'm going to assign a variable of file
  


  
    
      8:21:45
    
  
  
  path this will be a string for file detection we can either use a relative
  


  
    
      8:21:51
    
  
  
  file path or an absolute file path we'll cover relative file paths first these
  


  
    
      8:21:57
    
  
  
  two files are right next to each other my main python file and my test file if
  


  
    
      8:22:02
    
  
  
  we're using a relative file path I only need the file name including the extension test.txt
  


  
    
      8:22:09
    
  
  
  we'll be passing in the string of file path as an argument to check to see if
  


  
    
      8:22:15
    
  
  
  this file exists I will use an if statement if access the OS
  


  
    
      8:22:20
    
  
  
  module access the path there is a built-in method of exists
  


  
    
      8:22:28
    
  
  
  we'll pass in our file path as the argument this method returns a Boolean
  


  
    
      8:22:33
    
  
  
  value of true or false if this file exists so if this file does exist
  


  
    
      8:22:40
    
  
  
  test.txt let's print the following I'll use an F
  


  
    
      8:22:46
    
  
  
  string the location I'll add a placeholder
  


  
    
      8:22:53
    
  
  
  exists I will place my file path within that place holder and I'll surround it
  


  
    
      8:22:59
    
  
  
  with single quotes to make it look nice if this method returns true do
  


  
    
      8:23:05
    
  
  
  this else we'll do something else I will print that
  


  
    
      8:23:12
    
  
  
  location doesn't exist all right let's see what
  


  
    
      8:23:19
    
  
  
  happens the location test.txt exists now what if I get the extension
  


  
    
      8:23:25
    
  
  
  wrong let's say that I'm looking for a PDF but it's really a txt
  


  
    
      8:23:31
    
  
  
  file well that location doesn't exist you do have to be sure to get the file
  


  
    
      8:23:36
    
  
  
  extension correct what if this file was in a
  


  
    
      8:23:41
    
  
  
  folder within my python project I will create a new directory I will name this directory
  


  
    
      8:23:49
    
  
  
  stuff then I will place my test file within the stuff folder pycharm wants me to refactor my
  


  
    
      8:23:56
    
  
  
  code because the location changed I'm not going to do that I'm going to be sure that this box is unchecked and
  


  
    
      8:24:03
    
  
  
  press refactor we're using a relative file path that test file is no longer
  


  
    
      8:24:08
    
  
  
  next to my main python file here's what happens that location doesn't
  


  
    
      8:24:14
    
  
  
  exist with our relative file path we'll have to navigate to our stuff folder
  


  
    
      8:24:19
    
  
  
  then find the test file so preing this file name I will access the stuff folder
  


  
    
      8:24:26
    
  
  
  stuff slash the name of the file test.txt and now we can locate that file the
  


  
    
      8:24:33
    
  
  
  location stuff SL test exists when working with relative file paths you may
  


  
    
      8:24:40
    
  
  
  need to open up a folder then find your file you also could work with absolute
  


  
    
      8:24:45
    
  
  
  file paths so for this demonstration on my desktop I'm going to create a new
  


  
    
      8:24:51
    
  
  
  file new text document text
  


  
    
      8:24:58
    
  
  
  test if I were to look at the properties this is a txt file a text
  


  
    
      8:25:04
    
  
  
  document I'm going to copy the location within my file path I will
  


  
    
      8:25:11
    
  
  
  paste it then list the name of the file test.txt
  


  
    
      8:25:17
    
  
  
  this is an absolute file path one problem we're running into when working
  


  
    
      8:25:22
    
  
  
  with strings a backs slash does serve as an escape sequence on python thinks
  


  
    
      8:25:27
    
  
  
  we're trying to print a tab character we can solve this with double backs
  


  
    
      8:25:33
    
  
  
  slashes or we could use a forward slash either one works all right let's
  


  
    
      8:25:40
    
  
  
  see if that file exists that does the location of that absolute file
  


  
    
      8:25:46
    
  
  
  path does exist if I were to get the extension wrong let's say this is a
  


  
    
      8:25:54
    
  
  
  PDF well that location doesn't exist there is a built-in method of is
  


  
    
      8:26:00
    
  
  
  file to check to see if that file is in fact a file and not a directory let's add the
  


  
    
      8:26:07
    
  
  
  following after we detect this file we'll write a Nesta if statement if
  


  
    
      8:26:13
    
  
  
  os. path. is
  


  
    
      8:26:18
    
  
  
  file then passing our file path as an argument if this file is in fact a file
  


  
    
      8:26:25
    
  
  
  and not a directory I will print that is a
  


  
    
      8:26:32
    
  
  
  file the location of that absolute file path does exist that is a file what if
  


  
    
      8:26:39
    
  
  
  it was a directory a folder I'm going to delete this go to
  


  
    
      8:26:45
    
  
  
  new folder I will name this folder
  


  
    
      8:26:50
    
  
  
  test to check to see if a location is a directory let's add an LF statement else
  


  
    
      8:26:56
    
  
  
  if os. paath do iser meaning is
  


  
    
      8:27:03
    
  
  
  directory this is a method we'll pass in our file path if this is a directory a
  


  
    
      8:27:10
    
  
  
  folder I will print that is a
  


  
    
      8:27:16
    
  
  
  directory let's run this again that location doesn't exist oh we have to get
  


  
    
      8:27:21
    
  
  
  rid of the file extension it is not a plain text file
  


  
    
      8:27:29
    
  
  
  the location of that absolute file path exists that is a directory a
  


  
    
      8:27:35
    
  
  
  folder all right everybody that's basic file detection in the next few videos
  


  
    
      8:27:40
    
  
  
  we're going to be reading and writing files and well everybody that is basic file detection using python hey what's
  


  
    
  60.writing files



  
    
      8:27:47
    
  
  
  going on everybody in today's video I'm going to show you how we can write and output files using python we'll cover
  


  
    
      8:27:53
    
  
  
  plain text Json and CSV v files but we'll start with plain text because it's
  


  
    
      8:27:59
    
  
  
  the easiest suppose we have some data that we would like to Output I'll create a variable of text
  


  
    
      8:28:05
    
  
  
  Data think of a food you like I will output I like
  


  
    
      8:28:11
    
  
  
  pizza for convenience we'll create a variable a file path this can be a
  


  
    
      8:28:16
    
  
  
  relative file path or an absolute file path within this file path we'll need a name for this file I will name this
  


  
    
      8:28:24
    
  
  
  output then include the file extension this will be a txt file a plain text
  


  
    
      8:28:30
    
  
  
  file this is a relative file path when I generate this file it will be within the same project folder as my main python
  


  
    
      8:28:38
    
  
  
  file to create a file we'll write the following with open
  


  
    
      8:28:45
    
  
  
  function pass in our file path and a character of w to write as
  


  
    
      8:28:53
    
  
  
  file and for now I'll write pass there's a few things going on here with is a
  


  
    
      8:28:59
    
  
  
  statement it's used to wrap a block of code to execute if we open a file the
  


  
    
      8:29:05
    
  
  
  width statement will also close that file when we're done with it so we don't need to manually close files when you
  


  
    
      8:29:11
    
  
  
  open a file it is good practice to close it because if you don't you may run into unexpected Behavior the width statement
  


  
    
      8:29:18
    
  
  
  takes care of that for you the open function will return a file object the
  


  
    
      8:29:24
    
  
  
  first parameter is the file path the second parameter is the mode w Is Write
  


  
    
      8:29:29
    
  
  
  X will also write if this file doesn't exist if it already does exist we'll
  


  
    
      8:29:35
    
  
  
  receive an error A is for append to append a file and R is to read but we'll
  


  
    
      8:29:40
    
  
  
  take care of reading in the next video so we will stick with W to write a file
  


  
    
      8:29:45
    
  
  
  the open function returns a file object the first argument is the
  


  
    
      8:29:51
    
  
  
  file the second argument is the mode you can set these to be key word arguments
  


  
    
      8:29:56
    
  
  
  if it's easier for you to read when the open function returns a file object for us we're using the as
  


  
    
      8:30:04
    
  
  
  keyword to give it a name as file it's kind of like we're instantiating a file
  


  
    
      8:30:09
    
  
  
  object file equals file file is the name of the file object to write to this file
  


  
    
      8:30:16
    
  
  
  we're going to take our file object use the built-in write method then pass in
  


  
    
      8:30:22
    
  
  
  our text Data then when this is done I'm going to print a confirmation
  


  
    
      8:30:28
    
  
  
  message I'll use an F string let's say text
  


  
    
      8:30:33
    
  
  
  file I'll add our file path place it within single
  


  
    
      8:30:39
    
  
  
  quotes was created let's see what
  


  
    
      8:30:44
    
  
  
  happens text file output.txt was created and here's that
  


  
    
      8:30:51
    
  
  
  file I like pizza we also have the capability ability of setting an absolute file path
  


  
    
      8:30:58
    
  
  
  let's say I would like to Output this file to my desktop I would just need that location let me just get the
  


  
    
      8:31:04
    
  
  
  location from one of these folders by going to properties I will copy this location
  


  
    
      8:31:10
    
  
  
  this is the location to my desktop but for you it's probably going to be different then I will paste the
  


  
    
      8:31:17
    
  
  
  absolute file path a backs slash is an escape sequence within a string we
  


  
    
      8:31:23
    
  
  
  either could use double backs slashes or a forward
  


  
    
      8:31:31
    
  
  
  slash now let's see if this outputs to my desktop text file here's the file path
  


  
    
      8:31:39
    
  
  
  was created and here's that file it's a plain text file and it
  


  
    
      8:31:46
    
  
  
  says I like pizza so when working with the file path
  


  
    
      8:31:53
    
  
  
  it could be a relative file path or an absolute file path all right now for our
  


  
    
      8:31:58
    
  
  
  text Data there are different modes as well W is for write if we use x we'll
  


  
    
      8:32:05
    
  
  
  write a file if that file doesn't already exist in this case it does on my desktop we already have a file named
  


  
    
      8:32:12
    
  
  
  output and it's a plain text file so when I run this with the mod of X we get
  


  
    
      8:32:19
    
  
  
  a file exists error that file already exists we could catch this exception so
  


  
    
      8:32:26
    
  
  
  that our program isn't interrupted I will copy the name of this
  


  
    
      8:32:31
    
  
  
  error I will place my code within a triy block we will try this code and catch
  


  
    
      8:32:37
    
  
  
  any exceptions except file exists error if
  


  
    
      8:32:44
    
  
  
  this file already exists let's take a different course of action let's print
  


  
    
      8:32:50
    
  
  
  that file already exists so now when I run this again our
  


  
    
      8:32:57
    
  
  
  program isn't interrupted we receed this message that file already exists if I
  


  
    
      8:33:04
    
  
  
  were to delete that file bye-bye then run this
  


  
    
      8:33:11
    
  
  
  again well we create a new file text file that absolute file path was created
  


  
    
      8:33:18
    
  
  
  and here it is again now for the mode there's also a a to append any new data will be append to
  


  
    
      8:33:26
    
  
  
  that file we get I like pizza I like pizza
  


  
    
      8:33:33
    
  
  
  when a pending data if you would like that data on a new line we can add a new line character W will overwrite a
  


  
    
      8:33:43
    
  
  
  file so we're back to the original when a pending either before or
  


  
    
      8:33:49
    
  
  
  after we write our Text data we could add a new line character let's say let's
  


  
    
      8:33:54
    
  
  
  do that before new line plus our text Data here's the
  


  
    
      8:34:01
    
  
  
  output again we're appending not writing I like pizza I like pizza our
  


  
    
      8:34:07
    
  
  
  second sentence is on a new line let's run this a couple
  


  
    
      8:34:12
    
  
  
  times we should have several lines
  


  
    
      8:34:17
    
  
  
  now let's work with a collection let's say we have a list of
  


  
    
      8:34:23
    
  
  
  employees we'll pick some employees at the CR crab so we have Eugene I guess he is
  


  
    
      8:34:29
    
  
  
  technically the manager I don't know if that counts as an employee
  


  
    
      8:34:34
    
  
  
  Squidward SpongeBob and Patrick Patrick worked at the K Crusty Crab in one episode he
  


  
    
      8:34:42
    
  
  
  counts then we'll to be sure we're writing our employees this is what's going to
  


  
    
      8:34:49
    
  
  
  happen we have a type error write argument must be a string not a list in
  


  
    
      8:34:55
    
  
  
  order for us to write each item within a list we'll need to iterate over it using some sort of loop we can't write a list
  


  
    
      8:35:03
    
  
  
  or any other collection directly here's what we'll change for
  


  
    
      8:35:08
    
  
  
  every employee in our collection of
  


  
    
      8:35:15
    
  
  
  employees we're iterating over something that is iterable we will access our file object
  


  
    
      8:35:22
    
  
  
  use the write method then write each employee
  


  
    
      8:35:28
    
  
  
  here's the result we get one long string of each
  


  
    
      8:35:34
    
  
  
  item in this list if you prefer after writing each employee we could add a new line
  


  
    
      8:35:41
    
  
  
  character
  


  
    
      8:35:47
    
  
  
  after and here's the output we get each item in our list on a
  


  
    
      8:35:52
    
  
  
  new line or rather than a new line character we could use a
  


  
    
      8:35:57
    
  
  
  space this would output all the employees but space them out now we'll be outputting a Json file
  


  
    
      8:36:05
    
  
  
  in summary a Json file is made of key value pairs for our data let's say we
  


  
    
      8:36:12
    
  
  
  have a dictionary of employee a dictionary is made of key
  


  
    
      8:36:17
    
  
  
  value pairs we'll have a name of
  


  
    
      8:36:22
    
  
  
  SpongeBob SpongeBob's age will be
  


  
    
      8:36:28
    
  
  
  30 his job his position is that he is a
  


  
    
      8:36:34
    
  
  
  cook so this is the data I would like to Output I'll keep the file path the same
  


  
    
      8:36:39
    
  
  
  we'll change the file extension tojson we will need the help of the Json
  


  
    
      8:36:45
    
  
  
  module let's be sure to import that import Json within our width block we'll make
  


  
    
      8:36:52
    
  
  
  the following change we're going to access our Json module use the dump method the dump
  


  
    
      8:37:00
    
  
  
  method will convert our dictionary to a Json string to Output it so we have to
  


  
    
      8:37:06
    
  
  
  pass in our Json data of employee our file as the second
  


  
    
      8:37:13
    
  
  
  argument then for a confirmation message let's print Json file was created here's
  


  
    
      8:37:19
    
  
  
  the result Json file at this location was created
  


  
    
      8:37:26
    
  
  
  and here's my Json file I'll go to properties we'll confirm it is a Json file it is and I'll open
  


  
    
      8:37:34
    
  
  
  it here's the result now you could add indentation after each key value pair here's
  


  
    
      8:37:41
    
  
  
  how after our second argument our file we can pass in a keyword argument of
  


  
    
      8:37:48
    
  
  
  indent for each key value Pair by how many spaces do we want to indent each
  


  
    
      8:37:54
    
  
  
  let's say four and let's take a look I think that's more readable we're
  


  
    
      8:38:01
    
  
  
  indenting each key value Pair by four spaces so that is a Json file it's a
  


  
    
      8:38:08
    
  
  
  collection of key value pairs a dictionary or anything that uses
  


  
    
      8:38:13
    
  
  
  key value pairs is a great candidate to be output to a Json file all right now we're going to work
  


  
    
      8:38:20
    
  
  
  with CSV files CSV means comma separated values C CSV files are pretty common
  


  
    
      8:38:26
    
  
  
  with a spreadsheet of data like an Excel spreadsheet we will create a 2d data structure of
  


  
    
      8:38:34
    
  
  
  employees this will be a list of lists let's add
  


  
    
      8:38:46
    
  
  
  four we'll need the help of the CSV module import
  


  
    
      8:38:52
    
  
  
  CSV think of our 2D data structure as a table of rows and columns so for the
  


  
    
      8:38:58
    
  
  
  first row I will add name comma
  


  
    
      8:39:03
    
  
  
  age comma job the second row will have a name of
  


  
    
      8:39:10
    
  
  
  SpongeBob age 30 job cook for the next
  


  
    
      8:39:15
    
  
  
  row we'll have Patrick Patrick will be
  


  
    
      8:39:22
    
  
  
  37 what is Patrick's job I don't know he's
  


  
    
      8:39:29
    
  
  
  unemployed then we'll have Sandy Sandy will be
  


  
    
      8:39:35
    
  
  
  27 Sandy is a scientist okay now with our file path
  


  
    
      8:39:42
    
  
  
  the file extension is going to be a CSV file comma separated values within the
  


  
    
      8:39:48
    
  
  
  context of our width block we're going to create a writer object to write to a
  


  
    
      8:39:54
    
  
  
  file writer equals access the CSV module use the writer method of that module
  


  
    
      8:40:02
    
  
  
  then pass in our file writer is an object it provides
  


  
    
      8:40:07
    
  
  
  methods for writing data to a CSV file and then we'll print a confirmation
  


  
    
      8:40:13
    
  
  
  message of CSV file was created here's the output
  


  
    
      8:40:19
    
  
  
  currently we have a CSV file I'll go to properties to confirm it
  


  
    
      8:40:26
    
  
  
  well we have no output we have to iterate over all the rows in our 2D
  


  
    
      8:40:32
    
  
  
  collection we'll write the following for every Row in our data of
  


  
    
      8:40:41
    
  
  
  employees we'll take our writer object use the right row method and pass in
  


  
    
      8:40:48
    
  
  
  that row that we're iterating over now let's take a look
  


  
    
      8:40:56
    
  
  
  that's better however the writer method gives us a new line after each
  


  
    
      8:41:02
    
  
  
  row so if we would like to prevent that when we open this file I will set the keyword argument of
  


  
    
      8:41:10
    
  
  
  new line equal to no characters an empty
  


  
    
      8:41:16
    
  
  
  string let's take a look again yeah that's much better so this is
  


  
    
      8:41:22
    
  
  
  a CSV file it's made of Comm separated values all right everybody so that is an
  


  
    
      8:41:29
    
  
  
  introduction to writing files using python what's going on everybody today
  


  
    
  61.reading files



  
    
      8:41:35
    
  
  
  I'm going to show you how we can read files using python we'll cover plain text Json and CSV files in the previous
  


  
    
      8:41:43
    
  
  
  topic we have created some sample files to work with here is my plain text
  


  
    
      8:41:48
    
  
  
  file my Json file and my CSV file they're all named
  


  
    
      8:41:55
    
  
  
  input they each have a different file extension for convenience I will create
  


  
    
      8:42:00
    
  
  
  a variable of file path we can list a relative file path or
  


  
    
      8:42:05
    
  
  
  an absolute file path I'll use an absolute file path I'm going to right click on the file I would like to read
  


  
    
      8:42:12
    
  
  
  go to properties copy the location then paste it then add the file
  


  
    
      8:42:19
    
  
  
  name including the extension input and this is a txt file
  


  
    
      8:42:25
    
  
  
  within the context of a string backs slashes are Escape sequences for special
  


  
    
      8:42:30
    
  
  
  characters we would either need to use double back slashes or a forward
  


  
    
      8:42:36
    
  
  
  slash here is the absolute file path to the file I would like to read to read this file I will add a wi
  


  
    
      8:42:45
    
  
  
  block with is a statement it's going to wrap a block of code within a context
  


  
    
      8:42:50
    
  
  
  manager and it'll close a file if we open it it is good practice to to close a file if you do open it if you don't it
  


  
    
      8:42:57
    
  
  
  can lead to unexpected Behavior we will use the open function the open function
  


  
    
      8:43:03
    
  
  
  has two arguments our file path and a mode to read a file we'll set the mode
  


  
    
      8:43:11
    
  
  
  to be R for read the open function is going to return a file object which we will give
  


  
    
      8:43:18
    
  
  
  a nickname of file as
  


  
    
      8:43:23
    
  
  
  file when we read our file object it's going to return one long string which we
  


  
    
      8:43:29
    
  
  
  will assign to a variable named content content equals file use the read method
  


  
    
      8:43:36
    
  
  
  and assign it to this variable then I'm going to print the content print our content the content of
  


  
    
      8:43:44
    
  
  
  the file here's the result that is the content of my file I
  


  
    
      8:43:50
    
  
  
  like pizza it's really good let's say we can't find this file
  


  
    
      8:43:57
    
  
  
  perhaps I forget the file extension we'll run into a file not
  


  
    
      8:44:02
    
  
  
  found error this will interrupt our program we can catch exceptions when they happen any dangerous code that may
  


  
    
      8:44:09
    
  
  
  cause an exception we can wrap within a tri block if there's an exception we will
  


  
    
      8:44:16
    
  
  
  catch them by stating accept the name of the exception in this case File not
  


  
    
      8:44:22
    
  
  
  found error instead of our program being interrupted let's take a different
  


  
    
      8:44:27
    
  
  
  course of action we will print that file was not found let's try this
  


  
    
      8:44:37
    
  
  
  again that file was not found at least our program isn't being
  


  
    
      8:44:42
    
  
  
  interrupted let's add the file extension back what if we don't have permission to
  


  
    
      8:44:47
    
  
  
  read this file to demonstrate that I'm going to rightclick on that file go to properties
  


  
    
      8:44:55
    
  
  
  go to security edit the permissions I will deny any sort of
  


  
    
      8:45:02
    
  
  
  control I will attempt to read this file and we get a permission error permission
  


  
    
      8:45:07
    
  
  
  denied we could handle this exception as well if we encounter a permission error
  


  
    
      8:45:15
    
  
  
  I will print the following you do not have
  


  
    
      8:45:21
    
  
  
  permission to read that file let's run this again you do not have permission to
  


  
    
      8:45:28
    
  
  
  read that file those are a few exceptions we can handle in case they appear file not
  


  
    
      8:45:34
    
  
  
  found errors and permission errors let's say we would like to read a Json file we
  


  
    
      8:45:40
    
  
  
  will need the help of the Json module I will import the Json module at the top of my
  


  
    
      8:45:46
    
  
  
  program I need to get the file path of this Json file it's pretty much the same as before
  


  
    
      8:45:52
    
  
  
  in this case the file extension is a Json file
  


  
    
      8:46:01
    
  
  
  there's only one change we're going to make we will assign our variable of content equal to access the Json module
  


  
    
      8:46:10
    
  
  
  use the load method and load our file and that should read the contents of my
  


  
    
      8:46:16
    
  
  
  file here's my Json file name SpongeBob age3 job
  


  
    
      8:46:23
    
  
  
  cook with the data of your Json file you could access a value given a key I will
  


  
    
      8:46:30
    
  
  
  access our content by its key of name that will return the value of
  


  
    
      8:46:36
    
  
  
  SpongeBob age 30 job
  


  
    
      8:46:42
    
  
  
  cook now here's how to read a CSV file we will import the CSV
  


  
    
      8:46:48
    
  
  
  module the file extension is going to be CSV again this is on my desktop in the
  


  
    
      8:46:53
    
  
  
  same location as the previous files my content will equal access the CSV
  


  
    
      8:47:00
    
  
  
  module access the reader method and pass in our
  


  
    
      8:47:06
    
  
  
  file here's the content currently we're given a memory
  


  
    
      8:47:11
    
  
  
  address with the CSV file what we need to do is read the CSV file line by line
  


  
    
      8:47:18
    
  
  
  all of the data is within a collection which we need to iterate
  


  
    
      8:47:23
    
  
  
  over so to do that we're going to create a for Loop for every line in my content
  


  
    
      8:47:31
    
  
  
  I will print each line that's much better the format
  


  
    
      8:47:38
    
  
  
  resembles a spreadsheet like an Excel spreadsheet there's
  


  
    
      8:47:44
    
  
  
  rows and columns to get a specified column we can
  


  
    
      8:47:51
    
  
  
  access an index in my example R line at index of zero would give me the First Column name
  


  
    
      8:47:59
    
  
  
  SpongeBob Patrick Sandy the next index would be all the
  


  
    
      8:48:05
    
  
  
  ages of each person 30 35 27 and index two would be the job
  


  
    
      8:48:12
    
  
  
  positions cook unemployed and scientist if you need a specific column
  


  
    
      8:48:19
    
  
  
  of data from a CSV file you can use an index as one possibility all right
  


  
    
      8:48:24
    
  
  
  everybody so those are a few ways in which we can read files using python hey what's going on everybody so
  


  
    
  62.dates & times



  
    
      8:48:31
    
  
  
  in today's video I'm going to show you how we can work with dates and times using python we will import the date
  


  
    
      8:48:38
    
  
  
  time module this allows us to work with dates and times using our system clock
  


  
    
      8:48:43
    
  
  
  our computer's clock this video serves as more of an introduction to create a date object we will assign an object of
  


  
    
      8:48:50
    
  
  
  date let me zoom in a little bit we will access the date time module
  


  
    
      8:48:56
    
  
  
  called the date method within the date method we will pass in the following arguments a year of our choosing so for
  


  
    
      8:49:04
    
  
  
  me I'll say 2025 a month one corresponds to January these are numeric months and
  


  
    
      8:49:11
    
  
  
  a day a day of the month I will say the second if I was to print the state
  


  
    
      8:49:18
    
  
  
  object here's what it outputs the year is 2025 January 2nd
  


  
    
      8:49:26
    
  
  
  to get the date right now let's say today this will return a date object
  


  
    
      8:49:32
    
  
  
  that represents today access the date time module access the class of date then
  


  
    
      8:49:40
    
  
  
  call the today method to return the date of today let's print today currently I'm
  


  
    
      8:49:47
    
  
  
  recording this video July 14th 2024 for me that is the result of my
  


  
    
      8:49:53
    
  
  
  today object when I print it now we'll work with time I will create a Time object access the date time
  


  
    
      8:50:01
    
  
  
  module call the time method we have to pass in hours minutes and then seconds
  


  
    
      8:50:08
    
  
  
  so for the hour let's say 12 30 and 0 seconds I will print the current time it
  


  
    
      8:50:16
    
  
  
  is 12:30 now to get the time right now on
  


  
    
      8:50:21
    
  
  
  our system clock I will create a datetime object of now equals access the
  


  
    
      8:50:28
    
  
  
  datetime module now within the datetime module there is a date time class we have to access we will access that I
  


  
    
      8:50:37
    
  
  
  know it looks kind of silly date time. dat time do the now method so we're
  


  
    
      8:50:44
    
  
  
  accessing the datetime module there's a built-in datetime class we have to access then within that class there's a
  


  
    
      8:50:51
    
  
  
  now method what is the time right now according to my system
  


  
    
      8:50:57
    
  
  
  clock this returns a date and a Time July 14th 2024 it is just after 9:00
  


  
    
      8:51:05
    
  
  
  a.m. we can format the appearance of the string here's how I'm going to reassign our datetime
  


  
    
      8:51:13
    
  
  
  object of now our datetime object has a string
  


  
    
      8:51:19
    
  
  
  format time method stf time we're going
  


  
    
      8:51:24
    
  
  
  to pass in a string and include some format specifiers let's say I would like
  


  
    
      8:51:29
    
  
  
  to display the hour first I'm going to add a percent these format specifiers
  


  
    
      8:51:35
    
  
  
  you can find according to the datetime documentation online so I will display the hours that
  


  
    
      8:51:41
    
  
  
  would be percent H percent M for
  


  
    
      8:51:48
    
  
  
  minutes percent s for seconds let's see what we're working with
  


  
    
      8:51:55
    
  
  
  we have the hours the minutes and the seconds I will separate each of these with the
  


  
    
      8:52:02
    
  
  
  colon that's better now I'll add the date I'll start
  


  
    
      8:52:07
    
  
  
  with the month I will add a format specifier of lowercase
  


  
    
      8:52:13
    
  
  
  M then the day a format specifier of D then the year format specifier capital Y
  


  
    
      8:52:22
    
  
  
  here's the result we have the month the day and the year
  


  
    
      8:52:28
    
  
  
  I'll add a dash to separate these that's better or if you prefer the
  


  
    
      8:52:36
    
  
  
  day first rather than the month we can switch this around it depends on how you read dates
  


  
    
      8:52:42
    
  
  
  in your country now we're going to cover an exercise we're going to see if the current date and time has passed a
  


  
    
      8:52:49
    
  
  
  Target date and time so we are going to create a Target date date time
  


  
    
      8:52:57
    
  
  
  equals access the date time module we will create a new date
  


  
    
      8:53:03
    
  
  
  time so now we have to pass in a date and a time for my date time let's say it's
  


  
    
      8:53:10
    
  
  
  something far into the future like the year 2030 January 2nd for the hour it will be 12 30 and 1
  


  
    
      8:53:21
    
  
  
  second I'm going to get the time right now which I will name current date
  


  
    
      8:53:28
    
  
  
  time equals access the date time module access the date time class call
  


  
    
      8:53:36
    
  
  
  the now method to return the current date and time right now using an if statement I will see if
  


  
    
      8:53:44
    
  
  
  our Target date time is less than the current date
  


  
    
      8:53:51
    
  
  
  time have we already passed this date if our Target date is less than the current
  


  
    
      8:53:57
    
  
  
  date that means this date and time has already passed I will print the
  


  
    
      8:54:02
    
  
  
  following if that's the case Target date has
  


  
    
      8:54:09
    
  
  
  passed else I will
  


  
    
      8:54:15
    
  
  
  print Target date has not
  


  
    
      8:54:21
    
  
  
  passed here's the result Target date has not passed what if I set
  


  
    
      8:54:27
    
  
  
  the target date to the year 2020 well then the target date has
  


  
    
      8:54:33
    
  
  
  passed so that's how we can check to see if a date and time has already passed has it
  


  
    
      8:54:39
    
  
  
  elapsed all right everybody so that is an introduction to working with dates and times using
  


  
    
      8:54:45
    
  
  
  python all right everybody so in today's video we're going to create a working alarm clock using python
  


  
    
  63.alarm clock



  
    
      8:54:58
    
  
  
  for this project we will need the following Imports we will import time
  


  
    
      8:55:03
    
  
  
  we'll be updating our clock every second the time module is going to help us with that as well as import date time the
  


  
    
      8:55:12
    
  
  
  date time module allows us to work with string representations of a time in my opinion the easiest way to work with
  


  
    
      8:55:19
    
  
  
  sound effects is to actually use pame so we will import pame game now you may
  


  
    
      8:55:26
    
  
  
  need to download the pame package here I'm getting a message that there's no module named pame there might be a link
  


  
    
      8:55:32
    
  
  
  to install it even too one way in which you can download the pame package is to
  


  
    
      8:55:38
    
  
  
  open up a terminal then use pip pip is Python's package manager pip install py
  


  
    
      8:55:47
    
  
  
  game all right we have our three Imports let's create a function to set a
  


  
    
      8:55:54
    
  
  
  alarm we have one parameter and alarm time and for now all right
  


  
    
      8:56:02
    
  
  
  pass our alarm time parameter is going to be a string representation of a time
  


  
    
      8:56:08
    
  
  
  in military time I would like to start this program if I running my main python file
  


  
    
      8:56:14
    
  
  
  directly I can add the following if statement if Dunder name is equal to a
  


  
    
      8:56:21
    
  
  
  string of Dunder Main if we are running this main python file
  


  
    
      8:56:26
    
  
  
  directly then we will set the alarm but first we have to prompt the user what they would like to set the alarm too so
  


  
    
      8:56:33
    
  
  
  we will Define a variable of alarm time equals ask for some user input using the
  


  
    
      8:56:40
    
  
  
  input function we will prompt the user to enter the alarm time and give a
  


  
    
      8:56:48
    
  
  
  format hours minutes and seconds again this is going to be in
  


  
    
      8:56:54
    
  
  
  military time once we have our alarm time we will call the set alarm function
  


  
    
      8:57:01
    
  
  
  and pass in our alarm time all right we are now within the set
  


  
    
      8:57:07
    
  
  
  alarm function when we call this function let's print the following I'll use an F
  


  
    
      8:57:13
    
  
  
  string alarm set 4 then include the alarm
  


  
    
      8:57:19
    
  
  
  time you will need an MP3 file to work with if you don't have available here's
  


  
    
      8:57:25
    
  
  
  one recommendation you could use YouTube's audio library and then search for sound
  


  
    
      8:57:31
    
  
  
  effects or some music these audio files are only allowed for non-commercial use
  


  
    
      8:57:36
    
  
  
  outside of YouTube so you can search for a song or some sound effects find one that you
  


  
    
      8:57:42
    
  
  
  like and download it once you find a song that you like move it to your project
  


  
    
      8:57:50
    
  
  
  folder now I will create a variable of sound file equals this will be a
  


  
    
      8:57:57
    
  
  
  relative or absolute file path my MP3 file is right next to my main python
  


  
    
      8:58:02
    
  
  
  file I only need to list the file name I named mine my music and this is an MP3
  


  
    
      8:58:09
    
  
  
  file I'm going to perform a test run we're not going to play our sound quite
  


  
    
      8:58:14
    
  
  
  yet we do have this output that displays that says hello from the pame community
  


  
    
      8:58:19
    
  
  
  let's say I set my alarm to 9:00 a.m. then enter alarm set for 9:00
  


  
    
      8:58:26
    
  
  
  a.m. if you would like to suppress this output for pame we can navigate to our virtual environment go to library pame
  


  
    
      8:58:35
    
  
  
  underneath this file named Dunder init let's scroll all the way to the
  


  
    
      8:58:45
    
  
  
  bottom and we should have this if statement we display the version of P game we're using and a print statement
  


  
    
      8:58:51
    
  
  
  of hello from the pame community we could comment this out or even just delete it that is the most simple
  


  
    
      8:58:59
    
  
  
  solution so we shouldn't get that message anymore we're going to create a Boolean
  


  
    
      8:59:06
    
  
  
  variable of is running is our alarm clock running I will set that to be
  


  
    
      8:59:13
    
  
  
  true while is running while this is true we will continue the alarm
  


  
    
      8:59:20
    
  
  
  clock we need to get the current time current
  


  
    
      8:59:25
    
  
  
  time equals we will access the date time module access the class of date
  


  
    
      8:59:33
    
  
  
  time call the now method to get the time and date right now we could method chain
  


  
    
      8:59:39
    
  
  
  the string format method stf time I would like the hours minutes and
  


  
    
      8:59:46
    
  
  
  seconds but not the date so we will type percent H colon let me zoom out a little
  


  
    
      8:59:54
    
  
  
  little percent M for minutes and percent s for
  


  
    
      9:00:00
    
  
  
  seconds we're getting the hours minutes and seconds of the date and time right
  


  
    
      9:00:06
    
  
  
  now and storing it within this variable of current time then I'm going to print the current
  


  
    
      9:00:15
    
  
  
  time we'll perform a test run however currently we're within an infinite loop
  


  
    
      9:00:20
    
  
  
  at the end of the while loop all set is running to be false
  


  
    
      9:00:27
    
  
  
  okay Enter the alarm time let's say 10:00 a.m. alarm set for 10:00 a.m. and the
  


  
    
      9:00:34
    
  
  
  time for me right now is 9:42 and 16 seconds we'll get rid of this line where
  


  
    
      9:00:40
    
  
  
  we set is running to be false instead I'm going to access the time module and
  


  
    
      9:00:46
    
  
  
  call the Sleep Method we will pass in a number of seconds to sleep so 1
  


  
    
      9:00:52
    
  
  
  second I'll set set the alarm to be 10: a.m. now the time should update every
  


  
    
      9:00:58
    
  
  
  second which it is however when the current time is
  


  
    
      9:01:04
    
  
  
  equal to the alarm time we have to trigger the alarm so after printing the current time
  


  
    
      9:01:13
    
  
  
  we will write an if statement to check if the current time is equal to the
  


  
    
      9:01:19
    
  
  
  alarm time if this is true that let's print
  


  
    
      9:01:24
    
  
  
  the following wake
  


  
    
      9:01:31
    
  
  
  up and I'll add an emoji cuz it's silly once our alarm triggers we will
  


  
    
      9:01:37
    
  
  
  set is running to be false within the if statement let's do a test run we're not
  


  
    
      9:01:43
    
  
  
  going to play the sound quite yet I will set the alarm to
  


  
    
      9:01:50
    
  
  
  9:45 and then I'll come back a little bit later
  


  
    
      9:01:57
    
  
  
  all right once the current time matches the alarm time we print wake up and set is
  


  
    
      9:02:05
    
  
  
  running to be false to exit the while loop and then subsequently exiting the
  


  
    
      9:02:10
    
  
  
  program now we need to play an MP3 file we will access our package of
  


  
    
      9:02:18
    
  
  
  pame access the module of mixer so mix is a module for loading and
  


  
    
      9:02:25
    
  
  
  playing sounds but we have to initialize it but we're going to initialize it with init
  


  
    
      9:02:32
    
  
  
  to initialize the initialize method is another way to call the Constructor we
  


  
    
      9:02:38
    
  
  
  can pass in some keyword arguments for the frequency size channels buffer all
  


  
    
      9:02:43
    
  
  
  that but that might be a little too complicated for us at this level we'll use the default settings by not passing
  


  
    
      9:02:49
    
  
  
  in anything the next step is to load our sound file access the package of pame access the
  


  
    
      9:02:57
    
  
  
  module of mixer access the module of music then
  


  
    
      9:03:03
    
  
  
  call the load method we will load our sound
  


  
    
      9:03:10
    
  
  
  file our sound file contains the file path to our MP3 file once we load our
  


  
    
      9:03:16
    
  
  
  music we have to play it py game.
  


  
    
      9:03:21
    
  
  
  mixer. music called the play Method our MP3 file is only going to
  


  
    
      9:03:28
    
  
  
  play for a brief second I'll demonstrate that I will set the alarm to
  


  
    
      9:03:35
    
  
  
  949 and just give it a few
  


  
    
      9:03:42
    
  
  
  seconds our sound file stops playing when the program terminates what we need
  


  
    
      9:03:48
    
  
  
  to do next is continue playing our sound file while that sound file is BU busy we
  


  
    
      9:03:54
    
  
  
  will add a while loop while access pygame do
  


  
    
      9:04:04
    
  
  
  mixer. music call the get busy
  


  
    
      9:04:09
    
  
  
  method this returns a Boolean if our song is busy if it's
  


  
    
      9:04:14
    
  
  
  still playing then we will call the time modules Sleep Method and sleep for 1
  


  
    
      9:04:21
    
  
  
  second once the song finishes or we terminate the program prematurely
  


  
    
      9:04:27
    
  
  
  the sound file will no longer be busy so this should be the finished product
  


  
    
      9:04:32
    
  
  
  let's test it I will set the alarm for
  


  
    
      9:04:39
    
  
  
  952 and we just have to give it some time
  


  
    
      9:04:49
    
  
  
  [Music]
  


  
    
  64.multithreading



  
    
      9:05:03
    
  
  
  so uh yeah I'm going to talk about multi-threading in Python today multi-threading is used to perform
  


  
    
      9:05:09
    
  
  
  multiple tasks concurrently think of it like we're multitasking we're performing
  


  
    
      9:05:14
    
  
  
  a few different actions at once for example I could study and listen to music and eat something at the same time
  


  
    
      9:05:21
    
  
  
  multi-threading is good for Io bound tasks IO meaning input output such as
  


  
    
      9:05:27
    
  
  
  reading files or fetching data from an API things that may take some time to do and we don't know when it's going to end
  


  
    
      9:05:33
    
  
  
  exactly to use multi-threading we'll import the threading module import
  


  
    
      9:05:41
    
  
  
  threading we access the threading module then call the thread Constructor and
  


  
    
      9:05:46
    
  
  
  pass in a Target function what we'll do for this demonstration let's say we have a bunch of chores to do we have to walk
  


  
    
      9:05:53
    
  
  
  the dog get the mail and take out the trash let's define some functions to handle that we have a function to walk
  


  
    
      9:06:00
    
  
  
  the dog then I will print the following message you finish walking the
  


  
    
      9:06:11
    
  
  
  dog let's create a function to take out
  


  
    
      9:06:19
    
  
  
  trash then we will print you take out the
  


  
    
      9:06:27
    
  
  
  trash then another function of get mail as in get the mail from the
  


  
    
      9:06:34
    
  
  
  mailbox then I will print you get the
  


  
    
      9:06:41
    
  
  
  mail just to simulate these functions taking an indeterminate amount of time
  


  
    
      9:06:46
    
  
  
  I'm going to import the time module to help us let's say walking the dog t takes 8
  


  
    
      9:06:55
    
  
  
  seconds I will access the time module call the Sleep Method and pass in 8 for
  


  
    
      9:07:01
    
  
  
  8 seconds when we call the walk dog function we'll wait around for 8 seconds
  


  
    
      9:07:08
    
  
  
  then finish walking the dog this chore will take quite a bit of time to complete taking out the trash it's
  


  
    
      9:07:15
    
  
  
  fairly quick taking out the trash will take 2 seconds getting the mill will take 4
  


  
    
      9:07:26
    
  
  
  seconds let's call these functions and see what happens we will Begin by
  


  
    
      9:07:31
    
  
  
  walking the dog I will call the walk dog function followed by take out trash
  


  
    
      9:07:42
    
  
  
  function and the get mail function here's the
  


  
    
      9:07:48
    
  
  
  result we're going to wait around for 8 seconds until the walk dog function is complete
  


  
    
      9:07:55
    
  
  
  right about now you finish walking the dog you take out the
  


  
    
      9:08:01
    
  
  
  trash and you get the mail these functions are running on the
  


  
    
      9:08:08
    
  
  
  same thread the main thread our main Python program we have to complete these chores in order one by one because
  


  
    
      9:08:16
    
  
  
  they're all running on the same thread instead of walking the dog and then when we're done taking out the trash and then
  


  
    
      9:08:22
    
  
  
  when that's done we get the mail we could accomplish all three tasks at the same
  


  
    
      9:08:28
    
  
  
  time let's say we have a thread object we could say thread one or to be more
  


  
    
      9:08:33
    
  
  
  descriptive let's say we have chore one let me zoom in a little
  


  
    
      9:08:39
    
  
  
  bit chore one is going to contain a thread we will access the threading
  


  
    
      9:08:46
    
  
  
  module call The Constructor for a thread we have to pass in a keyword argument of
  


  
    
      9:08:52
    
  
  
  Target what is the first chore that we have to do let's walk the
  


  
    
      9:08:57
    
  
  
  dog to start this thread we will take our thread object of chore
  


  
    
      9:09:02
    
  
  
  one and call the start method to start it okay let's do this with chore
  


  
    
      9:09:10
    
  
  
  2 access the threading module call the thread Constructor pass
  


  
    
      9:09:16
    
  
  
  in a Target then the name of a function take out trash chore two do
  


  
    
      9:09:25
    
  
  
  start and then we have chore three I'll just copy what we have because I'm feeling
  


  
    
      9:09:32
    
  
  
  lazy chore three will be get mail here's the result
  


  
    
      9:09:40
    
  
  
  now we finish taking out the trash first then we get the mail then we finish walking the dog so
  


  
    
      9:09:49
    
  
  
  we're executing these functions concurrently we're multitasking were taking out the trash and getting the
  


  
    
      9:09:55
    
  
  
  mail and walking the dog all at the same time one thing that I did want to point
  


  
    
      9:10:01
    
  
  
  out notice how we finished taking out the trash first followed by getting the mail then walking the dog these tasks
  


  
    
      9:10:08
    
  
  
  finished in a different order compared to when we weren't multi-threading that's because taking out the trash
  


  
    
      9:10:14
    
  
  
  finished first it took 2 seconds getting the male took 4 seconds and walking the
  


  
    
      9:10:20
    
  
  
  dog took the longest it took 8 Seconds previously we finished walking the dog
  


  
    
      9:10:25
    
  
  
  first then took out the trash then got the mail when all the chores are complete I would like to print a message
  


  
    
      9:10:32
    
  
  
  I will print the following all chores are
  


  
    
      9:10:39
    
  
  
  complete here's what happens currently we get this message that all
  


  
    
      9:10:44
    
  
  
  chores are complete but we haven't finished any yet we're still completing
  


  
    
      9:10:50
    
  
  
  them there may be at times you want your program to wait for all threads to
  


  
    
      9:10:56
    
  
  
  finish before we print that confirmation message that all chores are complete
  


  
    
      9:11:01
    
  
  
  we're going to use the join method take each thread use the join
  


  
    
      9:11:08
    
  
  
  method we'll do this with chore 2 and chore 3 as well with the join method we will wait
  


  
    
      9:11:16
    
  
  
  for these threads to finish before continuing with the rest of the program here's the result now
  


  
    
      9:11:23
    
  
  
  you take out the trash you get the
  


  
    
      9:11:29
    
  
  
  mail and you finish walking the dog all chores are complete when constructing a thread
  


  
    
      9:11:35
    
  
  
  object and we have a keyword argument of Target if some of these functions take parameters for example with the function
  


  
    
      9:11:42
    
  
  
  of walk dog let's say we have a first name I will convert this print statement
  


  
    
      9:11:48
    
  
  
  to an FST string we will display first for the first name you finish walking whatever
  


  
    
      9:11:56
    
  
  
  your dog's name is so when we're creating a thread and the target is that function and that
  


  
    
      9:12:03
    
  
  
  function accepts arguments we need one more keyword argument and that is args
  


  
    
      9:12:09
    
  
  
  we will send this function a tuple we need a set of parentheses within this
  


  
    
      9:12:14
    
  
  
  tupple we will list our arguments let's say that our dog's first name is
  


  
    
      9:12:20
    
  
  
  Scooby now since this is a topple if we only have one argument we have to end that tupple with a comma to let python
  


  
    
      9:12:28
    
  
  
  know that this is a tupple here's the result you take out the trash you get
  


  
    
      9:12:36
    
  
  
  the mail you finish walking Scooby all
  


  
    
      9:12:42
    
  
  
  chores are complete if we were missing this comma this is what would happen we're no
  


  
    
      9:12:50
    
  
  
  longer passing in a tuple what if what if we have multiple parameters we have first for first name
  


  
    
      9:12:57
    
  
  
  and last for last name you finish walking first and
  


  
    
      9:13:03
    
  
  
  last we have first name of Scooby last name of
  


  
    
      9:13:10
    
  
  
  do you take out the trash you get the
  


  
    
      9:13:16
    
  
  
  mail you finish walking Scooby-Doo all chores are
  


  
    
      9:13:22
    
  
  
  complete all right everybody so that is multi-threading it's used to perform multiple tasks concurrently as if we're
  


  
    
      9:13:29
    
  
  
  multitasking we're executing multiple functions at the same time multi-threading is good for Io bound
  


  
    
      9:13:36
    
  
  
  tasks such as reading files or fetching data from apis and well everybody that
  


  
    
      9:13:41
    
  
  
  is an introduction to multi-threading in Python hey everybody in this video I'm
  


  
    
  65.request API data ↩️



  
    
      9:13:47
    
  
  
  going to show you how we can connect to an API using python in this demonstration we're going to connect to
  


  
    
      9:13:52
    
  
  
  the poke API to get some information on a Pokémon of our choosing I'm assuming that most of us are familiar with
  


  
    
      9:13:58
    
  
  
  Pokémon I thought it'd be a fun example so according to this API we can look up
  


  
    
      9:14:03
    
  
  
  a Pokémon such as Pikachu then we can get the stats for
  


  
    
      9:14:09
    
  
  
  Pikachu such as Pikachu's name height ID number and all sorts of
  


  
    
      9:14:17
    
  
  
  moves and abilities that a Pikachu may have we will need this URL but we'll handle that
  


  
    
      9:14:24
    
  
  
  later our first step is that we're going to import the requests library to make
  


  
    
      9:14:30
    
  
  
  an API request however when I run this I have a module not found error no module
  


  
    
      9:14:36
    
  
  
  named requests requests is one package we'll have to install it's not normally
  


  
    
      9:14:42
    
  
  
  included with the standard python download if I was to go to my project folder go to my virtual environment
  


  
    
      9:14:49
    
  
  
  library site packages there is no package for request ests we'll have to
  


  
    
      9:14:54
    
  
  
  download that with py charm and vs code there is a built-in terminal that we can
  


  
    
      9:14:59
    
  
  
  use to download the request package we can use pip pip is a package manager for
  


  
    
      9:15:05
    
  
  
  python it's normally included when you install python we'll type pip install
  


  
    
      9:15:12
    
  
  
  requests it'll take just a second and now we have that package of
  


  
    
      9:15:17
    
  
  
  requests within our project folder if I run this again
  


  
    
      9:15:23
    
  
  
  that error goes away process finished with exit Code Zero that means there were no
  


  
    
      9:15:29
    
  
  
  errors going back to our Pokemon API we will need this URL let me zoom in so you can see
  


  
    
      9:15:40
    
  
  
  it I'm going to store that as a base URL so it's easier to work
  


  
    
      9:15:46
    
  
  
  with for convenience I'm going to create a function name get Pokemon
  


  
    
      9:15:54
    
  
  
  info to get some info on a Pokemon we'll have to pass in the name of a Pokemon for now I'll write
  


  
    
      9:16:01
    
  
  
  pass outside of this function let's say we have a variable of Pokemon
  


  
    
      9:16:07
    
  
  
  name pick a Pokemon I will pick Pikachu for now then
  


  
    
      9:16:13
    
  
  
  I will call the get Pokemon info function then pass in my Pokémon
  


  
    
      9:16:18
    
  
  
  name remember that your parameters can be named different than your arguments
  


  
    
      9:16:23
    
  
  
  when you send data to a function you can rename it to something else temporarily now that we have the name of
  


  
    
      9:16:29
    
  
  
  the Pokémon we would like to look up we can complete the URL this will be an F
  


  
    
      9:16:36
    
  
  
  string so with our Pokemon API we have the base URL followed by the word
  


  
    
      9:16:42
    
  
  
  Pokemon then the name of a Pokémon so we have the base URL I'll add
  


  
    
      9:16:49
    
  
  
  a placeholder and insert itward slash the word Pokémon slash the name of that
  


  
    
      9:16:57
    
  
  
  Pokémon in this example it's going to be Pikachu we now have the full
  


  
    
      9:17:03
    
  
  
  URL we'll access the request module use the get method and pass in that
  


  
    
      9:17:10
    
  
  
  URL this method is going to return a response object which I will assign to
  


  
    
      9:17:16
    
  
  
  response response is a response object and I'm just going to print our
  


  
    
      9:17:22
    
  
  
  response just to see what we're working with here's our response object it has a
  


  
    
      9:17:29
    
  
  
  status code this is an HTTP status code of 200 200 means the response was
  


  
    
      9:17:36
    
  
  
  okay here's a few examples of response codes you're probably familiar with 404
  


  
    
      9:17:42
    
  
  
  not found so we are looking for 200 the
  


  
    
      9:17:49
    
  
  
  response is okay after we to get our response I'll add an if
  


  
    
      9:17:56
    
  
  
  statement if our response our response object does have an attribute of status
  


  
    
      9:18:02
    
  
  
  code to read what the status code is if this status code is equal to 200 that
  


  
    
      9:18:08
    
  
  
  means the response is okay but for now I'll write pass else I'm going to print the
  


  
    
      9:18:16
    
  
  
  following else I'm going to print failed to retrieve
  


  
    
      9:18:24
    
  
  
  data and I will print the status code of the response
  


  
    
      9:18:30
    
  
  
  object so temporarily I will print data retrieved if it was
  


  
    
      9:18:39
    
  
  
  successful I can't spell okay we have our data data was
  


  
    
      9:18:45
    
  
  
  retrieved if our status code of our response object is equal to 200 I will take our response object and
  


  
    
      9:18:54
    
  
  
  use the Json method our response is a Json format using this method we'll convert it to a
  


  
    
      9:19:01
    
  
  
  python dictionary it will consist of key value pairs much like a Json file but
  


  
    
      9:19:07
    
  
  
  I'm going to assign that to a variable of Pokemon data so it's easier to work
  


  
    
      9:19:15
    
  
  
  with then I will print our Pokemon data
  


  
    
      9:19:24
    
  
  
  so here's the data on Pikachu it's really difficult to read all this you can see some keywords we have
  


  
    
      9:19:32
    
  
  
  abilities base experience this is an extremely large
  


  
    
      9:19:38
    
  
  
  dictionary once we have our dictionary I will return that dictionary of Pokemon
  


  
    
      9:19:44
    
  
  
  data back to the place where we call this function and I will store that as a
  


  
    
      9:19:50
    
  
  
  variable Pokemon info equals get Pokemon info pass in a
  


  
    
      9:19:56
    
  
  
  Pokémon's name and now we should have a dictionary that we can work with let me zoom
  


  
    
      9:20:05
    
  
  
  out if our dictionary exists we can use the if keyword if Pokemon info if that's true
  


  
    
      9:20:13
    
  
  
  if it exists this will be true I will print the following I'll use an F
  


  
    
      9:20:20
    
  
  
  string to access the value of addiction iary we can access it by a key we'll
  


  
    
      9:20:25
    
  
  
  take our dictionary of Pokémon info access the key of
  


  
    
      9:20:31
    
  
  
  name let's see what happens exactly we get Pikachu let's get
  


  
    
      9:20:37
    
  
  
  Pikachu's ID number we will access the key of ID the
  


  
    
      9:20:43
    
  
  
  given value is 25 Pikachu is the 25th Pokémon in the
  


  
    
      9:20:51
    
  
  
  franchise let's get at Pikachu's height Pikachu's height is four I don't
  


  
    
      9:20:58
    
  
  
  know what unit of measurement they use in that franchise 4 feet or 4 in I don't know let's get Pikachu's
  


  
    
      9:21:08
    
  
  
  weight Pikachu's weight is 60 60 lb 60
  


  
    
      9:21:13
    
  
  
  kg I don't know just to make this look nice I'm going to add
  


  
    
      9:21:18
    
  
  
  Name ID
  


  
    
      9:21:24
    
  
  
  height and weight that looks much
  


  
    
      9:21:29
    
  
  
  better let's pick a different Pokemon I will pick my favorite Pokemon of
  


  
    
      9:21:39
    
  
  
  tyion failed to retrieve data does that have to be a lowercase
  


  
    
      9:21:45
    
  
  
  T yes it does okay so name tyan I'll follow the name with the
  


  
    
      9:21:52
    
  
  
  capitalize method to make it
  


  
    
      9:21:58
    
  
  
  capital there we go so my favorite Pokemon is tyan ID is 157 Ty loan's height is 17
  


  
    
      9:22:07
    
  
  
  and weight is 795 all right everybody that is one way in which we can connect to an API using
  


  
    
      9:22:13
    
  
  
  python also tell me what your favorite Pokémon is in the comment section down below all right everybody in today's
  


  
    
  66.PyQt5 GUI intro 🖥️



  
    
      9:22:20
    
  
  
  video we're going to get started working with with the pi qd5 graphical user interface also known as a guy GUI in
  


  
    
      9:22:28
    
  
  
  this topic we'll be creating a basic window so let's get started all right the first step is that using pip we're
  


  
    
      9:22:34
    
  
  
  going to install the pi qt5 package open up a terminal both pycharm and vs code
  


  
    
      9:22:40
    
  
  
  have a built-in terminal that you can use we're going to use pip that is Python's package manager pip install Pi
  


  
    
      9:22:50
    
  
  
  qt5 enter and this might just take a second once your download has finished
  


  
    
      9:22:57
    
  
  
  you should have a package within your site packages folder named Pi qt5 we can
  


  
    
      9:23:02
    
  
  
  work with it as long as we import it first we are going to import the
  


  
    
      9:23:08
    
  
  
  module of CIS CIS meaning system this module provides access to variables used
  


  
    
      9:23:14
    
  
  
  and maintained by the python interpreter then from the package of Pi qt5 do pay
  


  
    
      9:23:21
    
  
  
  attention to the capitalization it's easy to mess that up use dot to access
  


  
    
      9:23:26
    
  
  
  the module of QT widgets widgets are the building
  


  
    
      9:23:32
    
  
  
  blocks of a pi qt5 application they begin with Q that helps distinguish them from widgets from other libraries they
  


  
    
      9:23:39
    
  
  
  typically begin with Q from this module import the following widgets Q
  


  
    
      9:23:48
    
  
  
  application and Q main window
  


  
    
      9:23:54
    
  
  
  here's some boiler plate code that we have to write in order to get this application up and running first we will
  


  
    
      9:23:59
    
  
  
  create a class of main window which will inherit from the class of qain
  


  
    
      9:24:06
    
  
  
  window by inheriting from the parent of Cain window we can customize our own Windows to display to the user we will
  


  
    
      9:24:14
    
  
  
  need a Constructor let's define that Define Dunder init there will be no
  


  
    
      9:24:20
    
  
  
  arguments currently besides self and in case we have to pass any arguments to the parent of Cain window we will access
  


  
    
      9:24:27
    
  
  
  the super class that's the parent and call the parents
  


  
    
      9:24:32
    
  
  
  Constructor but currently we don't have any arguments to pass in we will return to this class
  


  
    
      9:24:39
    
  
  
  momentarily let's define a function of main When We Begin this program we will
  


  
    
      9:24:45
    
  
  
  call the function of main to begin the application for now I'll WR
  


  
    
      9:24:50
    
  
  
  pass if we are running this file directly let's add the following if statement if Dunder name is equal to a
  


  
    
      9:24:59
    
  
  
  string of Dunder main if we are running this file directly call the main
  


  
    
      9:25:04
    
  
  
  function in order for us to begin if that's true we will call the
  


  
    
      9:25:09
    
  
  
  function of main within the main function we will create an app object
  


  
    
      9:25:15
    
  
  
  app equals we will call the Constructor for Q application that class but there
  


  
    
      9:25:22
    
  
  
  one argument that we have to pass in we will access our module of CIS do
  


  
    
      9:25:29
    
  
  
  argv meaning arguments so by passing in this argument this allows Pi QT to
  


  
    
      9:25:36
    
  
  
  process any command line arguments intended for it that's if we use command prompt or terminal we won't be doing
  


  
    
      9:25:42
    
  
  
  that in this series but you may someday in the future it would be a good idea for us to Future proof our code
  


  
    
      9:25:48
    
  
  
  otherwise you may see people pass in an empty list so we now have an app object
  


  
    
      9:25:53
    
  
  
  next we will create a window object window equals call The Constructor for
  


  
    
      9:25:59
    
  
  
  our class of main window currently we don't have any arguments to pass in we have an app object and a window object
  


  
    
      9:26:07
    
  
  
  by calling their respective Constructors now if I run this program currently our window is not going to show the default
  


  
    
      9:26:14
    
  
  
  behavior for a window is to hide it in order to show our window we will access
  


  
    
      9:26:21
    
  
  
  our window call the show method to show it it's only going to appear for a brief
  


  
    
      9:26:27
    
  
  
  second when I run the script I don't know if you saw it but it pops up for a brief
  


  
    
      9:26:34
    
  
  
  second we need to ensure that the window stays until we interact with it or close
  


  
    
      9:26:39
    
  
  
  it after we show our window we will access our module of
  


  
    
      9:26:45
    
  
  
  CIS call the exit method the exit method ensures a clean exit of our program
  


  
    
      9:26:51
    
  
  
  within our exit method we will pass in as an argument our app object our app
  


  
    
      9:26:58
    
  
  
  object has a built-in method of EX ecore and this is a method so we can
  


  
    
      9:27:04
    
  
  
  call it this is the execute method there isn't underscore character after exec
  


  
    
      9:27:10
    
  
  
  for execute that distinguishes it from the execute method there is a separate version of this execute function that
  


  
    
      9:27:17
    
  
  
  ends with an underscore our apps execute method it waits around for user input
  


  
    
      9:27:22
    
  
  
  and handles events such as if we click buttons press keys or close the window
  


  
    
      9:27:28
    
  
  
  now that we're calling this method when we run our program this window should stay in place we can maximize it
  


  
    
      9:27:36
    
  
  
  minimize it or close it that's all the boiler plate code that
  


  
    
      9:27:42
    
  
  
  we need for a basic window let's customize it within our Constructor for our main window what would we like to
  


  
    
      9:27:49
    
  
  
  add let's set the title for our window self. set window title method we will
  


  
    
      9:27:59
    
  
  
  pass in a string think of a title for your program my cool first GUI
  


  
    
      9:28:09
    
  
  
  gooey and now we have a new title my cool first gooey graphical user
  


  
    
      9:28:15
    
  
  
  interface when this window appears we can set the geometry of where the window appears and the size of the window
  


  
    
      9:28:23
    
  
  
  access self do set geometry
  


  
    
      9:28:29
    
  
  
  method there's four arguments X and Y for the X and Y
  


  
    
      9:28:34
    
  
  
  coordinates a width of the window and a height of the window if I were to set X
  


  
    
      9:28:40
    
  
  
  and Y to be both zero this window will appear in the top left corner of my screen I'll also need a width and a
  


  
    
      9:28:47
    
  
  
  height let's say I don't know 5 00 for
  


  
    
      9:28:53
    
  
  
  each so now my window is now a square the width and the height are both the
  


  
    
      9:28:59
    
  
  
  same they're both 500 the width is 500 pixels the height is 500 pixels with the
  


  
    
      9:29:04
    
  
  
  first two arguments we set the initial placement of our window to be where X is z and y is zero that corresponds to the
  


  
    
      9:29:12
    
  
  
  top left corner if I set the first argument to be 100 well then the window is going to
  


  
    
      9:29:19
    
  
  
  move to the right by 100 pixels there are ways to Center your window in the very center of your screen but
  


  
    
      9:29:26
    
  
  
  that's a little too advanced for us right now for the time being I'll pick something roughly near the middle of my
  


  
    
      9:29:32
    
  
  
  screen 700 pixels on the x axis and 300 on the Y AIS it should appear roughly in
  


  
    
      9:29:40
    
  
  
  the middle but feel free to adjust these values based on the size of your screen we'll discuss layouts in the future now
  


  
    
      9:29:48
    
  
  
  if you would like a window icon we can change that you will need a image to work with So within my project
  


  
    
      9:29:56
    
  
  
  folder I have a profile picture for my YouTube channel I'll set that to be the icon find an image that you like then
  


  
    
      9:30:04
    
  
  
  add it to your project folder in order to work with icons we'll need to make the following import from
  


  
    
      9:30:11
    
  
  
  PI qt5 that's the package access the module
  


  
    
      9:30:17
    
  
  
  of QT GUI import the following
  


  
    
      9:30:23
    
  
  
  Q icon now we can work with icons after we set the geometry for our
  


  
    
      9:30:31
    
  
  
  window access this object of self this main window call the method of set
  


  
    
      9:30:38
    
  
  
  window icon within this method we will call the Constructor of Q icon we'll pass in
  


  
    
      9:30:47
    
  
  
  either a relative file path or an absolute file path my main python file
  


  
    
      9:30:52
    
  
  
  is right next to my profile picture that image I only need the file name within a
  


  
    
      9:30:58
    
  
  
  string so the name of my image it's going to be different for you depending on what the name of your image is my
  


  
    
      9:31:04
    
  
  
  image is named profile uncore pick and this image is a JPEG
  


  
    
      9:31:12
    
  
  
  jpg then when I run this program I'm using my image as an icon
  


  
    
      9:31:18
    
  
  
  for this window all right everybody that is how to create a window using pi qt5 and in
  


  
    
      9:31:24
    
  
  
  the next topic we will be creating some labels what's up everybody in today's
  


  
    
  67.PyQt5 labels 🏷️



  
    
      9:31:29
    
  
  
  topic we're going to create some labels using pi qt5 we will import the widget
  


  
    
      9:31:35
    
  
  
  of Q label this label class is used to create
  


  
    
      9:31:40
    
  
  
  label widgets that can display text or images within the Constructor of our
  


  
    
      9:31:45
    
  
  
  main window this is where we'll create a label we will declare a label object lab
  


  
    
      9:31:52
    
  
  
  equals call The Constructor for Q label for the text of the label we'll
  


  
    
      9:31:59
    
  
  
  pass in a string that's the first argument let's say the word hello for the second argument we will
  


  
    
      9:32:06
    
  
  
  pass in self self refers to this window object that we're calling and
  


  
    
      9:32:12
    
  
  
  instantiating all right let's do a test run here is my label although you can
  


  
    
      9:32:19
    
  
  
  barely see it the font is really small but it does say hello let's set the font we'll need
  


  
    
      9:32:26
    
  
  
  another import from PI
  


  
    
      9:32:31
    
  
  
  qt5 do QT
  


  
    
      9:32:36
    
  
  
  GUI import Q font by importing the Q font class we
  


  
    
      9:32:43
    
  
  
  can begin working with fonts we're going to take our label call the set font method
  


  
    
      9:32:52
    
  
  
  within this method we will call the Constructor of Q font pick a font that you would like I
  


  
    
      9:32:59
    
  
  
  will pick aial but feel free to choose really any font then the second argument
  


  
    
      9:33:05
    
  
  
  is a font size I'll pick 30 let's do another test
  


  
    
      9:33:11
    
  
  
  run that's much better let's increase this to 40 for the font
  


  
    
      9:33:17
    
  
  
  size now I'm going to set the geometry of this label such as the positioning
  


  
    
      9:33:23
    
  
  
  and the width and the height let's take our
  


  
    
      9:33:28
    
  
  
  label use the set geometry method we will pass in X and Y coordinates 0 0
  


  
    
      9:33:37
    
  
  
  corresponds to the top left corner for the width let's set the width to be 500
  


  
    
      9:33:42
    
  
  
  and the height to be 100 that's better I'll cover more
  


  
    
      9:33:48
    
  
  
  advanced alignments momentarily let's add a style sheet sheet pqt does have styles that are very
  


  
    
      9:33:55
    
  
  
  similar to CSS if you would like to learn more about CSS I do have a full course on that topic we will add some
  


  
    
      9:34:02
    
  
  
  CSS like Properties by accessing our label object call the method of set
  


  
    
      9:34:09
    
  
  
  style sheet within this method we will pass in
  


  
    
      9:34:15
    
  
  
  some CSS like properties such as a color for the color let's say blue
  


  
    
      9:34:22
    
  
  
  these CSS like properties should end with a semicolon and now the font color is blue
  


  
    
      9:34:29
    
  
  
  you could also use RGB values or heximal values you could always look up a Color
  


  
    
      9:34:36
    
  
  
  Picker and pick a very specific color let's pick something
  


  
    
      9:34:42
    
  
  
  green we can either use RGB values or heximal values so I will copy this value
  


  
    
      9:34:51
    
  
  
  so I will paste that heximal value and now we have a very specific shade of
  


  
    
      9:34:58
    
  
  
  green but I think I'll go with something dark such as
  


  
    
      9:35:06
    
  
  
  that so this color is going to be a dark gray color we could set a background color
  


  
    
      9:35:13
    
  
  
  this will be a new string background Das color
  


  
    
      9:35:22
    
  
  
  and I will pick a new color I will pick something
  


  
    
      9:35:31
    
  
  
  blue that's a decent
  


  
    
      9:35:36
    
  
  
  color we have a blue background with dark gray text we can set the font to be bold font
  


  
    
      9:35:45
    
  
  
  weight will be bold so the font is now bold
  


  
    
      9:35:53
    
  
  
  the font style can be italic font style
  


  
    
      9:36:00
    
  
  
  italic so our font is italic and we can
  


  
    
      9:36:05
    
  
  
  underline text decoration
  


  
    
      9:36:12
    
  
  
  underline the text on our label is now underlined let's work on positioning
  


  
    
      9:36:17
    
  
  
  next currently my text is left Justified and to the center
  


  
    
      9:36:23
    
  
  
  vertically to work with alignments we need this import from PI
  


  
    
      9:36:30
    
  
  
  qt5 QT core import
  


  
    
      9:36:37
    
  
  
  QT the class of QT is used for alignments to Center the text of our
  


  
    
      9:36:44
    
  
  
  label at the top vertically we will take our label use the set alignment method
  


  
    
      9:36:52
    
  
  
  then pass in a flag access the class of qot access the flag of a line
  


  
    
      9:37:00
    
  
  
  top this will align our text vertically to the
  


  
    
      9:37:07
    
  
  
  top so then our text is aligned vertically to the top rather than the
  


  
    
      9:37:13
    
  
  
  center for the bottom we will use the flag of a line
  


  
    
      9:37:20
    
  
  
  bottom we will align vertically on the
  


  
    
      9:37:27
    
  
  
  bottom the text is now on the bottom to align vertically in the
  


  
    
      9:37:33
    
  
  
  center align V
  


  
    
      9:37:38
    
  
  
  Center this will be vertically Center which it was
  


  
    
      9:37:44
    
  
  
  originally now for horizontal alignment we can add the following okay to align right we will
  


  
    
      9:37:52
    
  
  
  pass in a flag of align right
  


  
    
      9:37:59
    
  
  
  horizontally align right the text is now all the way to the
  


  
    
      9:38:08
    
  
  
  right for the center a line H H for
  


  
    
      9:38:14
    
  
  
  horizontal Center the text is now horizontally
  


  
    
      9:38:20
    
  
  
  aligned in the center center for the
  


  
    
      9:38:30
    
  
  
  left Aline
  


  
    
      9:38:36
    
  
  
  left the text will be aligned to the left we could combine both horizontal
  


  
    
      9:38:42
    
  
  
  and vertical positioning here's how take our label
  


  
    
      9:38:48
    
  
  
  call the set alignment method we will align horizontally in the center
  


  
    
      9:38:55
    
  
  
  follow this with the or bitwise operator which is a vertical bar this allows us
  


  
    
      9:39:01
    
  
  
  to combine Flags we will align horizontally in the center then vertically let's align to the
  


  
    
      9:39:09
    
  
  
  top so our text should be aligned horizontally we're aligned in the center
  


  
    
      9:39:14
    
  
  
  and vertically we're aligned to the top align bottom vertically
  


  
    
      9:39:24
    
  
  
  horizontally we are in the center vertically we're aligned on the bottom then for the very center of our
  


  
    
      9:39:37
    
  
  
  label a line horizontal Center and a line vertical
  


  
    
      9:39:49
    
  
  
  Center our text will now be in the very middle of our label both horizontally
  


  
    
      9:39:54
    
  
  
  and vertically now there is a shortcut for the very center we don't need both of
  


  
    
      9:39:59
    
  
  
  these flags the shortcut is the following set
  


  
    
      9:40:07
    
  
  
  alignment align Center that will align the text both
  


  
    
      9:40:12
    
  
  
  horizontally and vertically so that is Center and Center
  


  
    
      9:40:18
    
  
  
  all right everybody so that is an introduction to labels in pi qt5 what is going on everybody in
  


  
    
  68.PyQt5 images



  
    
      9:40:24
    
  
  
  today's video I'm going to show you how we can add images to Pi qt5 you will need an image to work with me I'll be
  


  
    
      9:40:31
    
  
  
  using my profile picture for my YouTube channel feel free to take a moment to find a picture of your own maybe a
  


  
    
      9:40:37
    
  
  
  profile picture of yourself we will need the following Imports Q label the most
  


  
    
      9:40:44
    
  
  
  common and straightforward approach to displaying an image is to add an image to a label in order to display it then
  


  
    
      9:40:51
    
  
  
  we will need this other import from PI qt5 that's the package then the module
  


  
    
      9:40:58
    
  
  
  of QT GUI import the class of
  


  
    
      9:41:03
    
  
  
  qix map the class of qix map it's used for handling images and provides
  


  
    
      9:41:10
    
  
  
  functionality for loading manipulating and displaying images we will load our image to a q piix map object then add
  


  
    
      9:41:17
    
  
  
  this Q pix map object to a label in order to display it within our Constructor of our main
  


  
    
      9:41:23
    
  
  
  window we will create a label label equals call the Q label
  


  
    
      9:41:30
    
  
  
  Constructor then pass in self self refers to the window object our window
  


  
    
      9:41:36
    
  
  
  will be the parent widget our label widget is one of its children once we have our label we'll set the geometry of
  


  
    
      9:41:43
    
  
  
  the label label. set geometry method we have to pass in X and Y coordinates and
  


  
    
      9:41:51
    
  
  
  as well as a width and height of the label for the coordinates let's say zero
  


  
    
      9:41:56
    
  
  
  for each the label will appear in the top left corner for the width 250 is
  


  
    
      9:42:02
    
  
  
  good and the height 250 as well here's my window the label is going
  


  
    
      9:42:08
    
  
  
  to appear in the top left corner however there's nothing added to the label that's where the widget of Q pix map
  


  
    
      9:42:14
    
  
  
  comes in we will create a PIX map object equals call the Constructor of Q pix map
  


  
    
      9:42:24
    
  
  
  we have to pass in a string that represents a relative file path or an absolute file path to our image my image
  


  
    
      9:42:31
    
  
  
  is right next to my main python file I just need the file name the name of my image is profile uncore pick and this is
  


  
    
      9:42:39
    
  
  
  a JPEG when I run this we don't see our image we have to add the Pix map object
  


  
    
      9:42:47
    
  
  
  to the label we have to set it here's how take take our label use the set
  


  
    
      9:42:54
    
  
  
  pixmap method and pass in our pixmap object and now we can see the image
  


  
    
      9:43:01
    
  
  
  however the image doesn't scale according to the size of the label to enable that we have to call the
  


  
    
      9:43:07
    
  
  
  following method take our label call the set
  


  
    
      9:43:13
    
  
  
  scaled contents method then pass in true our image will now scale to the size of
  


  
    
      9:43:20
    
  
  
  the label if we were to change the size of the label let's say it's 100
  


  
    
      9:43:28
    
  
  
  pixels it will scale down even further or I could even increase it to
  


  
    
      9:43:35
    
  
  
  500 so now the image takes up the entire width and height of the window let's set that back to
  


  
    
      9:43:44
    
  
  
  250 there's a few tricks that we can do with positioning of the image we've set our label with an image we can move the
  


  
    
      9:43:51
    
  
  
  label within the confines of the window currently it's set in the top left corner but here's a few tricks that we
  


  
    
      9:43:58
    
  
  
  can do with positioning with our label we will set the geometry
  


  
    
      9:44:05
    
  
  
  again so the top left corner is 0 0 for the coordinates we could pass in 250 and 250
  


  
    
      9:44:13
    
  
  
  again for the width and the height but if we were to change that here when we
  


  
    
      9:44:18
    
  
  
  initially create this label we would have to manually change that here as well I think it would be better if we
  


  
    
      9:44:24
    
  
  
  were to get the current width and height of the label take our label call the width method to get the width same thing
  


  
    
      9:44:31
    
  
  
  applies with the height label. height method that should work
  


  
    
      9:44:39
    
  
  
  fine let's say we would like to take our image and move it to the right side of our window here's
  


  
    
      9:44:45
    
  
  
  how with the x coordinate we're going to access self that means our window called
  


  
    
      9:44:52
    
  
  
  the width method here's what we have currently we can't see the
  


  
    
      9:44:58
    
  
  
  label it was placed outside of the confines of the window let's subtract our labels
  


  
    
      9:45:06
    
  
  
  with label. width I'll put each of these arguments on a new line just to help with
  


  
    
      9:45:15
    
  
  
  readability so now our image is Right Justified within our window for the bottom right corner we
  


  
    
      9:45:23
    
  
  
  will take the second argument access self. height that's the
  


  
    
      9:45:29
    
  
  
  height of the window that we're instantiating minus our label's
  


  
    
      9:45:36
    
  
  
  height and now our image is in the bottom right corner for the bottom left corner we
  


  
    
      9:45:42
    
  
  
  will set X to be zero now here's the tricky part to have
  


  
    
      9:45:49
    
  
  
  our image placed in the center center of our window we will take the width of the window minus the width of the label / by
  


  
    
      9:45:58
    
  
  
  two for integer division we'll be using double forward slashes we need our
  


  
    
      9:46:03
    
  
  
  pixels to be whole integers so we're going to be using integer Division and not standard division we will round to
  


  
    
      9:46:10
    
  
  
  the nearest whole pixel then we will do this with the height as
  


  
    
      9:46:17
    
  
  
  well and now our image should be in the middle of our window
  


  
    
      9:46:23
    
  
  
  all right everybody and that is how to add an image to your Pi qt5 application well hello again friends
  


  
    
  69.PyQt5 layout managers



  
    
      9:46:29
    
  
  
  today I got to explain layouts in pqt 5 we'll discuss vertical horizontal and
  


  
    
      9:46:35
    
  
  
  grid layouts but we'll need the following Imports we will be importing Q
  


  
    
      9:46:41
    
  
  
  label Q widget I'm going to put these Imports on a new line just because we have a
  


  
    
      9:46:49
    
  
  
  lot QV for vertical box
  


  
    
      9:46:55
    
  
  
  layout and I'm just going to copy this qh for horizontal box
  


  
    
      9:47:02
    
  
  
  layout and Q grid layout let's be sure
  


  
    
      9:47:07
    
  
  
  that we have all these Imports these classes deal with layout managers they aren't widgets we'll be
  


  
    
      9:47:14
    
  
  
  writing a majority of the code within our main window class however it can get disorganized really quick what will help
  


  
    
      9:47:21
    
  
  
  keep things organized is if we declare a separate function within the main window class this is a common practice that
  


  
    
      9:47:28
    
  
  
  you'll see within Pi qt5 there will be a function for innit for initialize UI for
  


  
    
      9:47:34
    
  
  
  user interface no other arguments besides self and for now I'll write
  


  
    
      9:47:40
    
  
  
  pass when we construct a window object we will call Self do init UI to
  


  
    
      9:47:48
    
  
  
  initialize the user interface so anything that deals with the user interface we're going to be writing
  


  
    
      9:47:54
    
  
  
  within this function to help keep our code clean and organized normally we can't add a layout manager to a main
  


  
    
      9:48:00
    
  
  
  window object main window widgets have a specific design and layout structure
  


  
    
      9:48:06
    
  
  
  that's normally incompatible with layout managers what we would need to do is create a generic widget add a layout
  


  
    
      9:48:13
    
  
  
  manager to that widget then add that widget to the main window in order to display the layout within our method to
  


  
    
      9:48:21
    
  
  
  initialize our user interface we are going to create what is called a central widget called The Constructor
  


  
    
      9:48:29
    
  
  
  for Q widget this is a generic widget then we
  


  
    
      9:48:34
    
  
  
  will take self self is our window call the
  


  
    
      9:48:40
    
  
  
  set Central widget method then pass in our Central
  


  
    
      9:48:47
    
  
  
  widget when working with layout managers we will add that layout manager to the
  


  
    
      9:48:52
    
  
  
  central Widget the central widget is then added to the main
  


  
    
      9:48:57
    
  
  
  window so currently this is what we're working with we will need some widgets to organize because right now it's
  


  
    
      9:49:05
    
  
  
  empty let's create a few labels let's say label one equals Q
  


  
    
      9:49:12
    
  
  
  label I'll pass in some text number one okay let's create four additional labels
  


  
    
      9:49:19
    
  
  
  1 through five I'll just do some copying and
  


  
    
      9:49:27
    
  
  
  pasting all of our labels are overlapping let's add some colors let's
  


  
    
      9:49:34
    
  
  
  take label one use the set stylesheet
  


  
    
      9:49:39
    
  
  
  method then pass in a background color as a CSS property
  


  
    
      9:49:46
    
  
  
  background-color will be red let copy this line of code paste it
  


  
    
      9:49:53
    
  
  
  four additional times for labels 1 through
  


  
    
      9:49:59
    
  
  
  5 we'll have a label that is yellow another that is
  


  
    
      9:50:04
    
  
  
  green blue then
  


  
    
      9:50:11
    
  
  
  purple here are the labels they're all overlapping one another that's why we can only see
  


  
    
      9:50:17
    
  
  
  five this is where a layout manager comes in we'll start with the vertical layout we
  


  
    
      9:50:23
    
  
  
  will create a vertical layout manager which we will name vbx vbox equals call The Constructor for
  


  
    
      9:50:34
    
  
  
  QV box layout we are calling the Constructor we will take our layout
  


  
    
      9:50:42
    
  
  
  manager call the add widget method then pass in a widget such as label one near
  


  
    
      9:50:50
    
  
  
  the top here we'll do this with the other labels we'll do some copying and
  


  
    
      9:50:56
    
  
  
  pasting add label two 3 four and five there's one last
  


  
    
      9:51:05
    
  
  
  step we will take our Central widget which we have declared at the top of this
  


  
    
      9:51:11
    
  
  
  function call the set layout method we are setting the layout of our
  


  
    
      9:51:18
    
  
  
  Central widget with the layout manager a vbx vertical box here's the new
  


  
    
      9:51:25
    
  
  
  layout all of our labels all of our widgets are arranged vertically for
  


  
    
      9:51:31
    
  
  
  horizontal we will use qh box layout for horizontal replace any instance of vbx
  


  
    
      9:51:38
    
  
  
  with hbox for the set layout method pass in
  


  
    
      9:51:46
    
  
  
  hbox this allows for a horizontal layout then we have
  


  
    
      9:51:52
    
  
  
  grid Q grid layout replace hbox with
  


  
    
      9:52:02
    
  
  
  grid so what we have to do with grids after adding a widget we have to specify
  


  
    
      9:52:08
    
  
  
  a row and column with separate arguments the row and column both begin with zero
  


  
    
      9:52:13
    
  
  
  so Row one column 1 would be row0 column 0 for label two let's say row 0 column 1
  


  
    
      9:52:24
    
  
  
  Label 3 will be Row 1 column 0 four will be Row one column 1 then
  


  
    
      9:52:33
    
  
  
  five row one column 2 so here's the current
  


  
    
      9:52:38
    
  
  
  layout we have labels 1 and two both within row zero labels 3 four and 5 are
  


  
    
      9:52:44
    
  
  
  both within the second row let's say label five is Row 2 column 2
  


  
    
      9:52:51
    
  
  
  that would result with something like this we have label five which is purple
  


  
    
      9:52:56
    
  
  
  in row two column 2 so it depends on how you want to arrange your widgets all
  


  
    
      9:53:01
    
  
  
  right everybody so that is an introduction to layout managers in pi qt5 today I'm going to show you how we
  


  
    
  70.PyQt5 buttons 🛎️



  
    
      9:53:08
    
  
  
  can create push button widgets in pi qt5 to begin we will need the following Imports Q push button as well as Q label
  


  
    
      9:53:19
    
  
  
  for this demonstration during the previous topic on layout managers within our Constructor for our
  


  
    
      9:53:25
    
  
  
  main window we defined a method of initialize UI for user interface let's
  


  
    
      9:53:31
    
  
  
  be sure that we're calling that method within our Constructor within this method is where we'll be handling managing the user interface to create a
  


  
    
      9:53:38
    
  
  
  button we will call the push button Constructor normally when creating widgets we would want to prefix that
  


  
    
      9:53:44
    
  
  
  widget with self then follow the name of the widget for example button however
  


  
    
      9:53:50
    
  
  
  I'm going to demonstrate what happens when we don't do that because without self we're declaring a local variable
  


  
    
      9:53:57
    
  
  
  we'll get back to that in just a moment let's create a local button object by calling the Q push button
  


  
    
      9:54:04
    
  
  
  Constructor we can pass in some text such as click me we will add this to our window self
  


  
    
      9:54:12
    
  
  
  self refers to our window object let's set the geometry of the button button. set geometry
  


  
    
      9:54:22
    
  
  
  we could use a layout manager but I do want to keep this lesson as simple as possible so let's pick some coordinates
  


  
    
      9:54:28
    
  
  
  I've picked the following for the X and Y coordinates 150 and 200 for the width
  


  
    
      9:54:34
    
  
  
  200 and the height 100 here is our button currently the font is a little
  


  
    
      9:54:39
    
  
  
  small so I'm going to set the stylesheet set style
  


  
    
      9:54:47
    
  
  
  sheet I'll just increase the font size we could could use Q font but that might
  


  
    
      9:54:52
    
  
  
  be overkill for this demonstration let's just say the font size will be 30
  


  
    
      9:54:58
    
  
  
  pixels now we can read it so we have our button we're going to be connecting our
  


  
    
      9:55:05
    
  
  
  button to a function but we need to Define that function we'll do so within our main window
  


  
    
      9:55:11
    
  
  
  class so we will Define a function of on click there are no parameters besid self
  


  
    
      9:55:19
    
  
  
  when we click on the button but what would we like to do let's print a test
  


  
    
      9:55:24
    
  
  
  message let's say button clicked and that's
  


  
    
      9:55:31
    
  
  
  it when we click this button nothing happens we have to set up a signal and
  


  
    
      9:55:37
    
  
  
  slot for the button here's how we will take our button dot list a
  


  
    
      9:55:44
    
  
  
  signal a signal is emitted when a widget is interacted with we have to list the
  


  
    
      9:55:50
    
  
  
  type of signal so the signal we're looking for is clicked when we click this button we
  


  
    
      9:55:57
    
  
  
  will perform a slot an action we will take the signal of clicked connect it to
  


  
    
      9:56:04
    
  
  
  a slot connect is a method the slot will be self dot the
  


  
    
      9:56:10
    
  
  
  name of the method on click when we press this button we
  


  
    
      9:56:16
    
  
  
  perform this slot this method of onclick each time I press the button we perform
  


  
    
      9:56:24
    
  
  
  that action not only should we print a message for this demonstration let's set
  


  
    
      9:56:29
    
  
  
  the text of the button so we have button. set text let's change the text
  


  
    
      9:56:39
    
  
  
  to clicked so this actually isn't going to work because we're not prefixing self
  


  
    
      9:56:47
    
  
  
  let me demonstrate what happens we print button clicked but then we have
  


  
    
      9:56:53
    
  
  
  a problem we have an exit code our program was interrupted button is considered local
  


  
    
      9:57:00
    
  
  
  to our initializer method our onclick function doesn't recognize what our button is that's why we're going to
  


  
    
      9:57:06
    
  
  
  prefix our button with self so it belongs to the class of main window and not this method any instance of button
  


  
    
      9:57:14
    
  
  
  we're going to prefix with self and now this should work the text
  


  
    
      9:57:22
    
  
  
  on my button is going to change when I click it
  


  
    
      9:57:27
    
  
  
  clicked you don't have to do this but with my personal coding style whenever I
  


  
    
      9:57:33
    
  
  
  create a variable or an object within a class I like to do so within the Constructor even py charm is giving me a
  


  
    
      9:57:41
    
  
  
  warning when we declare this button I'm going to move it to the
  


  
    
      9:57:47
    
  
  
  Constructor and let me just rearrange everything
  


  
    
      9:57:52
    
  
  
  self. button equals a q push button widget within my initializer method
  


  
    
      9:57:59
    
  
  
  that's when I like to rearrange everything and style it we can also disable buttons when we click on them to
  


  
    
      9:58:06
    
  
  
  do that we will take self. button call the set disabled method then pass and
  


  
    
      9:58:14
    
  
  
  true when I click the button it will be disabled I can no longer click on
  


  
    
      9:58:21
    
  
  
  it for the last part of this demonstration when we click on our button let's change the text of a
  


  
    
      9:58:29
    
  
  
  label let's declare self. label within our Constructor equals a q
  


  
    
      9:58:36
    
  
  
  label the text of the label will be hello we will add this label to self the
  


  
    
      9:58:43
    
  
  
  window when we set up the user interface let's set the geometry of the
  


  
    
      9:58:48
    
  
  
  label self. label do set
  


  
    
      9:58:53
    
  
  
  geometry we could use a layout manager but just to keep things simple I'm going to set some coordinates 150 for X 300
  


  
    
      9:59:02
    
  
  
  for y the width will be 200 and the height 100 let's change the font
  


  
    
      9:59:09
    
  
  
  size self. label do set style
  


  
    
      9:59:15
    
  
  
  sheet I will set the font size to be 30
  


  
    
      9:59:22
    
  
  
  maybe 50 better all right within our onclick
  


  
    
      9:59:28
    
  
  
  function let's instead take self. label. set text method then pass in some
  


  
    
      9:59:37
    
  
  
  new text to display we're saying hello but when we click the button let's say
  


  
    
      9:59:45
    
  
  
  goodbye so now when I click the button we will change the text on a separate
  


  
    
      9:59:50
    
  
  
  widget my label which now says goodbye so with buttons you need a
  


  
    
      9:59:56
    
  
  
  signal that's connected to a slot the signal is an event the slot is an action
  


  
    
      10:00:02
    
  
  
  that this widget is going to take when the signal occurs and well everybody that is an
  


  
    
      10:00:08
    
  
  
  introduction to push buttons in pi qt5 hey uh so today I got to explain
  


  
    
  71.PyQt5 checkboxes



  
    
      10:00:14
    
  
  
  checkboxes in pqt 5 to work with checkboxes we will need the following
  


  
    
      10:00:20
    
  
  
  import from the module of widgets from PI qt5 import Q check
  


  
    
      10:00:27
    
  
  
  box to work with different states we will also need the following import from
  


  
    
      10:00:34
    
  
  
  PI qt5 do QT core import QT this module of QT core it
  


  
    
      10:00:43
    
  
  
  contains non- classes relevant to Pi qt5 applications so be sure that you get
  


  
    
      10:00:49
    
  
  
  the this import as well to create a checkbox I will create this within the Constructor of my main window we will
  


  
    
      10:00:56
    
  
  
  create a checkbox with self the name of the checkbox which I will name
  


  
    
      10:01:02
    
  
  
  checkbox equals call The Constructor of the Q checkbox class the first argument is
  


  
    
      10:01:09
    
  
  
  going to be the text of the checkbox what do you want the checkbox to say
  


  
    
      10:01:14
    
  
  
  let's ask do you like food
  


  
    
      10:01:20
    
  
  
  the second argument is the parent widget where we will be adding this checkbox let's say self self will apply to this
  


  
    
      10:01:27
    
  
  
  window we could use a layout manager but I want to keep this lesson as simple as possible we're just going to focus on
  


  
    
      10:01:34
    
  
  
  checkboxes and their functionality so we should have a checkbox however we can barely see it
  


  
    
      10:01:41
    
  
  
  the font is really small I have a method to initialize the user
  


  
    
      10:01:46
    
  
  
  interface that's where we'll set the stylesheet and the g ometry of our checkbox let's set the stylesheet self
  


  
    
      10:01:54
    
  
  
  do the name of the checkbox checkbox do set Styles sheet method then
  


  
    
      10:02:03
    
  
  
  we can pass in some CSS like properties let's set the font size to be 30
  


  
    
      10:02:11
    
  
  
  pixels and I will pick a font family font family aial
  


  
    
      10:02:21
    
  
  
  oh and we should change the geometry of the label it's getting cut off self do the name of the
  


  
    
      10:02:30
    
  
  
  checkbox which is checkbox let's set the
  


  
    
      10:02:35
    
  
  
  geometry pass in some X and Y coordinates for the placement as well as
  


  
    
      10:02:40
    
  
  
  a width and a height I will pick 500 and 100 uh maybe I'll move it a little more
  


  
    
      10:02:48
    
  
  
  to the right by 10 pixels that's pretty good our checkbox
  


  
    
      10:02:54
    
  
  
  has an initial State it's normally unchecked that's the default Behavior
  


  
    
      10:02:59
    
  
  
  but we could set that to be checked with the following method when the window loads let's take our checkbox self.
  


  
    
      10:03:07
    
  
  
  checkbox call the set checked method then pass in true so then when the
  


  
    
      10:03:14
    
  
  
  window loads the checkbox is already checked but let's keep that is
  


  
    
      10:03:21
    
  
  
  false now this checkbox it doesn't do anything when I check it let's add some
  


  
    
      10:03:28
    
  
  
  functionality we'll take our checkbox connect a signal to a
  


  
    
      10:03:33
    
  
  
  slot the slot can be a function or a method let's define a method within our
  


  
    
      10:03:39
    
  
  
  main window class let's name this method checkbox changed we will call this
  


  
    
      10:03:47
    
  
  
  method when the state of our checkbox changed changes there is one parameter besides self a state now the state
  


  
    
      10:03:55
    
  
  
  parameter is going to be provided to us when we interact with our checkbox when we check the checkbox let's print
  


  
    
      10:04:02
    
  
  
  something like a test message you like
  


  
    
      10:04:07
    
  
  
  food we have to connect a signal of State changed to a slot of checkbox
  


  
    
      10:04:13
    
  
  
  changed we will take self dot the name of the checkbox which is checkbox
  


  
    
      10:04:20
    
  
  
  the signal will be State changed to connect a slot to a signal we
  


  
    
      10:04:27
    
  
  
  use the connect method then pass in a function or method name so we are
  


  
    
      10:04:32
    
  
  
  working with methods this method belongs to the window class we'll prefix the method
  


  
    
      10:04:39
    
  
  
  name with self self. checkbox changed so when I run this program when
  


  
    
      10:04:46
    
  
  
  I check the checkbox we execute this method you like food now when I uncheck it I
  


  
    
      10:04:53
    
  
  
  instead would like to display you do not like food so that's where our state is going
  


  
    
      10:04:59
    
  
  
  to come in I'm going to print our state just to see what it
  


  
    
      10:05:05
    
  
  
  is our state is going to be a
  


  
    
      10:05:10
    
  
  
  value when we check the checkbox our state has a value of two when we uncheck
  


  
    
      10:05:16
    
  
  
  it it has a value of zero 0 zero means unchecked two means checked there's also
  


  
    
      10:05:23
    
  
  
  one for partially checked but that's not going to be relevant to this topic so
  


  
    
      10:05:28
    
  
  
  zero or two we could add an if statement such as if state is equal to two then
  


  
    
      10:05:35
    
  
  
  print you like food however that's not really readable other developers looking
  


  
    
      10:05:40
    
  
  
  over your code aren't going to understand what two is by looking at it instead let's use the following we will
  


  
    
      10:05:46
    
  
  
  access the class of QT there's a built-in constant of
  


  
    
      10:05:54
    
  
  
  checked this also equals two but it's more readable it's a constant so if
  


  
    
      10:06:00
    
  
  
  state is equal to QT checked print you like food I will check the checkbox you like
  


  
    
      10:06:08
    
  
  
  food when I uncheck it nothing happens let's add an else
  


  
    
      10:06:14
    
  
  
  statement else let's print you do not not like
  


  
    
      10:06:21
    
  
  
  food so then when I check the checkbox we print you like food when I uncheck it
  


  
    
      10:06:28
    
  
  
  we print you do not like food you like food you do not like food you like food
  


  
    
      10:06:34
    
  
  
  you do not like food all right everybody so that is an introduction to checkboxes in pi
  


  
    
      10:06:41
    
  
  
  qt5 all right let's do this thing today I got to talk about radio buttons in pi
  


  
    
  72.PyQt5 radio buttons



  
    
      10:06:46
    
  
  
  qt5 to work with radio buttons we will need the following imports from the module of QT widgets we will need the
  


  
    
      10:06:54
    
  
  
  class of Q radio button as well as Q
  


  
    
      10:07:00
    
  
  
  button group to group together different buttons let's create three radio buttons
  


  
    
      10:07:06
    
  
  
  within the Constructor of my main window we will construct three radio buttons
  


  
    
      10:07:12
    
  
  
  for the first radio button this will be named radio one we will call the Constructor of the class Q radio button
  


  
    
      10:07:20
    
  
  
  then we can pass in some text what is the radio button going to say let's say that we're working with payment options
  


  
    
      10:07:28
    
  
  
  let's say visa for the first option then for the second argument I will pass in
  


  
    
      10:07:34
    
  
  
  we will add this radio button directly to our window that would be self let's
  


  
    
      10:07:39
    
  
  
  create two more additional radio buttons Radio 2 and radio 3 the text of radio
  


  
    
      10:07:45
    
  
  
  button two will be MasterCard and three will be a gift card
  


  
    
      10:07:51
    
  
  
  we are selecting different payment options we need to set the geometry of
  


  
    
      10:07:57
    
  
  
  these radio buttons because we're not using a layout manager I have a method to initialize my
  


  
    
      10:08:02
    
  
  
  user interface this is where I will set the geometry of my radio buttons so
  


  
    
      10:08:08
    
  
  
  let's say self. radio1 we will call the set geometry method pass in some
  


  
    
      10:08:15
    
  
  
  coordinates 0 0 is good that applies to the top left corner of my window for the
  


  
    
      10:08:20
    
  
  
  width 300 and the height 50 is good let's do this with radio buttons 2 and
  


  
    
      10:08:27
    
  
  
  three Radio 2 radio 3 we'll just move each radio button down on the Y AIS by
  


  
    
      10:08:33
    
  
  
  50 pixels each so 50 then 100 here are the three radio buttons
  


  
    
      10:08:41
    
  
  
  however the font is kind of small we can barely see it so let's apply a stylesheet here's a trick that we can do
  


  
    
      10:08:48
    
  
  
  with stylesheets we can apply multiple CSS like properties to an entire group
  


  
    
      10:08:53
    
  
  
  of widgets rather than having to type them and apply them individually we will select our window
  


  
    
      10:09:00
    
  
  
  of self set the style sheet of our window with the set style sheet
  


  
    
      10:09:07
    
  
  
  method we will add a selector the selector is going to be the name of the widget Q radio button in this case then
  


  
    
      10:09:15
    
  
  
  add a set of curly braces we can apply CSS like properties to an
  


  
    
      10:09:22
    
  
  
  entire group of widgets this way so let's set the font size of all radio
  


  
    
      10:09:28
    
  
  
  buttons to be 40 pixels
  


  
    
      10:09:34
    
  
  
  better let's set the font family to be
  


  
    
      10:09:40
    
  
  
  aial then I will add a little bit of padding around each radio button padding 10 pixels
  


  
    
      10:09:50
    
  
  
  that's pretty good so with radio buttons we can only select one from any one
  


  
    
      10:09:55
    
  
  
  radio button group if I was making a payment I can't pay with a Visa and
  


  
    
      10:10:00
    
  
  
  Mastercard at the same time I can only select one option that's the point of radio buttons we're limited to just one
  


  
    
      10:10:08
    
  
  
  option with the default behavior of Pi qt5 all radio buttons unless explicitly
  


  
    
      10:10:14
    
  
  
  stated are all part of the same group to demonstrate that let's create two
  


  
    
      10:10:19
    
  
  
  additional radio buttons Radio 4 and Radio 5 radio button 4 will be for a
  


  
    
      10:10:26
    
  
  
  payment method rather than a payment type for example we could say we're paying in
  


  
    
      10:10:33
    
  
  
  store radio button 5 will be we're paying online radio buttons 1 through 3
  


  
    
      10:10:39
    
  
  
  will be for the payment type radio buttons four and five will be for the payment method we're either paying in
  


  
    
      10:10:45
    
  
  
  store or we're ordering something online we do need to set the geometry for these
  


  
    
      10:10:50
    
  
  
  two radio buttons I'll just copy these two lines add Radio 4 Radio 5 we'll set the
  


  
    
      10:10:58
    
  
  
  y-coordinate of four to be 150 and 5 to be 200 all radio buttons will be within
  


  
    
      10:11:06
    
  
  
  the same button group if I was to select in store we deselect one of these options what I would like is one option
  


  
    
      10:11:13
    
  
  
  from this first group and another option from this other group these buttons are all in the same group group I can only
  


  
    
      10:11:20
    
  
  
  select one if I would like to pay with the VISA in store and I click the in
  


  
    
      10:11:25
    
  
  
  store radio button we unselect the radio button for Visa I would like these radio
  


  
    
      10:11:31
    
  
  
  buttons within different groups we need to create two different groups and add
  


  
    
      10:11:37
    
  
  
  them accordingly here's how within our Constructor we will
  


  
    
      10:11:42
    
  
  
  access self declare a button group let's name it button group one for Simplicity
  


  
    
      10:11:49
    
  
  
  equals call The Constructor of the class Q button group then pass in to set the
  


  
    
      10:11:56
    
  
  
  parent widget to be the window then we will create button group
  


  
    
      10:12:03
    
  
  
  two we're going to access self select the radio button
  


  
    
      10:12:08
    
  
  
  group button group one call the add
  


  
    
      10:12:14
    
  
  
  button method then pass in a radio button self. Radio
  


  
    
      10:12:21
    
  
  
  1 then we'll add Radio 2 and radio
  


  
    
      10:12:26
    
  
  
  3 we'll select button group two this time button group
  


  
    
      10:12:32
    
  
  
  two add radio button 4 and radio button
  


  
    
      10:12:38
    
  
  
  5 the first three radio buttons are within the same group radio buttons 4 and five are within a different group we
  


  
    
      10:12:45
    
  
  
  can only select one radio button from any one radio button group maybe I would like to pay with a Visa
  


  
    
      10:12:52
    
  
  
  card in store or a master card online or a gift card in store these radio buttons
  


  
    
      10:13:00
    
  
  
  are within different button groups we're limited to one selection in any one radio button group when we select these
  


  
    
      10:13:07
    
  
  
  radio buttons they don't quite do anything for each radio button we have to connect a signal to a slot here's
  


  
    
      10:13:15
    
  
  
  how let's define a method of radio
  


  
    
      10:13:20
    
  
  
  button changed there will be no parameters beside self temporarily I'll write pass we'll
  


  
    
      10:13:28
    
  
  
  fill this in in a moment we will take each radio button let's start with radio one Radio One the
  


  
    
      10:13:37
    
  
  
  signal will be toggled when this radio button is toggled we will connect a slot
  


  
    
      10:13:45
    
  
  
  we will pass in a function or a method self dot radio button
  


  
    
      10:13:51
    
  
  
  changed then we will do this with the other radio buttons one through
  


  
    
      10:14:01
    
  
  
  five let's print a test message you selected
  


  
    
      10:14:07
    
  
  
  something just to be sure that everything is working you selected
  


  
    
      10:14:14
    
  
  
  something okay we know that that works currently
  


  
    
      10:14:19
    
  
  
  what we're going to need to do is get the sender widget which radio button sent the signal of
  


  
    
      10:14:26
    
  
  
  toggled I will create a local radio button to store that radio button
  


  
    
      10:14:33
    
  
  
  whichever one emitted the signal we can determine that with self. sender method
  


  
    
      10:14:40
    
  
  
  the sender method is going to return the widget that sent the signal so if we
  


  
    
      10:14:45
    
  
  
  select radio button one our radio button will be radio button one if it was five
  


  
    
      10:14:51
    
  
  
  then it's five in this case then we'll determine if our radio button is checked take our radio button
  


  
    
      10:14:59
    
  
  
  use the is checked method this will return a Boolean true or false if it's
  


  
    
      10:15:06
    
  
  
  checked if this returns true then let's print the following I'll use an F string we will
  


  
    
      10:15:14
    
  
  
  get the text of the radio button radio button called the text method to return
  


  
    
      10:15:20
    
  
  
  the text of the radio button is selected all right then let's see if
  


  
    
      10:15:27
    
  
  
  this works let's select Visa Visa is selected
  


  
    
      10:15:33
    
  
  
  MasterCard is selected gift card is selected in store is selected and online
  


  
    
      10:15:39
    
  
  
  is selected that's how to determine which radio button was selected which one is
  


  
    
      10:15:45
    
  
  
  the sender which one sent the signal all right everybody so that is an introduction to radio buttons in
  


  
    
      10:15:54
    
  
  
  pyqt5 why hello everybody today I got to explain line edit widgets in pyqt5 also
  


  
    
  73.PyQt5 line edits



  
    
      10:16:01
    
  
  
  known as textboxes in pretty much anything ever made ever why are they called line edit widgets I really don't
  


  
    
      10:16:07
    
  
  
  know let's begin from the module of QT widgets we will import the following
  


  
    
      10:16:13
    
  
  
  class of q line edit to create a text
  


  
    
      10:16:18
    
  
  
  box I I mean a line edit widget we are accessing our window of
  


  
    
      10:16:23
    
  
  
  self we will call this line edit widget line
  


  
    
      10:16:29
    
  
  
  edit equals call The Constructor of the class q line
  


  
    
      10:16:35
    
  
  
  edit then we will pass in self to add this line edit widget to the
  


  
    
      10:16:42
    
  
  
  window let's set the geometry but we do have a text box in which we can type in stuff
  


  
    
      10:16:49
    
  
  
  I have a method to initialize the user interface within this method I will
  


  
    
      10:16:55
    
  
  
  access self dot the line edit widget and set the
  


  
    
      10:17:03
    
  
  
  geometry let's set it in the top left corner where X is 10 Y is 10 set a width
  


  
    
      10:17:10
    
  
  
  200 is good and a height 40 that's not too bad now the text is
  


  
    
      10:17:17
    
  
  
  really small we can change that by applying a stylesheet access our window with self
  


  
    
      10:17:25
    
  
  
  access our line edit widget then call the set stylesheet
  


  
    
      10:17:32
    
  
  
  method we can pass in some CSS like properties including a font
  


  
    
      10:17:38
    
  
  
  size let's pick 25 pixels and here's my new text box we can
  


  
    
      10:17:46
    
  
  
  read the text now let's also change the font
  


  
    
      10:17:51
    
  
  
  family font family I will pick
  


  
    
      10:17:56
    
  
  
  aial this text box by itself it really doesn't do anything we need some way to
  


  
    
      10:18:02
    
  
  
  get the text from the text box let's add a button when we click on the button we
  


  
    
      10:18:08
    
  
  
  will get the text from the text box and do something with it cuz right now it doesn't do
  


  
    
      10:18:14
    
  
  
  anything we will need to import Q push
  


  
    
      10:18:19
    
  
  
  button let's create one button self. button equals call The Constructor of
  


  
    
      10:18:27
    
  
  
  the class Q push button let's say that this is a submit button I will pass in a string of submit
  


  
    
      10:18:35
    
  
  
  and we are adding this button to our window and we do need to set the
  


  
    
      10:18:41
    
  
  
  geometry of the button we're not using a layout manager right now access our window with self
  


  
    
      10:18:49
    
  
  
  access our button that we have previously created in our Constructor then call the set geometry
  


  
    
      10:18:57
    
  
  
  method we'll place our button where X is 210 Y is 10 the width will be
  


  
    
      10:19:05
    
  
  
  100 and the height will be 40 not too bad let's change the font
  


  
    
      10:19:11
    
  
  
  size of the button I'll copy these two lines of code because I'm
  


  
    
      10:19:16
    
  
  
  lazy instead of selecting our line edit widget we will select our
  


  
    
      10:19:24
    
  
  
  button that's better if I were to click on the button it doesn't do
  


  
    
      10:19:29
    
  
  
  anything we'll set up the signal of clicked to connect to a method that will do
  


  
    
      10:19:36
    
  
  
  something let's define a method of submit we're submitting something we're
  


  
    
      10:19:41
    
  
  
  submitting the text within the text box and for now all right pass we'll get back to this in a second
  


  
    
      10:19:49
    
  
  
  we're going to take our button self. button we'll connect the signal of
  


  
    
      10:19:55
    
  
  
  clicked clicked. connect method we will connect the method of submit self.
  


  
    
      10:20:04
    
  
  
  submit so when we click on the button we will call this method let's print a test
  


  
    
      10:20:10
    
  
  
  message you clicked the button let's type in something
  


  
    
      10:20:18
    
  
  
  press submit and we get our test message you clicked the
  


  
    
      10:20:24
    
  
  
  button let's get the text from the text box then do something with
  


  
    
      10:20:29
    
  
  
  it let's create a local variable of text text equals now we have to get the text
  


  
    
      10:20:37
    
  
  
  from our line edit widget self. line edit that's the widget to get
  


  
    
      10:20:45
    
  
  
  the text we can use the text method to return the text then let's print the text I'll use an F
  


  
    
      10:20:53
    
  
  
  string we'll say hello add a placeholder then display the
  


  
    
      10:20:59
    
  
  
  text so now after typing in something why don't you type in your name then press submit
  


  
    
      10:21:07
    
  
  
  we will display hello your name you could add some placeholder text
  


  
    
      10:21:13
    
  
  
  too let's do that here let's take self do line edit
  


  
    
      10:21:20
    
  
  
  widget set placeholder
  


  
    
      10:21:27
    
  
  
  text and let's say enter your name when I run this program we have
  


  
    
      10:21:34
    
  
  
  some placeholder text that says enter your name this time I will type in
  


  
    
      10:21:39
    
  
  
  SpongeBob then press submit hello SpongeBob all right everybody so those
  


  
    
      10:21:45
    
  
  
  are line edit widgets also commonly referred to as text boxes and well
  


  
    
      10:21:51
    
  
  
  everybody those are line edit widgets in pi qt5 hello everybody so in today's video
  


  
    
  74.PyQt5 CSS styles



  
    
      10:21:57
    
  
  
  I'm going to explain setting stylesheets in pyqt5 CSS means cascading stylesheets
  


  
    
      10:22:03
    
  
  
  if you're not familiar with CSS you can still follow along but knowing CSS is
  


  
    
      10:22:08
    
  
  
  helpful as a reminder I do have a full free course on YouTube on HTML and CSS
  


  
    
      10:22:14
    
  
  
  if you would like to learn more let's begin for this demonstration we will need the following Imports we will be
  


  
    
      10:22:20
    
  
  
  designing some buttons we will import Q push button we'll be working with the layout
  


  
    
      10:22:26
    
  
  
  manager we will import Q widget and for a horizontal layout
  


  
    
      10:22:32
    
  
  
  manager we will need Q hbox layout so import these three from
  


  
    
      10:22:40
    
  
  
  the module of QT widgets now in previous topics we've set the geometry of our
  


  
    
      10:22:45
    
  
  
  window since we're using a layout manager we don't necessarily need that anymore so I'm going to delete it in the
  


  
    
      10:22:52
    
  
  
  past I have also created a method to initialize our user interface and we are calling that within the Constructor of
  


  
    
      10:22:58
    
  
  
  our main window we will create three push button widgets self. button one will be the
  


  
    
      10:23:04
    
  
  
  first button equals take our Q push button class and call the Constructor we
  


  
    
      10:23:11
    
  
  
  can add text to the button we will pass that as an argument now since we're using a layout manager we don't need to
  


  
    
      10:23:17
    
  
  
  add this button to self our window we don't need to do that let's create two
  


  
    
      10:23:23
    
  
  
  more buttons we'll have button two and button three button two will say number
  


  
    
      10:23:28
    
  
  
  two button three will say number three now we'll create a layout manager under normal circumstances we can't add a
  


  
    
      10:23:35
    
  
  
  layout manager to our main window with main window widgets there's already a specified layout and format we're going
  


  
    
      10:23:42
    
  
  
  to add a layout manager to a central widget and this widget will be added to
  


  
    
      10:23:47
    
  
  
  the main window let's take care of that within our initialized user interface method we
  


  
    
      10:23:53
    
  
  
  will create a central widget equals call The Constructor of Q
  


  
    
      10:24:00
    
  
  
  widget then we will take self that means our window and set the central
  


  
    
      10:24:08
    
  
  
  widget set Central widget then pass in our Central widget
  


  
    
      10:24:14
    
  
  
  to set it then we will create a layout we will call The Constructor within the
  


  
    
      10:24:19
    
  
  
  class of qbox layout let's name this layout hbox for a
  


  
    
      10:24:25
    
  
  
  horizontal box equals call The Constructor within this
  


  
    
      10:24:31
    
  
  
  class we will take our layout of horizontal box then add the following
  


  
    
      10:24:38
    
  
  
  widgets add widget self. button one we'll do this with two and three
  


  
    
      10:24:49
    
  
  
  then the last thing we need to do is take our Central widget call the set layout
  


  
    
      10:24:56
    
  
  
  method then pass in our layout manager and now we should have those three buttons they're all arranged
  


  
    
      10:25:04
    
  
  
  horizontally now we're going to apply some CSS like styling using the method
  


  
    
      10:25:09
    
  
  
  of set style sheet here's how rather than apply the CSS properties individually such as self. button one do
  


  
    
      10:25:18
    
  
  
  that stylesheet and in the past we've passed in individual CSS properties we're
  


  
    
      10:25:24
    
  
  
  instead going to set the stylesheet of our window self we have a lot to write
  


  
    
      10:25:30
    
  
  
  instead of double quotes we're going to use triple
  


  
    
      10:25:36
    
  
  
  quotes triple quotes are used to write very long strings in a more organized
  


  
    
      10:25:41
    
  
  
  way all of the CSS properties that we're going to write are going to be within this set of triple quotes so let me give
  


  
    
      10:25:47
    
  
  
  you a demonstration we could individually apply CSS like properties to each of these widgets but we could
  


  
    
      10:25:54
    
  
  
  select an entire class of widgets too let's select the class of Q push
  


  
    
      10:26:00
    
  
  
  button then add a set of curly braces the following CSS properties will
  


  
    
      10:26:07
    
  
  
  apply to all Q push button widgets So currently this is what we have we
  


  
    
      10:26:13
    
  
  
  increase the font size for every push button so we will add the following
  


  
    
      10:26:18
    
  
  
  property of font size then set it to be 40 pixels each be
  


  
    
      10:26:23
    
  
  
  sure to end each CSS property with a semicolon so the font size is now 40 for
  


  
    
      10:26:30
    
  
  
  every button let's set the font font family I
  


  
    
      10:26:36
    
  
  
  will pick aial let's add some padding we can add
  


  
    
      10:26:42
    
  
  
  some space around the text and the button itself so with padding if I was to set
  


  
    
      10:26:50
    
  
  
  this to 75 pixels we would have 75 pixels worth the
  


  
    
      10:26:56
    
  
  
  space between the text and the border of the button I would like to change the dimensions of the padding so let's apply
  


  
    
      10:27:03
    
  
  
  15 pixels to the top and bottom of the button and 75 to the
  


  
    
      10:27:09
    
  
  
  sides that's better margin is the space around a
  


  
    
      10:27:15
    
  
  
  button let's set the margin to be 25 pixels now the buttons are more spread
  


  
    
      10:27:22
    
  
  
  out if this was 250 they would really be spread out that's margin it's the space
  


  
    
      10:27:28
    
  
  
  around a widget let's set that back to
  


  
    
      10:27:34
    
  
  
  25 I'm going to change the border border 3 pixels
  


  
    
      10:27:42
    
  
  
  solid this would change the border of the buttons we now have a black border
  


  
    
      10:27:47
    
  
  
  that's three pixels and width if you would like to round the corners we can use border radius I will set that to be
  


  
    
      10:27:54
    
  
  
  15 pixels with all the buttons the corners are now
  


  
    
      10:27:59
    
  
  
  rounded within our set style sheet method we're applying all of these CSS like properties to every push button now
  


  
    
      10:28:08
    
  
  
  what if you would like to apply CSS properties to Only One widget rather than all of them here's how with each of
  


  
    
      10:28:15
    
  
  
  our widgets buttons 1 two and three we need to set an object name let's do that
  


  
    
      10:28:21
    
  
  
  before we call the set stylesheet method we will take our buttons self. button
  


  
    
      10:28:27
    
  
  
  one call the set object name method then
  


  
    
      10:28:33
    
  
  
  pass in a name for this widget we'll keep the name the same as button
  


  
    
      10:28:38
    
  
  
  one so let's do this with button two and button three button two button
  


  
    
      10:28:46
    
  
  
  three within the context of set stylesheet we will refer to these widgets by their object name buttons 1 2
  


  
    
      10:28:54
    
  
  
  and three and now we can select them individually let's say that with button
  


  
    
      10:29:00
    
  
  
  one I would like the background color to be red we're going to access our class
  


  
    
      10:29:05
    
  
  
  of Q push button follow this with a pound sign I like to call it a hashtag
  


  
    
      10:29:11
    
  
  
  then we need the object name button one button one refers to the widget of
  


  
    
      10:29:17
    
  
  
  button one again I kept the name the same then we need a set of curly braces between the
  


  
    
      10:29:23
    
  
  
  set of curly braces we can list one or many different CSS properties let's
  


  
    
      10:29:29
    
  
  
  change the background color I will set it to be
  


  
    
      10:29:34
    
  
  
  red and now the background color of only that button is red and not all of
  


  
    
      10:29:40
    
  
  
  them if I was to set the background color within the class well then all of
  


  
    
      10:29:45
    
  
  
  them would be red okay so with button two I'll just copy
  


  
    
      10:29:50
    
  
  
  what we have and paste it we are selecting the ID of button two
  


  
    
      10:29:56
    
  
  
  let's set the background color to be green so then the background color is
  


  
    
      10:30:02
    
  
  
  now green and button three button three will be
  


  
    
      10:30:12
    
  
  
  blue if you would like a greater variety of colors I recommend looking up a color
  


  
    
      10:30:18
    
  
  
  picker you can just Google Color Picker so if I would like a very specific shade
  


  
    
      10:30:23
    
  
  
  of red I can pick that let's go with that there are a few options provided to
  


  
    
      10:30:30
    
  
  
  you you can use hex values now we have a very specific shade
  


  
    
      10:30:37
    
  
  
  of red you can use
  


  
    
      10:30:44
    
  
  
  RGB RGB en close it with within a set of parentheses and then paste those
  


  
    
      10:30:51
    
  
  
  numbers or my favorite which is hsl hsl means Hue saturation and
  


  
    
      10:31:00
    
  
  
  lightness we will enclose our values within hsl if you copy these values
  


  
    
      10:31:06
    
  
  
  directly from Google you would have to remove this degree symbol I like hsl because I can also
  


  
    
      10:31:12
    
  
  
  control the saturation and the lightness pretty easily okay let's pick a very specific shade of
  


  
    
      10:31:20
    
  
  
  green that's good I would say I'll use the hsl
  


  
    
      10:31:25
    
  
  
  values hsl remove the degree
  


  
    
      10:31:31
    
  
  
  symbol and now we have a very specific shade of green and
  


  
    
      10:31:37
    
  
  
  blue that's good I would say
  


  
    
      10:31:50
    
  
  
  that's not too bad if you're already familiar with CSS we can apply pseudo
  


  
    
      10:31:55
    
  
  
  classes such as when we hover over one of the buttons here's how let's copy
  


  
    
      10:32:00
    
  
  
  these three blocks then paste them
  


  
    
      10:32:06
    
  
  
  again we can add CSS properties when we hover over something we have to use the
  


  
    
      10:32:12
    
  
  
  hover PSE sudo class after the ID of each of our buttons we will add Cod in
  


  
    
      10:32:18
    
  
  
  Hover we can apply the following CSS properties when we hover over the buttons all I'm going to do is up the
  


  
    
      10:32:26
    
  
  
  lightness let's say by 20% each then when we hover over one of the
  


  
    
      10:32:33
    
  
  
  buttons the lightness is going to change we apply the new CSS
  


  
    
      10:32:39
    
  
  
  properties all right everybody so that is a more in-depth explanation of the set stylesheet method in pi qt5
  


  
    
  75.digital clock program



  
    
      10:32:48
    
  
  
  all right everybody in today's video we're going to build a digital clock widget using Python's Pi qt5 library at
  


  
    
      10:32:55
    
  
  
  the top of our python file we will need the following Imports import CIS CIS
  


  
    
      10:33:01
    
  
  
  means system this module provides variables used and maintained by the python interpreter we would also need
  


  
    
      10:33:07
    
  
  
  widgets widgets are the building blocks of a guy application from the package of Pi
  


  
    
      10:33:15
    
  
  
  qt5 we need to access the module of QT widgets import the
  


  
    
      10:33:22
    
  
  
  following Q application Q widget this is a generic
  


  
    
      10:33:29
    
  
  
  widget we'll turn our digital clock into its own widget and Q label to work with
  


  
    
      10:33:36
    
  
  
  labels we will be using a layout manager more specifically QV box
  


  
    
      10:33:44
    
  
  
  layout there's another import we'll need too from the package of Pi
  


  
    
      10:33:49
    
  
  
  qt5 access the module of QT core the QT core module it provides functionality
  


  
    
      10:33:56
    
  
  
  not related to guy components this is where we'll get a timer to keep track of the time from this module we will import
  


  
    
      10:34:04
    
  
  
  Q timer Q time and QT QT is for alignment
  


  
    
      10:34:11
    
  
  
  we will create a class of digital clock instead of inheriting from the main
  


  
    
      10:34:17
    
  
  
  window window widget we will inherit from The Base Class of Q widget Q widget
  


  
    
      10:34:22
    
  
  
  is a base class to create our own widgets our digital clock will be a widget we will need a Constructor so
  


  
    
      10:34:29
    
  
  
  let's define that Define init pass and self if there are any arguments to send
  


  
    
      10:34:36
    
  
  
  to the parent we will call the Constructor of the parent the super class
  


  
    
      10:34:42
    
  
  
  super called the init method at the end of The Constructor what I like to do is call a method of
  


  
    
      10:34:49
    
  
  
  initialize UI init UI this will be a separate method Define init UI there are
  


  
    
      10:34:59
    
  
  
  no parameters besid self and for now I'll write pass it's within this method
  


  
    
      10:35:04
    
  
  
  that we will be designing the layout of the digital clock within the Constructor that's where we will be constructing all
  


  
    
      10:35:10
    
  
  
  of the different entities for the clock at the end of my python file I will add the following statement if Thunder name
  


  
    
      10:35:18
    
  
  
  is equal to a string of Dunder main this statement will be true if we
  


  
    
      10:35:25
    
  
  
  are running this program directly to create an application we will create an F object equals call The
  


  
    
      10:35:32
    
  
  
  Constructor within the class Q application as an argument to the Constructor we will pass in the
  


  
    
      10:35:38
    
  
  
  following argument access the module of CIS a RGV which means arguments this
  


  
    
      10:35:45
    
  
  
  would apply if we're running from command prompt or terminal but we won't be doing that in this video but it's
  


  
    
      10:35:51
    
  
  
  nice just to set it up in case we do in the future now we are going to create a
  


  
    
      10:35:56
    
  
  
  clock object clock equals we will call the Constructor of our digital clock
  


  
    
      10:36:02
    
  
  
  class there are no arguments now the window doesn't appear That's because we
  


  
    
      10:36:08
    
  
  
  have to use the show method of our clock take our clock call the show method now
  


  
    
      10:36:14
    
  
  
  it's only going to appear for a brief second just momentarily I don't know if you saw
  


  
    
      10:36:20
    
  
  
  that to ensure a clean and proper exit of our application we need to call the following method access our module of
  


  
    
      10:36:28
    
  
  
  sis call the exit method then pass in the following we will take our app
  


  
    
      10:36:34
    
  
  
  object then call the following method eccore and then a set of parentheses
  


  
    
      10:36:42
    
  
  
  it's a method it's the execute method it starts the main event Loop of the application it also handles events such
  


  
    
      10:36:49
    
  
  
  as key presses Mouse clicks or other user interactions so then we should have
  


  
    
      10:36:54
    
  
  
  a window that stays in place until we exit okay now we have the base
  


  
    
      10:37:00
    
  
  
  functionality all set up we have a class of digital clock that inherits from the
  


  
    
      10:37:05
    
  
  
  Q widget based class we're not going to be using main window in this video within the Constructor of my digital
  


  
    
      10:37:11
    
  
  
  clock I will create a label self. time label this will be a label
  


  
    
      10:37:18
    
  
  
  that displays the time we will call the Constructor within the class Q label
  


  
    
      10:37:24
    
  
  
  then be sure to pass in self we will be adding this label directly to our widget
  


  
    
      10:37:29
    
  
  
  of clock we will need a timer self. timer equals call The Constructor of Q
  


  
    
      10:37:37
    
  
  
  timer then pass in self we are adding the timer to the
  


  
    
      10:37:42
    
  
  
  clock now with designing the layout of our clock I'll handle that within the initialized user interface
  


  
    
      10:37:48
    
  
  
  method we're going to set a title for the window self. set window title method
  


  
    
      10:37:57
    
  
  
  pass in a string that will be used for the title of the window let's say digital clock then our window should say
  


  
    
      10:38:06
    
  
  
  digital clock let's set the geometry of the window self. set
  


  
    
      10:38:14
    
  
  
  geometry the first two arguments are going to be for for the placement of the window where will it appear within your
  


  
    
      10:38:21
    
  
  
  screen so I'll pick something approximately in the middle for me but feel free to change these values then we
  


  
    
      10:38:27
    
  
  
  need a width for the window let's say 300 and a height 100 for the height so
  


  
    
      10:38:34
    
  
  
  my window should appear approximately in the middle of my screen the base width is 300 the base height is 100 now we're
  


  
    
      10:38:41
    
  
  
  going to need a layout manager I will name this layout manager vbox for a
  


  
    
      10:38:46
    
  
  
  vertical box vbox equals call The Constructor within the class QV box this
  


  
    
      10:38:54
    
  
  
  will arrange all of our widgets vertically but we only have one widget a Time label so we will take our layout
  


  
    
      10:39:02
    
  
  
  manager of vbox add widget that's a method we will
  


  
    
      10:39:09
    
  
  
  pass in self. time label as an argument we're adding our label to this layout
  


  
    
      10:39:14
    
  
  
  manager of vbox then to set the layout we will take self
  


  
    
      10:39:20
    
  
  
  that applies to our clock call the set layout method then pass in our layout
  


  
    
      10:39:26
    
  
  
  manager of vbox So currently if I run this we don't see anything temporarily within our
  


  
    
      10:39:33
    
  
  
  label I will add some text just as a placeholder so we can see what we're working with let's say 12
  


  
    
      10:39:42
    
  
  
  o' so then we should see something at least although the font is kind of small
  


  
    
      10:39:48
    
  
  
  we will be getting rid of this later we just want to be sure that we can see everything all right so after our layout
  


  
    
      10:39:57
    
  
  
  I would like the label to be Center aligned horizontally here's how we can set that
  


  
    
      10:40:02
    
  
  
  up we will take our label self. time label call the set alignment
  


  
    
      10:40:13
    
  
  
  method access the class of QT
  


  
    
      10:40:18
    
  
  
  access align Center this should Center align our
  


  
    
      10:40:25
    
  
  
  time now let's work on the font I can barely read
  


  
    
      10:40:31
    
  
  
  it we will take our label self. time label set style
  


  
    
      10:40:39
    
  
  
  sheet we can pass in multiple CSS like properties let's set the font size I'll
  


  
    
      10:40:46
    
  
  
  set it to be 150 pixels now we can read
  


  
    
      10:40:52
    
  
  
  it you could pick a font but we're going to change that at the end of this video we'll import a custom font but
  


  
    
      10:40:59
    
  
  
  temporarily let's say font family
  


  
    
      10:41:06
    
  
  
  aial you could change the color too so if I set the color to be
  


  
    
      10:41:13
    
  
  
  green then the font color is going to be green but I would like a very specific
  


  
    
      10:41:19
    
  
  
  shade of green you could always Google a Color Picker then pick a very specific color
  


  
    
      10:41:27
    
  
  
  uh let's go with that something that's bright green you can copy the hex value
  


  
    
      10:41:33
    
  
  
  RGB or hsl hsl means Hue saturation and lightness I'll use hsl
  


  
    
      10:41:41
    
  
  
  values for the color we will type hsl add a set of parenthesis then paste
  


  
    
      10:41:47
    
  
  
  those values but there is a degree symbol you do have to get rid of that now the font color is going to be bright
  


  
    
      10:41:53
    
  
  
  green let's change the background color here's how we will take self that
  


  
    
      10:42:00
    
  
  
  applies to our clock then call the set stylesheet method pass in a background
  


  
    
      10:42:08
    
  
  
  color we will set the background color property to be
  


  
    
      10:42:14
    
  
  
  black I think that looks pretty good but doesn't quite do anything quite yet that's the next step let's create a
  


  
    
      10:42:21
    
  
  
  method to update time no arguments beside self I will create a local
  


  
    
      10:42:28
    
  
  
  variable of current time equals now to get the current time we can access the
  


  
    
      10:42:34
    
  
  
  class of Q time Q time do call the method of
  


  
    
      10:42:41
    
  
  
  current time we will need to convert it to a string we will method chain
  


  
    
      10:42:47
    
  
  
  the two string method within the two string method we will Design the layout
  


  
    
      10:42:53
    
  
  
  of the time so I would like hours first I will type 2 H's colon minutes that's 2
  


  
    
      10:43:00
    
  
  
  M's colon 2 s's to set the text of the label we will
  


  
    
      10:43:05
    
  
  
  take self. time Lael call the set text method then pass
  


  
    
      10:43:11
    
  
  
  in our current time so if I run this currently we still
  


  
    
      10:43:17
    
  
  
  have our placeholder time let's update it with the current time we can get rid
  


  
    
      10:43:22
    
  
  
  of our placeholder text of 12 we can delete it after we set the font let's call the
  


  
    
      10:43:30
    
  
  
  method of update time self. update
  


  
    
      10:43:36
    
  
  
  time now we should display the current time so me I'm recording this video at
  


  
    
      10:43:41
    
  
  
  7:44 in the morning if you would like to add amm or p.m. after your time here's
  


  
    
      10:43:47
    
  
  
  how after our string format specifiers we will add Capital AP a means anti-
  


  
    
      10:43:54
    
  
  
  meridium and P means post meridium so then we should display AM or
  


  
    
      10:44:00
    
  
  
  PM depending on when you're coding this currently the time for me is 7:45 a.m.
  


  
    
      10:44:07
    
  
  
  to get the clock to update every second we need to connect our timer
  


  
    
      10:44:12
    
  
  
  widget to a slot of update time we will take our timer self. timer this isn't
  


  
    
      10:44:19
    
  
  
  the time label it's the timer to keep track of the time during a signal of
  


  
    
      10:44:24
    
  
  
  time out we will connect the following slot of self. update time self. update
  


  
    
      10:44:34
    
  
  
  time with our timer we need to trigger a timeout signal every 1,000 milliseconds
  


  
    
      10:44:41
    
  
  
  every second that is to handle that we will take our timer self. timer call the
  


  
    
      10:44:47
    
  
  
  start method then pass in 1,000 from 1,000
  


  
    
      10:44:52
    
  
  
  milliseconds so then when we run this program our clock should update every second and display the new current
  


  
    
      10:45:00
    
  
  
  time as an added bonus if you would like to download a custom font here's how
  


  
    
      10:45:06
    
  
  
  using Google or another search engine I would recommend looking up a font of you're choosing so one font that I like
  


  
    
      10:45:12
    
  
  
  is DS digital what we need is a ttf file meaning true type font I'll just pick
  


  
    
      10:45:20
    
  
  
  this first link so these fonts are pretty good so
  


  
    
      10:45:25
    
  
  
  I'm going to download them I'll pick this specific font DS
  


  
    
      10:45:30
    
  
  
  digit and again the file extension is ttf so once you have your font move it
  


  
    
      10:45:37
    
  
  
  to your project folder so for convenience we have that ttf file right next to our main python
  


  
    
      10:45:43
    
  
  
  file okay to work with specific fonts we will need the f following import from PI
  


  
    
      10:45:51
    
  
  
  qt5 do QT GUI
  


  
    
      10:45:56
    
  
  
  import Q font as well as Q font data
  


  
    
      10:46:06
    
  
  
  base since we're going to use our own custom font we can delete that from the set stylesheet method of our time label
  


  
    
      10:46:13
    
  
  
  so let's set the font right here we will assign a local variable a font
  


  
    
      10:46:20
    
  
  
  ID equals Q font data base Q font
  


  
    
      10:46:26
    
  
  
  database is a class for managing and querying fonts available to the application to add a custom font we will
  


  
    
      10:46:34
    
  
  
  call the following method within it add application
  


  
    
      10:46:40
    
  
  
  font within the set of quotes we're going to pass in a file path this can be a relative file path or an absolute file
  


  
    
      10:46:47
    
  
  
  path this ttf file is right next to my main python file I only need the file
  


  
    
      10:46:53
    
  
  
  name my font file is named DS digit and get the file extension of
  


  
    
      10:47:01
    
  
  
  ttf we will create a local variable of font family we will retrieve the name of the
  


  
    
      10:47:09
    
  
  
  font family from this ID again we will access qfont database
  


  
    
      10:47:15
    
  
  
  do call the application font families method so this
  


  
    
      10:47:23
    
  
  
  method returns a list of font names we will pass in our font
  


  
    
      10:47:29
    
  
  
  ID but there's another step we're going to use the index of operator and get the
  


  
    
      10:47:35
    
  
  
  index of zero this will retrieve the first element of the font family that's
  


  
    
      10:47:40
    
  
  
  because we're working with a list we will need just the first element at index zero now we'll have a font family
  


  
    
      10:47:47
    
  
  
  to work with now to set the font we will create a local variable of my font
  


  
    
      10:47:54
    
  
  
  equals called the class call The Constructor within the class Q
  


  
    
      10:48:02
    
  
  
  font pass in the following arguments our font family that's the first argument
  


  
    
      10:48:09
    
  
  
  and then a font size let's say 150 to set the font we will take our time label
  


  
    
      10:48:15
    
  
  
  self. time label called the set font
  


  
    
      10:48:21
    
  
  
  method then pass in my font our custom font so then we should have our custom
  


  
    
      10:48:28
    
  
  
  font that digital font that we've downloaded art everybody so that is how to create a digital clock widget using
  


  
    
      10:48:36
    
  
  
  pi qt5 hey yeah everybody so in today's video we're going to create this
  


  
    
  76.stopwatch program



  
    
      10:48:41
    
  
  
  stopwatch program using Python's pyqt5 Library once that's out of the way you
  


  
    
      10:48:46
    
  
  
  will need the following Imports import CIS CIS means system it handles system
  


  
    
      10:48:52
    
  
  
  variables for your python interpreter we will need the following widgets from PI
  


  
    
      10:48:59
    
  
  
  qt5 access the module of QT widgets
  


  
    
      10:49:04
    
  
  
  widgets are the building blocks of a pi qt5 application we will import the following
  


  
    
      10:49:10
    
  
  
  widgets Q application Q widget
  


  
    
      10:49:17
    
  
  
  Q label Q push button QV box
  


  
    
      10:49:26
    
  
  
  layout and qh box layout let me put these on a new line
  


  
    
      10:49:32
    
  
  
  just so we can read everything from the package of Pi qt5 access QT core we will
  


  
    
      10:49:40
    
  
  
  import Q timer our timer will emit a signal after a given interval
  


  
    
      10:49:47
    
  
  
  which is what we need for a stopwatch Q time to keep track of the time and QT
  


  
    
      10:49:53
    
  
  
  for alignment let's do a test run to be sure that there's no errors looks like L and label should be
  


  
    
      10:50:00
    
  
  
  Capital there we go no errors once you have the following Imports we will
  


  
    
      10:50:06
    
  
  
  construct a Class A Class of stopwatch which will inherit from The
  


  
    
      10:50:13
    
  
  
  Base Class of Q widget our stopwatch will be a widget we
  


  
    
      10:50:18
    
  
  
  will need a Constructor we'll Define that Dunder init no arguments besid self if we have
  


  
    
      10:50:26
    
  
  
  arguments to pass to the parent of Q widget we will call the super class the parent call The Constructor of the
  


  
    
      10:50:33
    
  
  
  parent no arguments currently now if we are running this file directly we'll use an if statement
  


  
    
      10:50:40
    
  
  
  to verify that if Dunder name is equal to a string of Dunder Main
  


  
    
      10:50:47
    
  
  
  if this is true if we are running this file directly then we will construct a
  


  
    
      10:50:53
    
  
  
  stopwatch we will create an app object call The Constructor within the Q
  


  
    
      10:50:58
    
  
  
  application class pass in the following access CIS our system access AR RGV
  


  
    
      10:51:06
    
  
  
  which means arguments this is if we're using command line arguments which we won't be using
  


  
    
      10:51:12
    
  
  
  but it's nice to Future proof our code just in case we do in the future we will create a stopwatch object stopwatch
  


  
    
      10:51:20
    
  
  
  equals call The Constructor within our class of stopwatch our window is not going to
  


  
    
      10:51:27
    
  
  
  show unless we call the show method take our stopwatch call the show
  


  
    
      10:51:32
    
  
  
  method now our window is only going to show for a brief second we need to ensure a clean exit we
  


  
    
      10:51:40
    
  
  
  can access CIS call the exit method pass in the following
  


  
    
      10:51:47
    
  
  
  app then call the excore method this method starts the
  


  
    
      10:51:54
    
  
  
  main event Loop and handles events so then we should have a basic window which stays in place until we
  


  
    
      10:52:01
    
  
  
  close it we now have the main skeletal structure of a pi qt5 application set up
  


  
    
      10:52:06
    
  
  
  if you're one of the people that have jumped ahead up until this point we have a class of stopwatch which inherits from
  


  
    
      10:52:12
    
  
  
  the Q widget class we've constructed a stopwatch object and we're showing it so
  


  
    
      10:52:19
    
  
  
  now we can begin designing our stopwatch we will create a Time object self. time
  


  
    
      10:52:25
    
  
  
  equals call The Constructor within the class of Q time for arguments we'll pass
  


  
    
      10:52:31
    
  
  
  in the hours minutes seconds and milliseconds all
  


  
    
      10:52:36
    
  
  
  zero we need a label for the stopwatch self. time label equals called
  


  
    
      10:52:44
    
  
  
  The Constructor of Q label what would we like the text to say I'll
  


  
    
      10:52:50
    
  
  
  display some placeholder text a bunch of zeros zero hours minutes seconds and
  


  
    
      10:52:58
    
  
  
  milliseconds we will add this label to self our stopwatch we need a start button self.
  


  
    
      10:53:06
    
  
  
  start button equals called The Constructor within Q push button what
  


  
    
      10:53:13
    
  
  
  would we like the text of the button to say let's say start we are adding this
  


  
    
      10:53:19
    
  
  
  button to self our stopwatch we need a stop button let's
  


  
    
      10:53:25
    
  
  
  replace start with stop change the text from start to stop and
  


  
    
      10:53:33
    
  
  
  reset the name of this button will be the reset button the text will be
  


  
    
      10:53:39
    
  
  
  reset we will need a timer to emit a signal at a given interval self. time
  


  
    
      10:53:47
    
  
  
  equals call The Constructor within the class qtimer then pass
  


  
    
      10:53:54
    
  
  
  in we're going to call a method of initialize UI self. init
  


  
    
      10:54:01
    
  
  
  UI but we still have to Define this method all right within our stopwatch
  


  
    
      10:54:06
    
  
  
  class we need the following methods a method of init UI this is
  


  
    
      10:54:13
    
  
  
  where we'll be designing the user interface I'll write pass for now as a
  


  
    
      10:54:19
    
  
  
  placeholder we need a method to start to start the stopwatch that is a
  


  
    
      10:54:26
    
  
  
  method to stop the stopwatch a method to reset the
  


  
    
      10:54:35
    
  
  
  stopwatch we'll create a method to format our time format time besides self
  


  
    
      10:54:41
    
  
  
  there's one parameter we have to pass in a time to format we will will be returning a string a string
  


  
    
      10:54:48
    
  
  
  representation of the current time and a method to update our display
  


  
    
      10:54:55
    
  
  
  update display here are the six methods we'll
  


  
    
      10:55:02
    
  
  
  need within our initialized user interface method we will set the title
  


  
    
      10:55:07
    
  
  
  of the window because right now it says python we will take self our stopwatch
  


  
    
      10:55:14
    
  
  
  call the set window title method and we will pass in
  


  
    
      10:55:22
    
  
  
  stopwatch that should change the title of the window to stopwatch we're going
  


  
    
      10:55:27
    
  
  
  to use a vertical layout manager for the label and the buttons we will create a layout manager
  


  
    
      10:55:34
    
  
  
  named vbox vbox equals call The Constructor of q v box
  


  
    
      10:55:43
    
  
  
  layout we will take our layout manager and add the following
  


  
    
      10:55:50
    
  
  
  widgets self. time label then our start stop and reset
  


  
    
      10:55:59
    
  
  
  buttons start button stop
  


  
    
      10:56:05
    
  
  
  button and reset
  


  
    
      10:56:12
    
  
  
  button we will take self set the lay
  


  
    
      10:56:17
    
  
  
  layout passing our vertical layout manager so we have all of our buttons we
  


  
    
      10:56:25
    
  
  
  have our widgets arranged in a column we're going to take our time label and also Center it
  


  
    
      10:56:32
    
  
  
  horizontally we will take our time label self. time
  


  
    
      10:56:37
    
  
  
  label call the set alignment method access our class of
  


  
    
      10:56:44
    
  
  
  QT access the flag of a line
  


  
    
      10:56:49
    
  
  
  Center that's going to Center align the time it should be aligned both vertically and
  


  
    
      10:56:56
    
  
  
  horizontally now with your buttons they're arranged in a column we could group them together
  


  
    
      10:57:02
    
  
  
  horizontally here's how we will create a horizontal layout manager of hbox hbox
  


  
    
      10:57:09
    
  
  
  equals call The Constructor of qbox layout
  


  
    
      10:57:16
    
  
  
  instead of adding these buttons directly to our vertical layout manager let's cut
  


  
    
      10:57:23
    
  
  
  them paste them underneath hbox replace vbox with
  


  
    
      10:57:30
    
  
  
  hbox then with our vertical layout manager vbox we will add our layout of
  


  
    
      10:57:42
    
  
  
  hbox this group of buttons is arranged vertically with with the time
  


  
    
      10:57:47
    
  
  
  label now we'll be applying a style sheet access self our stopwatch call the
  


  
    
      10:57:54
    
  
  
  set stylesheet method we can pass in one extremely long
  


  
    
      10:58:00
    
  
  
  string with a set of triple quotes all of the CSS like properties We'll add
  


  
    
      10:58:06
    
  
  
  we'll do so between the set of triple quotes let's select our buttons Q push
  


  
    
      10:58:12
    
  
  
  button we are selecting an entire class within a set of curly braces let's add
  


  
    
      10:58:19
    
  
  
  the property of font size the font size of all buttons will be 50
  


  
    
      10:58:26
    
  
  
  pixels let's customize our label select the class of Q
  


  
    
      10:58:32
    
  
  
  label within a set of curly braces let's add the following properties font size
  


  
    
      10:58:38
    
  
  
  will be 120 if you would like we can add a
  


  
    
      10:58:44
    
  
  
  background color too to the label we can select a background
  


  
    
      10:58:50
    
  
  
  color temporarily I will select blue but we can pick more specific shades of blue
  


  
    
      10:58:57
    
  
  
  or another color here's how you can look up a Color Picker and
  


  
    
      10:59:02
    
  
  
  select a very specific color you can use hex values RGB or
  


  
    
      10:59:08
    
  
  
  hsl I've already selected a color I'm going to copy these hsl values so
  


  
    
      10:59:14
    
  
  
  instead of a color name we will select hsl then paste those values if you have
  


  
    
      10:59:21
    
  
  
  a degree symbol you will need to remove that and now we have a very specific
  


  
    
      10:59:26
    
  
  
  shade of blue I will also round the corners of our label add the property of Border radius
  


  
    
      10:59:34
    
  
  
  I will set that to be 20 pixels this will round the corners
  


  
    
      10:59:40
    
  
  
  between each button and label We'll add some padding we're going to use multiple selectors
  


  
    
      10:59:46
    
  
  
  we will select all push buttons and all
  


  
    
      10:59:51
    
  
  
  labels apply the following properties to each I will add padding of 20
  


  
    
      10:59:58
    
  
  
  pixels around these widgets and I will also make the font
  


  
    
      11:00:03
    
  
  
  weight bold font weight will be
  


  
    
      11:00:11
    
  
  
  bold all right I think that looks pretty good hey this is bro from the future I
  


  
    
      11:00:16
    
  
  
  currently editing this video if you would like you can add a font family one
  


  
    
      11:00:21
    
  
  
  font that I think looks really good is C we'll apply that to all push buttons
  


  
    
      11:00:26
    
  
  
  and C labels I really like this font I think it fits a stopwatch but it's up to you
  


  
    
      11:00:32
    
  
  
  if you would like to change the font I just thought I would mention that now we just have to add some functionality
  


  
    
      11:00:38
    
  
  
  because these buttons don't do anything for each of our buttons we have to connect a signal to a slot we will
  


  
    
      11:00:46
    
  
  
  take our start button self. start button with the signal of clicked we
  


  
    
      11:00:54
    
  
  
  will connect the following slot we will call the start method self. start method
  


  
    
      11:01:01
    
  
  
  let's do this with the stop button change start to stop clicked
  


  
    
      11:01:08
    
  
  
  connect self. stop method
  


  
    
      11:01:13
    
  
  
  reset self. reset button called the reset
  


  
    
      11:01:20
    
  
  
  method at a given interval we're going to update our
  


  
    
      11:01:25
    
  
  
  display self. timer during a signal of
  


  
    
      11:01:31
    
  
  
  timeout we will connect the following method self. update
  


  
    
      11:01:36
    
  
  
  display self. update display within our start method we will
  


  
    
      11:01:43
    
  
  
  take our timer self. timer call the start method pass in 10 for 10
  


  
    
      11:01:50
    
  
  
  milliseconds we will set an interval for a time out every 10
  


  
    
      11:01:57
    
  
  
  milliseconds within our stop method we will take our timer and instead called
  


  
    
      11:02:02
    
  
  
  the stop method we'll get back to reset in just a moment let's work on the format time
  


  
    
      11:02:10
    
  
  
  method from our time that we pass in we have to get the hours minutes seconds and millisecs seconds we will create
  


  
    
      11:02:17
    
  
  
  some local variables hours equals access our time that we pass in call the hour
  


  
    
      11:02:24
    
  
  
  method to return hours we have variable minutes time do
  


  
    
      11:02:30
    
  
  
  call the minute method to return the minutes we have a variable of seconds
  


  
    
      11:02:35
    
  
  
  seconds equals take our time called the second method then for
  


  
    
      11:02:43
    
  
  
  milliseconds access our time call the MC which means milliseconds and call it
  


  
    
      11:02:51
    
  
  
  this is a method I'm going to return a string an F string to represent the
  


  
    
      11:02:58
    
  
  
  time we will add four placeholders hours minutes seconds and
  


  
    
      11:03:04
    
  
  
  milliseconds each will be separated with a colon except for milliseconds which will be a DOT a
  


  
    
      11:03:12
    
  
  
  period we will display the hours I'll add some leading zeros two leading
  


  
    
      11:03:19
    
  
  
  zeros let's do this for minutes we're using a format specifier
  


  
    
      11:03:25
    
  
  
  for two leading zeros as well
  


  
    
      11:03:31
    
  
  
  seconds and
  


  
    
      11:03:38
    
  
  
  milliseconds now we will work on the update display method we have to get the time self. time
  


  
    
      11:03:46
    
  
  
  equals we will take our time but call the add milliseconds
  


  
    
      11:03:53
    
  
  
  method Ms e CS then pass in 10 for 10
  


  
    
      11:04:00
    
  
  
  milliseconds we're going to take our time label self. time
  


  
    
      11:04:06
    
  
  
  label and set the text of it we will call our format time
  


  
    
      11:04:13
    
  
  
  method but we have to pass in a Time we will be passing in self.
  


  
    
      11:04:19
    
  
  
  time let's see what we have currently we can start the
  


  
    
      11:04:25
    
  
  
  stopwatch and we can stop it however we're displaying three digits
  


  
    
      11:04:31
    
  
  
  for the milliseconds we can eliminate that within format time when we get the
  


  
    
      11:04:37
    
  
  
  milliseconds we will use integer division we will divide by 10 this will
  


  
    
      11:04:44
    
  
  
  convert our milliseconds from three digits to two we're basically dividing by
  


  
    
      11:04:49
    
  
  
  10 so here's our stopwatch currently we can start we can stop we can start again and
  


  
    
      11:04:58
    
  
  
  we can stop again now we just need to reset here's how within the reset method
  


  
    
      11:05:05
    
  
  
  we will take our timer self. timer use the stop method to stop we will reassign
  


  
    
      11:05:12
    
  
  
  our time call The Constructor of Q time we have to pass in hours minutes seconds
  


  
    
      11:05:19
    
  
  
  and milliseconds they're all going to be zero we're resetting our time and then
  


  
    
      11:05:25
    
  
  
  we'll reset the text again of our time label self. time label call the set text
  


  
    
      11:05:32
    
  
  
  method when we set the text we will first format it with the format time
  


  
    
      11:05:38
    
  
  
  method but we have to pass in a time we will pass in self.
  


  
    
      11:05:44
    
  
  
  time and now should be able to reset our stopwatch we can
  


  
    
      11:05:50
    
  
  
  start we can stop we can reset start again and stop
  


  
    
      11:05:58
    
  
  
  again all right everybody so that is a cool stopwatch that you can make using
  


  
    
      11:06:04
    
  
  
  python hey uh what's going on everybody so in today's video we're going to create a working weather app that
  


  
    
  77.weather API app ☀️



  
    
      11:06:10
    
  
  
  fetches realtime weather data from an API this is a massive project so feel
  


  
    
      11:06:15
    
  
  
  free to take your time take several days or even weeks if you need to complete this heck you can even add this project
  


  
    
      11:06:21
    
  
  
  to your portfolio well let's get started
  


  
    
      11:06:27
    
  
  
  everybody all right let's get started everybody this is a fairly useful API to get real-time weather data the website
  


  
    
      11:06:34
    
  
  
  is openweathermap.org you will need your own API key but
  


  
    
      11:06:39
    
  
  
  signing up for an account is free to create an account we'll go to sign in create an account
  


  
    
      11:06:46
    
  
  
  enter your information and then sign in once you're signed in to find your
  


  
    
      11:06:52
    
  
  
  API key go to this drop- down menu go to my API keys and you would just need to
  


  
    
      11:06:58
    
  
  
  copy this API key if the status is in active you'll need to toggle it to
  


  
    
      11:07:04
    
  
  
  active like so now it may take several minutes for your API key to become active hopefully
  


  
    
      11:07:11
    
  
  
  by the time of this project where we will need it it'll be active I would either leave up this window or copy this
  


  
    
      11:07:17
    
  
  
  key and paste it somewhere we will need the following Imports we will import CIS CIS means
  


  
    
      11:07:25
    
  
  
  system it handles system variables for your python interpreter we will import
  


  
    
      11:07:30
    
  
  
  the request module to make a request to an API then we'll need widgets widgets are
  


  
    
      11:07:36
    
  
  
  the building blocks of a pi qt5 application from the package of Pi
  


  
    
      11:07:42
    
  
  
  qt5 access the module of QT widget import the following
  


  
    
      11:07:49
    
  
  
  widgets Q application Q
  


  
    
      11:07:54
    
  
  
  widget Q label q line
  


  
    
      11:08:01
    
  
  
  edit Q push button let me put some of these on a new line for
  


  
    
      11:08:08
    
  
  
  readability QV box layout this is a vertical layout
  


  
    
      11:08:16
    
  
  
  manager to work with alignment we'll need the following from the package of Pi qt5 from the module of QT core import
  


  
    
      11:08:26
    
  
  
  the following class QT which is used for alignment so these are the Imports that
  


  
    
      11:08:32
    
  
  
  you'll need just to be sure that I didn't misspell anything or get the
  


  
    
      11:08:37
    
  
  
  capitalization wrong I'm just going to do a test run no problems processed finished with
  


  
    
      11:08:43
    
  
  
  exit Code Zero sometimes I make one of these characters a lowercase and then it doesn't
  


  
    
      11:08:50
    
  
  
  work okay we have our Imports we will need to create a class of weather app
  


  
    
      11:08:57
    
  
  
  weather app is going to inherit from the parent of Q
  


  
    
      11:09:03
    
  
  
  widget we will need a Constructor so we'll Define that Dunder init no
  


  
    
      11:09:09
    
  
  
  arguments besid self in case we have arguments to send to the parent we will call the the
  


  
    
      11:09:15
    
  
  
  parent with super meaning the super class then call the Constructor but
  


  
    
      11:09:21
    
  
  
  currently we don't have any arguments if we are running our main python file directly we can verify that
  


  
    
      11:09:28
    
  
  
  with the if statement if Dunder name is equal to a
  


  
    
      11:09:33
    
  
  
  string of Dunder main if we are running this file
  


  
    
      11:09:40
    
  
  
  directly then we will create a weather app object otherwise we won't
  


  
    
      11:09:45
    
  
  
  if this statement is true we will do the following we will create an app object
  


  
    
      11:09:51
    
  
  
  app equals call The Constructor within our Q application class but we will pass
  


  
    
      11:09:56
    
  
  
  in the following access the module of CIS then access a RGV which means
  


  
    
      11:10:03
    
  
  
  arguments if we have command Aline arguments to send to our application this is how we would take care of that
  


  
    
      11:10:10
    
  
  
  but we're not going to be using command line arguments in this video but it's nice to Future proof our code just just
  


  
    
      11:10:15
    
  
  
  in case we do we will construct a weather app object weather app equals
  


  
    
      11:10:21
    
  
  
  call The Constructor of our weather app class now this window isn't going to show we have to call the show method of
  


  
    
      11:10:28
    
  
  
  our weather app Weather app. Show and now it's going to show for a
  


  
    
      11:10:34
    
  
  
  brief second we need to ensure a clean exit access sis call the exit method within
  


  
    
      11:10:43
    
  
  
  this method we will pass in the following take our app call the execute method
  


  
    
      11:10:49
    
  
  
  which is excore it is a method so we have to call
  


  
    
      11:10:54
    
  
  
  it this method handles events within our application such as closing the
  


  
    
      11:11:01
    
  
  
  window so now our window should stay in place until we close
  


  
    
      11:11:06
    
  
  
  it if you're one of the people that have jumped ahead we have created a class of weather app which inherits from the
  


  
    
      11:11:13
    
  
  
  parent of Q widget we've constructed a weather app object and we're showing it
  


  
    
      11:11:19
    
  
  
  if you've made some Pi qt5 Projects in the past you would just have to change some of these
  


  
    
      11:11:24
    
  
  
  around within the Constructor of our class weather app we will declare the different widgets that belong to our
  


  
    
      11:11:30
    
  
  
  weather app object we will create a label that prompts the user to enter in a city we will name this city label
  


  
    
      11:11:38
    
  
  
  equals this is a q label widget we can set the initial text of
  


  
    
      11:11:44
    
  
  
  the label let's say enter city
  


  
    
      11:11:49
    
  
  
  name then the second argument is going to be self we are adding this label to
  


  
    
      11:11:55
    
  
  
  our weather app object here's what we have currently we still have to do some CSS
  


  
    
      11:12:02
    
  
  
  formatting but we'll take care of that soon we will need a line edit widget
  


  
    
      11:12:08
    
  
  
  basically a textbox we will name it City input
  


  
    
      11:12:16
    
  
  
  the widget is line edit no parameters besides
  


  
    
      11:12:24
    
  
  
  self here is our line edit widget we're not currently using a layout manager
  


  
    
      11:12:29
    
  
  
  these widgets are going to overlap we need a button self. getet
  


  
    
      11:12:37
    
  
  
  weather button this is a q push
  


  
    
      11:12:43
    
  
  
  button the text on this button button will be get weather we are adding this
  


  
    
      11:12:49
    
  
  
  to self our weather app object here's our button when we click on this button
  


  
    
      11:12:56
    
  
  
  we'll make a request to an API for the next following widgets we're going to add some placeholders just so that we
  


  
    
      11:13:03
    
  
  
  can see what we're doing when we apply CSS styling we need a temperature label to
  


  
    
      11:13:08
    
  
  
  display the temperature temperature label equals a q
  


  
    
      11:13:17
    
  
  
  label temporarily for the label let's say that the temperature is 70° fight or
  


  
    
      11:13:24
    
  
  
  pick something else in Celsius so to add a degree symbol if you're using Windows make sure numb lock is on hold alt then
  


  
    
      11:13:31
    
  
  
  on the numpad type 0176 I will pick 70°
  


  
    
      11:13:36
    
  
  
  fah and then we will add this to self again we're just using this
  


  
    
      11:13:41
    
  
  
  temperature as a placeholder we'll delete it when we do a test run if you would like to include an emoji or
  


  
    
      11:13:48
    
  
  
  some other image we can create a label for that I will name this Emoji
  


  
    
      11:13:55
    
  
  
  label equals a q label I will add an emoji of a son as a
  


  
    
      11:14:03
    
  
  
  placeholder again we're going to delete this when we do a test run we are adding
  


  
    
      11:14:08
    
  
  
  this to self again everything is overlapping
  


  
    
      11:14:14
    
  
  
  that is fine and we need a description of the
  


  
    
      11:14:19
    
  
  
  weather description label equals a q
  


  
    
      11:14:26
    
  
  
  label as a placeholder let's say that it's sunny and we are adding this label
  


  
    
      11:14:32
    
  
  
  to self okay here are all the widgets they're all overlapping so we need to
  


  
    
      11:14:39
    
  
  
  fix that all right moving on everybody so now we have to design the layout of our
  


  
    
      11:14:46
    
  
  
  web app right now all of our widgets are gravitating to the top left corner so I
  


  
    
      11:14:53
    
  
  
  will Define a method to initialize our user
  


  
    
      11:15:01
    
  
  
  interface at the end of this Constructor we will call this method self. initialize UI then call it once we've
  


  
    
      11:15:10
    
  
  
  constructed our widgets we'll format them and design the layout
  


  
    
      11:15:16
    
  
  
  so we are now within our initialized user interface method first let's set the title of our
  


  
    
      11:15:22
    
  
  
  window self. set window
  


  
    
      11:15:27
    
  
  
  title let's say that the title is weather app so that should change which
  


  
    
      11:15:34
    
  
  
  it does we're going to use a vertical layout manager to handle all the
  


  
    
      11:15:41
    
  
  
  widgets let's name the layout manager vbox equals call The Constructor of the
  


  
    
      11:15:47
    
  
  
  class QV box layout we're going to take our layout manager of v-box then add a
  


  
    
      11:15:55
    
  
  
  widget we will start with the city label that's
  


  
    
      11:16:00
    
  
  
  first we will pass in self. City Lael and we'll do this with the other widgets
  


  
    
      11:16:08
    
  
  
  too we have City input get weather
  


  
    
      11:16:18
    
  
  
  button temperature
  


  
    
      11:16:24
    
  
  
  label Emoji label and then a description
  


  
    
      11:16:35
    
  
  
  label take self our weather app set the layout we will pass in the layout
  


  
    
      11:16:42
    
  
  
  manager of vbox and here's what we have
  


  
    
      11:16:49
    
  
  
  currently all the widgets are arranged in a column now we just have to centeralign them horizontally here's
  


  
    
      11:16:58
    
  
  
  how we will take self. City label call the set alignment
  


  
    
      11:17:07
    
  
  
  method access the class of QT access the flag of a line Center
  


  
    
      11:17:15
    
  
  
  we're going to align all of our widgets in the center except for our weather button currently our button expands to
  


  
    
      11:17:22
    
  
  
  take up the width of the window so we don't need to horizontally align that so
  


  
    
      11:17:28
    
  
  
  we have five widgets to align we have City label City input
  


  
    
      11:17:35
    
  
  
  temperature label Emoji label and description label all of the widgets are going to be
  


  
    
      11:17:42
    
  
  
  arranged in a column horizontally now we just have to apply some CSS
  


  
    
      11:17:47
    
  
  
  styling because right now it's kind of ugly we will apply Styles based on an
  


  
    
      11:17:53
    
  
  
  object name but we have to set that object name so let's start with our city label self. City
  


  
    
      11:18:02
    
  
  
  label call the set object name
  


  
    
      11:18:08
    
  
  
  method pass in a unique ID for this widget I will name it City label I'll
  


  
    
      11:18:14
    
  
  
  keep it the same okay we have to do this with the other widgets too we have a total of
  


  
    
      11:18:21
    
  
  
  six we have City label City
  


  
    
      11:18:27
    
  
  
  input we have the get weather
  


  
    
      11:18:33
    
  
  
  button temperature label Emoji
  


  
    
      11:18:38
    
  
  
  label and description label then we're going to set a
  


  
    
      11:18:45
    
  
  
  stylesheet take s our weather app apply a stylesheet with set style
  


  
    
      11:18:52
    
  
  
  sheet we have a lot of properties to write I will do so within a set of triple quotes just to keep everything
  


  
    
      11:18:59
    
  
  
  more organized we can apply CSS Styles based on a class so the class is going to be Q
  


  
    
      11:19:07
    
  
  
  label within a set of curly braces we can list multiple CSS properties I will
  


  
    
      11:19:13
    
  
  
  set the font family to be calibri as well as all push buttons Q
  


  
    
      11:19:21
    
  
  
  push button so here's the font although it's
  


  
    
      11:19:26
    
  
  
  still kind of small let's select our ID of City label it's good practice to
  


  
    
      11:19:32
    
  
  
  preedee this ID with the name of the class so Q label pound sign the
  


  
    
      11:19:39
    
  
  
  ID we precede the ID with the name of the class just so we're only applying
  


  
    
      11:19:44
    
  
  
  these CSS properties to any ID that's a city label that falls within the class
  


  
    
      11:19:49
    
  
  
  of Q label let's set the font size to be 40
  


  
    
      11:19:55
    
  
  
  pixels let's set the font size to be 40 pixels that's
  


  
    
      11:20:01
    
  
  
  better I'll set the font style to be italic font style
  


  
    
      11:20:09
    
  
  
  italic that's pretty good let's select the ID of City input
  


  
    
      11:20:17
    
  
  
  this is a line edit widget q line edit
  


  
    
      11:20:23
    
  
  
  pound the ID of City input within a set of curly braces let's set the font size to be 40
  


  
    
      11:20:38
    
  
  
  pixels we will select our push button which is named get weather button the
  


  
    
      11:20:44
    
  
  
  class is Q push button pound the ID of
  


  
    
      11:20:49
    
  
  
  get WEA button within a set of curly braces we will apply the following let's
  


  
    
      11:20:54
    
  
  
  set the font size to be 30
  


  
    
      11:21:00
    
  
  
  pixels and let's make it bold font weight
  


  
    
      11:21:11
    
  
  
  bold let's select our temperature label the ID is temperature label and this is
  


  
    
      11:21:18
    
  
  
  a q label pound temperature label we will increase the font
  


  
    
      11:21:25
    
  
  
  size font size 75
  


  
    
      11:21:33
    
  
  
  pixels better let's work on our Emoji
  


  
    
      11:21:39
    
  
  
  next we will select the ID of emoji label
  


  
    
      11:21:44
    
  
  
  the class is Q label the ID is Emoji
  


  
    
      11:21:49
    
  
  
  label we'll set the font size first font size 100 pixels I would like a large
  


  
    
      11:21:58
    
  
  
  image to display emojis properly we're going to use a very specific font we're
  


  
    
      11:22:04
    
  
  
  going to set the font family to be now I don't know if I'm saying this right seg
  


  
    
      11:22:11
    
  
  
  o UI emoji I probably pronounced this word wrong
  


  
    
      11:22:17
    
  
  
  but I don't care so then our Emoji should display
  


  
    
      11:22:22
    
  
  
  correctly using this font it's colorful then we have the description
  


  
    
      11:22:29
    
  
  
  label of the weather that is the last widget description label the class is Q
  


  
    
      11:22:35
    
  
  
  label the ID is description label let's take the font size and set
  


  
    
      11:22:43
    
  
  
  it to be 50 pixels all right so this is what our weather
  


  
    
      11:22:49
    
  
  
  app is going to look like we have the city label a text box to enter in a city
  


  
    
      11:22:55
    
  
  
  the get weather button the temperature label an emoji label and a description
  


  
    
      11:23:00
    
  
  
  of the weather currently now we just have to add some functionality because currently this doesn't do
  


  
    
      11:23:08
    
  
  
  anything all right so now we just have to add some functionality to our weather app temporarily I'm going to to collapse
  


  
    
      11:23:15
    
  
  
  our initialized user interface method we will Define a few extra methods let's
  


  
    
      11:23:20
    
  
  
  declare a method of get weather no parameters besid self I'll
  


  
    
      11:23:27
    
  
  
  write pass for now as a placeholder we will need a method to
  


  
    
      11:23:32
    
  
  
  display any errors display error there's
  


  
    
      11:23:37
    
  
  
  going to be one argument besid self a message we will pass in an error message
  


  
    
      11:23:42
    
  
  
  if there is one and a method to display weather that's
  


  
    
      11:23:49
    
  
  
  if there's no errors we will need some data our weather
  


  
    
      11:23:55
    
  
  
  data so be sure that you write these three methods back within our initialized user
  


  
    
      11:24:01
    
  
  
  interface method at the bottom we have to connect a signal to a
  


  
    
      11:24:09
    
  
  
  slot when we click on the button with the signal of clicked we will connect a
  


  
    
      11:24:15
    
  
  
  slot of get weather we will access self take our get weather
  


  
    
      11:24:23
    
  
  
  button with a signal of clicked we will connect a slot upself dog
  


  
    
      11:24:32
    
  
  
  getwe and I will print a test message just to be sure that it's
  


  
    
      11:24:37
    
  
  
  working you get the weather so I press the button and and we
  


  
    
      11:24:44
    
  
  
  will display you get the weather we can get rid of our
  


  
    
      11:24:49
    
  
  
  placeholder text for the temperature our emoji and the weather
  


  
    
      11:24:55
    
  
  
  description so we can delete these strings But be sure to keep
  


  
    
      11:25:06
    
  
  
  self scrolling down to our get weather method when we click the button we're
  


  
    
      11:25:12
    
  
  
  going to create a few local variables the first is going to be our API key
  


  
    
      11:25:19
    
  
  
  equals this will be a string back to the open Weather API you
  


  
    
      11:25:25
    
  
  
  will copy your API key and make sure that it's active you can use the toggle button to make it inactive and
  


  
    
      11:25:32
    
  
  
  active so make sure that it's active paste your API key within a
  


  
    
      11:25:39
    
  
  
  string please use your own it still may take several minutes for your key to be itive just keep that in
  


  
    
      11:25:46
    
  
  
  mind we will need to get the city that we're looking up so let's say we type in
  


  
    
      11:25:53
    
  
  
  Miami I have to get the text from this widget this line edit widget we will
  


  
    
      11:25:59
    
  
  
  create a local variable of city city equals access our line edit widget it
  


  
    
      11:26:07
    
  
  
  had a name of City input so self. City input to get the
  


  
    
      11:26:15
    
  
  
  text we will call the text method we have the API key and the city
  


  
    
      11:26:21
    
  
  
  now we will create a URL this will be an F string using the request module we will
  


  
    
      11:26:28
    
  
  
  pass in a URL to make a request too so back to our open Weather API to
  


  
    
      11:26:35
    
  
  
  get the URL for a city we have to go to the tab of API scroll down to current weather data
  


  
    
      11:26:44
    
  
  
  and there's going to be some API documentation to the right we have a link for built-in API request by city
  


  
    
      11:26:52
    
  
  
  name we will copy this URL and paste it within our F string
  


  
    
      11:26:59
    
  
  
  there's two changes we're going to make we will replace city name with City the
  


  
    
      11:27:04
    
  
  
  name of that variable and API space key with API uncore
  


  
    
      11:27:11
    
  
  
  key it doesn't matter what you name these just make sure they're consistent with your variables when we make an API request we
  


  
    
      11:27:19
    
  
  
  will be returned with a response object response equals access our module of
  


  
    
      11:27:26
    
  
  
  requests call the get method then pass in our
  


  
    
      11:27:32
    
  
  
  URL with our response object we have to convert it to a Json
  


  
    
      11:27:37
    
  
  
  format we will be returned with an object we will name this object data it's going to be readable to us
  


  
    
      11:27:45
    
  
  
  data equals take our response object and use the Json method to convert it to a
  


  
    
      11:27:51
    
  
  
  Json format so let's print our data to see what we're working
  


  
    
      11:27:58
    
  
  
  with let's say I look up the city of
  


  
    
      11:28:04
    
  
  
  Miami so we have one gigantic object this is our weather data we have
  


  
    
      11:28:11
    
  
  
  coordinates such as longitude and attitude a weather
  


  
    
      11:28:17
    
  
  
  description currently in Miami there's broken clouds there's an ID of the weather this
  


  
    
      11:28:24
    
  
  
  is the temperature but it's in kelvin if we scroll all the way to the
  


  
    
      11:28:29
    
  
  
  end we are looking for an HTTP status code which is named Cod short for code
  


  
    
      11:28:37
    
  
  
  200 means that the response was successful depending on what this number is we will display one of a few are
  


  
    
      11:28:44
    
  
  
  messages if our status code is 404 that means the city wasn't found and there's
  


  
    
      11:28:49
    
  
  
  many others so 200 means that the request was
  


  
    
      11:28:54
    
  
  
  successful so let's write the following if our data object at Key of
  


  
    
      11:29:03
    
  
  
  cod if this is equal to 200 if the request was successful then we will call
  


  
    
      11:29:10
    
  
  
  the display weather method self. display weather there but we do have to pass in our
  


  
    
      11:29:19
    
  
  
  data now temporarily I'm just going to print our weather data we'll do some
  


  
    
      11:29:25
    
  
  
  more complex stuff later but I just want to be sure that everything is working so let's look up Los
  


  
    
      11:29:34
    
  
  
  Angeles so here's the weather in Los Angeles there is currently broken
  


  
    
      11:29:41
    
  
  
  clouds and again the status code is 200 the request was
  


  
    
      11:29:48
    
  
  
  successful I'll write an else statement for now we will print our data what if
  


  
    
      11:29:54
    
  
  
  we can't find a city for example I will look up the city blah blah blah and get
  


  
    
      11:30:01
    
  
  
  the weather so here's our weather data we
  


  
    
      11:30:06
    
  
  
  have an error code of 404 and a message of City not found
  


  
    
      11:30:11
    
  
  
  let's do some exception handling in case we run into one of these status codes that's not
  


  
    
      11:30:17
    
  
  
  200 we can get rid of our else statement what we'll do is enclose all
  


  
    
      11:30:23
    
  
  
  of our dangerous code that means any code that might cause an exception within a tri
  


  
    
      11:30:29
    
  
  
  block we will try all of this code and handle any exceptions with an accept
  


  
    
      11:30:36
    
  
  
  block there's two types of exceptions we're looking for the first is an HTTP
  


  
    
      11:30:41
    
  
  
  error HTTP error is an exception raised by the
  


  
    
      11:30:49
    
  
  
  request module when an HTTP request returns a status code that's 400 or
  


  
    
      11:30:57
    
  
  
  500 however this exception is found within the request module that we've
  


  
    
      11:31:03
    
  
  
  imported so we can't simply just say accept HTTP error we first have to
  


  
    
      11:31:09
    
  
  
  access the request module then access exceptions
  


  
    
      11:31:15
    
  
  
  then we can list the specific exception of HTTP error we'll encounter this
  


  
    
      11:31:22
    
  
  
  exception if the status code is between 400 and
  


  
    
      11:31:28
    
  
  
  500 and for now all right pass so there's one more step within our
  


  
    
      11:31:33
    
  
  
  Tri block if we're going to handle any HTTP errors we have to raise an
  


  
    
      11:31:39
    
  
  
  exception within our Tri block because our Tri block by itself normally doesn't
  


  
    
      11:31:44
    
  
  
  catch these we will take our response object and call the raise for status
  


  
    
      11:31:54
    
  
  
  method this method will raise an exception if there's any HTTP errors
  


  
    
      11:32:01
    
  
  
  normally our Tri block doesn't do that so we have to manually type this there's another type of exception
  


  
    
      11:32:08
    
  
  
  we'll catch and that's the request exception We'll add another block for
  


  
    
      11:32:13
    
  
  
  accept request
  


  
    
      11:32:19
    
  
  
  exception this is found within the request module
  


  
    
      11:32:24
    
  
  
  requests exceptions request exception with a request exception this
  


  
    
      11:32:31
    
  
  
  can be due to network problems invalid URLs exceptions of that
  


  
    
      11:32:36
    
  
  
  nature in case we run into one of those types of exceptions we will execute this block of code but for now I'll right
  


  
    
      11:32:43
    
  
  
  pass we'll get back to it later going back to our accept block where we handle any HTTP errors let's
  


  
    
      11:32:51
    
  
  
  use a match case statement we need to get the status code of our response I'll
  


  
    
      11:32:56
    
  
  
  print that temporarily let's print our response objects status code and see what it
  


  
    
      11:33:06
    
  
  
  is again let's make up a city get the weather we have a status code of 404
  


  
    
      11:33:12
    
  
  
  that means the city will wasn't found depending on what this number is the status code we'll use a match case
  


  
    
      11:33:21
    
  
  
  statement so we will match our response objects status
  


  
    
      11:33:30
    
  
  
  code the first case will be 400 that means there's a bad
  


  
    
      11:33:38
    
  
  
  request so let's print the following bad add request I'll add a new
  


  
    
      11:33:46
    
  
  
  line character please check your
  


  
    
      11:33:52
    
  
  
  input we'll create a total of I believe eight cases we'll copy what we
  


  
    
      11:34:01
    
  
  
  have so we have 400 401
  


  
    
      11:34:06
    
  
  
  403 404 that one we're familiar with
  


  
    
      11:34:12
    
  
  
  500 5 2
  


  
    
      11:34:19
    
  
  
  503 504 so for case 401 that means we're
  


  
    
      11:34:26
    
  
  
  unauthorized maybe our API key isn't active yet so let's say
  


  
    
      11:34:36
    
  
  
  unauthorized invalid API key
  


  
    
      11:34:43
    
  
  
  for 403 that means access is denied it's forbidden so let's print
  


  
    
      11:34:53
    
  
  
  forbidden access is denied 404 is for something that's not
  


  
    
      11:35:01
    
  
  
  found not found City not
  


  
    
      11:35:09
    
  
  
  found 500 is for an internal server error
  


  
    
      11:35:14
    
  
  
  internal server error please try again
  


  
    
      11:35:22
    
  
  
  later 502 is for a bad gateway bad gateway invalid response from the
  


  
    
      11:35:37
    
  
  
  server 503 is for service unavailable service
  


  
    
      11:35:44
    
  
  
  unavailable server is down then 504 is for a Gateway
  


  
    
      11:35:55
    
  
  
  timeout Gateway timeout no response from the
  


  
    
      11:36:07
    
  
  
  server in case there's any unexpected error we can add a wild card of an underscore
  


  
    
      11:36:15
    
  
  
  with our HTTP error let's give it a name as
  


  
    
      11:36:20
    
  
  
  HTTP error and then we'll just print it in case there are no matching cases let's
  


  
    
      11:36:27
    
  
  
  print the following HTTP error
  


  
    
      11:36:33
    
  
  
  occurred I'll add a new line let's convert this to an FST
  


  
    
      11:36:39
    
  
  
  string add a placeholder and then I will print our HTTP
  


  
    
      11:36:45
    
  
  
  air all right let's do a test run so in case we can't find our city we
  


  
    
      11:36:52
    
  
  
  should encounter a 404 error not found City not found
  


  
    
      11:36:57
    
  
  
  eventually we will display this message within our app but we know that it works what if my API key is
  


  
    
      11:37:06
    
  
  
  invalid so I will take my API key set it to be inactive but it might take a few minutes
  


  
    
      11:37:13
    
  
  
  to take effect the status code of our response object should be
  


  
    
      11:37:19
    
  
  
  401 so this time I'm going to look up a city I have an invalid API
  


  
    
      11:37:25
    
  
  
  key and I get that error message of unauthorized invalid API
  


  
    
      11:37:31
    
  
  
  key all right everybody so I am on day three of working on and recording this topic over the course of the day I
  


  
    
      11:37:38
    
  
  
  thought of one change that I can make we're going to add a few extra accept blocks so we will accept access requests
  


  
    
      11:37:46
    
  
  
  access exceptions we will handle any connection eror
  


  
    
      11:37:55
    
  
  
  exceptions as well as any timeout
  


  
    
      11:38:03
    
  
  
  exceptions and any redirects too many redirects
  


  
    
      11:38:16
    
  
  
  so if we run into a connection error let's say that our internet gets disconnected well we can print something
  


  
    
      11:38:22
    
  
  
  so let's print the following let's print connection
  


  
    
      11:38:28
    
  
  
  error I'll add a new line character check your internet
  


  
    
      11:38:36
    
  
  
  connection if we encounter a timeout then we will print the following we have a a time out
  


  
    
      11:38:47
    
  
  
  error the request timed out if we have a too many redirects
  


  
    
      11:38:54
    
  
  
  error that M should be Capital by the
  


  
    
      11:39:00
    
  
  
  way let's State too many
  


  
    
      11:39:08
    
  
  
  redirects check the URL
  


  
    
      11:39:13
    
  
  
  and if there's anything else we don't anticipate I'll give this exception a name of as Rec
  


  
    
      11:39:21
    
  
  
  error and then we'll just print it this is a last resort I'll use an F
  


  
    
      11:39:28
    
  
  
  string request error I'll add a new line I'll
  


  
    
      11:39:34
    
  
  
  add a placeholder then display our request error so I'm actually going to turn off
  


  
    
      11:39:40
    
  
  
  my internet I'll see if I can get a connection eror intentionally so my internet is
  


  
    
      11:39:46
    
  
  
  currently off I will attempt to look up a city get the weather and we get a
  


  
    
      11:39:52
    
  
  
  connection error check your internet connection all right my internet is
  


  
    
      11:39:58
    
  
  
  connected again let's perform a test
  


  
    
      11:40:03
    
  
  
  run and we get the weather in Miami now what we're going to do is if
  


  
    
      11:40:10
    
  
  
  we have an error we'll display the error message within the app and not within our
  


  
    
      11:40:18
    
  
  
  console so we're going to replace print with the call to our display error
  


  
    
      11:40:23
    
  
  
  method let me zoom out a little bit so replace print with
  


  
    
      11:40:29
    
  
  
  self. display error and we're passing in a message so let's replace those
  


  
    
      11:40:44
    
  
  
  one thing I forgot to add although it's not necessary I'm going to add a colon after each initial
  


  
    
      11:40:51
    
  
  
  message I think it'll look better you don't have to do this but I'm
  


  
    
      11:40:56
    
  
  
  OCD about the appearance if we encounter one of these exceptions we'll pass along a message to
  


  
    
      11:41:04
    
  
  
  our display error method and display it within the app let's take our temperature label
  


  
    
      11:41:10
    
  
  
  self. temperature Lael
  


  
    
      11:41:15
    
  
  
  and set the text to be our message that we pass
  


  
    
      11:41:23
    
  
  
  in let's do a test run let's look up a city that doesn't exist get the
  


  
    
      11:41:29
    
  
  
  weather so we get that error message not found City not found while we're within
  


  
    
      11:41:35
    
  
  
  this method I'm going to change the font size just so that it's a little bit smaller
  


  
    
      11:41:44
    
  
  
  so let's take our temperature label self. temperature label I'm just going
  


  
    
      11:41:49
    
  
  
  to copy this because I'm lazy I will call the set stylesheet
  


  
    
      11:41:55
    
  
  
  method and pass along a new property let's set the font size to 30
  


  
    
      11:42:03
    
  
  
  pixels let's look up north pole I don't think that's a
  


  
    
      11:42:09
    
  
  
  city oh I guess it is interesting
  


  
    
      11:42:16
    
  
  
  the North Pole is a city I guess let's look up blah blah
  


  
    
      11:42:21
    
  
  
  blah not found City not found let's do another test what if our
  


  
    
      11:42:28
    
  
  
  API key is invalid I'll just delete one of the digits let's look up Los
  


  
    
      11:42:36
    
  
  
  Angeles unauthorized invalid API key let's change that back again I will
  


  
    
      11:42:43
    
  
  
  turn off my internet then look up Miami Connection Error check your
  


  
    
      11:42:50
    
  
  
  internet connection all right so we know that our exception handling works okay now we're within the display
  


  
    
      11:42:58
    
  
  
  weather method we'll receive an object to represent our data we have to get the
  


  
    
      11:43:05
    
  
  
  temperature but first I'm going to print our data so let me zoom in a little
  


  
    
      11:43:11
    
  
  
  bit let's look up Houston Houston
  


  
    
      11:43:16
    
  
  
  Texas I need the temperature within our data object we are looking for a key of
  


  
    
      11:43:23
    
  
  
  Main and that is right here main contains a dictionary with key value
  


  
    
      11:43:28
    
  
  
  pairs once we've accessed main we have to access temp to get the temperature
  


  
    
      11:43:34
    
  
  
  and this temperature is in kelvin we'll have to convert it to Celsius or Fahrenheit it's your
  


  
    
      11:43:39
    
  
  
  choice so we need to extract this value I will store it as a local variable
  


  
    
      11:43:49
    
  
  
  temperature let's say temperature _ k for Kelvin equals take our data object
  


  
    
      11:43:56
    
  
  
  access the key of main that's right here then we have to go one level deeper and
  


  
    
      11:44:03
    
  
  
  get the temperature the key is temp then give me the value at the Key
  


  
    
      11:44:09
    
  
  
  of Temp and that should return the current temperature so to test it let's
  


  
    
      11:44:14
    
  
  
  print it let's print the temperature in Kelvin so what is the weather in Houston
  


  
    
      11:44:22
    
  
  
  Texas the temperature that is 309
  


  
    
      11:44:28
    
  
  
  Kelvin let's convert it to Celsius and Fahrenheit let's create temperature C if
  


  
    
      11:44:35
    
  
  
  you want to use celsius if you would rather use Fahrenheit you can skip this step to convert from Kelvin to Celsius
  


  
    
      11:44:43
    
  
  
  we will take our temperature in Kelvin subtract
  


  
    
      11:44:49
    
  
  
  273.15 then for Fahrenheit let's take temperature f for
  


  
    
      11:44:55
    
  
  
  Fahrenheit equals this is a little more complicated take our temperature in
  


  
    
      11:45:02
    
  
  
  Kelvin time 9 / 5 subtract
  


  
    
      11:45:10
    
  
  
  45967 okay so let's print the temperature in
  


  
    
      11:45:17
    
  
  
  celsius let's look up Houston 36.467853
  


  
    
      11:45:27
    
  
  
  [Music]
  


  
    
      11:45:43
    
  
  
  self. temperature label I'll just copy this then we will set the text I'll use
  


  
    
      11:45:50
    
  
  
  an F string add a placeholder I'll use Fahrenheit but feel free to use
  


  
    
      11:45:57
    
  
  
  celsius then I will add a degree symbol with Windows make sure numb lock is on
  


  
    
      11:46:02
    
  
  
  hold alt then on your numpad type 0176 for a degree symbol then f for
  


  
    
      11:46:10
    
  
  
  Fahrenheit let's look up get the weather and here's the
  


  
    
      11:46:16
    
  
  
  temperature 94.9 64 now let's say I would like no digits after the decimal I
  


  
    
      11:46:23
    
  
  
  can add a format specifier after our temperature I'll add a colon 0f to display no
  


  
    
      11:46:30
    
  
  
  decimals let's try that again I will look up Miami get the weather the
  


  
    
      11:46:37
    
  
  
  current temperature in Fahrenheit is 95° Fahrenheit
  


  
    
      11:46:42
    
  
  
  now here's one issue let's say we display an air then display the weather if we display an err we're going to be
  


  
    
      11:46:49
    
  
  
  changing the font size so let's look up blah blah blah get
  


  
    
      11:46:54
    
  
  
  the weather City not found then let's look up Miami again get
  


  
    
      11:47:00
    
  
  
  the weather and the font size is a lot smaller so if we display the weather
  


  
    
      11:47:06
    
  
  
  let's reset the font size we can really just copy this line so within the display weather
  


  
    
      11:47:13
    
  
  
  method let's set the font size back to 75 what it was
  


  
    
      11:47:20
    
  
  
  originally let's try that again let's look up a city that doesn't
  


  
    
      11:47:25
    
  
  
  exist get the weather City not found then we'll look up the city that does exist like Miami and get the weather 95°
  


  
    
      11:47:35
    
  
  
  F now let's get a description of the weather we'll display that at the bottom in the center we'll display a picture or
  


  
    
      11:47:42
    
  
  
  an em but we'll handle that last now we need a description of the weather like is it sunny is it cloudy is
  


  
    
      11:47:49
    
  
  
  it raining so after we calculate the temperature so I'm going to print our
  


  
    
      11:47:56
    
  
  
  data again let's look up Los
  


  
    
      11:48:03
    
  
  
  Angeles So currently it's 85° Fahrenheit so for the weather description that is found at the Key of
  


  
    
      11:48:11
    
  
  
  weather we now within a list at index zero within our
  


  
    
      11:48:17
    
  
  
  list we'll look up the key of description which states clear
  


  
    
      11:48:22
    
  
  
  sky so we will create a local variable of weather
  


  
    
      11:48:30
    
  
  
  description equals access our data at the Key of
  


  
    
      11:48:40
    
  
  
  weather there's layers to this we're then within a list and actually it's a list with only
  


  
    
      11:48:48
    
  
  
  one item in it so add the index of zero then at the Key of
  


  
    
      11:48:57
    
  
  
  description that's going to return this description of clear
  


  
    
      11:49:03
    
  
  
  sky so we will take our description label self. description label let me
  


  
    
      11:49:10
    
  
  
  just copy it this one right
  


  
    
      11:49:15
    
  
  
  here then we will set the text and then pass in our weather
  


  
    
      11:49:23
    
  
  
  description what is the weather description of Los
  


  
    
      11:49:29
    
  
  
  Angeles 86° fhe and there's a clear sky okay now the last thing we're going
  


  
    
      11:49:36
    
  
  
  to do is add an emoji We'll add it right to the center between the temperature and the weather description you don't NE
  


  
    
      11:49:42
    
  
  
  necessarily have to but I think it'll look cool and that's a good enough reason so let's create another method to
  


  
    
      11:49:50
    
  
  
  handle that we will Define a method of get weather
  


  
    
      11:49:57
    
  
  
  Emoji or a picture if you would rather use a picture we don't need self
  


  
    
      11:50:02
    
  
  
  necessarily we're going to need a weather ID this method isn't going to rely on
  


  
    
      11:50:09
    
  
  
  any class data or instance data we could make it a static method I'll add a
  


  
    
      11:50:14
    
  
  
  decorator of static method in summary a static method we
  


  
    
      11:50:20
    
  
  
  haven't covered these for a little bit they belong to a class but don't require any instance specific data or any other
  


  
    
      11:50:28
    
  
  
  methods they're used as more of a utility tool we're going to be passing in a weather ID and returning an
  


  
    
      11:50:37
    
  
  
  emoji I'm going to show you where we can find that weather ID I'll use a print statement
  


  
    
      11:50:44
    
  
  
  I will print our data let's look up Miami again that's
  


  
    
      11:50:50
    
  
  
  the first thing that came to mind now at the Key of weather there's a
  


  
    
      11:50:57
    
  
  
  key of ID and the value is a three-digit number I'll show you this chart
  


  
    
      11:51:03
    
  
  
  depending on what this three-digit number is that cor responds to a certain group of weather so the 200 range is a
  


  
    
      11:51:11
    
  
  
  thunderstorm 300 is a drizzle 500 is rain 600 is
  


  
    
      11:51:17
    
  
  
  snow 700 is atmosphere like if there's a tornado or there's a volcanic
  


  
    
      11:51:25
    
  
  
  eruption 800 exactly is a clear sky anything that's 801 or above refers to
  


  
    
      11:51:31
    
  
  
  clouds so this ID is 803 we have broken clouds depending on what this ID is I
  


  
    
      11:51:39
    
  
  
  would like to return a certain Emoji based on the weather so we need this ID
  


  
    
      11:51:45
    
  
  
  I'll delete our print statement we no longer need it let's say before our weather description we will create a
  


  
    
      11:51:52
    
  
  
  local variable of weather ID equals access our data
  


  
    
      11:51:59
    
  
  
  object then access the key of weather the value at weather is a list
  


  
    
      11:52:08
    
  
  
  but this list only has one item in it so we need the index of operator at zero
  


  
    
      11:52:15
    
  
  
  and then we will access the key of ID the key is ID so our weather ID is
  


  
    
      11:52:23
    
  
  
  going to be a number a three-digit number okay everybody we're near the end
  


  
    
      11:52:28
    
  
  
  so after setting the temperature we're going to set the Emoji label self.
  


  
    
      11:52:35
    
  
  
  Emoji label and call the set text
  


  
    
      11:52:40
    
  
  
  method within the set text method we will call self. getwe Emoji
  


  
    
      11:52:48
    
  
  
  method this will return a string an emoji within a string but we have to
  


  
    
      11:52:54
    
  
  
  pass in our weather ID it's that three-digit number so now we are within our get
  


  
    
      11:53:01
    
  
  
  weather Emoji method depending on the range of that three-digit number we will return one of
  


  
    
      11:53:07
    
  
  
  a few emojis we could use a match case statement I think it's more complicated with with the match case statement we'll
  


  
    
      11:53:14
    
  
  
  use LF statements for Simplicity so if our weather
  


  
    
      11:53:20
    
  
  
  ID is greater than or equal to 200 and our weather ID is less than or equal to
  


  
    
      11:53:30
    
  
  
  232 now we have two conditions here linked with the and logical operator there is a shortcut to this and
  


  
    
      11:53:38
    
  
  
  actually py charm is telling me that there is we can simplify these Expressions instead of two separate
  


  
    
      11:53:45
    
  
  
  conditions we can combine them into one if 200 is less than or equal to our
  


  
    
      11:53:51
    
  
  
  weather ID and our weather ID is less than or equal to 232 if this one
  


  
    
      11:53:57
    
  
  
  combined condition is true then we will return an emoji so to add an emoji on Windows you
  


  
    
      11:54:05
    
  
  
  can hold on the window key and press semicolon so 200 to 232 that's for a
  


  
    
      11:54:13
    
  
  
  thunderstorm depending on the font style of your IDE some of these emojis might not display properly you can always just
  


  
    
      11:54:21
    
  
  
  copy them from someplace else I think that's better it's more
  


  
    
      11:54:27
    
  
  
  colorful than else if 300 is less than or equal to our
  


  
    
      11:54:33
    
  
  
  weather ID and our weather ID is less than or equal to
  


  
    
      11:54:41
    
  
  
  321 this this is for a partially cloudy Sky we will
  


  
    
      11:54:48
    
  
  
  return some clouds a partially cloudy sky and again I don't like that one so
  


  
    
      11:54:54
    
  
  
  let's use this one instead else if 500 is less than or
  


  
    
      11:55:02
    
  
  
  equal to our weather ID Which is less than or equal to
  


  
    
      11:55:10
    
  
  
  531 we will return
  


  
    
      11:55:19
    
  
  
  rain that's better 600 to
  


  
    
      11:55:25
    
  
  
  622 else if 600 is less than or equal to our weather
  


  
    
      11:55:31
    
  
  
  ID Which is less than or equal to
  


  
    
      11:55:37
    
  
  
  622 we will return snow
  


  
    
      11:55:46
    
  
  
  so 701 to 741 is missed or fog else if
  


  
    
      11:55:53
    
  
  
  701 is less than or equal to our weather
  


  
    
      11:55:58
    
  
  
  ID Which is less than or equal to 741 we will return some mist or
  


  
    
      11:56:09
    
  
  
  fog 762 specifically is for Ash like from a
  


  
    
      11:56:15
    
  
  
  volcano so else if our weather ID is directly equal to
  


  
    
      11:56:23
    
  
  
  762 we will return let's return a
  


  
    
      11:56:30
    
  
  
  volcano 771 is for a Squall that's a violent gust of wind else if our weather
  


  
    
      11:56:39
    
  
  
  ID is directly equal to
  


  
    
      11:56:45
    
  
  
  771 we will return let's return that a violent gust
  


  
    
      11:56:53
    
  
  
  of wind a Squall 781 is for a
  


  
    
      11:56:58
    
  
  
  tornado else if our weather ID is equal to
  


  
    
      11:57:04
    
  
  
  781 return a
  


  
    
      11:57:10
    
  
  
  tornado a 800 exactly is for a clear sky else if our weather ID is equal to
  


  
    
      11:57:20
    
  
  
  800 return a sun a sun
  


  
    
      11:57:27
    
  
  
  emoji else if 801 is less than or equal to our weather
  


  
    
      11:57:34
    
  
  
  ID Which is less than or equal to 804 we will return some clouds
  


  
    
      11:57:50
    
  
  
  now if there are no matches let's return an empty string to not display
  


  
    
      11:57:55
    
  
  
  anything okay let's do a test run let's look up
  


  
    
      11:58:03
    
  
  
  Miami we get scattered clouds it's 94° Los
  


  
    
      11:58:10
    
  
  
  Angeles get the we we have a clear sky and a sun now there's one fix we need to
  


  
    
      11:58:16
    
  
  
  make let's say that I make up a city again blah blah blah get the weather we
  


  
    
      11:58:24
    
  
  
  should clear our Emoji label and the weather description but we still get that error
  


  
    
      11:58:30
    
  
  
  message so after we display our error within the display error method after we
  


  
    
      11:58:36
    
  
  
  set the text of the temperature label let's take the Emoji label self. emoji
  


  
    
      11:58:44
    
  
  
  label and call the Clear method to clear it then we have to do this with the
  


  
    
      11:58:50
    
  
  
  description label self. description
  


  
    
      11:58:55
    
  
  
  label and call the Clear method now we should be able to clear it when we get
  


  
    
      11:59:02
    
  
  
  an error okay let's look up Houston get the weather few clouds
  


  
    
      11:59:10
    
  
  
  98° let's make up a City Pizza City get
  


  
    
      11:59:15
    
  
  
  the weather not found City not found and the Emoji label and the weather
  


  
    
      11:59:21
    
  
  
  description are cleared okay what if I type in nothing what happens let's get the weather we
  


  
    
      11:59:28
    
  
  
  have a bad request please check your input that's if we have an HTTP status
  


  
    
      11:59:34
    
  
  
  Cod to 400 we handled this exception bad request all right one last City what
  


  
    
      11:59:42
    
  
  
  about Paris let's get the weather it is 68° F and there's light
  


  
    
      11:59:49
    
  
  
  rain all right everybody so that is a weather app that you can make using python add it to your portfolio and
  


  
    
      11:59:56
    
  
  
  thanks for watching
  



  No results found
1.python tutorial for beginners



  
    
      0:00
    
  
  
  what's up everybody in this video I'm going to teach you everything you need to know to start coding with python I've
  


  
    
      0:06
    
  
  
  also included 20 different Hands-On projects to help you learn you can find the entire list in the description of
  


  
    
      0:12
    
  
  
  this video our final project will be a weather app that fetches real-time weather data from an API even if you've
  


  
    
      0:19
    
  
  
  never coded anything in your life before I'll walk you through the basics the ABCs of programming if that sounds good
  


  
    
      0:25
    
  
  
  to you then I encourage you to sit back relax and enjoy the
  


  
    
      0:32
    
  
  
  show this course doesn't cost you anything but if you would like to help me out you can help increase its reach
  


  
    
      0:38
    
  
  
  by hitting the like button leave a random comment down below and subscribe if you'd like to be a fellow bro thank
  


  
    
      0:44
    
  
  
  you I appreciate it I don't like boring introductions so I say we just jump
  


  
    
      0:49
    
  
  
  right in there's two things we'll need to download the first is a python interpreter to convert our written code
  


  
    
      0:56
    
  
  
  to machine code we're going to head to python.org or go to
  


  
    
      1:02
    
  
  
  downloads and download the latest version we will open this
  


  
    
      1:09
    
  
  
  executable if you're on Windows you'll want to check this checkbox add python
  


  
    
      1:14
    
  
  
  exe to path and we will install
  


  
    
      1:21
    
  
  
  now the setup was successful and that's all you need to do to download the python
  


  
    
      1:27
    
  
  
  interpreter the second download we'll need is an IDE an integrated development
  


  
    
      1:33
    
  
  
  environment basically a place where we can write code for idees there's two
  


  
    
      1:38
    
  
  
  popular choices when writing python code pycharm and vs code if you already use
  


  
    
      1:44
    
  
  
  vs code you can stick with that just be sure to download the python extension I find pycharm more beginner friendly if
  


  
    
      1:52
    
  
  
  you've never coded before if you would like to use pycharm go to jetb brains.com pycharm
  


  
    
      2:00
    
  
  
  and we will click this green download button there's two versions of py charm
  


  
    
      2:06
    
  
  
  the professional version and the community version the professional version is paid for I would not
  


  
    
      2:12
    
  
  
  recommend using it only because there's plenty of free Ides on the market we'll use the Community Edition the free one
  


  
    
      2:19
    
  
  
  because I don't like to pay for things and I'm sure you don't either select the correct download for your operating
  


  
    
      2:25
    
  
  
  system I'm running Windows I will download pycharm
  


  
    
      2:31
    
  
  
  we will open this executable click next you could select a
  


  
    
      2:37
    
  
  
  destination folder I'll keep it as is next I'll create a desktop
  


  
    
      2:43
    
  
  
  shortcut but you don't necessarily need to click next install and we'll just
  


  
    
      2:50
    
  
  
  have to give it a moment okay the setup is now complete
  


  
    
      2:57
    
  
  
  I'll check this check box to run py charm when we click close this window after opening py charm we're
  


  
    
      3:04
    
  
  
  going to create a new project you can rename your python project I'll keep it as is you can
  


  
    
      3:11
    
  
  
  select a location again I won't change that you can create a sample welcome script but for this tutorial we won't
  


  
    
      3:19
    
  
  
  let's select the latest python version and create our new
  


  
    
      3:25
    
  
  
  project in the menu to the left we're going to create a new python file file file new python
  


  
    
      3:34
    
  
  
  file let's name this file main but really you can name it anything
  


  
    
      3:40
    
  
  
  and select python file python files end with the py file
  


  
    
      3:49
    
  
  
  extension we should have our main python file within our python project folder
  


  
    
      3:54
    
  
  
  now we're going to print something to the console window within our main python file we're going to write a print
  


  
    
      4:00
    
  
  
  statement so type print add a set of parentheses between the set of
  


  
    
      4:06
    
  
  
  parentheses we will add a set of double quotes to print something or single
  


  
    
      4:11
    
  
  
  quotes either one my own preference is double quotes normally in a programming
  


  
    
      4:17
    
  
  
  tutorial the instructor would tell you to print something such as hello world
  


  
    
      4:22
    
  
  
  but we like to be different here instead think of your favorite food
  


  
    
      4:28
    
  
  
  in this case I like pizza I will print I like
  


  
    
      4:34
    
  
  
  pizza to run our Python program we will click the screen Arrow to run our main
  


  
    
      4:40
    
  
  
  python file we should have a console window
  


  
    
      4:45
    
  
  
  that displays our output I like pizza or whatever your favorite food is let's
  


  
    
      4:51
    
  
  
  print another line of code let's
  


  
    
      4:56
    
  
  
  print it's really
  


  
    
      5:01
    
  
  
  good by adding a second print statement we are printing a second line of
  


  
    
      5:07
    
  
  
  code now we'll discuss comments the python interpreter doesn't
  


  
    
      5:12
    
  
  
  output comments to write a comment you use a pound sign I like to call this a
  


  
    
      5:18
    
  
  
  hashtag my comment will be this is my first Python
  


  
    
      5:25
    
  
  
  program comments are used as notes for yourself or for other people reading this code if I were to run this code
  


  
    
      5:33
    
  
  
  again this comment is not displayed to the output we still have I like pizza
  


  
    
      5:39
    
  
  
  it's really good all right everybody so that is your very first Python program
  


  
    
      5:44
    
  
  
  and in the next topic we'll discuss variables all right everybody we are
  


  
    
  2.variables



  
    
      5:50
    
  
  
  moving on to variables a variable is a container for a value there's four
  


  
    
      5:55
    
  
  
  different data types we'll discuss strings integers floats and and booleans
  


  
    
      6:01
    
  
  
  yes I know that's a silly name a variable behaves as if it was the value
  


  
    
      6:06
    
  
  
  it contains each variable should have a unique name let's say we have a variable
  


  
    
      6:11
    
  
  
  of first name to assign a variable you use the assignment operator of equals
  


  
    
      6:17
    
  
  
  for text a string is a series of text this can be double quotes or single
  


  
    
      6:22
    
  
  
  quotes my own preference is double quotes why don't you type in your first
  


  
    
      6:28
    
  
  
  name this very ible a first name will behave as if it was this value the
  


  
    
      6:33
    
  
  
  series of characters so to demonstrate this I'm going to print my first name
  


  
    
      6:41
    
  
  
  variable so place it within a print statement without quotes that will print
  


  
    
      6:46
    
  
  
  your first name now you don't want this within quotes because then you're literally
  


  
    
      6:53
    
  
  
  printing the word first name you could use your variable along
  


  
    
      6:59
    
  
  
  with some text by using what is called an F string that's the easiest way to display a variable so you type f then a
  


  
    
      7:07
    
  
  
  set of quotes the f means format so let's say the word hello then
  


  
    
      7:14
    
  
  
  we will add our variable we will insert our variable into this text when using an F string to do that you need a set of
  


  
    
      7:21
    
  
  
  curly braces then insert your variable so the result is hello whatever your
  


  
    
      7:28
    
  
  
  first name is in my case bro let's create another variable let's say we have a variable of
  


  
    
      7:36
    
  
  
  food food equals think of your favorite food for me I will type
  


  
    
      7:43
    
  
  
  Pizza let's print the following you like add a placeholder
  


  
    
      7:50
    
  
  
  again I'm using an F string our variable of food hello bro
  


  
    
      7:56
    
  
  
  you like pizza let's create an email use your own email or make up one
  


  
    
      8:03
    
  
  
  let's say my email is bro1 123
  


  
    
      8:10
    
  
  
  fake.com then let's print our email your email is at a placeholder
  


  
    
      8:19
    
  
  
  display our email variable your email is bro1 123
  


  
    
      8:27
    
  
  
  fake.com so these are string I'm going to add a comment that these
  


  
    
      8:32
    
  
  
  are strings a string is a series of characters they can include numbers but
  


  
    
      8:38
    
  
  
  we treat them as characters now we have integers an integer is a whole number an
  


  
    
      8:46
    
  
  
  example of this could be somebody's age how old are they according to my YouTube
  


  
    
      8:51
    
  
  
  statistics many of you are between the ages of 18 through 24 let's say that I'm
  


  
    
      8:56
    
  
  
  25 let me zoom in a little you're integer should not be within quotes
  


  
    
      9:02
    
  
  
  because it would be a string then technically if I would like to work with this variable again I'll use an F string
  


  
    
      9:10
    
  
  
  let's say you are at a placeholder display our age
  


  
    
      9:16
    
  
  
  variable years old you are 25 years
  


  
    
      9:22
    
  
  
  old another example of an integer could be a quantity you are buying a certain amount
  


  
    
      9:29
    
  
  
  of something maybe I am buying three items I wouldn't have half an item this
  


  
    
      9:35
    
  
  
  would be a float technically rather than an integer we are buying three of
  


  
    
      9:40
    
  
  
  something so let's print the following you are
  


  
    
      9:46
    
  
  
  buying at a placeholder display our quantity
  


  
    
      9:53
    
  
  
  items you are 25 years old you are buying three items
  


  
    
      10:00
    
  
  
  another example of an integer could be an amount of people let's say num of
  


  
    
      10:06
    
  
  
  students like a classroom there are 30 students in our
  


  
    
      10:11
    
  
  
  class then we will print your class has at a
  


  
    
      10:18
    
  
  
  placeholder students we will display the number of students num of
  


  
    
      10:26
    
  
  
  students your class has 30 students
  


  
    
      10:31
    
  
  
  those are integers they're whole numbers and again make sure they're not within quotes because then technically they
  


  
    
      10:37
    
  
  
  would be a string integers we can use in arithmetic Expressions if they were strings we
  


  
    
      10:45
    
  
  
  couldn't then we have floats float means floating Point
  


  
    
      10:51
    
  
  
  number a float is a number but it contains a decimal portion an example would be a price what is the price of
  


  
    
      10:58
    
  
  
  something $1.99 let's print our price print I'll
  


  
    
      11:03
    
  
  
  use an F string the price is add a placeholder display our
  


  
    
      11:10
    
  
  
  price the price is $10.99 let's preat our placeholder with
  


  
    
      11:15
    
  
  
  a unit of currency I'll pick American dollars but feel free to pick something else the price is
  


  
    
      11:22
    
  
  
  $10.99 so floats contain a decimal portion what about a grade point average
  


  
    
      11:28
    
  
  
  GP let's say my GPA is
  


  
    
      11:35
    
  
  
  3.2 then I will print your GPA
  


  
    
      11:43
    
  
  
  is display our GPA your GPA is
  


  
    
      11:50
    
  
  
  3.2 what about a distance a distance can contain a decimal portion
  


  
    
      11:56
    
  
  
  5.5 kilm Maybe then I will
  


  
    
      12:02
    
  
  
  print youan at a placeholder display our distance then I'll add km for kilometers
  


  
    
      12:10
    
  
  
  or you could add Mi for miles but I'll stick with kilometers you ran 5.5
  


  
    
      12:19
    
  
  
  km okay then we have booleans a Boolean is either true or
  


  
    
      12:27
    
  
  
  false let's say we're a student is student equals if we are a student we
  


  
    
      12:34
    
  
  
  could say that this is true true starts with a capital T if we weren't a student
  


  
    
      12:40
    
  
  
  let's say we graduate we could say that this is false again the first letter is
  


  
    
      12:46
    
  
  
  capital booleans only have two options true or false so let's say that I am a
  


  
    
      12:52
    
  
  
  student then I will print are you a student
  


  
    
      12:59
    
  
  
  then we will display our Boolean value of a student are you a student that is
  


  
    
      13:07
    
  
  
  true with Boolean values we really don't output them directly you're more likely
  


  
    
      13:12
    
  
  
  to see them used internally within a program such as when working with if statements this is a topic we'll discuss
  


  
    
      13:18
    
  
  
  in the future so don't worry you may see if is student if this variable is true
  


  
    
      13:27
    
  
  
  then we will print the following now we don't need to use an FST string we're not going to insert any variables
  


  
    
      13:34
    
  
  
  you are a student If This Were false we can add an else
  


  
    
      13:40
    
  
  
  Clause where we will print you are not a
  


  
    
      13:46
    
  
  
  student our variable of is student is true we will print the if statement you
  


  
    
      13:53
    
  
  
  are a student If This Were false we will print whatever is within else
  


  
    
      13:59
    
  
  
  you are not a student let's think of a few more examples is something for sale like a
  


  
    
      14:07
    
  
  
  car or a product of some sort let's say that is true I'll write another if
  


  
    
      14:13
    
  
  
  statement if for sale if this variable contains true we will do the
  


  
    
      14:20
    
  
  
  following let's print that item is for
  


  
    
      14:26
    
  
  
  sale else if it's false we will print something
  


  
    
      14:32
    
  
  
  else that item is not
  


  
    
      14:38
    
  
  
  available for sale is set to true this variable is true we will print
  


  
    
      14:44
    
  
  
  that item is for sale else if it were false we print that item is not
  


  
    
      14:52
    
  
  
  available one more example let's say we have a Boolean variable of is online is
  


  
    
      14:58
    
  
  
  somebody on online I will set that to true if is online if that's true we will
  


  
    
      15:07
    
  
  
  print you are online else we will
  


  
    
      15:12
    
  
  
  print you are offline is online is set to true we will
  


  
    
      15:19
    
  
  
  print you are online else if it were false we print your
  


  
    
      15:26
    
  
  
  offline all right everybody so those are variables a variable is a reusable container for a
  


  
    
      15:32
    
  
  
  value there's four basic data types for beginners a string which is a series of
  


  
    
      15:37
    
  
  
  text integers which are whole numbers floats which are numbers but they
  


  
    
      15:42
    
  
  
  contain a decimal portion and booleans which are either true or false they're
  


  
    
      15:48
    
  
  
  binary your assignment in the comment section is to post four variables post a
  


  
    
      15:54
    
  
  
  string an integer a float and a Boolean try and think a unique example if you
  


  
    
      16:00
    
  
  
  can and well everybody those are variables in Python all right everybody so we are
  


  
    
  3.type casting



  
    
      16:07
    
  
  
  moving on to type casting typ casting is the process of converting a variable
  


  
    
      16:12
    
  
  
  from one data type to another we have various functions to convert a value or
  


  
    
      16:18
    
  
  
  variable to a string an integer a float or a Boolean let's create some
  


  
    
      16:24
    
  
  
  variables we will create a name variable type in your full name name an age make up some
  


  
    
      16:33
    
  
  
  age a GPA for grade point average let's say minus
  


  
    
      16:38
    
  
  
  3.2 and a Boolean of a student are we currently a student let's
  


  
    
      16:44
    
  
  
  say that's true now you actually could get the data type of a variable or a value by using
  


  
    
      16:51
    
  
  
  the type function then pass in a value or variable however when I run this there's
  


  
    
      16:58
    
  
  
  no output so I need a print statement we will print what is returned
  


  
    
      17:04
    
  
  
  by the type function get the type of our name variable then print
  


  
    
      17:10
    
  
  
  it so our name variable is a string St Str our age
  


  
    
      17:16
    
  
  
  variable is an integer and int GPA is a
  


  
    
      17:25
    
  
  
  float is student is a Boolean using these typ cast functions we can convert
  


  
    
      17:31
    
  
  
  from one data type to another here's how let's start with something simple let's
  


  
    
      17:37
    
  
  
  convert our GPA to an integer currently it's a float I will reassign
  


  
    
      17:43
    
  
  
  GPA use the int function to typ cast to an integer then pass in my
  


  
    
      17:50
    
  
  
  GPA at the end we will print our GPA if we typ cast 3.2 to a whole
  


  
    
      17:57
    
  
  
  integer what would the result be a whole integer of three we truncate the decimal
  


  
    
      18:05
    
  
  
  portion let's convert our age to a floating Point number we will reassign our variable of
  


  
    
      18:11
    
  
  
  age use the typ cast function of float then insert our age
  


  
    
      18:17
    
  
  
  variable let's print our age variable and it should be a floating
  


  
    
      18:24
    
  
  
  Point number 25.0 now we'll cover strings let's typ
  


  
    
      18:31
    
  
  
  cast our age to be a string age equals call the typ cast function of string St
  


  
    
      18:38
    
  
  
  Str passing our age variable so the result is still going to
  


  
    
      18:45
    
  
  
  appear the same 25 however it's a string not an
  


  
    
      18:51
    
  
  
  integer and to prove that I will enclose my age variable with the type
  


  
    
      18:57
    
  
  
  function the type of variable age is a string it would be the same as if we're
  


  
    
      19:03
    
  
  
  taking this number and enclosing it within quotes So this would make a difference
  


  
    
      19:10
    
  
  
  because let's say that I add one to age age plus equals
  


  
    
      19:15
    
  
  
  1 well we would get a type error can only concatenate strings not integers to
  


  
    
      19:21
    
  
  
  a string however if I were to add a string of one to the end we would be using
  


  
    
      19:27
    
  
  
  string concat ation so let's say it's my birthday and I add one to 25 well since
  


  
    
      19:34
    
  
  
  we're working with strings now the result would be 251 I am 251 years
  


  
    
      19:41
    
  
  
  old so strings and numbers behave differently with numbers we can use them
  


  
    
      19:47
    
  
  
  within arithmetic Expressions strings not so much we will take our name
  


  
    
      19:53
    
  
  
  variable and typ cast it to a Boolean name
  


  
    
      19:59
    
  
  
  equals call the typ cast function of BU passing our name
  


  
    
      20:04
    
  
  
  variable this has an interesting result so I'm going to print name booleans are
  


  
    
      20:10
    
  
  
  either true or false if I typ cast my string of text into a
  


  
    
      20:16
    
  
  
  Boolean that gives me true now it really doesn't matter what I write here if I were to change my name
  


  
    
      20:23
    
  
  
  to a single character such as B this would still be true if our string
  


  
    
      20:29
    
  
  
  variable was empty there were no characters within it that would actually give us
  


  
    
      20:34
    
  
  
  false we could use this to check to see if somebody enters in their name or not if somebody types in their name then we
  


  
    
      20:41
    
  
  
  typ cast it to a Boolean if somebody skips entering in their name that would return false we could reprompt the user
  


  
    
      20:49
    
  
  
  to enter in their name again all right everybody so that is typ casting it is the process of converting a variable
  


  
    
      20:56
    
  
  
  from one data type to another this is especially useful with handling user input because user input is always
  


  
    
      21:04
    
  
  
  a string there may be at times where you want to convert it to an integer a float or a Boolean and well everybody that is
  


  
    
      21:11
    
  
  
  typ casting in Python all right everybody in this topic
  


  
    
  4.user input ⌨️



  
    
      21:17
    
  
  
  I'm going to show you how we can accept user input in Python we use the input function it's a function that prompts
  


  
    
      21:23
    
  
  
  the user to enter in data and it Returns the enter data as a string here's here's
  


  
    
      21:28
    
  
  
  an example to accept user input we will call the input function when I run this
  


  
    
      21:34
    
  
  
  program we need to enter in data to our console window like so then hit enter however we
  


  
    
      21:42
    
  
  
  need a prompt we need to tell the user what we want them to type in so let's ask a
  


  
    
      21:48
    
  
  
  question our prompt will be within quotes let's say what is your
  


  
    
      21:57
    
  
  
  name let's try this again what is your name I can type in something why don't
  


  
    
      22:02
    
  
  
  you go ahead and type in your full name then hit enter now with this input we're not
  


  
    
      22:09
    
  
  
  quite doing anything with it the input function is going to return some data as a string we can assign it to a variable
  


  
    
      22:16
    
  
  
  if we would like let's create a variable of name name equals our user
  


  
    
      22:23
    
  
  
  input then once we have our name let's print a message I'll use an F string we
  


  
    
      22:30
    
  
  
  will print hello add a placeholder then insert our name variable within that
  


  
    
      22:36
    
  
  
  placeholder let's try this what is your name type in your name
  


  
    
      22:42
    
  
  
  hit enter hello whatever your name is let's try a different name I will pick
  


  
    
      22:48
    
  
  
  SpongeBob many people are familiar with SpongeBob hello SpongeBob this time we will ask a user
  


  
    
      22:56
    
  
  
  how old they are let's assign a variable of age equals accept some user input we
  


  
    
      23:03
    
  
  
  need a prompt within quotes how old are
  


  
    
      23:09
    
  
  
  you once we have our age variable let's print I'll use an F string you are at a
  


  
    
      23:18
    
  
  
  placeholder our variable age years
  


  
    
      23:24
    
  
  
  old what is your name type in your name how old are you let's say that I'm
  


  
    
      23:32
    
  
  
  25 hello whatever your name is you are whatever your age is years
  


  
    
      23:39
    
  
  
  old all right so let's say that it's our birthday before we print our age
  


  
    
      23:45
    
  
  
  variable let's say happy
  


  
    
      23:50
    
  
  
  birthday since I'm not inserting any variables within this print statement this doesn't need to be an F string
  


  
    
      23:57
    
  
  
  you'll want to use an F string if you want to insert variables before we display the user's
  


  
    
      24:03
    
  
  
  age let's take the user's age and increase it by one we could say age
  


  
    
      24:08
    
  
  
  equals age + 1 but there's one problem with
  


  
    
      24:14
    
  
  
  this type in a name how old are you type in an
  


  
    
      24:20
    
  
  
  age and we have a problem we have a type error can only concatenate strings not
  


  
    
      24:27
    
  
  
  integers to strings when we accept user input we store that input as a string before we
  


  
    
      24:35
    
  
  
  increment our age by one we'll need to convert it to an integer we can't normally use strings within arithmetic
  


  
    
      24:42
    
  
  
  Expressions but we can do that with integers and floats though after we accept some user input for our age
  


  
    
      24:49
    
  
  
  variable we could take our age variable and typ cast it as an integer which we
  


  
    
      24:56
    
  
  
  talked about in the previous lesson so let's say age equals our age after we
  


  
    
      25:02
    
  
  
  typ cast it then increment it by one so type in your
  


  
    
      25:08
    
  
  
  name type in an age and we get this message hello your
  


  
    
      25:14
    
  
  
  name happy birthday you are whatever your age is years
  


  
    
      25:19
    
  
  
  old so strings we can't normally use with arithmetic Expressions we would
  


  
    
      25:24
    
  
  
  have to typ cast it to an integer or a float however we could condense some of these steps we're taking up an extra
  


  
    
      25:32
    
  
  
  line to type cast our age as an integer what we could do instead is that when we
  


  
    
      25:37
    
  
  
  accept our user input we can enclose the input function within a typ cast to int
  


  
    
      25:44
    
  
  
  and that would work the same type in your name type in an
  


  
    
      25:50
    
  
  
  age and this works the same and it takes less lines of code and is more readable
  


  
    
      25:56
    
  
  
  I would say when we accept user input it returns that input as a string data type
  


  
    
      26:02
    
  
  
  then we just have to typ cast it to another data type if we need to and in this case for age we do now we'll go
  


  
    
      26:09
    
  
  
  over a couple exercises because it's important to practice what you've learned in this first exercise we're
  


  
    
      26:15
    
  
  
  going to calculate the area of a rectangle we need to prompt the user to enter in a length and the width of a
  


  
    
      26:22
    
  
  
  rectangle so we will create a variable of length we will accept some user input
  


  
    
      26:28
    
  
  
  using the input function what is our prompt let's say enter the
  


  
    
      26:35
    
  
  
  length let's do this with width I'll just copy and paste what we have width
  


  
    
      26:41
    
  
  
  equals enter the width so we have the length and the
  


  
    
      26:47
    
  
  
  width to get the area of a rectangle we have to multiply the length by the width
  


  
    
      26:52
    
  
  
  so let's say area equals our length variable now to use mult multiplication
  


  
    
      26:59
    
  
  
  you use an asterisk we'll discuss different arithmetic operators in the next lesson so we have length time width
  


  
    
      27:06
    
  
  
  that is the area I'm going to print our area because I need to test something
  


  
    
      27:14
    
  
  
  enter the length let's say 5 5 in 5 cm doesn't matter enter the width six we
  


  
    
      27:23
    
  
  
  get a type error can't multiply sequence by non-int non- integer of type string
  


  
    
      27:30
    
  
  
  when we accept user input it returns a value of the string data type we can't use those strings in arithmetic
  


  
    
      27:37
    
  
  
  Expressions we're multiplying the length times the width we would need to tycast
  


  
    
      27:42
    
  
  
  them as an integer or a float since we're working with basic geometry such as calculating the area let's do float
  


  
    
      27:50
    
  
  
  so let's typ cast our user input as a float for both length and width
  


  
    
      28:00
    
  
  
  okay let's try this again let's say 5 * 6 the area that's returned to us is 30
  


  
    
      28:08
    
  
  
  30.0 this result contains a decimal it's a floating Point number a
  


  
    
      28:14
    
  
  
  float so when we print the area I'll use an F string this time the area is I'll
  


  
    
      28:22
    
  
  
  add a placeholder display our area variable let's add a unit of measurement
  


  
    
      28:28
    
  
  
  afterwards I'll pick centimet now since we're working with areas if we would
  


  
    
      28:33
    
  
  
  like to technically be accurate so we could say to the power of two or we
  


  
    
      28:38
    
  
  
  could add a superscript so if you would like superscript 2 and you're on Windows make sure numlock is on hold alt then
  


  
    
      28:46
    
  
  
  type on the numpad 0178 so we have a superscript of two
  


  
    
      28:53
    
  
  
  again it's not really necessary for this lesson I just think it'd be cool to include it because then it's technically
  


  
    
      29:00
    
  
  
  accurate all right let's say that the length is 6.1 and the width is
  


  
    
      29:07
    
  
  
  7.2 the area is 43.92 cm squared because we're working
  


  
    
      29:14
    
  
  
  with areas let's cover a second exercise this time we will create a shopping cart
  


  
    
      29:20
    
  
  
  program exercise two we're going to create a shopping cart program we need three variables an item a price and a
  


  
    
      29:28
    
  
  
  quantity of those items we will create a variable of item
  


  
    
      29:34
    
  
  
  we will accept some user input what item would you like to
  


  
    
      29:42
    
  
  
  buy what are we trying to purchase we'll keep the data type of the user input as
  


  
    
      29:47
    
  
  
  a string then we need a price what is the price of each item we're buying use the
  


  
    
      29:54
    
  
  
  input function what is the a
  


  
    
      30:00
    
  
  
  price a price should be a floating Point number for example we might have dollars
  


  
    
      30:05
    
  
  
  and sense we need a decimal so let's typ cast our input as a
  


  
    
      30:10
    
  
  
  float then a quantity we will accept some user
  


  
    
      30:16
    
  
  
  input our prompt will be how many would you
  


  
    
      30:25
    
  
  
  like quantities they should be whole numbers let's type cast our input as an
  


  
    
      30:32
    
  
  
  integer then we will have a total What's the total that we have to pay so let's
  


  
    
      30:38
    
  
  
  take the price of each item use an asterisk for multiply our
  


  
    
      30:44
    
  
  
  quantity then let's do a test run let's print our
  


  
    
      30:50
    
  
  
  total what item would you like to buy let's say a pizza what is the price $10.99
  


  
    
      30:58
    
  
  
  how many would you like I would like five pizzas and our total is
  


  
    
      31:06
    
  
  
  54.9 let's say that before we display the total let's print the following I'll
  


  
    
      31:12
    
  
  
  use an F string you have bought insert a placeholder display our
  


  
    
      31:20
    
  
  
  quantity X item or items I'll add SLS
  


  
    
      31:29
    
  
  
  then we will print I'll use an FST string again your total
  


  
    
      31:36
    
  
  
  is display our total what item would you like to buy I
  


  
    
      31:42
    
  
  
  would like to buy a pizza what is the price $10.99 how many would you like I would
  


  
    
      31:49
    
  
  
  like nine pizzas they're all for me I'm going to eat all of them you have bought 9 x pizzas your
  


  
    
      31:58
    
  
  
  total is 98.91%
  


  
    
      32:29
    
  
  
  all right everybody that is how to accept user input in Python and we've covered a few exercises in the next
  


  
    
      32:35
    
  
  
  topic we're going to create a Mad Libs game and that is how to accept user input in
  


  
    
      32:41
    
  
  
  Python all right everybody in this video we're going to create a game of Mad Libs not because we have to but because I
  


  
    
  5.madlibs game



  
    
      32:48
    
  
  
  want to it would be a good exercise for us just so we're more comfortable with accepting user input if you're not
  


  
    
      32:53
    
  
  
  familiar with Madlibs Madlibs is a word game where you create a story by filling in the blanks with random
  


  
    
      33:00
    
  
  
  words so we're going to create a story template the story is going to be missing some components we will fill in
  


  
    
      33:07
    
  
  
  those components with random words that we type in here's a story that I've written myself print use an FST string
  


  
    
      33:16
    
  
  
  today I went to a insert a placeholder
  


  
    
      33:22
    
  
  
  Zoo for our placeholder we'll insert an adjective we'll insert a variable named
  


  
    
      33:29
    
  
  
  adjective adjective adjective one you're going to get an English lesson today too
  


  
    
      33:35
    
  
  
  and adjective is a description of something so for our Zoo adjective one
  


  
    
      33:40
    
  
  
  could be expensive large dirty an adjective describe
  


  
    
      33:48
    
  
  
  something we'll fill this in when we accept user input for our second print statement
  


  
    
      33:54
    
  
  
  let's print the following in an
  


  
    
      33:59
    
  
  
  exhibit I saw a placeholder will include
  


  
    
      34:05
    
  
  
  a noun noun one a noun is a person place or thing in English maybe a gorilla a
  


  
    
      34:13
    
  
  
  gorilla named harambe for example print use an FST string let's
  


  
    
      34:20
    
  
  
  say our noun one whatever this is we can reuse variables was we will create a second
  


  
    
      34:29
    
  
  
  adjective adjective 2 we will be describing whatever noun
  


  
    
      34:35
    
  
  
  one is this person place or thing and we will insert a verb verb one a verb is an
  


  
    
      34:44
    
  
  
  action such as running or eating then for our last statement let's print I was
  


  
    
      34:53
    
  
  
  at a placeholder we'll create adjective three
  


  
    
      34:58
    
  
  
  adjective 3 will describe us now we're going to fill in these variables by accepting user input we're going to fill
  


  
    
      35:06
    
  
  
  in adjective one we'll accept user input using the input
  


  
    
      35:11
    
  
  
  function enter and adjective I'm going to add a reminder
  


  
    
      35:17
    
  
  
  that an adjective is a description of
  


  
    
      35:24
    
  
  
  something then we need noun one noun one equals
  


  
    
      35:30
    
  
  
  input enter a noun a noun is a person
  


  
    
      35:35
    
  
  
  place or thing then we have adjective two I'll
  


  
    
      35:41
    
  
  
  just copy adjective one paste it change one to
  


  
    
      35:46
    
  
  
  two then a verb verb one equals input enter a verb I want verb one to be
  


  
    
      35:55
    
  
  
  in current tense I'll ask ask the user to end the verb with ing enter a verb
  


  
    
      36:03
    
  
  
  ending withg then it's current tense our person
  


  
    
      36:10
    
  
  
  place or thing of noun one is currently doing something such as
  


  
    
      36:15
    
  
  
  eating and then adjective three and I'll just copy one of these adjectives
  


  
    
      36:20
    
  
  
  adjective three equals input enter an adjective okay and then we are ready to
  


  
    
      36:26
    
  
  
  run this enter an adjective an adjective describes something I will say
  


  
    
      36:34
    
  
  
  suspicious or some kids like to say sussy or sus even I've also heard of
  


  
    
      36:40
    
  
  
  kids nowadays using the word skibidi feel free to type in whatever you would like it is your story after all I'm
  


  
    
      36:48
    
  
  
  going to say suspicious enter a noun a person place
  


  
    
      36:53
    
  
  
  or thing I like to poke fun at Mark Zuckerberg so I'm going to say my person
  


  
    
      36:59
    
  
  
  is Mark Zuckerberg enter an adjective that is a
  


  
    
      37:05
    
  
  
  description angry enter a verb ending with ing so
  


  
    
      37:11
    
  
  
  it's current tense uh screeching enter an adjective
  


  
    
      37:19
    
  
  
  happy here's my story today I went to a suspicious zoo in an exhibit I saw a
  


  
    
      37:27
    
  
  
  Mark Zuckerberg Mark Zuckerberg was angry and screeching I was happy that's our game
  


  
    
      37:35
    
  
  
  of Mad Libs it's a word game where you create a story by filling in the blanks with random words also post the output
  


  
    
      37:43
    
  
  
  of your Mad Libs game in the comment section down below because I really want to read them I want to see what you guys
  


  
    
      37:48
    
  
  
  came up with and well everybody that is a Mad Libs game using
  


  
    
  6.arithmetic & math



  
    
      37:55
    
  
  
  python hey everybody in this video I'm going to show you all of the different math that we'll need throughout the rest
  


  
    
      38:01
    
  
  
  of the series I have a lot to cover and I'll split this video into different sections we'll cover some basic
  


  
    
      38:07
    
  
  
  arithmetic operators built-in math functions a few functions from the math
  


  
    
      38:12
    
  
  
  module and then a few exercises be sure to look at the time stamps if you would like to skip ahead to another section
  


  
    
      38:18
    
  
  
  let's begin with some really easy stuff we're going to cover some basic arithmetic operators let's say we have a
  


  
    
      38:24
    
  
  
  variable friends current ly you have zero friends
  


  
    
      38:29
    
  
  
  if you need to increment a variable by one you could say friends the name of
  


  
    
      38:35
    
  
  
  the variable equals the name of the variable again + one so the plus sign is
  


  
    
      38:41
    
  
  
  the addition operator and I think we do have a little bit of experience with that already so if I were to print my
  


  
    
      38:47
    
  
  
  variable friends guess what you now have one friend we could also shorten this line
  


  
    
      38:54
    
  
  
  of code you could say friends plus equals 1
  


  
    
      39:01
    
  
  
  that would do the same thing this is known as an augmented assignment
  


  
    
      39:06
    
  
  
  operator that will give you the same result I prefer to use augmented assignment operators just because they
  


  
    
      39:12
    
  
  
  take less text and I think they're easier to read now let's use subtraction friends equals
  


  
    
      39:20
    
  
  
  friends minus two so of course minus is the subtraction operator uh you have
  


  
    
      39:25
    
  
  
  netive -2 friends I guess if you were to use the augmented assignment operator that would be
  


  
    
      39:31
    
  
  
  friends minus equals 2 there you still have -2 friends okay
  


  
    
      39:38
    
  
  
  multiplication let's change friends to how about five friends equals friends
  


  
    
      39:46
    
  
  
  time 3 you now have 15 friends then the
  


  
    
      39:52
    
  
  
  augmented assignment operator version of this would be friends times equal
  


  
    
      40:01
    
  
  
  3 so again you have 15 friends let's cover
  


  
    
      40:07
    
  
  
  division friends equals friends divided
  


  
    
      40:12
    
  
  
  by 2 so we have 2.5 friends somebody was
  


  
    
      40:18
    
  
  
  cut in half we have half a friend maybe it's just their legs or torso or something then the augmented assignment
  


  
    
      40:24
    
  
  
  operator would be friends ID equal 2 and the result is still the
  


  
    
      40:33
    
  
  
  same now exponents friends equals friends to the power of two so if
  


  
    
      40:41
    
  
  
  friends is currently five friends to the power of two would be 5 * 5 which is
  


  
    
      40:50
    
  
  
  25 the augmented assignment operator version of this equation would be
  


  
    
      40:55
    
  
  
  friends exponent equals 2 and again friends is
  


  
    
      41:03
    
  
  
  25 then we have modulus modulus gives you the remainder of any division
  


  
    
      41:08
    
  
  
  suppose we have 10 friends instead of five I will assign a new variable
  


  
    
      41:14
    
  
  
  remainder remainder equals friends the percent sign is known as the modulus
  


  
    
      41:20
    
  
  
  operator it will give us the remainder of any Division if I were to divide my group of friends by three will have one
  


  
    
      41:28
    
  
  
  remaining I'll store the remainder within a separate variable we would have a remainder of one it's kind of like in
  


  
    
      41:34
    
  
  
  class when the teacher says for everybody in the class to go into groups at three then there's always that one
  


  
    
      41:39
    
  
  
  kid that's by themselves that's kind of the same concept we're dividing our friends into groups of three then the
  


  
    
      41:46
    
  
  
  modulus will give you the remainder if we divided our group of friends into groups of two well 10 divides by two
  


  
    
      41:53
    
  
  
  evenly so there is no remainder so that is the modulus oper operator it's fairly
  


  
    
      41:58
    
  
  
  popular to use this operator to find if a number is even or odd because it will divide by two evenly if that number is
  


  
    
      42:04
    
  
  
  even if the remainder is one that means that the original number is odd okay so yeah those are some basic arithmetic
  


  
    
      42:11
    
  
  
  operators addition subtraction multiplication division exponentiation then
  


  
    
      42:18
    
  
  
  modulus now what we're going to do is cover some built-in math related functions suppose we have three
  


  
    
      42:24
    
  
  
  variables x = 3.14 y =
  


  
    
      42:30
    
  
  
  4 Z = 5 it doesn't matter if these are floating Point numbers or whole integers
  


  
    
      42:37
    
  
  
  the first is the round function we have a variable named result I'm going to
  


  
    
      42:42
    
  
  
  round X so there is a built-in round function
  


  
    
      42:47
    
  
  
  after the set of parentheses we can add some value or variable to be rounded so
  


  
    
      42:53
    
  
  
  we will round x to the nearest whole integer then print the result so our
  


  
    
      43:00
    
  
  
  result is three so that's the round function with the absolute value
  


  
    
      43:07
    
  
  
  function we can find the absolute value of a number uh let's change y to be4
  


  
    
      43:13
    
  
  
  instead of four we'll take result equals ABS which
  


  
    
      43:19
    
  
  
  means absolute value of y the absolute value is the distance away from zero as
  


  
    
      43:25
    
  
  
  a whole number the absolute value of -4 is
  


  
    
      43:31
    
  
  
  4 let's change y back to four there's a built-in power
  


  
    
      43:39
    
  
  
  function result equals pow then we'll need a base and an
  


  
    
      43:46
    
  
  
  exponent what's y to the power of
  


  
    
      43:51
    
  
  
  3 that would be 4 * 4 * 4 which is 64
  


  
    
      43:56
    
  
  
  that the power function you can raise a base to a given power the next two are really useful
  


  
    
      44:04
    
  
  
  using the max function we can find the maximum value of various values what's
  


  
    
      44:10
    
  
  
  the maximum value between X Y and Z then I'll just need to store this value uh
  


  
    
      44:18
    
  
  
  results equals the max between X Y and Z well the maximum value is
  


  
    
      44:25
    
  
  
  five other wise there's
  


  
    
      44:31
    
  
  
  Min what's the minimum value between X Y and Z that would be
  


  
    
      44:38
    
  
  
  3.14 now in this next section we do have some very useful constants and functions from the math class but we'll need to
  


  
    
      44:45
    
  
  
  import the math module at the top of our text editor so import math if you need
  


  
    
      44:52
    
  
  
  the value of pi you'll type the name of the math module do PI and I'm just going
  


  
    
      44:59
    
  
  
  to print this print math. Pi the value of pi is
  


  
    
      45:06
    
  
  
  3.1459 and a bunch of digits that come after if you're working with physics I
  


  
    
      45:11
    
  
  
  do know that people use the constant e a lot we won't be using e in this video
  


  
    
      45:17
    
  
  
  series but if you ever need access to it just type math. e and that will give you
  


  
    
      45:22
    
  
  
  e which is 2.71 something something something I believe e is known as the exponential
  


  
    
      45:29
    
  
  
  constant if you need the square root of a number let's say result
  


  
    
      45:35
    
  
  
  equals math.sqrt we can place a variable or a
  


  
    
      45:41
    
  
  
  value within the square root function uh let's say we have X again x = 9 what is
  


  
    
      45:49
    
  
  
  the square root of x then I will print whatever the result is the square root of 9 is three that is
  


  
    
      45:58
    
  
  
  the square root function there's a ceiling function
  


  
    
      46:04
    
  
  
  result equals math do Seal Seal will always round a
  


  
    
      46:11
    
  
  
  floating Point number up suppose X is 9.1 so 9.1 rounded up is
  


  
    
      46:20
    
  
  
  10 otherwise there's floor which will always round a number down result equals
  


  
    
      46:26
    
  
  
  equal math. floor let's change X to
  


  
    
      46:31
    
  
  
  9.9 9.9 rounded down is nine those are some useful math functions let's go over
  


  
    
      46:39
    
  
  
  some exercises okay this first exercise we are going to calculate the circumference
  


  
    
      46:44
    
  
  
  of a circle we'll need the help of the math module because there's some good functions in there to calculate the
  


  
    
      46:51
    
  
  
  circumference of a circle the formula is 2 * < * r
  


  
    
      46:57
    
  
  
  let's ask a user for a radius because that's what R is we'll accept some user
  


  
    
      47:04
    
  
  
  input enter the radius of a
  


  
    
      47:10
    
  
  
  circle we will type cast the input as a floating Point
  


  
    
      47:16
    
  
  
  number to calculate the circumference again the equation is 2 *
  


  
    
      47:25
    
  
  
  pi we can get that from the math module times whatever the radius is and the
  


  
    
      47:31
    
  
  
  user is going to type that in then we will print whatever the circumferences print we'll use an FST
  


  
    
      47:39
    
  
  
  string the circumference is our variable
  


  
    
      47:47
    
  
  
  circumference enter the radius of a circle I'll enter 10 actually
  


  
    
      47:53
    
  
  
  10.5 their circumference is 65 .97 if you want to round and truncate some of
  


  
    
      47:59
    
  
  
  these numbers we can use the round function around circumference then round to a given
  


  
    
      48:06
    
  
  
  decimal place I'll round to two digits again 10.5 rounded is 65.9 7 you
  


  
    
      48:15
    
  
  
  could add a unit of measurement too let's say centim 10.5 is 65.9 7 cm all right that is the
  


  
    
      48:24
    
  
  
  first exercise for this next exercise let's calculate the area of a circle we'll
  


  
    
      48:30
    
  
  
  import the math module we'll ask for a radius much like before radius equals
  


  
    
      48:40
    
  
  
  input enter the radius of a circle we'll cast our input as a
  


  
    
      48:47
    
  
  
  floating Point number the equation for the area of a
  


  
    
      48:53
    
  
  
  circle is pi
  


  
    
      48:58
    
  
  
  times radius squared we could easily use the built-in power function to raise our
  


  
    
      49:04
    
  
  
  radius to the power of two then we will display the area print I'm using an F
  


  
    
      49:11
    
  
  
  string the area of the circle is our area to some unit of
  


  
    
      49:21
    
  
  
  measurement let's say centim squared and enter the radius of a circle
  


  
    
      49:29
    
  
  
  10.5 the area of the circle is 34636 but I would like to round this
  


  
    
      49:35
    
  
  
  number to two decimal places I'll use that round function and I'll Place area and the
  


  
    
      49:43
    
  
  
  number of digits to round two within this function let's try that again
  


  
    
      49:48
    
  
  
  10.5 the area of the circle is 34636 cm squared that is the second
  


  
    
      49:56
    
  
  
  exercise for this last program we're going to find the hypotenuse of a right triangle
  


  
    
      50:02
    
  
  
  the formula to calculate the hypotenuse of a right angled triangle is C = theare
  


  
    
      50:09
    
  
  
  < TK of A2 + b^2 we'll Begin by importing the math module we'll ask the
  


  
    
      50:15
    
  
  
  user for the lengths of side A and B A
  


  
    
      50:21
    
  
  
  equals input enter side
  


  
    
      50:27
    
  
  
  a we'll cast the input as a floating Point number we'll do the same thing with side
  


  
    
      50:36
    
  
  
  b b equals enter side
  


  
    
      50:44
    
  
  
  B now this part's going to be confusing we'll calculate C we'll need a^2 +
  


  
    
      50:50
    
  
  
  b^2 will take a to the power of two plus
  


  
    
      50:57
    
  
  
  B to the^ of two then we'll need the square root of all of this whatever the result is I
  


  
    
      51:05
    
  
  
  will surround this equation with math. square
  


  
    
      51:10
    
  
  
  root and that should give us our answer let's
  


  
    
      51:16
    
  
  
  print using an F string side C
  


  
    
      51:22
    
  
  
  equals whatever C is so enter side a three side B will be
  


  
    
      51:30
    
  
  
  four side C is five all right everybody so that was everything related to some
  


  
    
      51:36
    
  
  
  arithmetic operators and math related functions in Python and in the next video we're going to cover a few things
  


  
    
      51:42
    
  
  
  involving string [Music] formatting hey everybody in this topic
  


  
    
  7.if statements



  
    
      51:47
    
  
  
  I'm going to explain if statements an if statement is used to do some code only
  


  
    
      51:53
    
  
  
  if some condition we set is true l we could do something else it's a basic
  


  
    
      51:58
    
  
  
  form of decision making if it's true we do something if it's not true we don't do it let's ask a user for their age age
  


  
    
      52:07
    
  
  
  equals input enter your age I will type cast
  


  
    
      52:13
    
  
  
  the input as an integer depending on what the user's age
  


  
    
      52:18
    
  
  
  is we can do one of a few things let's pretend that the user would like to sign up for a credit card but in order to do
  


  
    
      52:25
    
  
  
  so their age needs to be greater than or equal to 18 well we can check that to
  


  
    
      52:30
    
  
  
  use an if statement type if then some condition what would we like to check
  


  
    
      52:36
    
  
  
  let's check to see if the user's age is greater than or equal to 18 then add a
  


  
    
      52:43
    
  
  
  colon then hit enter any code underneath the if statement should be indented make
  


  
    
      52:48
    
  
  
  sure to pay attention to that because that's easy to miss if the user's age is greater than or equal to 18 let's print
  


  
    
      52:56
    
  
  
  you are now signed up if I were to run this code I'll type
  


  
    
      53:03
    
  
  
  in my age I'll type 21 hit enter this statement is true therefore we will
  


  
    
      53:09
    
  
  
  execute any code found within the if statement you are now signed up what if this condition was not
  


  
    
      53:16
    
  
  
  true let's say my age is 13 well nothing happens if the condition we check is
  


  
    
      53:23
    
  
  
  instead false we skip over this code if you need to take a different course of action you could add an else
  


  
    
      53:31
    
  
  
  statement if this is true do this else we can do something
  


  
    
      53:37
    
  
  
  else let's print a different message you must be 18 plus to sign
  


  
    
      53:46
    
  
  
  up I'll type in my age again I'll say that I'm 13 hit enter you must be 18
  


  
    
      53:53
    
  
  
  plus to sign up that's basically an if statement do some code only if some
  


  
    
      53:59
    
  
  
  condition is true else you can do something else entirely it's a basic form of decision making the lse
  


  
    
      54:06
    
  
  
  statement is kind of like a last resort we can check more than one condition before reaching the lse statement we can
  


  
    
      54:13
    
  
  
  add an else if statement which we just shorten to e l
  


  
    
      54:18
    
  
  
  meaning else if else if let's check if age is less than zero
  


  
    
      54:27
    
  
  
  then we'll print a different message you haven't been born
  


  
    
      54:34
    
  
  
  yet now if I run this code I'll say that my age is NE
  


  
    
      54:40
    
  
  
  -1 this condition is false we skip this code this condition is true therefore we
  


  
    
      54:47
    
  
  
  will execute this code and we skip the lse statement you haven't been born yet
  


  
    
      54:53
    
  
  
  let's add another LF statement you can add as many El if statements as you want let's check to see if somebody's age is
  


  
    
      55:00
    
  
  
  greater than or equal to 100 we'll print a different message let's print you are too old to
  


  
    
      55:10
    
  
  
  sign up if I were to say my age is 111 years
  


  
    
      55:16
    
  
  
  old well it states you are now signed up the reason that we didn't reach this part of our else if statement that's
  


  
    
      55:23
    
  
  
  because this condition is still technically true you do need to pay attention to your order of if and else
  


  
    
      55:30
    
  
  
  if statements if I want to be sure that nobody over 100 is signing up I should
  


  
    
      55:36
    
  
  
  probably move this to the beginning if age is greater than or
  


  
    
      55:42
    
  
  
  equal to 100 then else if age is greater than or equal to 18 we'll do something
  


  
    
      55:50
    
  
  
  else and to your age I am 111 years old you are too old to sign up so those are
  


  
    
      55:56
    
  
  
  if statements if some condition is true do something else if you can check something else if no above conditions
  


  
    
      56:04
    
  
  
  are true you could do something else entirely it's kind of like the default here's another example we'll ask a user
  


  
    
      56:11
    
  
  
  if they would like some food response equals
  


  
    
      56:17
    
  
  
  input would you like food we'll have the user type in y for
  


  
    
      56:25
    
  
  
  yes or n for
  


  
    
      56:31
    
  
  
  no if our response now to check to see if two
  


  
    
      56:36
    
  
  
  values are equal you would use double equals if the response is equal to Y
  


  
    
      56:44
    
  
  
  then we will print have some
  


  
    
      56:50
    
  
  
  food the doubles equal sign is the comparison operator it will check to see
  


  
    
      56:55
    
  
  
  if two values are equal you don't want one equals because that's the assignment operator python in this case thinks
  


  
    
      57:02
    
  
  
  we're attempting to assign the character y to response so for comparisons use
  


  
    
      57:08
    
  
  
  double equals else we can
  


  
    
      57:15
    
  
  
  print no food for you so would you like food I'll type why
  


  
    
      57:23
    
  
  
  have some food let's try again I'll type no and
  


  
    
      57:28
    
  
  
  for no no food for you here's the third example we'll have
  


  
    
      57:34
    
  
  
  a user type in their name name equals input enter your
  


  
    
      57:42
    
  
  
  name if our name is equal to an empty string that means they didn't type in
  


  
    
      57:49
    
  
  
  anything so let's yell at the user you did not type in your
  


  
    
      58:00
    
  
  
  name else we will print using an F string hello whatever the name
  


  
    
      58:09
    
  
  
  is enter your name I'm just going to hit enter you did not type in your name
  


  
    
      58:15
    
  
  
  let's run this again I'll type in my name and we have executed the L
  


  
    
      58:20
    
  
  
  statement this time hello bro so one important thing that you
  


  
    
      58:25
    
  
  
  should know is the use of Boolean with if statements suppose we have some
  


  
    
      58:30
    
  
  
  Boolean variable named for sale I'll set this to be true now using an if
  


  
    
      58:36
    
  
  
  statement you can just use the Boolean variable in place of a condition because a condition would evaluate to be true or
  


  
    
      58:45
    
  
  
  false we could just say if for sale if that's true then let's
  


  
    
      58:53
    
  
  
  print this item is for
  


  
    
      58:58
    
  
  
  sale else we will print this item is not for sale for sale
  


  
    
      59:08
    
  
  
  is set to be true this item is for sale if this variable were
  


  
    
      59:15
    
  
  
  false well then the item is not for sale let's try a different variable how about
  


  
    
      59:22
    
  
  
  online if online
  


  
    
      59:27
    
  
  
  the user is online else the user is
  


  
    
      59:35
    
  
  
  offline so the user is offline I'll change the Boolean to true
  


  
    
      59:42
    
  
  
  the user is online so with if statements you can either write a condition or you could
  


  
    
      59:48
    
  
  
  use a Boolean all right everybody so those are if statements do some code only if some
  


  
    
      59:55
    
  
  
  condition is is true else you can do something else it's a basic form of decision making and those are if
  


  
    
      1:00:02
    
  
  
  statements in Python hey everybody this is a remake of
  


  
    
  8.calculator program



  
    
      1:00:08
    
  
  
  my python calculator program for absolute beginners all you need to know to complete this exercise is just if
  


  
    
      1:00:14
    
  
  
  statements and how they work so let's get started for this exercise a user is going to select an arithmetic Operator
  


  
    
      1:00:21
    
  
  
  Operator equals input we will ask the user to to enter n
  


  
    
      1:00:28
    
  
  
  operator this will be plus for addition minus for subtraction as risk for
  


  
    
      1:00:33
    
  
  
  multiplication and a forward slash for division you could enter more than this but I don't want to make this exercise
  


  
    
      1:00:40
    
  
  
  too complicated we will create a variable of num one to contain our first number let's say we would like to add
  


  
    
      1:00:47
    
  
  
  two numbers together what is the first number going to be enter the first number
  


  
    
      1:00:56
    
  
  
  and let's do this with the second number num two enter the second
  


  
    
      1:01:04
    
  
  
  number let me show you something I'm going to add num one and num two
  


  
    
      1:01:09
    
  
  
  together num one plus num two we'll do a test run enter an operator I would like to
  


  
    
      1:01:17
    
  
  
  use addition enter the first number 10 and 11 well the result is 101
  


  
    
      1:01:26
    
  
  
  when we accept user input they are string data types what we've ended up doing is string concatenation we've
  


  
    
      1:01:33
    
  
  
  concatenated the string of 11 to 10 that's why we ended up with 101 we'll have to convert these two
  


  
    
      1:01:40
    
  
  
  strings to be floating Point numbers by typ casting them as a
  


  
    
      1:01:49
    
  
  
  float so enclose your input functions with a typ cast a flat and now we should
  


  
    
      1:01:55
    
  
  
  be able to add those two numbers together so let's add 10 and 11 and we
  


  
    
      1:02:01
    
  
  
  get 21.0 depending on the operator that the user selects we'll use some if statements to determine that we will
  


  
    
      1:02:09
    
  
  
  check if our operator variable is equal to a character of
  


  
    
      1:02:16
    
  
  
  plus and for now I'll write pass as a placeholder we'll get back to this later
  


  
    
      1:02:21
    
  
  
  else if our operator is equal to minus we will use
  


  
    
      1:02:28
    
  
  
  subtraction and for now I'll write pass else if operator is equal to an
  


  
    
      1:02:34
    
  
  
  asterisk for multiplication we will multiply else if our operator is equal
  


  
    
      1:02:42
    
  
  
  to a forward slash for division we will divide if our operator is addition let's
  


  
    
      1:02:49
    
  
  
  create a variable of result result equals num one plus num
  


  
    
      1:02:55
    
  
  
  num two for subtraction it's going to be num one
  


  
    
      1:03:02
    
  
  
  minus num 2 multiplication would be num one times
  


  
    
      1:03:07
    
  
  
  num 2 then division would be num one divided
  


  
    
      1:03:13
    
  
  
  by num two then we just have to print the result print our
  


  
    
      1:03:19
    
  
  
  result be sure to do this with each of the LF statements as well and let's see what we have let's
  


  
    
      1:03:28
    
  
  
  add 5.5 + 6.9 that gives us
  


  
    
      1:03:35
    
  
  
  12.4 let's subtract 420 -
  


  
    
      1:03:41
    
  
  
  0.69 that gives us 41931 let's test
  


  
    
      1:03:47
    
  
  
  multiplication multiply 3.14 *
  


  
    
      1:03:52
    
  
  
  3.14 which gives us 9.85 96 then
  


  
    
      1:03:59
    
  
  
  division let's divide 69 by
  


  
    
      1:04:05
    
  
  
  13 and that gives us a really long number so you could round a number if
  


  
    
      1:04:10
    
  
  
  you would like we would enclose our result within the round
  


  
    
      1:04:16
    
  
  
  function and we'll just update each of these print statements this will round to the
  


  
    
      1:04:22
    
  
  
  nearest whole integer so let's divide 420 by
  


  
    
      1:04:28
    
  
  
  13 let's say that we would like three digits after the decimal within the
  


  
    
      1:04:33
    
  
  
  round function we could add comma 3 for three decimal
  


  
    
      1:04:39
    
  
  
  places enter an operator let's use division divide 420 by
  


  
    
      1:04:47
    
  
  
  69 so that gives me 6.87 so we can round to a given digit
  


  
    
      1:04:54
    
  
  
  after a decimal in in this case three places what if somebody types in an
  


  
    
      1:04:59
    
  
  
  operator that doesn't exist like the word pizza then I will divide two
  


  
    
      1:05:05
    
  
  
  numbers well let's add an L statement if somebody selects some input that is
  


  
    
      1:05:10
    
  
  
  invalid let's let them know I'll use an F string let's say that
  


  
    
      1:05:16
    
  
  
  the operator that the user has selected is not valid and let's try this
  


  
    
      1:05:24
    
  
  
  again enter operator Pizza enter the first number 420 and
  


  
    
      1:05:31
    
  
  
  69 Pizza is not valid let's say is not a valid operator instead that makes more
  


  
    
      1:05:39
    
  
  
  sense pizza will be my operator first number is 420 second
  


  
    
      1:05:45
    
  
  
  number is 69 Pizza is not a valid operator all right everybody so that is
  


  
    
      1:05:52
    
  
  
  a very simple python calculator program you can make make as a
  


  
    
      1:05:58
    
  
  
  beginner hey there it's me again in today's topic we're going to create a weight converter program in Python this
  


  
    
  9.weight conversion program 🏋️



  
    
      1:06:05
    
  
  
  is an exercise that will follow up the lesson on if statements we'll convert pounds to kilogram or kilog to pounds
  


  
    
      1:06:13
    
  
  
  the user is going to decide we will Begin by creating a weight variable we will assign some user
  


  
    
      1:06:19
    
  
  
  input enter your weight we will convert this input into a
  


  
    
      1:06:25
    
  
  
  floating Point number so add that cast then we will ask for a unit is this weight in kilog or
  


  
    
      1:06:33
    
  
  
  pounds input kilograms or
  


  
    
      1:06:41
    
  
  
  pounds we want the user to type in either K for kilogram or L for pounds
  


  
    
      1:06:48
    
  
  
  and these are capital letters by the way using an if statement let's first
  


  
    
      1:06:53
    
  
  
  check to see if our unit is equal to a capital K that means the
  


  
    
      1:06:59
    
  
  
  current weight is in kilogram we need to convert that weight to pounds let's reassign weight equal
  


  
    
      1:07:09
    
  
  
  to our weight times
  


  
    
      1:07:15
    
  
  
  2.205 else if unit is equal to l we need
  


  
    
      1:07:21
    
  
  
  to convert to kilog weight equals weight ided
  


  
    
      1:07:29
    
  
  
  2.205 else the user did not type in something that was valid let's
  


  
    
      1:07:34
    
  
  
  print using an F string unit was not
  


  
    
      1:07:42
    
  
  
  valid at the end of our program we will print the new weight I'll use an F
  


  
    
      1:07:48
    
  
  
  string your weight is our new weight after it's assigned
  


  
    
      1:07:56
    
  
  
  now we need a unit of measurement this is what I'm thinking we'll do within our if and else if statements let's reassign
  


  
    
      1:08:03
    
  
  
  our unit we're reassigning unit to be lbs for
  


  
    
      1:08:10
    
  
  
  pounds else if unit equals kgs for
  


  
    
      1:08:17
    
  
  
  kilogram in our results we will display our new unit let's take a look enter
  


  
    
      1:08:24
    
  
  
  your weight actually I'm just going to make one change I'm going to add colon
  


  
    
      1:08:29
    
  
  
  space there that's much better enter your weight let's say I'm 180 lb this is in
  


  
    
      1:08:38
    
  
  
  pounds I'll type capital L your weight in kilogram is 81.6 3 I think I'm going
  


  
    
      1:08:45
    
  
  
  to round this I will enclose the weight variable within a round function we will round to one decimal
  


  
    
      1:08:52
    
  
  
  place let's try this again ENT to your weight maybe I'm 81
  


  
    
      1:08:58
    
  
  
  kilg I'll type K for kilogram your weight is
  


  
    
      1:09:04
    
  
  
  178.6 lb let's make sure that this lse statement works too enter your weight 18
  


  
    
      1:09:11
    
  
  
  180 pizzas pizzas was not valid so we're
  


  
    
      1:09:16
    
  
  
  still displaying our output we would want to avoid that if somebody doesn't type in a valid unit so let's cut this
  


  
    
      1:09:23
    
  
  
  line then paste each within the if and else if
  


  
    
      1:09:29
    
  
  
  statements when we exit the else statement we're not printing the output so let's make sure that this
  


  
    
      1:09:36
    
  
  
  works and to your weight I am 180
  


  
    
      1:09:41
    
  
  
  pizzas pizza was not valid all right everybody well that is a
  


  
    
      1:09:46
    
  
  
  weight converter program in Python I thought this would be a helpful exercise now that we have finished the section on
  


  
    
      1:09:52
    
  
  
  if statements and yeah that is a weight converter program in
  


  
    
      1:09:58
    
  
  
  Python hey everybody in this topic we're going to create a temperature conversion program as an exercise we'll Begin by
  


  
    
  10.temperature conversion program 🌡️



  
    
      1:10:05
    
  
  
  asking what the current unit of measurement is unit equals we'll accept some user
  


  
    
      1:10:13
    
  
  
  input is this temperature
  


  
    
      1:10:19
    
  
  
  in Celsius or Fahrenheit
  


  
    
      1:10:29
    
  
  
  C slf then we will ask for the
  


  
    
      1:10:34
    
  
  
  temperature I'll store the temperature in a variable named temp meaning temperature temp equals
  


  
    
      1:10:42
    
  
  
  input enter the temperature then we should cast our user
  


  
    
      1:10:49
    
  
  
  input as a floating Point number if unit is equal to
  


  
    
      1:10:59
    
  
  
  C I'll fill this in momentarily I'm just going to write pass as a
  


  
    
      1:11:05
    
  
  
  placeholder else if unit is equal to F we will do something
  


  
    
      1:11:13
    
  
  
  else else let's print something just an error message of some sort using an
  


  
    
      1:11:20
    
  
  
  fstring unit is an invalid unit of
  


  
    
      1:11:29
    
  
  
  measurement Let's test this lse statement is the temperature in Celsius
  


  
    
      1:11:35
    
  
  
  or Fahrenheit what if I were to type K for Kelvin I'll make up some temperature like 100 K is an invalid unit of
  


  
    
      1:11:43
    
  
  
  measurement all right we know the L statement Works let's convert Fahrenheit to Celsius using this formula we will
  


  
    
      1:11:50
    
  
  
  take our temperature equals 9 * R
  


  
    
      1:11:58
    
  
  
  temp / 5 + 32 I'll take all of this and use the
  


  
    
      1:12:05
    
  
  
  round function we'll round to one decimal place then we will print the current
  


  
    
      1:12:12
    
  
  
  temperature in fahrenheit I'll use an F
  


  
    
      1:12:17
    
  
  
  string the temperature in Fahrenheit is
  


  
    
      1:12:26
    
  
  
  our temp variable degrees Fahrenheit Let's test this if
  


  
    
      1:12:33
    
  
  
  statement is the temperature in Celsius or Fahrenheit it is currently in Celsius what is 33° in Celsius converted
  


  
    
      1:12:42
    
  
  
  to Fahrenheit the temperature in Fahrenheit is 91.4 De all right so this section is
  


  
    
      1:12:50
    
  
  
  working let's work on the else statement else if our unit is currently inir
  


  
    
      1:12:55
    
  
  
  will convert to Celsius that formula is temp
  


  
    
      1:13:01
    
  
  
  equals our temperature - 32 * 5 /
  


  
    
      1:13:09
    
  
  
  9 then I will round the result to one decimal
  


  
    
      1:13:17
    
  
  
  place then we'll print the temperature in celsius the temperature in Celsius is is
  


  
    
      1:13:25
    
  
  
  temp de C for Celsius is the temperature in Celsius or
  


  
    
      1:13:32
    
  
  
  Fahrenheit it is currently in Fahrenheit enter the temperature
  


  
    
      1:13:40
    
  
  
  91.4 the temperature in Celsius is 33.0 De C well everybody that is a simple
  


  
    
      1:13:47
    
  
  
  temperature conversion program in Python
  


  
    
  11.logical operators 🌦️



  
    
      1:13:58
    
  
  
  all right people we're talking about logical operators today logical operators allow us to evaluate multiple
  


  
    
      1:14:04
    
  
  
  conditions we can link them together there's three we'll discuss or and not
  


  
    
      1:14:11
    
  
  
  we'll begin with OR with or we can check more than one condition if at least one
  


  
    
      1:14:16
    
  
  
  of those conditions is true then the entire statement is true here's an example let's say we have an outdoor
  


  
    
      1:14:23
    
  
  
  event and I will create two variables one temp meaning temperature let's say that this is in
  


  
    
      1:14:30
    
  
  
  Celsius 25° C pick Fahrenheit if you would like and I will create a Boolean
  


  
    
      1:14:36
    
  
  
  variable of is raining I will set that to be false it is currently not raining
  


  
    
      1:14:42
    
  
  
  if the temperature is too hot too cold or it's raining then I will cancel this
  


  
    
      1:14:48
    
  
  
  outdoor event we'll write an if statement to check that if our temp short for temperature is greater than
  


  
    
      1:14:56
    
  
  
  let's say 35 35° C then I'll use the or logical operator
  


  
    
      1:15:03
    
  
  
  or if our temp is less than zero or if is
  


  
    
      1:15:10
    
  
  
  raining is true if one of these conditions is true
  


  
    
      1:15:16
    
  
  
  we're going to cancel our outdoor event so let's print the following the outdoor
  


  
    
      1:15:23
    
  
  
  event is canell else we will print something
  


  
    
      1:15:31
    
  
  
  else the outdoor event is still
  


  
    
      1:15:39
    
  
  
  scheduled the temperature is reasonable and is raining is false it's not
  


  
    
      1:15:46
    
  
  
  raining so we print the else Clause the outdoor event is still
  


  
    
      1:15:51
    
  
  
  scheduled what if the temperature was really hot like 36°
  


  
    
      1:15:58
    
  
  
  C well the outdoor event is cancelled what if it's cold -5°
  


  
    
      1:16:05
    
  
  
  C the outdoor event is cancelled this condition was true therefore we execute
  


  
    
      1:16:10
    
  
  
  the if statement or what if the temperature is reasonable but it's raining is raining
  


  
    
      1:16:17
    
  
  
  is true well then the outdoor event is still canceled so with the or logical
  


  
    
      1:16:23
    
  
  
  operator at least one of these conditions needs to be true if one of these conditions is true you could
  


  
    
      1:16:29
    
  
  
  consider the entire statement true now let's cover and with and we can
  


  
    
      1:16:35
    
  
  
  link two conditions together both conditions must be true in order for that entire statement to be true so
  


  
    
      1:16:42
    
  
  
  again let's say we have temp short for temperature and we have a Boolean variable of is sunny I will set that to
  


  
    
      1:16:50
    
  
  
  be true we will check if our temp is greater than or equal to 28 degrees
  


  
    
      1:16:59
    
  
  
  C and is it sunny is
  


  
    
      1:17:04
    
  
  
  sunny if it's hot and if it's sunny if this is true let's print the
  


  
    
      1:17:11
    
  
  
  following it is hot outside for fun I'm going to add an
  


  
    
      1:17:17
    
  
  
  emoji but you don't have to I just think it's more entertaining that way but you do
  


  
    
      1:17:23
    
  
  
  you and I will press it is
  


  
    
      1:17:31
    
  
  
  sunny sometimes these emojis are formatted differently I'm just going to copy it from somewhere else that's
  


  
    
      1:17:36
    
  
  
  better currently the temperature is 25 25° C and it's sunny this condition was
  


  
    
      1:17:43
    
  
  
  false but this one is true with the and logical operator both conditions must be
  


  
    
      1:17:49
    
  
  
  true in order for us to execute this block of code if our temperature was 30 30 de C
  


  
    
      1:17:56
    
  
  
  well then both conditions are true it is hot outside and it is sunny
  


  
    
      1:18:02
    
  
  
  let's write a few more let's add else if else if the temp is less than or equal
  


  
    
      1:18:10
    
  
  
  to zero and is sunny we will print something
  


  
    
      1:18:16
    
  
  
  else it is cold outside I'll change the
  


  
    
      1:18:23
    
  
  
  Emoji and it is Sunny let's set the temperature to be
  


  
    
      1:18:29
    
  
  
  -5° C it is cold outside and it is sunny both these conditions are true so
  


  
    
      1:18:37
    
  
  
  we do this instead you can link as many conditions together as you would like let's see if
  


  
    
      1:18:43
    
  
  
  our temperature is within a certain range else if temp is less than
  


  
    
      1:18:50
    
  
  
  28 and our temp is greater than zero
  


  
    
      1:18:55
    
  
  
  and is sunny to check to see if something is within a certain range there is a
  


  
    
      1:19:01
    
  
  
  shortcut too py charm is recommending this we can simplify change
  


  
    
      1:19:07
    
  
  
  comparisons so this effectively does the same thing if 28 is greater than our
  


  
    
      1:19:12
    
  
  
  temp and our temp is greater than zero and it's sunny then we will print it is
  


  
    
      1:19:20
    
  
  
  warm outside rather than hot
  


  
    
      1:19:28
    
  
  
  and it's still sunny so let's say our temperature is 20° CSI and it's
  


  
    
      1:19:34
    
  
  
  sunny it is warm outside and it is sunny now we have the not logical
  


  
    
      1:19:41
    
  
  
  operator it inverts the condition we are checking to see if something is either not false or not true so let's check to
  


  
    
      1:19:49
    
  
  
  see if it's not Sunny really I'll just copy what we have and paste it
  


  
    
      1:19:58
    
  
  
  else if nut is
  


  
    
      1:20:03
    
  
  
  sunny then that means it's
  


  
    
      1:20:12
    
  
  
  cloudy and let's use a cloud
  


  
    
      1:20:19
    
  
  
  Emoji so basically not does the opposite of what you're looking for we are checking if not is sunny is sunny is
  


  
    
      1:20:27
    
  
  
  false then this condition is true okay let's say our temp is
  


  
    
      1:20:33
    
  
  
  208 is sunny is now false it is hot outside it is cloudy
  


  
    
      1:20:41
    
  
  
  what if our temperature was Zero it is cold outside it is cloudy
  


  
    
      1:20:48
    
  
  
  what if the temperature was reasonable like 20° C it is warm outside it is CL
  


  
    
      1:20:54
    
  
  
  cloudy so not it inverts the condition if it's true it's now false if it's
  


  
    
      1:21:00
    
  
  
  false it's now true all right everybody so those are logical operators they
  


  
    
      1:21:05
    
  
  
  allow us to evaluate multiple conditions with or at least one condition must be
  


  
    
      1:21:11
    
  
  
  true with and both conditions must be true and not not does the opposite it
  


  
    
      1:21:17
    
  
  
  inverts the condition we check if something is not false or not true and
  


  
    
      1:21:23
    
  
  
  well everybody those are local operators in Python hey everybody so today I got to
  


  
    
  12.conditional expressions



  
    
      1:21:30
    
  
  
  explain conditional expressions in Python a conditional expression is a
  


  
    
      1:21:35
    
  
  
  oneline shortcut for using an IFL statement if you're familiar with other programming languages this is also known
  


  
    
      1:21:42
    
  
  
  as the trary operator it behaves similarly using conditional Expressions
  


  
    
      1:21:47
    
  
  
  we can print or assign one of two values based on a condition here's the formula
  


  
    
      1:21:53
    
  
  
  return X if our condition is true else return y here's a basic example we will
  


  
    
      1:21:59
    
  
  
  create a variable for number just num let's say our number is five I'm going
  


  
    
      1:22:05
    
  
  
  to print then within our print statement I will write a conditional expression following this formula I'll just copy
  


  
    
      1:22:12
    
  
  
  and paste it let's check to see if our number is positive let's print the text
  


  
    
      1:22:19
    
  
  
  positive if our condition what are we checking let's check to see if if num is
  


  
    
      1:22:26
    
  
  
  greater than zero that means it's positive if this condition is false we
  


  
    
      1:22:31
    
  
  
  will instead print whatever comes after else else negative number is five that will
  


  
    
      1:22:38
    
  
  
  print positive if our number was neg5 well this condition would be false we
  


  
    
      1:22:44
    
  
  
  would instead print negative let's go over another let's check to see if our number
  


  
    
      1:22:50
    
  
  
  is even or odd let's set numb to be six
  


  
    
      1:22:56
    
  
  
  this time I will assign the result to a variable our result equals take our
  


  
    
      1:23:04
    
  
  
  formula let's assign even if our
  


  
    
      1:23:11
    
  
  
  num modulus 2 is our number divisible by two does that equal zero else return odd
  


  
    
      1:23:22
    
  
  
  then let's print our result
  


  
    
      1:23:27
    
  
  
  result number is six that is even if it's five then it's
  


  
    
      1:23:32
    
  
  
  odd assign even if our number is divisible by two else return
  


  
    
      1:23:40
    
  
  
  odd let's create variables A and B A will equal 6 B will equal
  


  
    
      1:23:50
    
  
  
  7 let's create a variable of Max num equals follow our formula
  


  
    
      1:23:59
    
  
  
  again return variable a if a is greater than b else return B between A and B
  


  
    
      1:24:08
    
  
  
  which is the maximum number that would be B of seven let's find the minimum
  


  
    
      1:24:14
    
  
  
  this time minum a if a is less than b else return
  


  
    
      1:24:23
    
  
  
  B the minimum number between six and seven is
  


  
    
      1:24:30
    
  
  
  six this time we'll take an age age equals 25 we will create a variable of status
  


  
    
      1:24:37
    
  
  
  equals use our formula again return a string of adult if our
  


  
    
      1:24:46
    
  
  
  age is greater than or equal to 18 else return a string of child then we will
  


  
    
      1:24:53
    
  
  
  print our status our age is 25 that's greater than or equal to 18 we will print adult if our
  


  
    
      1:25:00
    
  
  
  age was 13 then we are a child we will instead return
  


  
    
      1:25:06
    
  
  
  child let's work with the temperature temperature equals 30°
  


  
    
      1:25:13
    
  
  
  C so that's hot let's create a variable of weather
  


  
    
      1:25:19
    
  
  
  assign a string of hot if our temperature is greater than 20 else we
  


  
    
      1:25:27
    
  
  
  will return a string of cold what's the weather outside today based on the
  


  
    
      1:25:32
    
  
  
  temperature it is hot if our temperature was
  


  
    
      1:25:37
    
  
  
  20 then the weather is cold okay last
  


  
    
      1:25:42
    
  
  
  example we will work with a user role I will set this to be
  


  
    
      1:25:50
    
  
  
  admin we will Define a variable of access level
  


  
    
      1:25:55
    
  
  
  equals again follow our formula return the text of full access
  


  
    
      1:26:05
    
  
  
  if our condition of user rooll is equal
  


  
    
      1:26:10
    
  
  
  to a string of admin else we will
  


  
    
      1:26:15
    
  
  
  return limited access our user role is an admin let's
  


  
    
      1:26:22
    
  
  
  print our access level and we have full access but what if we were a
  


  
    
      1:26:27
    
  
  
  guest well then we have limited access all right everybody those are conditional Expressions they're a
  


  
    
      1:26:34
    
  
  
  oneline shortcut for the if else statement it's similar to the tary operator and other programming languages
  


  
    
      1:26:41
    
  
  
  using conditional Expressions we can print or assign one of two values based
  


  
    
      1:26:47
    
  
  
  on a condition you follow the formula of return X if our condition is true else
  


  
    
      1:26:53
    
  
  
  return y if it's false and well everybody those are a few examples of conditional expressions in
  


  
    
      1:27:02
    
  
  
  Python hey everybody in this topic I'm going to cover a few useful string Methods that you may be interested in
  


  
    
  13.string methods 〰️



  
    
      1:27:08
    
  
  
  then at the end of this video we will work on an exercise where we will validate some user input as we know a
  


  
    
      1:27:14
    
  
  
  string is just a series of characters let's ask a user for their full name
  


  
    
      1:27:20
    
  
  
  name equals input enter your full
  


  
    
      1:27:29
    
  
  
  name the first method I'll show you well technically this is a function the length function will give us the length
  


  
    
      1:27:36
    
  
  
  of a string how many characters is it we will find the length of our variable name after the user types in some input
  


  
    
      1:27:44
    
  
  
  this function returns an integer I'll store that result within a variable uh let's just say result then I will print
  


  
    
      1:27:52
    
  
  
  whatever the result is why don't you go ahead and type in your
  


  
    
      1:27:57
    
  
  
  full name the length of this string in my
  


  
    
      1:28:03
    
  
  
  example is eight characters that does include spaces too 1 2 3 4 5 6 7 8 if
  


  
    
      1:28:11
    
  
  
  you ever need the length of a string there is the length function let's move on if we were to type our variable name
  


  
    
      1:28:18
    
  
  
  followed by a DOT we have access to a whole bunch of different methods we have
  


  
    
      1:28:23
    
  
  
  the the find method the find method will return the first occurrence of a given
  


  
    
      1:28:29
    
  
  
  character the position let's find any spaces I'll store the results within a
  


  
    
      1:28:36
    
  
  
  variable named result I will type in my full
  


  
    
      1:28:43
    
  
  
  name the first occurrence of a space that's what we set is at position three
  


  
    
      1:28:48
    
  
  
  when working with indexes we always begin with zero this first character would have an index of 0 then 1 2 3
  


  
    
      1:28:57
    
  
  
  that's why the find method returned three in place of four let's find the first occurrence of a capital
  


  
    
      1:29:05
    
  
  
  B see it's zero how about
  


  
    
      1:29:12
    
  
  
  oh for me that would be two so remember it's always the first occurrence if you
  


  
    
      1:29:18
    
  
  
  need the last occurrence there is a different method which is all R find R meaning
  


  
    
      1:29:26
    
  
  
  reverse we will find the last occurrence of an
  


  
    
      1:29:33
    
  
  
  o that has a position of five 0 1 2 3 4
  


  
    
      1:29:39
    
  
  
  5 if python isn't able to locate a given character it will return ne1 let's find
  


  
    
      1:29:45
    
  
  
  any I don't know uh
  


  
    
      1:29:52
    
  
  
  Q's python could not find any lowercase cues the rfind method will return -1 if
  


  
    
      1:29:58
    
  
  
  there are no results we can capitalize the first letter in a string by using the capitalize function
  


  
    
      1:30:06
    
  
  
  name. capitalize this method will return a
  


  
    
      1:30:12
    
  
  
  string I will reassign that to name then we will print our name
  


  
    
      1:30:19
    
  
  
  capitalized I'll be sure to type in my name all lowercase
  


  
    
      1:30:24
    
  
  
  since this is all one string only the first letter is capitalized even though I'm including a first and last name the
  


  
    
      1:30:32
    
  
  
  upper method will take all of the characters in a string then make them all uppercase follow your variable that
  


  
    
      1:30:39
    
  
  
  contains a string followed by Dot Upper then I will reassign the result to my
  


  
    
      1:30:45
    
  
  
  name variable to overwrite it enter your full name all of the letters are now
  


  
    
      1:30:52
    
  
  
  uppercase there is also lower to make all of the characters
  


  
    
      1:30:57
    
  
  
  lowercase name equals name do
  


  
    
      1:31:05
    
  
  
  lower yep all the characters are lowercase now the is digit method will
  


  
    
      1:31:11
    
  
  
  return either true or false if a string contains only digits the result is a
  


  
    
      1:31:17
    
  
  
  Boolean true or false I'll store that within a variable named result then
  


  
    
      1:31:22
    
  
  
  print result so if I were to type in my full
  


  
    
      1:31:27
    
  
  
  name is digit returns false there are not only digits within that string if my
  


  
    
      1:31:34
    
  
  
  string was some combination of alphabetical characters and numbers this method will still return
  


  
    
      1:31:40
    
  
  
  false it only returns true if my string only contains
  


  
    
      1:31:45
    
  
  
  digits I'll just type in one 23 see that's true that is the isdigit
  


  
    
      1:31:52
    
  
  
  method otherwise wi we have is Alpha name. is
  


  
    
      1:31:59
    
  
  
  Alpha the is Alpha method will return a Boolean true or false depending if a
  


  
    
      1:32:05
    
  
  
  string contains only alphabetical characters I'll type in my full name so
  


  
    
      1:32:11
    
  
  
  the reason that this came up false is because my full name contains a space which is not an alphabetical
  


  
    
      1:32:19
    
  
  
  character if I typed in my full name excluding any spaces this would now be
  


  
    
      1:32:24
    
  
  
  true is Alpha would also return false if my name contained any sort of digits
  


  
    
      1:32:29
    
  
  
  foro 1 23 and that is also false that is the is Alpha
  


  
    
      1:32:36
    
  
  
  method now let's ask for a phone number phone number equals
  


  
    
      1:32:45
    
  
  
  input enter your phone number with the phone number they
  


  
    
      1:32:52
    
  
  
  typically contain dashes let's count how many dashes are going to be in somebody's phone
  


  
    
      1:32:58
    
  
  
  number phone number dot count method let's count the amount
  


  
    
      1:33:05
    
  
  
  of dashes so place a character within the account method this method will
  


  
    
      1:33:11
    
  
  
  return an integer let's store that within a variable results equals phone number. count
  


  
    
      1:33:18
    
  
  
  method so type in some phone number 1-23
  


  
    
      1:33:24
    
  
  
  4-56 7-8 901 we have three dashes within the
  


  
    
      1:33:30
    
  
  
  string 1 2 3 that is the count method we can count how many characters are within
  


  
    
      1:33:37
    
  
  
  a string we also have the replace method honestly the replace method is probably
  


  
    
      1:33:44
    
  
  
  one of the most useful methods of strings we can replace any occurrence with one character with another replace
  


  
    
      1:33:52
    
  
  
  let's replace any dashes with maybe a space this method will
  


  
    
      1:33:58
    
  
  
  return a new string I'm going to reassign this to our phone number variable then print the phone
  


  
    
      1:34:05
    
  
  
  number enter your phone number 1-2 3 4-56 7-8
  


  
    
      1:34:12
    
  
  
  901 so here's my new phone number but we've replaced all of the dashes with
  


  
    
      1:34:17
    
  
  
  spaces even better yet we could eliminate all the dashes completely by replacing the dashes or another
  


  
    
      1:34:24
    
  
  
  character with an empty string 1-2 3 4-56 7-
  


  
    
      1:34:33
    
  
  
  8901 here's our new phone number without any dashes we've replaced all dashes
  


  
    
      1:34:38
    
  
  
  with an empty string no characters if you would like a comprehensive list of all of the string Methods available to
  


  
    
      1:34:45
    
  
  
  you you can use the help function type in the data type Str strr meaning string
  


  
    
      1:34:50
    
  
  
  then I will print whatever the result is
  


  
    
      1:34:58
    
  
  
  here's a bunch of methods you might be interested in in the future capitalize case fold Center count en code ends with
  


  
    
      1:35:07
    
  
  
  just to name a few all right everybody here's an exercise for you we will
  


  
    
      1:35:12
    
  
  
  validate some user input we would like a user to enter in a valid username
  


  
    
      1:35:18
    
  
  
  however there's a couple rules the username can be no more than 12 characters long
  


  
    
      1:35:24
    
  
  
  the username must not contain any spaces and the username must not contain any
  


  
    
      1:35:31
    
  
  
  digits let's assign a variable named username equals
  


  
    
      1:35:37
    
  
  
  input enter a usern
  


  
    
      1:35:42
    
  
  
  name first let's check to see if our user input is more than 12 characters
  


  
    
      1:35:47
    
  
  
  long we can do that using the length function we will find the length of our
  


  
    
      1:35:53
    
  
  
  username the length function returns an integer let's check to see if the length of our
  


  
    
      1:36:00
    
  
  
  username is greater than 12 characters if it is we'll print a
  


  
    
      1:36:07
    
  
  
  message your user name can't be more than 12
  


  
    
      1:36:16
    
  
  
  characters else we will print using an FST
  


  
    
      1:36:22
    
  
  
  string well welcome whatever our username variable
  


  
    
      1:36:27
    
  
  
  is let's try it I'll type in my first name last name then add a whole bunch of
  


  
    
      1:36:34
    
  
  
  characters afterwards your username can't be more than 12
  


  
    
      1:36:40
    
  
  
  characters let's type in something that's under 12 characters yep and that appears to work
  


  
    
      1:36:48
    
  
  
  okay so we have accomplished task number one our username can't be more than 12
  


  
    
      1:36:54
    
  
  
  characters next our username must not contain any
  


  
    
      1:37:00
    
  
  
  spaces we can use the find method of a string username doind we will find any
  


  
    
      1:37:07
    
  
  
  spaces that's a character if no spaces are found this
  


  
    
      1:37:12
    
  
  
  method will return -1 using an else if
  


  
    
      1:37:18
    
  
  
  statement I'll add not if the find method of username
  


  
    
      1:37:27
    
  
  
  equals -1 if the result is not -1 meaning we
  


  
    
      1:37:34
    
  
  
  found a space we will print your username can't contain
  


  
    
      1:37:44
    
  
  
  spaces I'll type in my first and last name you might need to think of
  


  
    
      1:37:49
    
  
  
  something that's underneath 12 characters your username can't contain spaces so we have accomplished rule
  


  
    
      1:37:57
    
  
  
  number two three username must not contain digits we can use the is Alpha method of
  


  
    
      1:38:05
    
  
  
  strings the is Alpha method returns a Boolean if a string only contains
  


  
    
      1:38:10
    
  
  
  alphabetical characters so let's copy that I'll add another LF statement not
  


  
    
      1:38:18
    
  
  
  username is Alpha
  


  
    
      1:38:23
    
  
  
  then we will print your username
  


  
    
      1:38:30
    
  
  
  can't contain numbers I guess technically is Alpha would check for
  


  
    
      1:38:36
    
  
  
  spaces too but I'd rather have that be handled within a different if
  


  
    
      1:38:41
    
  
  
  statement all right I'll type in a username I'll include some
  


  
    
      1:38:47
    
  
  
  digits your username can't contain numbers all right I think we've
  


  
    
      1:38:52
    
  
  
  accomplished this let me make up a username following these three rules yep it seems to check out all
  


  
    
      1:39:01
    
  
  
  right everybody and that is a few useful string Methods that you may be interested
  


  
    
      1:39:07
    
  
  
  in hey everybody in this topic I'm going to explain string indexing indexing
  


  
    
  14.string indexing ✂️



  
    
      1:39:13
    
  
  
  allows us to access the elements of a sequence using a set of square brackets
  


  
    
      1:39:18
    
  
  
  also known as the indexing operator using this set of square brackets following a string there are up to three
  


  
    
      1:39:25
    
  
  
  fields that we can fill in we can access a starting point in the string an ending
  


  
    
      1:39:30
    
  
  
  point and a step here's an example suppose we have a credit card number
  


  
    
      1:39:36
    
  
  
  credit number equals and I'll just make up some number 1 2 3 4-5 6 7 8-
  


  
    
      1:39:45
    
  
  
  9012 d34 5 6 good enough if I need the
  


  
    
      1:39:50
    
  
  
  first character within the string I can type Ty the name of my string variable
  


  
    
      1:39:55
    
  
  
  followed by the indexing operator which is a set of square brackets the first position has an index of zero computers
  


  
    
      1:40:03
    
  
  
  always start with zero so that's why the first index is zero then I'm going to go ahead and print this print credit card
  


  
    
      1:40:10
    
  
  
  number at index of zero that would be one if I were to
  


  
    
      1:40:15
    
  
  
  change the index to be one 0 1 that should be two index 2
  


  
    
      1:40:23
    
  
  
  would technically be three then four is the dash within our string as you can see here with the
  


  
    
      1:40:30
    
  
  
  indexing operator there's up to three fields that we can fill in a start and
  


  
    
      1:40:35
    
  
  
  and step if you have just one field listed without any colons it's assumed
  


  
    
      1:40:40
    
  
  
  you're filling in the starting position so now what if you would like the first four digits of the
  


  
    
      1:40:47
    
  
  
  string well we would type the name of our string variable indexing operator
  


  
    
      1:40:54
    
  
  
  we'll need a starting index colon then an ending index the first four digits
  


  
    
      1:41:01
    
  
  
  would be 0 colon 4 then I will print
  


  
    
      1:41:09
    
  
  
  this and I'm just going to turn this first line into a comment yeah there we go we have the
  


  
    
      1:41:15
    
  
  
  first four digits of our credit card number 1 2 3 4 just so you know with the ending Index this index is exclusive
  


  
    
      1:41:23
    
  
  
  this first number would be 0er 1 2 3 4 so we did not include that Dash within
  


  
    
      1:41:30
    
  
  
  the number the starting index is inclusive the ending index is exclusive
  


  
    
      1:41:35
    
  
  
  so you can omit the zero in the beginning you could just say colon 4 python assumes the starting position
  


  
    
      1:41:42
    
  
  
  will be the beginning of the string so that would work too let's get the next
  


  
    
      1:41:48
    
  
  
  set of digits 56 78 credit number indexing operator Ator let's find where
  


  
    
      1:41:54
    
  
  
  the starting index would be 0 1 2 3 4 5
  


  
    
      1:42:00
    
  
  
  5 colon 6 7 8
  


  
    
      1:42:06
    
  
  
  9 then we will print whatever is
  


  
    
      1:42:11
    
  
  
  here the next set of digits is 5 6 7 8 maybe we need the last 12 digits well
  


  
    
      1:42:18
    
  
  
  what we could do in that case we will take our string variable credit number
  


  
    
      1:42:24
    
  
  
  set the starting index to be let's see 0 1 2 3 4
  


  
    
      1:42:30
    
  
  
  5 five colon if you need everything up to the end of the string you don't need
  


  
    
      1:42:35
    
  
  
  to list an ending index just be sure to add that colon python then assumes you need everything up to the end of the
  


  
    
      1:42:42
    
  
  
  string so I will print whatever we have then we should have everything
  


  
    
      1:42:47
    
  
  
  besides the first four digits yep 5 67 8 9 012 34 5
  


  
    
      1:42:54
    
  
  
  6 you could also use a negative index credit number if you need the last
  


  
    
      1:43:01
    
  
  
  last character in a string you would set the index to be -1 then I will print
  


  
    
      1:43:07
    
  
  
  this print credit number at index of -1 that would be
  


  
    
      1:43:14
    
  
  
  6 -2 is 5 -3 is 4-4
  


  
    
      1:43:23
    
  
  
  is three and then 5 would be that Dash right here yeah you can use negative indexes too let's talk about step using
  


  
    
      1:43:31
    
  
  
  the step field we can access the characters in a string by a given step we can count by twos or we can count by
  


  
    
      1:43:39
    
  
  
  threes so here's an example so let's take our credit number if we're not filling in the starting or ending Fields
  


  
    
      1:43:47
    
  
  
  but we need a step we would need two colons then python is assuming everything from the beginning of the
  


  
    
      1:43:53
    
  
  
  string to the end then our step will be two this will print every second
  


  
    
      1:43:59
    
  
  
  character within our string yeah here we are we have 1 3 Dash
  


  
    
      1:44:05
    
  
  
  6 8 9 1 so on and so
  


  
    
      1:44:11
    
  
  
  forth if I were to change the step to three we would count every third
  


  
    
      1:44:16
    
  
  
  character beginning with 1 4 6 Das
  


  
    
      1:44:24
    
  
  
  1 3 6 all right here's a practical example let's create a program to get
  


  
    
      1:44:30
    
  
  
  the last four digits of a credit card number I'm going to assign this to a new
  


  
    
      1:44:37
    
  
  
  variable last digits equals our credit
  


  
    
      1:44:46
    
  
  
  number indexing operator so we need the last four digits where would the
  


  
    
      1:44:51
    
  
  
  starting index begin well we could use negative indexing this last digit is1 -2
  


  
    
      1:44:58
    
  
  
  -34 we will begin at4 colon we can omit the ending index
  


  
    
      1:45:06
    
  
  
  python assumes we need the rest of the string then really that's all we need so let's
  


  
    
      1:45:12
    
  
  
  print I'll use an F string uh maybe some xes maybe we're
  


  
    
      1:45:17
    
  
  
  hiding somebody's credit card number except the last four digits
  


  
    
      1:45:23
    
  
  
  okay then variable last
  


  
    
      1:45:29
    
  
  
  digits all right and here's our credit card number where only the last four digits are visible hey you know what
  


  
    
      1:45:36
    
  
  
  let's add one more exercise let's reverse the characters in The String I'm
  


  
    
      1:45:41
    
  
  
  going to reassign credit number equals credit
  


  
    
      1:45:47
    
  
  
  number if we need the entire string we don't necessarily need a starting index
  


  
    
      1:45:53
    
  
  
  or an ending index but for the step this will be negative -1 will reverse a
  


  
    
      1:45:59
    
  
  
  string then let's print whatever our new credit card number is print credit
  


  
    
      1:46:06
    
  
  
  number and yeah there is our credit number backwards to reverse a string you
  


  
    
      1:46:12
    
  
  
  set the step to be NE -1 so yeah everybody that is string indexing in
  


  
    
      1:46:17
    
  
  
  Python we can access elements of a sequence using the indexing operator which is a set of straight brackets you
  


  
    
      1:46:24
    
  
  
  can list a starting position ending position and even a step if you need to skip over characters but yeah that is
  


  
    
      1:46:31
    
  
  
  string indexing in Python hey everybody in this topic I'm
  


  
    
  15.format specifiers



  
    
      1:46:37
    
  
  
  going to explain format specifiers format specifiers when used in the context of an F string they allow us to
  


  
    
      1:46:44
    
  
  
  format a value based on what flags are inserted following your value you would
  


  
    
      1:46:49
    
  
  
  type a colon and then some Flags depending on what flags you insert it will format your output a certain way
  


  
    
      1:46:56
    
  
  
  you could add decimal point Precision allocate space zero pad values left
  


  
    
      1:47:03
    
  
  
  justify right justify Center align all sorts of things let's have some practice
  


  
    
      1:47:09
    
  
  
  I'll create three prices price one price two price
  


  
    
      1:47:16
    
  
  
  three price one will be 3.14159 these values aren't in and cents
  


  
    
      1:47:23
    
  
  
  yet but they will be price two will be
  


  
    
      1:47:44
    
  
  
  [Music]
  


  
    
      1:47:52
    
  
  
  is price two price three is price three within our placeholder following the
  


  
    
      1:47:58
    
  
  
  value we can add a Colin then some Flags those flags are the format specifiers
  


  
    
      1:48:05
    
  
  
  they will format our value a particular way depending on what we insert after the colon to add decimal point Precision
  


  
    
      1:48:14
    
  
  
  you would type after the colon dot then the amount of decimals to be displayed
  


  
    
      1:48:20
    
  
  
  maybe two then F meaning Flo Point number let's do that with price two and
  


  
    
      1:48:25
    
  
  
  price three colon. 2f price one is now 3.14 price two is
  


  
    
      1:48:34
    
  
  
  987 65 price 3 is 12.34 I think I'm going to add some
  


  
    
      1:48:40
    
  
  
  dollar signs before the placeholder yeah that's much better for
  


  
    
      1:48:46
    
  
  
  Less Precision maybe one decimal place you can change the two to a one so. onef
  


  
    
      1:48:54
    
  
  
  each number only displays one decimal .1 6.3 whereas in 3F would display three
  


  
    
      1:49:02
    
  
  
  decimal places1 142 650 340 even though price two and price
  


  
    
      1:49:10
    
  
  
  three only have two decimal places in the original numbers we will concatenate some additional zeros to allocate space
  


  
    
      1:49:17
    
  
  
  to display a value after the colon add some number some number for that many spaces how about
  


  
    
      1:49:29
    
  
  
  10 each value now has a total of 10 spaces to display the output 1 2 3 4 5 6
  


  
    
      1:49:37
    
  
  
  7 8 9 10 if you were to preedee a number with zero well these numbers would be zero
  


  
    
      1:49:47
    
  
  
  padded each number is now zero padded to left justify a value you would use a
  


  
    
      1:49:53
    
  
  
  left angle bracket all these numbers are now left
  


  
    
      1:50:00
    
  
  
  Justified then we have all of the space after they're all uniform right justify
  


  
    
      1:50:07
    
  
  
  would be a right angle bracket and I believe that's the
  


  
    
      1:50:14
    
  
  
  default cental line I believe is the carrot
  


  
    
      1:50:21
    
  
  
  symbol yep our numbers are now centered if you have any positive values
  


  
    
      1:50:27
    
  
  
  and you would like to display a plus sign just use
  


  
    
      1:50:36
    
  
  
  plus any positive number is preceded with the plus sign any negative number is preceded with the negative sign or
  


  
    
      1:50:43
    
  
  
  you could use a space for any positive numbers so colon
  


  
    
      1:50:49
    
  
  
  space these numbers are lined up evenly even though we have a negative number number in here there is a thousand
  


  
    
      1:50:54
    
  
  
  separator which is a comma we should probably increase the
  


  
    
      1:51:00
    
  
  
  value of our prices 3,00 9,870
  


  
    
      1:51:08
    
  
  
  1,200 each thousand's place is now separated with a comma we could also mix
  


  
    
      1:51:13
    
  
  
  and match Flags I would like a thousand separator along with decimal point
  


  
    
      1:51:19
    
  
  
  Precision of two decimal places
  


  
    
      1:51:24
    
  
  
  and why not I will preedee each number with a plus sign if it's
  


  
    
      1:51:31
    
  
  
  positive yep here we are so based on what you're looking for you can add some combination of flags so yeah those are
  


  
    
      1:51:39
    
  
  
  format specifiers everybody within your placeholder insert your value a colon
  


  
    
      1:51:46
    
  
  
  then certain Flags based on what you're looking for exactly but yeah those are just a few
  


  
    
      1:51:51
    
  
  
  formats specified in Python hey everybody in this topic I'm
  


  
    
  16.while loops ♾️



  
    
      1:51:57
    
  
  
  going to explain while Loops a while loop will execute some code while some
  


  
    
      1:52:02
    
  
  
  condition remains true here's an example we'll use an if statement first we will ask a user for their name name equals
  


  
    
      1:52:10
    
  
  
  input enter your name if our name is equal to an empty
  


  
    
      1:52:18
    
  
  
  string that means the user didn't type in anything let's let's print a
  


  
    
      1:52:23
    
  
  
  message you did not enter your name
  


  
    
      1:52:29
    
  
  
  else we will print using an F string
  


  
    
      1:52:34
    
  
  
  hello our users's name if I were to skip this
  


  
    
      1:52:41
    
  
  
  prompt we would execute this if statement then we continue with the rest of the program what if I would like to
  


  
    
      1:52:47
    
  
  
  continually prompt the user to type in their name we can't continue until they type in something something well we
  


  
    
      1:52:53
    
  
  
  could replace this if statement with a while loop while this condition is true
  


  
    
      1:53:00
    
  
  
  continue to execute this code within the while loop I'm going to reprompt the user to type in a
  


  
    
      1:53:07
    
  
  
  name then if we were to exit the while loop then we will print hello whatever
  


  
    
      1:53:13
    
  
  
  your name is so let's run this enter your name I'm going to hit enter you did
  


  
    
      1:53:19
    
  
  
  not enter your name enter your name no no no okay I give up I'll type in my first
  


  
    
      1:53:24
    
  
  
  name hit enter hello whatever your first name is while this condition remains
  


  
    
      1:53:30
    
  
  
  true execute this code potentially forever until this condition is no
  


  
    
      1:53:35
    
  
  
  longer true so that's one of the main benefits of a while loop if it's not true then you exit out of the while loop
  


  
    
      1:53:42
    
  
  
  and that's why we're able to continue then print our name hello name you do want some way to escape out of the while
  


  
    
      1:53:48
    
  
  
  loop otherwise you'll run into what's known as an infinite Loop so let's say while name is equal to an empty string
  


  
    
      1:53:57
    
  
  
  we will print you did not enter your name so I'm going to hit enter so we are
  


  
    
      1:54:03
    
  
  
  stuck in an infinite Loop we can't actually escape this Loop we didn't give ourselves an exit
  


  
    
      1:54:09
    
  
  
  strategy that's why previously we repr prompted the user to type in something we're giving them a chance to escape in
  


  
    
      1:54:15
    
  
  
  a way it kind of works like an if statement but instead of executing some code once it's potentially infinite here
  


  
    
      1:54:22
    
  
  
  here's another example this time let's ask for a user's age age equals and I will convert the
  


  
    
      1:54:29
    
  
  
  input to an integer enter your
  


  
    
      1:54:34
    
  
  
  age we'll need the user to type in a positive number while age is less than
  


  
    
      1:54:44
    
  
  
  zero let's print a message to let the user know that they can't do that age can't be
  


  
    
      1:54:53
    
  
  
  negative then we need some strategy to escape let's reprompt the user to enter
  


  
    
      1:54:59
    
  
  
  in their age once they type in something that's valid we can escape out of the while
  


  
    
      1:55:05
    
  
  
  loop so let's print using an FST string you
  


  
    
      1:55:11
    
  
  
  are age years old so enter your age I'm going to say
  


  
    
      1:55:18
    
  
  
  negative 1 age can't be negative --2
  


  
    
      1:55:23
    
  
  
  1 million okay I give up how about 21 you are 21 years old so that was another
  


  
    
      1:55:29
    
  
  
  example while our age variable is less than zero repeat this code forever let's
  


  
    
      1:55:35
    
  
  
  go over example three I'm going to introduce some logical operators we will have the user
  


  
    
      1:55:42
    
  
  
  type in a food they like food equals input enter a food you like but in order
  


  
    
      1:55:51
    
  
  
  to escape I need to press Q to quit while food is equal to the letter
  


  
    
      1:56:01
    
  
  
  Q continue this while loop however I'm going to make one change we want to exit
  


  
    
      1:56:08
    
  
  
  the while loop when they press Q so you could say while not food equals Q So
  


  
    
      1:56:16
    
  
  
  within this while loop let's print the food that they stated that they like I'll use an F string you like your
  


  
    
      1:56:24
    
  
  
  variable food then we will prompt the user to enter in another food that they like
  


  
    
      1:56:30
    
  
  
  enter another food you like Q to quit then once we escape the while loop
  


  
    
      1:56:35
    
  
  
  we will print just buy okay enter a food you like C to quit
  


  
    
      1:56:42
    
  
  
  I like pizza you like pizza I like sushi you like sushi I like Ramen you like
  


  
    
      1:56:50
    
  
  
  Ramen okay this program kind of lame so I'm going to press Q to quit and we escape the while loop we have printed by
  


  
    
      1:56:58
    
  
  
  so you could do something while something is not true by using the not logical operator all right last example
  


  
    
      1:57:05
    
  
  
  example four we will use the or logical operator we'll ask a user to type in a
  


  
    
      1:57:10
    
  
  
  number between 1 and 10 let's say num equals
  


  
    
      1:57:17
    
  
  
  input enter a number between 1 through
  


  
    
      1:57:24
    
  
  
  10 then I will typ cast the input as an
  


  
    
      1:57:30
    
  
  
  integer while our number is less than one or our number is greater than 10
  


  
    
      1:57:40
    
  
  
  let's reprompt the user let's print using an FST string our variable
  


  
    
      1:57:47
    
  
  
  num is not valid then we will reprompt the
  


  
    
      1:57:53
    
  
  
  user enter a number between 1 and 10 once we escape the while loop then we
  


  
    
      1:57:59
    
  
  
  will print our number using an FST string your number is our variable
  


  
    
      1:58:07
    
  
  
  num enter a number between 1 through 10 0 Z is not valid
  


  
    
      1:58:15
    
  
  
  1 100 nope uh five your number is five
  


  
    
      1:58:21
    
  
  
  that's an example example of how you can add logical operators to Wild Loops while this condition is true or this
  


  
    
      1:58:28
    
  
  
  condition is true execute this code Forever all right everybody so those are while Loops a while loop will execute
  


  
    
      1:58:35
    
  
  
  some code while some condition remains true it's fairly useful for verifying
  


  
    
      1:58:40
    
  
  
  user input if a user types in some input that is not valid you can reprompt them
  


  
    
      1:58:45
    
  
  
  and there's many other uses that we'll discuss in the future but yeah those are while Loops in Python
  


  
    
  17.compound interest calculator



  
    
      1:58:53
    
  
  
  why hello everybody in today's video we'll be creating a compound interest calculator in Python for those that
  


  
    
      1:58:59
    
  
  
  don't know interest is a charge for the privilege of borrowing money to some individual or organization when you
  


  
    
      1:59:06
    
  
  
  place money in a bank account you typically acre interest we'll create a program to tell you what your new
  


  
    
      1:59:11
    
  
  
  balance will be after acre interest for so many years but the user is going to
  


  
    
      1:59:16
    
  
  
  decide the initial principle that's the investment the rate of interest and the time and years that this balance has
  


  
    
      1:59:22
    
  
  
  been acre interest so let's begin let's declare three variables a principle a
  


  
    
      1:59:28
    
  
  
  rate that is rate of interest and time time will be in years we've recently
  


  
    
      1:59:34
    
  
  
  learned about while Loops I would like to include those within this program just so we get the hang of using them we
  


  
    
      1:59:39
    
  
  
  will ask the user to type in an initial principal investment we will continue to prompt the user to type in a principle
  


  
    
      1:59:46
    
  
  
  that's above zero our condition will be while principal is less than or equal
  


  
    
      1:59:52
    
  
  
  equal to zero we will take our principal assign it some user
  


  
    
      1:59:58
    
  
  
  input enter the principal
  


  
    
      2:00:04
    
  
  
  amount then we would like to typ cast our input as a floating Point
  


  
    
      2:00:10
    
  
  
  number if our user input principal is less than or equal to zero we need to
  


  
    
      2:00:17
    
  
  
  inform the user principal
  


  
    
      2:00:22
    
  
  
  can't be less than or equal to
  


  
    
      2:00:29
    
  
  
  zero so I'm going to test my program by printing the principle at the end just
  


  
    
      2:00:36
    
  
  
  temporarily enter the principal amount I can't type A negative number and continue what if my investment was
  


  
    
      2:00:44
    
  
  
  $1,000 principal can't be less than or equal to zero how about zero nope can't
  


  
    
      2:00:49
    
  
  
  do that either is a th000 okay yep a th000 works that is for the
  


  
    
      2:00:55
    
  
  
  principle let's copy this while loop paste it replace principle with rate
  


  
    
      2:01:01
    
  
  
  this is the rate of interest enter the interest
  


  
    
      2:01:08
    
  
  
  rate interest rate can't be less than or equal to
  


  
    
      2:01:14
    
  
  
  zero and let's copy this again paste it change rate to time
  


  
    
      2:01:25
    
  
  
  let's typ cast our input as an integer because we're working with whole years enter the time in
  


  
    
      2:01:34
    
  
  
  years time can be less than or equal to zero I'm going to print my principle
  


  
    
      2:01:42
    
  
  
  rate and time we have
  


  
    
      2:01:48
    
  
  
  principle rate time okay we know that principle
  


  
    
      2:01:55
    
  
  
  Works enter the interest rate can my interest rate be ne1 no it can't can it
  


  
    
      2:02:01
    
  
  
  be zero nope how about 10 10% all right that works time can time be zero no it
  


  
    
      2:02:09
    
  
  
  can't can my time be netive 1 no it can't what about 3 years all right so we
  


  
    
      2:02:15
    
  
  
  know that our while Loops are working now here's the formula to calculate interest let's say our
  


  
    
      2:02:22
    
  
  
  total that's our total balance equals our principal
  


  
    
      2:02:29
    
  
  
  times 1 + r rate / 100 I'm going to
  


  
    
      2:02:35
    
  
  
  enclose this function with the set of parentheses this portion of our function will take our interest rate which is a
  


  
    
      2:02:41
    
  
  
  whole number then create a decimal enclose this function within the power
  


  
    
      2:02:46
    
  
  
  function raise this function to the power of time and that is how to
  


  
    
      2:02:52
    
  
  
  calculate compound interest then we will print the New Balance I'll use an FST
  


  
    
      2:03:00
    
  
  
  string balance after our variable
  


  
    
      2:03:05
    
  
  
  time the word years I'll add a placeholder we will add
  


  
    
      2:03:11
    
  
  
  our total then I'll include a dollar sign maybe this will be in dollars but pick
  


  
    
      2:03:17
    
  
  
  any unit of currency you would like I will format this variable with the format specify fire we will display two
  


  
    
      2:03:23
    
  
  
  decimal places 2f okay let's try this enter the
  


  
    
      2:03:29
    
  
  
  principal amount I invest $1,000 into maybe the stock market the interest rate is maybe 10%
  


  
    
      2:03:37
    
  
  
  this year the time in years will be one so after one year at 10% interest my
  


  
    
      2:03:44
    
  
  
  new balance is $1,100 let's try it one more time for good measure maybe $500 with an interest
  


  
    
      2:03:52
    
  
  
  rate of seven over 2 years your new balance would be $572
  


  
    
      2:03:57
    
  
  
  45 all right now there is another way of writing this program what if we would like to allow the user to enter in
  


  
    
      2:04:04
    
  
  
  values that are equal to zero while principle is less than zero if principal
  


  
    
      2:04:11
    
  
  
  is less than zero principal can't be less than zero let's do that for
  


  
    
      2:04:19
    
  
  
  rate interest can't be less than
  


  
    
      2:04:24
    
  
  
  zero time time can't be less than zero here's
  


  
    
      2:04:30
    
  
  
  what happens to our program remember that we're declaring our variables at the top uh nothing happens we go straight to
  


  
    
      2:04:37
    
  
  
  the results so the reason that this is happening is that when we reach the wild
  


  
    
      2:04:42
    
  
  
  Loops this condition is false from the beginning we never end up entering these while Loops we skip over them because
  


  
    
      2:04:50
    
  
  
  these three conditions are all false we can write a different variation of this while loop where we could say while true
  


  
    
      2:04:59
    
  
  
  true is a Boolean that means this while loop will continue forever unless we explicitly break out of the while loop
  


  
    
      2:05:06
    
  
  
  we're going to add an else Clause else we will break break will
  


  
    
      2:05:12
    
  
  
  break out of a loop with our second while loop change rate is less than zero to while true
  


  
    
      2:05:20
    
  
  
  then we will add an else CLI laws else break out of the loop while
  


  
    
      2:05:29
    
  
  
  true else break out of the loop we should be able to enter zero
  


  
    
      2:05:35
    
  
  
  values in now enter the principal amount 0 0 0 balance after 0 years is
  


  
    
      2:05:45
    
  
  
  0 this should work the same as before but we should be allowed to enter in zero values $1,000
  


  
    
      2:05:53
    
  
  
  interest rate of zero after one year is still $1,000 well okay then everybody I
  


  
    
      2:06:00
    
  
  
  thought that would be an interesting project to create now that we know how while loops work you could write either a standard while loop with a condition
  


  
    
      2:06:06
    
  
  
  such as principal is less than or equal to zero or you could say while true this
  


  
    
      2:06:13
    
  
  
  Loop would continue forever you would need to explicitly break out of the while loop using this break keyword
  


  
    
      2:06:20
    
  
  
  which we'll cover again in four Loops but yeah that is a compound interest calculator in
  


  
    
      2:06:27
    
  
  
  Python hey everybody in this topic I need to explain for Loops a for Loop will execute a block of code a fixed
  


  
    
  18.for loops



  
    
      2:06:35
    
  
  
  number of times you can iterate over a range a string a sequence anything that
  


  
    
      2:06:41
    
  
  
  is considered iterable I'll have more examples for you in future topics there is a lot of overlap where you could use
  


  
    
      2:06:47
    
  
  
  either a while loop or a for Loop but for Loops tend to be better in situations where you have to do something only a fixed number of times
  


  
    
      2:06:55
    
  
  
  here's an example suppose we need to count to 10 if we were to use a for Loop we could write something like this we
  


  
    
      2:07:01
    
  
  
  would type four then we would need some sort of counter typically you see people
  


  
    
      2:07:06
    
  
  
  write x 4 x in then we will use the
  


  
    
      2:07:11
    
  
  
  range function what number would we like to start at I would like to start at 1
  


  
    
      2:07:18
    
  
  
  then count to 10 but the second number is X exclusive so really we're going to
  


  
    
      2:07:23
    
  
  
  write 11 if we want to count to 10 so then colon then hit enter whatever code
  


  
    
      2:07:29
    
  
  
  you would like to repeat a certain number of times you will list underneath the for Loop and make sure the code is indented too I will print whatever our
  


  
    
      2:07:37
    
  
  
  counter X is when I run this code we will begin at one then stop once we
  


  
    
      2:07:42
    
  
  
  reach 11 so yeah there we are we have begun at one and we have counted all the way to
  


  
    
      2:07:49
    
  
  
  10 so that's the basic syntax for for Loop for some counter really you can
  


  
    
      2:07:54
    
  
  
  name this anything sometimes you'll see people name this as counter and that would work too but
  


  
    
      2:08:00
    
  
  
  let's stick with x in some range where would we like to begin where do we stop
  


  
    
      2:08:08
    
  
  
  okay now let's count backwards let's start at 10 then count down to zero when we escape the for Loop let's
  


  
    
      2:08:15
    
  
  
  print happy New Year when we print Happy New Year we are
  


  
    
      2:08:22
    
  
  
  outside of the for Loop to count backwards you can enclose your range function within the Reversed
  


  
    
      2:08:28
    
  
  
  function reversed so we begin at 10 count down to
  


  
    
      2:08:36
    
  
  
  one then print happy New Year in this case to count backwards you would enclose the range function within the
  


  
    
      2:08:43
    
  
  
  Reversed function there is an additional parameter too you could add that is the step if you would like to count by twos
  


  
    
      2:08:50
    
  
  
  you would add comma two so I'm going to get rid of happy New
  


  
    
      2:08:55
    
  
  
  Year let's print the numbers 1 through 10 but we will count by
  


  
    
      2:09:00
    
  
  
  twos and this does begin at one though so 1 3 5 7 9 if you were to change the
  


  
    
      2:09:07
    
  
  
  step to three you would count by threes beginning at 1 4 7 10 so the range
  


  
    
      2:09:14
    
  
  
  function isn't the only thing you can iterate over you can iterate over a string let's say we have a credit card
  


  
    
      2:09:19
    
  
  
  number credit card equals I'll make up some credit card number with
  


  
    
      2:09:28
    
  
  
  dashes that is good enough for X in credit card print x x will hold our
  


  
    
      2:09:36
    
  
  
  current position at first it'll be one then 2 3 4 dash so on and so forth so
  


  
    
      2:09:42
    
  
  
  here's our credit card number 1 2 3 4-5 6 78 I think you get the idea so you
  


  
    
      2:09:49
    
  
  
  can iterate over a string with the for loop as well we'll have a few projects involving that there are two useful
  


  
    
      2:09:56
    
  
  
  keywords as well these aren't exclusive to for Loops you can use these within while Loops as well they are continue
  


  
    
      2:10:02
    
  
  
  and break suppose we going to count to 20 for X in range we will begin at one
  


  
    
      2:10:10
    
  
  
  stop at 21 I think this is kind of a dumb example but it gets the point across 13
  


  
    
      2:10:15
    
  
  
  is considered an unlucky number right what if our counter reaches 13 I would like to skip over it well we can do that
  


  
    
      2:10:22
    
  
  
  with the continue keyword if x is equal to 13 we will
  


  
    
      2:10:28
    
  
  
  continue and skip over that iteration else we will print whatever
  


  
    
      2:10:33
    
  
  
  our counter is so let's take a look yeah we have the numbers 1 through
  


  
    
      2:10:41
    
  
  
  20 but we have skipped the number 13 to skip over an iteration you can use
  


  
    
      2:10:47
    
  
  
  the continue keyword whereas the break keyword we will break up of this Loop
  


  
    
      2:10:52
    
  
  
  entirely if x is equal to 13 then
  


  
    
      2:10:57
    
  
  
  break so yeah we have only counted to 12 once we reach 13 we have escaped the
  


  
    
      2:11:03
    
  
  
  loop so yeah everybody those are four Loops you can execute a block of code a
  


  
    
      2:11:08
    
  
  
  fixed number of times you can iterate over a range a string a sequence
  


  
    
      2:11:14
    
  
  
  anything that is considered iterable there is a lot of overlap where you could use either a while loop or a for
  


  
    
      2:11:19
    
  
  
  Loop while Loops tend to be better if you need to execute something possibly infinite amount of times such as when
  


  
    
      2:11:26
    
  
  
  you're accepting user input for example but yeah everybody those are four Loops in
  


  
    
  19.countdown timer program



  
    
      2:11:33
    
  
  
  Python what is going on everybody in today's topic we're going to be creating a countdown timer in Python we'll be
  


  
    
      2:11:40
    
  
  
  using what we learned in the previous topics let's begin we'll need to import the time module there's a pretty cool
  


  
    
      2:11:47
    
  
  
  function within the time module that is the sleep function type time do sleep
  


  
    
      2:11:53
    
  
  
  add a set of parenthesis within the set of parenthesis our program will
  


  
    
      2:11:59
    
  
  
  essentially sleep for a given amount of seconds like three after 3 seconds let's
  


  
    
      2:12:05
    
  
  
  print something this is just a demonstration times
  


  
    
      2:12:12
    
  
  
  up when I execute this code nothing happens for 3 seconds but after 3
  


  
    
      2:12:17
    
  
  
  seconds passes it displays our message times up so you can use the sleep function of the time module to sleep for
  


  
    
      2:12:24
    
  
  
  a given amount of time we will ask the user how long would they like to set the timer for we will create a variable
  


  
    
      2:12:32
    
  
  
  let's say my time my time will be in
  


  
    
      2:12:37
    
  
  
  seconds we will create a prompt enter the time in
  


  
    
      2:12:44
    
  
  
  seconds then we should typ cast our input as an integer
  


  
    
      2:12:51
    
  
  
  we'll need to create a loop we could use either a while loop or a four Loop there's a lot of overlap where you could
  


  
    
      2:12:57
    
  
  
  use either one I'll use a four Loop in this case four we'll need some sort of counter X in our
  


  
    
      2:13:06
    
  
  
  range Z through my
  


  
    
      2:13:12
    
  
  
  time after each iteration we will sleep for 1 second Let's test what we have so
  


  
    
      2:13:19
    
  
  
  far I would like to sleep for 3
  


  
    
      2:13:24
    
  
  
  seconds I think that's approximately three but now we are going to print whatever X is print x x is our
  


  
    
      2:13:35
    
  
  
  counter 0o 1 2 times up we're getting
  


  
    
      2:13:41
    
  
  
  somewhere but I would like to count backwards what we could do is enclose
  


  
    
      2:13:46
    
  
  
  our range function within the reverse function
  


  
    
      2:13:52
    
  
  
  but another technique that we can use is by using a step let's replace zero with my
  


  
    
      2:13:59
    
  
  
  time then end at zero but we will set the step to be Nega -1 then we can
  


  
    
      2:14:06
    
  
  
  increment backwards using this function that's another technique too to count backwards so let's wait for 3 seconds 3
  


  
    
      2:14:14
    
  
  
  2 1 times up now let's display a digital
  


  
    
      2:14:20
    
  
  
  clock of some sort but we would have to calculate how many hours minutes and seconds there are so let's calculate
  


  
    
      2:14:27
    
  
  
  seconds seconds equals x x is our counter
  


  
    
      2:14:32
    
  
  
  remember modulus 60 within our print statement we'll use
  


  
    
      2:14:37
    
  
  
  an F string we are displaying hours minutes and seconds I'll add some
  


  
    
      2:14:43
    
  
  
  placeholders for each of these fields we have seconds with our digital clock we
  


  
    
      2:14:49
    
  
  
  can't go above 60 for either seconds or minutes that's why I'm using modulus 60
  


  
    
      2:14:54
    
  
  
  the modulus operator gives you the remainder of any division let's begin at 11 so 11 10 9 so it is counting down but
  


  
    
      2:15:05
    
  
  
  I would like to add some zero padding and we can do that with a format specifier after seconds I will add colon
  


  
    
      2:15:13
    
  
  
  I need to display two digits then zero pad those digits let's try that again I
  


  
    
      2:15:19
    
  
  
  will wait for 11 seconds seconds 11 10 9 yeah and we do have some zero padding so
  


  
    
      2:15:26
    
  
  
  that's looking more and more like a digital clock let's add minutes then so to calculate minutes let's assign
  


  
    
      2:15:34
    
  
  
  variable minutes equal to x / 60 because
  


  
    
      2:15:40
    
  
  
  there's 60 seconds within a minute but then I'm going to typ cast the result as an
  


  
    
      2:15:48
    
  
  
  integer modulus 60 we would not like this field of minutes to go above 60 so
  


  
    
      2:15:55
    
  
  
  let's add a placeholder we're displaying minutes format specifier
  


  
    
      2:16:02
    
  
  
  02 now I'm going to wait for 65 seconds that is 1 minute and 5
  


  
    
      2:16:08
    
  
  
  Seconds then I just want to be sure that we go below a minute yep it's working then let's
  


  
    
      2:16:16
    
  
  
  calculate hours oh by the way to stop your program from running hit this red square up in the corner Corner let's
  


  
    
      2:16:22
    
  
  
  calculate hours hours equals x /
  


  
    
      2:16:28
    
  
  
  3,600 there's 3,600 seconds in an hour then we will typ cast the result as
  


  
    
      2:16:35
    
  
  
  an integer within our FST string we will
  


  
    
      2:16:42
    
  
  
  display ours format specifier
  


  
    
      2:16:47
    
  
  
  02 then I will run this program let's wait for for 3,65 seconds that is 1 hour and 5
  


  
    
      2:16:56
    
  
  
  Seconds and I just want to be sure that we go below 1 hour yeah all right so
  


  
    
      2:17:02
    
  
  
  that works so the reason that I didn't add modulus 24 I don't have days within my
  


  
    
      2:17:09
    
  
  
  fstring we can display any amount of hours I will exclude modulus
  


  
    
      2:17:15
    
  
  
  24 all right everybody well I thought that'd be some good practice with working with loops we should try and do
  


  
    
      2:17:20
    
  
  
  a as many exercises as we can and yeah that is a countdown timer program in
  


  
    
  20.nested loops



  
    
      2:17:28
    
  
  
  Python hey everybody so I guess in today's topic I'm going to be explaining nested Loops it looks like so a nested
  


  
    
      2:17:34
    
  
  
  Loop think of it as a loop found within the code of another loop you have a loop
  


  
    
      2:17:39
    
  
  
  right any code within that Loop is indented underneath that Loop well you could have a looping structure found
  


  
    
      2:17:46
    
  
  
  within the code of another looping structure the loop on the outside is the outer loop the internal Loop within the
  


  
    
      2:17:52
    
  
  
  outer loop is known as the inner loop where you'll encounter nested Loops it's really situational you could have a
  


  
    
      2:17:59
    
  
  
  while loop inside of a while loop a for Loop inside of a for Loop a for Loop inside of a while loop a while loop inside of a for Loop Etc so here's a
  


  
    
      2:18:07
    
  
  
  demonstration let's begin by displaying the numbers 1 through 9 but we'll use a loop for x x is our counter in range 1
  


  
    
      2:18:18
    
  
  
  comma 10 remember that the second number in this case 10 that's
  


  
    
      2:18:23
    
  
  
  exclusive then I will print our counter X this program will print the numbers 1
  


  
    
      2:18:31
    
  
  
  through 9 now we have an exercise at the end of this topic I should probably explain this feature so with a print
  


  
    
      2:18:38
    
  
  
  statement we end each print statement with a new line character if I need all of these numbers on the same line at the
  


  
    
      2:18:45
    
  
  
  end of my print statement I can add comma end equals an empty
  


  
    
      2:18:51
    
  
  
  string normally with a print statement each ends with a new line character but we can set that to be something
  


  
    
      2:18:58
    
  
  
  else so when I run this again all of these numbers are on the same line or
  


  
    
      2:19:03
    
  
  
  you could add a different symbol like Dash or a space each of these characters is now
  


  
    
      2:19:09
    
  
  
  separated with the space but let's stick with an empty string okay so we have used a loop to
  


  
    
      2:19:16
    
  
  
  count the numbers 1 through 9 what if I would like to repeat this three times
  


  
    
      2:19:22
    
  
  
  Well I could create another loop for X in range you could say 1 comma 4 or you
  


  
    
      2:19:30
    
  
  
  could just say three either way whatever code is within this Loop will be executed three times let's cut
  


  
    
      2:19:38
    
  
  
  our original for Loop then place it within the code of our new loop our
  


  
    
      2:19:44
    
  
  
  outer loop will have this code repeat entirely three separate times uh but we
  


  
    
      2:19:50
    
  
  
  do have one thing we need to pay attention to we have two counters with the same name you'll want to be sure
  


  
    
      2:19:56
    
  
  
  that they're different let's rename the counter of the inner loop to be y instead of X and be sure to change that
  


  
    
      2:20:03
    
  
  
  here as well now when I run this code we're completing let's see 27 iterations to
  


  
    
      2:20:11
    
  
  
  exit this four Loop we need to count the numbers 1 through n once we do so that
  


  
    
      2:20:16
    
  
  
  is one iteration of the outer loop but our outer loop is saying hey we still need three total iterations now if you
  


  
    
      2:20:23
    
  
  
  would like these on separate lines let's make this look a little different let's add each iteration of the outer loop
  


  
    
      2:20:29
    
  
  
  onto a new line so within the outer loop but not within the inner loop I'm going to
  


  
    
      2:20:37
    
  
  
  create just a blank print statement this will just print a new line let's try this
  


  
    
      2:20:42
    
  
  
  again with the inner loop we count the numbers 1 through n after we exit the for Loop we will print a new line then
  


  
    
      2:20:50
    
  
  
  repeat this all over again until our outer loop is satisfied so that's basically a nested loop it's just a loop
  


  
    
      2:20:57
    
  
  
  that's inside of another looping structure so let's create a project we're going to print a rectangle made of
  


  
    
      2:21:03
    
  
  
  some symbol that we set we'll have the user type in how many rows and columns this rectangle will have we'll reuse
  


  
    
      2:21:09
    
  
  
  this code that we have already written so this time let's accept some user input rows equals
  


  
    
      2:21:18
    
  
  
  input enter the number of rows then we
  


  
    
      2:21:23
    
  
  
  should typ cast this input as an integer let's copy this line paste it
  


  
    
      2:21:30
    
  
  
  change rows to columns for the second line enter the number of
  


  
    
      2:21:37
    
  
  
  columns then let's create a symbol symbol equals
  


  
    
      2:21:42
    
  
  
  input enter a symbol to
  


  
    
      2:21:47
    
  
  
  use we already have this rectangle structure right think of it as the outer loop is in charge of the rows let's
  


  
    
      2:21:55
    
  
  
  change in range three to in range rows the in Loop will be in charge of
  


  
    
      2:22:01
    
  
  
  the columns for y in range
  


  
    
      2:22:07
    
  
  
  columns we will print our symbol whatever the user chooses so let's try
  


  
    
      2:22:12
    
  
  
  this again enter the number of rows how about four rows 10 columns I'll use a dollar sign
  


  
    
      2:22:22
    
  
  
  so here's our rectangle we have four rows then 10 columns 1 2 3 4 5 6 7 8 9
  


  
    
      2:22:33
    
  
  
  10 let's try it one more time three rows five columns and I'll use an
  


  
    
      2:22:41
    
  
  
  asterisk yep three rows five columns so yeah that's a nested Loop
  


  
    
      2:22:47
    
  
  
  really it's just a loop that's inside of another loop Loop the type of loop really doesn't matter as well as what's
  


  
    
      2:22:54
    
  
  
  within each loop it's just a situation where you have a loop inside of another loop and yeah those are nested Loops in
  


  
    
      2:23:02
    
  
  
  Python well hello everybody today I will be explaining a few different types of collections in Python there's four
  


  
    
  21.lists, sets, and tuples



  
    
      2:23:09
    
  
  
  general purpose collections three of them are lists sets and tles there are
  


  
    
      2:23:14
    
  
  
  also dictionaries but I'll save that for the next topic because they can be kind of tricky a collection I would think of
  


  
    
      2:23:20
    
  
  
  them as a single variable and I'm saying that within quotes that is used to store
  


  
    
      2:23:26
    
  
  
  multiple values that's how I would explain a collection to a beginner for example let's say we have a variable
  


  
    
      2:23:32
    
  
  
  variable fruit fruit equals some value like apple and then I can print this
  


  
    
      2:23:39
    
  
  
  fruit which is Apple I could turn this variable into a collection by
  


  
    
      2:23:45
    
  
  
  surrounding my values with either a set of square brackets for a list curly braces for a set or parenthesis for a
  


  
    
      2:23:52
    
  
  
  tuple let's begin with the list if I would like to store more than one value in this variable I will surround my
  


  
    
      2:23:58
    
  
  
  values with a set of square brackets this variable is now a list I can store
  


  
    
      2:24:04
    
  
  
  multiple values separated with a comma not only do we have an apple in this variable but we have an
  


  
    
      2:24:10
    
  
  
  orange a banana and coconut one naming convention that I
  


  
    
      2:24:18
    
  
  
  like to use if I declare a collection such as a list set or toule I like to take the variable name and make it
  


  
    
      2:24:24
    
  
  
  plural just so that it's more obvious that this is a collection of values technically in the English language
  


  
    
      2:24:31
    
  
  
  fruit would still be plural English is a weird language we now have a list of
  


  
    
      2:24:36
    
  
  
  fruit named fruits if I were to print my list this is the result we have all of
  


  
    
      2:24:43
    
  
  
  our values enclosed with a set of square brackets to access one of these elements
  


  
    
      2:24:48
    
  
  
  found within your list you can use the index operator much like what we can do with strings the first element would
  


  
    
      2:24:55
    
  
  
  have an index of zero that would print my value Apple index of one would be my orange
  


  
    
      2:25:03
    
  
  
  two is banana three coconut what about four we don't have a value
  


  
    
      2:25:11
    
  
  
  there list index out of range each value in a collection is also known as an
  


  
    
      2:25:17
    
  
  
  element if we attempt to access an element that's not not found within our collection you'll run into an index
  


  
    
      2:25:23
    
  
  
  error with the index operator you could set a beginning index an ending index
  


  
    
      2:25:29
    
  
  
  and a step I would like the first three elements you could say zero colon
  


  
    
      2:25:36
    
  
  
  three that would give me Apple orange banana technically you don't even need the zero you need that colon though we
  


  
    
      2:25:43
    
  
  
  can even use a step I would like every second element apple banana it's every second
  


  
    
      2:25:49
    
  
  
  element beginning from index zero maybe I would like my fruit backwards I'll set the step to be 1 coconut banana orange
  


  
    
      2:25:57
    
  
  
  Apple you can use the index operator with collections much like you can use with strings another cool thing you can
  


  
    
      2:26:04
    
  
  
  do too with collections is that you can iterate over them with the for Loop for
  


  
    
      2:26:09
    
  
  
  X in my collection fruits what would we like to do I will
  


  
    
      2:26:15
    
  
  
  print whatever X is so we have iterated over our list
  


  
    
      2:26:20
    
  
  
  Apple orange banana coconut now X isn't really too descriptive what you'll see some people do is that with their
  


  
    
      2:26:27
    
  
  
  collection name it's plural their counter will be the singular version of that word if our collection name is
  


  
    
      2:26:33
    
  
  
  fruits let's rename X as fruit singular it's not mandatory but that's a
  


  
    
      2:26:41
    
  
  
  common convention it's more readable that way for every fruit in fruits If
  


  
    
      2:26:46
    
  
  
  This Were cars you could say for car in Cars our counter is storing whatever
  


  
    
      2:26:52
    
  
  
  value is within our collection so what are all the different methods that we can use with collections to list the
  


  
    
      2:26:58
    
  
  
  different methods that are available to a collection you can use the dur function within this function add your
  


  
    
      2:27:06
    
  
  
  collection fruits but we would need to print this let's surround this function with a
  


  
    
      2:27:12
    
  
  
  print statement these are all in alphabetical order we have attributes which I have
  


  
    
      2:27:18
    
  
  
  not explained yet but I in a future topic but if we scroll to the end we
  


  
    
      2:27:24
    
  
  
  have a bunch of different methods that this list can perform append clear copy count extend index insert pop remove
  


  
    
      2:27:31
    
  
  
  reverse and sort if you would like a description of each of these methods there is a help function help add your
  


  
    
      2:27:38
    
  
  
  collection to the parentheses then we would need to print
  


  
    
      2:27:46
    
  
  
  this here's the description of all the methods and attributes for example we have our sort method and here's a
  


  
    
      2:27:53
    
  
  
  description sort the list in ascending order and return none and then a bunch of other stuff if you ever forget what
  


  
    
      2:27:59
    
  
  
  you're capable of with a list or other collection you can always use the help function to print a description of the
  


  
    
      2:28:05
    
  
  
  attributes and methods available if you need the length of how many elements are within a collection there is the length
  


  
    
      2:28:14
    
  
  
  function return the length of my list fruits then let's print it
  


  
    
      2:28:21
    
  
  
  there's four elements within my list the length function returns four if I were
  


  
    
      2:28:26
    
  
  
  to add an extra element like a pineapple then that number would be
  


  
    
      2:28:32
    
  
  
  five let's remove that using the in operator we can find if a value is
  


  
    
      2:28:38
    
  
  
  within a collection is our value Apple in
  


  
    
      2:28:45
    
  
  
  fruits but then we would need to print this this operator will return a Boolean so let's print whatever that
  


  
    
      2:28:52
    
  
  
  is is Apple in fruits that is true but is
  


  
    
      2:28:59
    
  
  
  pineapple pineapple is not it's false you can use the in operator to find if a
  


  
    
      2:29:04
    
  
  
  value is within a list and that applies for your other collections too with lists they're ordered and
  


  
    
      2:29:11
    
  
  
  changeable duplicates are okay we can change one of these values after we
  


  
    
      2:29:16
    
  
  
  create our list let's take fruits at index of
  


  
    
      2:29:21
    
  
  
  zero I will set this equal to be a pineapple then let's iterate over our
  


  
    
      2:29:28
    
  
  
  fruit using a for Loop okay the first element is no longer
  


  
    
      2:29:34
    
  
  
  an apple it's a pineapple then orange banana coconut using an index you can reassign one of the values if I were to
  


  
    
      2:29:41
    
  
  
  change zero to one well now we have an apple pineapple banana
  


  
    
      2:29:47
    
  
  
  coconut let's cover some of the methods that are found within a list we can append an
  


  
    
      2:29:53
    
  
  
  element type the name of the list do append what would we like to append to
  


  
    
      2:29:59
    
  
  
  the end of this list let's append a pineapple I'm going to get rid of this
  


  
    
      2:30:05
    
  
  
  for Loop I'm just going to display my list there we have an apple an orange banana coconut pineapple to add an
  


  
    
      2:30:11
    
  
  
  element to the end of a list use the append method to remove an element you can use
  


  
    
      2:30:17
    
  
  
  the remove method fruits. remove let's remove our
  


  
    
      2:30:22
    
  
  
  Apple our apple is no longer there we have an orange banana coconut using the
  


  
    
      2:30:28
    
  
  
  insert method we can insert a value at a given index fruits.
  


  
    
      2:30:34
    
  
  
  insert list an index zero would be the beginning then a value
  


  
    
      2:30:42
    
  
  
  pineapple now we have a pineapple Apple orange banana coconut the sort method
  


  
    
      2:30:48
    
  
  
  will sort a list for roots. sort these are all in alphabetical order
  


  
    
      2:30:54
    
  
  
  now apple banana coconut orange to reverse a list you would use
  


  
    
      2:31:00
    
  
  
  the reverse method fruits. reverse coconut banana orange Apple
  


  
    
      2:31:08
    
  
  
  however these are not in Reverse alphabetical order these elements are reversed based on the order in which we
  


  
    
      2:31:13
    
  
  
  place them if you would like reverse alphabetical order you can first sort
  


  
    
      2:31:18
    
  
  
  and then reverse now we have orange coconut banana apple to clear a list use the clear
  


  
    
      2:31:26
    
  
  
  method fruits. clear all of the elements are
  


  
    
      2:31:32
    
  
  
  gone we can return the index of a value let's return the index of
  


  
    
      2:31:38
    
  
  
  Apple fruits. index list an
  


  
    
      2:31:44
    
  
  
  element then we will need to print this let's print the index that is
  


  
    
      2:31:52
    
  
  
  returned the index of Apple is zero
  


  
    
      2:31:57
    
  
  
  coconut that would be three what if we don't find a value like a
  


  
    
      2:32:04
    
  
  
  pineapple well we have an error pineapple is not in list you could count
  


  
    
      2:32:09
    
  
  
  the amount of times that a value is found within a list because duplicates are okay fruits. count let's count how
  


  
    
      2:32:18
    
  
  
  many bananas are in this list banana then print
  


  
    
      2:32:26
    
  
  
  it one banana is found within this list how about
  


  
    
      2:32:32
    
  
  
  pineapples there are zero now those are lists surround your values with a set of
  


  
    
      2:32:38
    
  
  
  square brackets these values are ordered and changeable duplicates are okay now
  


  
    
      2:32:44
    
  
  
  let's talk about the next collection which is a set to create a set surround your values instead with with a set of
  


  
    
      2:32:50
    
  
  
  curly braces our collection of fruits is now a set a set has different benefits
  


  
    
      2:32:56
    
  
  
  the values are unordered and immutable meaning we can't alter these values
  


  
    
      2:33:02
    
  
  
  however we can add and remove elements a set does not include any duplicates I'm going to delete these
  


  
    
      2:33:08
    
  
  
  methods then print fruits we have all of the same values
  


  
    
      2:33:14
    
  
  
  but they're not in the same order as they were originally a set is unordered if I were to run this again they will
  


  
    
      2:33:20
    
  
  
  likely be in a different order see now we have a banana apple coconut orange to display all of the different attributes
  


  
    
      2:33:27
    
  
  
  and methods of a set you can use the dur
  


  
    
      2:33:33
    
  
  
  function and here's all of them some of these methods are a little more advanced but there's a few we might recognize
  


  
    
      2:33:39
    
  
  
  like add clear copy for an in-depth description of these methods you can use the help
  


  
    
      2:33:46
    
  
  
  function much like what we did before to find the length of our set we can use the length function which is
  


  
    
      2:33:54
    
  
  
  four we can use the in operator to find if a value is found within this
  


  
    
      2:33:59
    
  
  
  set unfortunately pineapples are not within our set now if I was to use the
  


  
    
      2:34:05
    
  
  
  index operator of my set this is what would happen we have an error set object is
  


  
    
      2:34:13
    
  
  
  not subscriptable we're not able to use indexing on a set because they're unordered much like what we can do with
  


  
    
      2:34:19
    
  
  
  a list or string we can't change the values of a set but we could add a
  


  
    
      2:34:24
    
  
  
  remove elements let's use the add method to add guess what a
  


  
    
      2:34:32
    
  
  
  pineapple that is okay orange Apple pineapple coconut
  


  
    
      2:34:37
    
  
  
  banana we can remove an element fruits. remove let's remove our
  


  
    
      2:34:44
    
  
  
  Apple our apple is gone coconut orange banana
  


  
    
      2:34:50
    
  
  
  we can pop the pop method will remove whatever
  


  
    
      2:34:56
    
  
  
  element is first but it's going to be random though orange coconut banana apple
  


  
    
      2:35:02
    
  
  
  coconut banana apple banana coconut you can clear fruits.
  


  
    
      2:35:11
    
  
  
  CLE the elements of our set are gone those are a few of the more useful methods for beginners as a summary a set
  


  
    
      2:35:19
    
  
  
  is a collection that is unordered and immutable you can't change the values but adding and removing elements is okay
  


  
    
      2:35:26
    
  
  
  no duplicates are allowed let's try that real quick I'm going to add a second
  


  
    
      2:35:32
    
  
  
  coconut yeah see we only still have one coconut sets may work well if you're working with constants maybe colors for
  


  
    
      2:35:40
    
  
  
  example you need to find if a color is within a set all right now lastly let's talk about tupples a tupple is a
  


  
    
      2:35:47
    
  
  
  collection that is surrounded with a set of parentheses topples are ordered and unchangeable
  


  
    
      2:35:53
    
  
  
  duplicates are okay one benefit of a topple over a list is that topples are faster than lists if you're working with
  


  
    
      2:36:00
    
  
  
  a collection and it's okay if the collection is ordered and unchangeable you might as well use a tupple because
  


  
    
      2:36:06
    
  
  
  it's faster when I print our topple all of these values are surrounded with a set of parentheses again we have the dur
  


  
    
      2:36:13
    
  
  
  function to display the attributes and methods there's not as many for a tle for methods we only have count and index
  


  
    
      2:36:21
    
  
  
  again there's also help to display a description of these attributes and methods you can find the
  


  
    
      2:36:28
    
  
  
  length of a tle with the length function we have five elements within here using
  


  
    
      2:36:33
    
  
  
  the in operator we can find if a value is found within our tupple our pineapple is not within our
  


  
    
      2:36:40
    
  
  
  fruits so there's only two methods we have access to let's find the index of Apple fruits.
  


  
    
      2:36:47
    
  
  
  index Apple then I will print whatever is
  


  
    
      2:36:53
    
  
  
  returned apple is found at index zero there's also count fruits.
  


  
    
      2:36:59
    
  
  
  count how many coconuts are found within our tupple fruits count the Coconuts then print
  


  
    
      2:37:09
    
  
  
  this how many coconuts we have two coconuts and then again with any of
  


  
    
      2:37:15
    
  
  
  these collections they're iterable so you can iterate over them using a for Loop for fruit and
  


  
    
      2:37:22
    
  
  
  fruits yep Apple orange banana coconut coconut all right everybody so those are
  


  
    
      2:37:28
    
  
  
  collections think of them as a single variable used to store multiple values
  


  
    
      2:37:33
    
  
  
  there's four general purpose collections for beginners lists sets tles and then
  


  
    
      2:37:39
    
  
  
  dictionaries which we'll talk about next each of them has unique benefits lists are ordered and changeable duplicates
  


  
    
      2:37:46
    
  
  
  are okay a set is unordered and immutable but adding and removing
  


  
    
      2:37:51
    
  
  
  elements is okay no duplicates allowed a tupple is ordered and unchangeable
  


  
    
      2:37:57
    
  
  
  duplicates are okay and they are faster than lists use topples if you can over a
  


  
    
      2:38:02
    
  
  
  list but yeah those are a few collections in Python hello everybody today we will be
  


  
    
  22.shopping cart program



  
    
      2:38:10
    
  
  
  creating a shopping cart program this program will be an exercise to follow the previous lesson on lists sets and
  


  
    
      2:38:17
    
  
  
  tles the more that we practice with those collections the better we'll be at using them so I thought we'd create an
  


  
    
      2:38:23
    
  
  
  exercise to get the hang of it before moving on in this program we will have two lists Foods these lists will be
  


  
    
      2:38:30
    
  
  
  empty we'll declare them but not use them quite yet and prices then a total total equals z the
  


  
    
      2:38:40
    
  
  
  reason that I'm not using topples is that tles are unchangeable we're going to ask a user what food they would like
  


  
    
      2:38:47
    
  
  
  to buy we can't depend any elements to a tle we're not using sets because sets
  


  
    
      2:38:52
    
  
  
  are unordered I mean I guess technically you could but at the end of this program I'm going to print our shopping cart in
  


  
    
      2:38:58
    
  
  
  order so I think lists would probably be the best we have an empty list of foods and an empty list of prices we'll use a
  


  
    
      2:39:06
    
  
  
  while loop while true if our condition is set to True
  


  
    
      2:39:12
    
  
  
  we'll need some way to break out of the while loop we'll need a break statement somewhere we'll get to that later we
  


  
    
      2:39:18
    
  
  
  will ask the user what food would they like to buy let's declare variable food
  


  
    
      2:39:24
    
  
  
  equal to input enter a food to
  


  
    
      2:39:31
    
  
  
  buy to exit the while loop you need to press Q Q2
  


  
    
      2:39:39
    
  
  
  quit then let's check if food is equal
  


  
    
      2:39:45
    
  
  
  to Q lowercase Q then we will break we're not done with the program but
  


  
    
      2:39:51
    
  
  
  let's at least test it Pizza
  


  
    
      2:39:57
    
  
  
  hamburger hot dog Q to quit okay it looks like it works now what if somebody
  


  
    
      2:40:03
    
  
  
  types in uppercase q Pizza hamburger uppercase q well we
  


  
    
      2:40:11
    
  
  
  can't actually quit after accepting our user input if
  


  
    
      2:40:16
    
  
  
  food. lower method this will take our input make it lowercase just for a
  


  
    
      2:40:23
    
  
  
  comparison let's try that again Pizza
  


  
    
      2:40:29
    
  
  
  hamburger I'll type capital Q to quit and that is valid follow food with the
  


  
    
      2:40:35
    
  
  
  lower method to temporarily make the user input lowercase just in case they type in
  


  
    
      2:40:41
    
  
  
  capital Q if the user doesn't want to quit let's add an else
  


  
    
      2:40:46
    
  
  
  statement else let's take our Foods use the append method then add whatever
  


  
    
      2:40:52
    
  
  
  food the user typed in we'll also need a price let's ask a user for the
  


  
    
      2:40:59
    
  
  
  price price equals input enter the price of let's use an F
  


  
    
      2:41:10
    
  
  
  string a whatever food the user types in pick a unit of currency I'll pick
  


  
    
      2:41:18
    
  
  
  dollars we are working with numbers we should typ cast our input as a floating
  


  
    
      2:41:23
    
  
  
  Point number since we're working with prices so we will accept a price add our
  


  
    
      2:41:30
    
  
  
  food item to our list of foods do the same thing with prices prices do append
  


  
    
      2:41:37
    
  
  
  whatever the price was and that is the while loop Let's test this program again to be sure that
  


  
    
      2:41:43
    
  
  
  everything's working pizza pizza will be $59
  


  
    
      2:41:50
    
  
  
  999 enter a food to buy Hamburger hamburgers will be
  


  
    
      2:41:55
    
  
  
  350 hot dog hot dogs will be 175 I would like to quit I will type either capital
  


  
    
      2:42:02
    
  
  
  Q or lowercase Q both will work and we have escaped the while loop so the while
  


  
    
      2:42:07
    
  
  
  loop is now complete outside of the while loop let's display our shopping cart let's print some decorative
  


  
    
      2:42:15
    
  
  
  text maybe five dashes your cart then another five
  


  
    
      2:42:22
    
  
  
  dashes I will then iterate over all of the elements found within my Foods
  


  
    
      2:42:27
    
  
  
  list for every food in my list of
  


  
    
      2:42:33
    
  
  
  foods let's print each food item let's take a look so far again we have a pizza
  


  
    
      2:42:40
    
  
  
  the price was $5.99 hamburger the price was
  


  
    
      2:42:46
    
  
  
  350 hot dog 175 CU to quit Okay your
  


  
    
      2:42:53
    
  
  
  cart that will display the individual list items if you would rather have these list items arranged horizontally
  


  
    
      2:43:00
    
  
  
  in one line you can add this keyword end equals
  


  
    
      2:43:05
    
  
  
  this end keyword will replace the new line character at the end of a print statement with some other character like
  


  
    
      2:43:11
    
  
  
  a space let's try that again I'll try not to take too much time
  


  
    
      2:43:18
    
  
  
  pizza $ 5.99 hamburger
  


  
    
      2:43:25
    
  
  
  350 hot dog 175 you to quit yeah that's much better
  


  
    
      2:43:34
    
  
  
  we are horizontally listing all of the different items within our list you could revert back to the vertical list
  


  
    
      2:43:40
    
  
  
  if you'd prefer that I'll keep my output like this then we will need to iterate and add up all the prices for every
  


  
    
      2:43:47
    
  
  
  price in prices we do have a total variable that we declared let's utilize that total equals
  


  
    
      2:43:56
    
  
  
  total plus price otherwise we could shorten this to plus equals price that
  


  
    
      2:44:02
    
  
  
  would do the same thing then we will display the total print I'll use an F
  


  
    
      2:44:10
    
  
  
  string your total is I'll add a unit of
  


  
    
      2:44:15
    
  
  
  currency I picked the dollar sign whatever the total is okay let's run this program One Last
  


  
    
      2:44:24
    
  
  
  Time enter a food to buy pizza which was
  


  
    
      2:44:29
    
  
  
  $5.99 hamburger which was 350 hot
  


  
    
      2:44:35
    
  
  
  dogs they are 175 CU to quit here's your shopping cart I'm just
  


  
    
      2:44:42
    
  
  
  going to add one new line real quick right before we display the total just an empty print statement
  


  
    
      2:44:58
    
  
  
  here are the results your cart Pizza hamburger hot dog your total is
  


  
    
      2:45:05
    
  
  
  $124 all right everybody well that is a shopping cart program I thought this would be a fun exercise to follow the
  


  
    
      2:45:11
    
  
  
  previous lesson on lists sets and topples and well yeah that is a shopping
  


  
    
      2:45:17
    
  
  
  cart program in Python hey what's going on everybody so today
  


  
    
  23.2D collections



  
    
      2:45:23
    
  
  
  I'm going to be explaining 2D lists 2D meaning two-dimensional you do also have
  


  
    
      2:45:28
    
  
  
  the capability of creating 2D tuples I thought today we would use 2D lists just because they're pretty flexible a
  


  
    
      2:45:35
    
  
  
  two-dimensional list is just a list made up of lists it's really useful if you
  


  
    
      2:45:40
    
  
  
  ever need a grid or Matrix of data kind of like an Excel spreadsheet let's create three lists a list of fruit
  


  
    
      2:45:51
    
  
  
  vegetables and meat I'm going to speed up this video feel free to pause if you need to catch
  


  
    
      2:46:11
    
  
  
  up here I have three lists a list of fruit vegetables and meat each of these
  


  
    
      2:46:16
    
  
  
  lists is a one-dimensional list to create a two-dimensional list well you would begin by creating a
  


  
    
      2:46:22
    
  
  
  one-dimensional list let's create a list of groceries all I would need to do is add
  


  
    
      2:46:28
    
  
  
  my individual lists as elements to the outer list the 2D list we have fruits
  


  
    
      2:46:35
    
  
  
  vegetables and meats normally to print a list or your
  


  
    
      2:46:41
    
  
  
  other collections you would print the name of the list in my list fruits I have apple
  


  
    
      2:46:48
    
  
  
  Orange banana coconut to access or change one of the elements you would type the name of the list then use the
  


  
    
      2:46:54
    
  
  
  index operator so fruits at index of zero is a pineapple
  


  
    
      2:47:00
    
  
  
  again with a 2d list it's a little different if I were to print my 2D list
  


  
    
      2:47:05
    
  
  
  of groceries we would lay out the entire 2D list flat we have individual lists
  


  
    
      2:47:13
    
  
  
  separated with a comma all enclosed within a set of square brackets taking the elements found within our 2D list
  


  
    
      2:47:20
    
  
  
  I'm going to line these up kind of like this it kind of represents a gitter matrix with rows and columns each
  


  
    
      2:47:27
    
  
  
  individual list resembles a row each element resembles a column if I were to
  


  
    
      2:47:32
    
  
  
  print groceries at index zero in place of returning one element found within
  


  
    
      2:47:38
    
  
  
  one of the lists that would return an entire row so groceries at index zero is
  


  
    
      2:47:44
    
  
  
  my fruits list groceries at index one is my vegetables list groceries at index 2
  


  
    
      2:47:51
    
  
  
  is my Meats list for one of the elements found within one of the rows you would need two
  


  
    
      2:47:58
    
  
  
  indices if I need the Apple from the first row within my 2D list of groceries
  


  
    
      2:48:03
    
  
  
  that would be row0 column Z it's kind of like coordinates row 0 column 0 that
  


  
    
      2:48:11
    
  
  
  would be my Apple 01 which is an
  


  
    
      2:48:17
    
  
  
  orange 0 02 is banana 03 is coconut for
  


  
    
      2:48:22
    
  
  
  the next row I would set the first index to be one row one column zero that would be
  


  
    
      2:48:30
    
  
  
  celery I'm going to speedrun this real quick just to show you all the different elements one one is carrots one two is
  


  
    
      2:48:37
    
  
  
  potatoes if we try to access 1 three that index is out of range because
  


  
    
      2:48:43
    
  
  
  we only have three elements within this row so then the next row would have an
  


  
    
      2:48:49
    
  
  
  index of two column zero would be
  


  
    
      2:48:54
    
  
  
  chicken 21 is fish 22 is turkey 23 is out of bounds to access an
  


  
    
      2:49:02
    
  
  
  element from a 2d list you would need two indices in place of one because using just one would return the entire
  


  
    
      2:49:09
    
  
  
  row like so now when you declare a 2d list you don't need to necessarily give
  


  
    
      2:49:15
    
  
  
  each inner list a name we could do something like this
  


  
    
      2:49:21
    
  
  
  I'm going to replace these names with the
  


  
    
      2:49:27
    
  
  
  rows I'm just going to put these on a new line to make it more
  


  
    
      2:49:35
    
  
  
  readable there that would work too just separate each inner list with a comma
  


  
    
      2:49:41
    
  
  
  then enclose everything with the set of square brackets if you ever need to iterate over the elements of a 2d list
  


  
    
      2:49:47
    
  
  
  you can use NE Loops if I were to use a single for Loop let's say for every uh
  


  
    
      2:49:54
    
  
  
  maybe collection for every collection in
  


  
    
      2:50:00
    
  
  
  groceries let's print what our collection
  


  
    
      2:50:06
    
  
  
  is using a single four Loop would iterate over the rows but to also
  


  
    
      2:50:11
    
  
  
  iterate over the elements found within each row we would use a nested Loop for every food in our
  


  
    
      2:50:22
    
  
  
  collection let's print what our food is using nested Loops we can iterate
  


  
    
      2:50:30
    
  
  
  over all of the elements found within our 2D list but I'm going to make this more organized like that grid structure
  


  
    
      2:50:35
    
  
  
  we have I'm going to replace the new line character at the end of a print statement with a
  


  
    
      2:50:41
    
  
  
  space then when we exit the nested loop I will print a new line by using just an empty print statement
  


  
    
      2:50:48
    
  
  
  there that kind of resembles our grid structure we have rows and we have columns with
  


  
    
      2:50:55
    
  
  
  two-dimensional collections you're not limited to just lists you could create a list of tles so the inner rows will be
  


  
    
      2:51:03
    
  
  
  surrounded with a set of parenthesis you know this is also valid
  


  
    
      2:51:10
    
  
  
  too or you could make a 2d tupple it's a tupple that's made up of tuples you
  


  
    
      2:51:16
    
  
  
  could make a tupple made up of sets sets are enclosed with a set of curly
  


  
    
      2:51:25
    
  
  
  braces here we have a tuple made of sets use whatever is best for your own
  


  
    
      2:51:31
    
  
  
  programs let's go over an exercise let's create a two-dimensional keypad that you
  


  
    
      2:51:36
    
  
  
  would normally find on a phone we have three data types a list a set or a
  


  
    
      2:51:42
    
  
  
  tupple the elements in a set are unordered so we can't use that these numbers need to be in order
  


  
    
      2:51:49
    
  
  
  if we have the option A tupple is faster than a list a tupple is ordered and unchangeable so we should use it if we
  


  
    
      2:51:56
    
  
  
  can and that's perfectly fine let's create a 2d tupple this time I will name
  


  
    
      2:52:01
    
  
  
  this 2D tupple numpad we have an outer set of parenthesis then an inner set of
  


  
    
      2:52:07
    
  
  
  parentheses for each row we will have four rows the first row will be 1 2 3 the
  


  
    
      2:52:17
    
  
  
  second row I'm going to put put this on a new line 4 5
  


  
    
      2:52:23
    
  
  
  6 the next row will be 7 89 then the last row will be an asteris
  


  
    
      2:52:30
    
  
  
  character then zero then the pound sign so numpad in
  


  
    
      2:52:37
    
  
  
  this case is a 2d tupple let's use a for Loop to iterate over every row this will
  


  
    
      2:52:43
    
  
  
  be the outer loop for every maybe Row for every row in
  


  
    
      2:52:50
    
  
  
  numpad let's begin by printing our
  


  
    
      2:52:55
    
  
  
  row so we're printing every Row in our numpad but I'd like to remove the
  


  
    
      2:53:01
    
  
  
  parentheses let's create a nested Loop for every maybe num for Num in
  


  
    
      2:53:12
    
  
  
  row print whatever that num is we have one long vertical line let's
  


  
    
      2:53:20
    
  
  
  replace the new line character at the end of our print statement with the
  


  
    
      2:53:26
    
  
  
  space then when we escape the nested Loop let's print a new
  


  
    
      2:53:32
    
  
  
  line and there is our telephone number pad you can see it's a grid made up of
  


  
    
      2:53:37
    
  
  
  rows and columns so yeah that's a 2d list well a 2d collection it's a
  


  
    
      2:53:43
    
  
  
  collection that's made up of collections then with our numpad we made a 2d tupple
  


  
    
      2:53:48
    
  
  
  if you ever need a grid or Matrix of data a 2d collection would work perfect and there you have it everybody those
  


  
    
      2:53:54
    
  
  
  are 2D collections in Python hello again everybody so today
  


  
    
  24.quiz game



  
    
      2:54:01
    
  
  
  we're going to create a quiz game in Python let's declare all of the different Collections and variables that
  


  
    
      2:54:07
    
  
  
  we'll need first we will need a tuple of questions a 2d tle of
  


  
    
      2:54:15
    
  
  
  options my quiz will have five questions but you can add more or less
  


  
    
      2:54:23
    
  
  
  questions then a tuple of answers a list of guesses we will be
  


  
    
      2:54:31
    
  
  
  appending guesses to our list that's why we're using a list rather than a tupple a score variable which I will set
  


  
    
      2:54:39
    
  
  
  to be zero then question number this variable will keep track of
  


  
    
      2:54:44
    
  
  
  what number question we're on all right let's begin with our questions I have
  


  
    
      2:55:13
    
  
  
  five here are my questions they're all science related feel fre free to choose your own this is what I have how many
  


  
    
      2:55:21
    
  
  
  elements are in the periodic table which animal lays the largest eggs what is the
  


  
    
      2:55:26
    
  
  
  most abundant gas in Earth's atmosphere how many bones are in the human body which planet in the solar system is the
  


  
    
      2:55:33
    
  
  
  hottest these are the questions but we'll need options let's add four
  


  
    
      2:55:38
    
  
  
  options for every question that's why we're using a two-dimensional tupple each inner tupple will consist of four
  


  
    
      2:55:45
    
  
  
  elements
  


  
    
      2:55:54
    
  
  
  they will be options A B
  


  
    
      2:55:59
    
  
  
  C or D let's copy these elements then paste them within each
  


  
    
      2:56:08
    
  
  
  tle this first element corresponds to my first question how many elements are in
  


  
    
      2:56:13
    
  
  
  the periodic table I'll come up with some answers
  


  
    
      2:56:20
    
  
  
  I'll add some answers for the rest of these tuples too
  


  
    
      2:56:50
    
  
  
  we have a coule of correct answers the orders are c
  


  
    
      2:56:57
    
  
  
  d a a b if you come up with your own options
  


  
    
      2:57:06
    
  
  
  your answers may be different now that we have all of our different Collections and variables taken care of let's
  


  
    
      2:57:12
    
  
  
  display each question I will iterate over our Tuple of questions they are
  


  
    
      2:57:17
    
  
  
  iterable for every question in questions I'm going to print some
  


  
    
      2:57:24
    
  
  
  decorative text I think that's probably
  


  
    
      2:57:30
    
  
  
  good then I will print each question we're iterating over so let's see what
  


  
    
      2:57:36
    
  
  
  we have so far there's all five questions after we display every
  


  
    
      2:57:43
    
  
  
  question I need to display every option for every op option in options our
  


  
    
      2:57:52
    
  
  
  options options is a 2d tupple let's add the index operator the
  


  
    
      2:57:59
    
  
  
  index is going to be our question number variable it's a number so at first we're
  


  
    
      2:58:05
    
  
  
  accessing options at index of zero then 1 2 3 4
  


  
    
      2:58:11
    
  
  
  5 we will print every option in options
  


  
    
      2:58:16
    
  
  
  at a given row number Let's test this okay we have some options but all of these options are for
  


  
    
      2:58:24
    
  
  
  the first question we will need to increment our question number so let's
  


  
    
      2:58:29
    
  
  
  do that maybe here question number plus equals
  


  
    
      2:58:40
    
  
  
  1 that is much better before iterating the question number we will ask the user
  


  
    
      2:58:46
    
  
  
  for a guess guess equals
  


  
    
      2:58:52
    
  
  
  input enter a b c
  


  
    
      2:59:02
    
  
  
  d in case the user types in something that's lowercase I will follow this input with the upper method to make the
  


  
    
      2:59:09
    
  
  
  user input uppercase we will take our list of
  


  
    
      2:59:15
    
  
  
  guesses use the append method add our guess to that
  


  
    
      2:59:21
    
  
  
  list if our guess is equal to the
  


  
    
      2:59:26
    
  
  
  answers tupple at index of question number that means the user guessed the
  


  
    
      2:59:33
    
  
  
  right answer let's increase the user score score plus equals 1 then print the
  


  
    
      2:59:39
    
  
  
  word correct correct else we will print
  


  
    
      2:59:50
    
  
  
  incorrect I'll use an F
  


  
    
      2:59:55
    
  
  
  string our answers at index of question
  


  
    
      3:00:02
    
  
  
  number is the correct answer all right let's answer
  


  
    
      3:00:08
    
  
  
  some of these questions C correct which animal lays
  


  
    
      3:00:16
    
  
  
  the largest eggs um um definitely the whale because the whale is the largest creature
  


  
    
      3:00:22
    
  
  
  right incorrect D is the correct answer what is the most abundant gas in Earth's atmosphere nitrogen correct how many
  


  
    
      3:00:30
    
  
  
  bones are in the human body D that is incorrect A is the right answer which
  


  
    
      3:00:35
    
  
  
  planet in the solar system is the hottest Mercury because it's closest to the Sun right wrong incorrect B is the correct
  


  
    
      3:00:43
    
  
  
  answer we're keeping track of our answer successfully once we complete all the questions let's print the
  


  
    
      3:00:51
    
  
  
  results I'm going to add some decorative text not necessary but I think it would
  


  
    
      3:00:56
    
  
  
  look cool I will display the
  


  
    
      3:01:05
    
  
  
  results we will iterate over all of the answers and the
  


  
    
      3:01:11
    
  
  
  guesses print answers
  


  
    
      3:01:18
    
  
  
  I'm going to set the ending character to be an empty
  


  
    
      3:01:23
    
  
  
  string for every answer in
  


  
    
      3:01:30
    
  
  
  answers print each answer I will set the ending character
  


  
    
      3:01:37
    
  
  
  to be a space to separate each answer then I'll add a new print
  


  
    
      3:01:43
    
  
  
  line let's do this with guesses change answers to guesses for
  


  
    
      3:01:50
    
  
  
  every guess in guesses print each guess
  


  
    
      3:01:57
    
  
  
  okay I'm going to run this again I'm just going to make up some answers a b c d a here are the correct
  


  
    
      3:02:06
    
  
  
  answers here are the guesses I guess none of them right then we will print a
  


  
    
      3:02:12
    
  
  
  score score equals take our score
  


  
    
      3:02:17
    
  
  
  divided by I'm going to use the length function then pass in our questions how
  


  
    
      3:02:24
    
  
  
  many elements are within our questions tble then I will multiply all of this by
  


  
    
      3:02:29
    
  
  
  100 to give us a percentage then typ cast this whole formula as an
  


  
    
      3:02:36
    
  
  
  integer so we're basically just reassigning our score variable then let's print using an F
  


  
    
      3:02:43
    
  
  
  string your score is our score
  


  
    
      3:02:49
    
  
  
  variable then add percent I'm going to intentionally get all the answers right
  


  
    
      3:02:56
    
  
  
  c d a a b here are the answers here are your
  


  
    
      3:03:03
    
  
  
  guesses your score is 100% this time I'll try and get a few incorrect intentionally c c c c c your score is
  


  
    
      3:03:14
    
  
  
  20% all right everybody well that is a quiz game feel free to add more or less
  


  
    
      3:03:19
    
  
  
  questions or come up with your own questions and that is a quiz game written in
  


  
    
  25.dictionaries



  
    
      3:03:27
    
  
  
  Python hey everybody in today's video I'm going to explain dictionaries a dictionary is one of the four basic
  


  
    
      3:03:33
    
  
  
  collection types for beginners a dictionary consists of key value pairs they are ordered and changeable no
  


  
    
      3:03:40
    
  
  
  duplicates allowed a few examples of key value pairs could be an ID and a name an
  


  
    
      3:03:46
    
  
  
  item and a price but in today's example we'll create a dictionary of countries and capitals
  


  
    
      3:03:53
    
  
  
  let's name our dictionary capitals capitals equals enclose your dictionary
  


  
    
      3:03:58
    
  
  
  with a set of curly braces much like what you do with sets the first country will be the USA to add a value to this
  


  
    
      3:04:06
    
  
  
  key type colon then some other value the capital of the USA will be Washington
  


  
    
      3:04:16
    
  
  
  DC separate at each key value pair with a comma then we can add another key
  


  
    
      3:04:21
    
  
  
  value pair so the capital of India that will be New Delhi We'll add
  


  
    
      3:04:30
    
  
  
  two more China the capital is
  


  
    
      3:04:36
    
  
  
  Beijing Russia the capital is Moscow I think
  


  
    
      3:04:43
    
  
  
  that's good enough just as a reminder if you would like to see all of the different in attributes and methods of a dictionary
  


  
    
      3:04:50
    
  
  
  you can use the dur function pass in your dictionary capitals then we'll need
  


  
    
      3:04:55
    
  
  
  to print this here's all the different attributes
  


  
    
      3:05:00
    
  
  
  and methods of a dictionary if you would like an in-depth description of all these attributes and methods you can use
  


  
    
      3:05:07
    
  
  
  the help function uh that's herp help there we go
  


  
    
      3:05:18
    
  
  
  so yeah that's just a reminder all right let's cover a few of the methods to get one of the values
  


  
    
      3:05:24
    
  
  
  from a dictionary you would get the key type the name of the dictionary capitals
  


  
    
      3:05:31
    
  
  
  doget let's get the capital of the USA then we'll print
  


  
    
      3:05:39
    
  
  
  it the value associated with this key the USA is Washington DC if I picked a
  


  
    
      3:05:46
    
  
  
  different country like like India well then we would get that Associated value which is New Delhi
  


  
    
      3:05:54
    
  
  
  another thing if python doesn't find a key this is what will be returned let's get Japan which is not in our
  


  
    
      3:06:01
    
  
  
  dictionary this method would return none we can use this within an if
  


  
    
      3:06:08
    
  
  
  statement if capitals do get
  


  
    
      3:06:14
    
  
  
  Japan if a value is returned then we will
  


  
    
      3:06:19
    
  
  
  print that Capital exists
  


  
    
      3:06:25
    
  
  
  else we will print that Capital doesn't
  


  
    
      3:06:33
    
  
  
  exist so Japan is not in our dictionary that Capital doesn't exist but Russia
  


  
    
      3:06:39
    
  
  
  is that Capital does exist that's how to check to see if a key is within our
  


  
    
      3:06:45
    
  
  
  dictionary you can use the get method All Right Moving On Let's update our
  


  
    
      3:06:51
    
  
  
  dictionary capitals do update So within a set of curly braces I will add a key
  


  
    
      3:06:59
    
  
  
  then a value Germany followed
  


  
    
      3:07:05
    
  
  
  by Berlin then let's print our dictionary I'll use a print statement
  


  
    
      3:07:11
    
  
  
  print capitals yeah and there's Germany right
  


  
    
      3:07:16
    
  
  
  there use using the update method we can insert a new key value pair or update an
  


  
    
      3:07:21
    
  
  
  existing key value pair let's also change one of the existing values with our key USA let's update the capital to
  


  
    
      3:07:29
    
  
  
  be Detroit yeah see the value has been updated the capital of the USA is now
  


  
    
      3:07:37
    
  
  
  Detroit Michigan to remove a key value pair you can use the pop method then passing a
  


  
    
      3:07:44
    
  
  
  key let's remove China China no longer exists within our
  


  
    
      3:07:50
    
  
  
  dictionary it's gone you can remove the latest key value pair within a dictionary by using the pop item method
  


  
    
      3:07:58
    
  
  
  capitals do pop item with pop item you don't need to pass in a key pop item
  


  
    
      3:08:06
    
  
  
  will remove the latest key value pair that was inserted then we have clear
  


  
    
      3:08:11
    
  
  
  capitals do clear that will clear the dictionary it's pretty self-explanatory
  


  
    
      3:08:18
    
  
  
  the next few methods are a little tricky to explain to get all of the keys within
  


  
    
      3:08:23
    
  
  
  the dictionary but not the values there is a keys method capitals dokeys I think
  


  
    
      3:08:31
    
  
  
  I'm going to insert this within a variable Keys equals capitals do Keys
  


  
    
      3:08:37
    
  
  
  let's see what happens when we print this the keys method will return all of
  


  
    
      3:08:43
    
  
  
  the keys within our dictionary technically Keys is an object which resembles a list I haven't discussed
  


  
    
      3:08:49
    
  
  
  object-oriented programming yet this is a little bit above our level if you ever need the keys in a dictionary you can
  


  
    
      3:08:55
    
  
  
  use the keys method one use is that we can use that within a for Loop they're iterable for every key in capitals
  


  
    
      3:09:04
    
  
  
  dokeys method let's print every
  


  
    
      3:09:09
    
  
  
  key if at any time you need to iterate over all the keys you can use a for Loop
  


  
    
      3:09:15
    
  
  
  to iterate over every key that is returned from the keys method of your dictionary there's also the values
  


  
    
      3:09:22
    
  
  
  method to get all of the values within your dictionary there is a values
  


  
    
      3:09:28
    
  
  
  method values equals capitals Dov values
  


  
    
      3:09:34
    
  
  
  method then let's print our values like before with the keys method
  


  
    
      3:09:42
    
  
  
  the values method will return an object which resembles a list let's iterate and
  


  
    
      3:09:47
    
  
  
  print over every value within our dictionary for every value in capitals
  


  
    
      3:09:54
    
  
  
  Dov values print every
  


  
    
      3:10:02
    
  
  
  value here are all the values within our dictionary this next one is probably the
  


  
    
      3:10:08
    
  
  
  most tricky it is the items method capitals do items I will assign what is
  


  
    
      3:10:14
    
  
  
  returned to a variable named items then we will print
  


  
    
      3:10:20
    
  
  
  items items returns a dictionary object which resembles a 2d list of Tes it's
  


  
    
      3:10:27
    
  
  
  really complicated how might this be useful this time we're going to use a for Loop to print every key comma value
  


  
    
      3:10:36
    
  
  
  in capitals do items method we have in essence two counters
  


  
    
      3:10:42
    
  
  
  this time I will print using an F string f every key value pair I will print
  


  
    
      3:10:50
    
  
  
  every key as well as every value in our print
  


  
    
      3:10:56
    
  
  
  statement so there's our dictionary laid out we have iterated over every key
  


  
    
      3:11:01
    
  
  
  value pair it's kind of an advanced topic but I thought I would at least bring it up now so yeah that's a
  


  
    
      3:11:06
    
  
  
  dictionary everybody it's a collection of key value pairs they are ordered and
  


  
    
      3:11:11
    
  
  
  changeable no duplicates allowed you have a bunch of different methods such as get up dat pop pop item clear then
  


  
    
      3:11:19
    
  
  
  you can get the keys the values or both which is the items method we'll be using
  


  
    
      3:11:25
    
  
  
  dictionaries in a few game programs we'll be making in the future and well yeah those are dictionaries in
  


  
    
      3:11:32
    
  
  
  Python hey everybody today we will be creating a program to mimic a concession stand much like what you would see at a
  


  
    
  26.concession stand program



  
    
      3:11:39
    
  
  
  movie theater we will be utilizing a dictionary to keep track of a menu item and an Associated price more or less
  


  
    
      3:11:46
    
  
  
  this is just a program to help us get used to working with dictionaries let's begin we'll create a dictionary named
  


  
    
      3:11:53
    
  
  
  menu what items are on the menu will'll need an item and a price I'll think of
  


  
    
      3:11:58
    
  
  
  some I'm going to speed up this video feel free to pause if you need more time
  


  
    
      3:12:19
    
  
  
  and here's my menu everybody I thought of a few food items you might find at a movie theater concession stand pizza
  


  
    
      3:12:25
    
  
  
  nachos popcorn fries chips soft pretzels soda lemonade movie theater popcorn is
  


  
    
      3:12:31
    
  
  
  really expensive for some reason okay we have our menu a user is going to select specific keys from this menu depending
  


  
    
      3:12:38
    
  
  
  on what the key is we can get the associated value to calculate a total to keep track of the user selected items I
  


  
    
      3:12:45
    
  
  
  will create an empty list named cart I will also declare a variable named total to keep track of
  


  
    
      3:12:51
    
  
  
  the total we need to lay this dictionary down flat to display it to a user well
  


  
    
      3:12:57
    
  
  
  we do have the items method of a dictionary which we covered in the last video for every key value in our
  


  
    
      3:13:06
    
  
  
  dictionary menu do items method the items method of our dictionary will
  


  
    
      3:13:12
    
  
  
  return a key and a value during each iteration I'm simply going to print
  


  
    
      3:13:18
    
  
  
  every key and value I'll use an FST string I will print every key colon
  


  
    
      3:13:25
    
  
  
  space then a value let's take a look so
  


  
    
      3:13:31
    
  
  
  far here's our menu I'll make a few changes the price will be in dollar and
  


  
    
      3:13:37
    
  
  
  cents but feel free to pick your own unit of currency I'll precede my value with the dollar sign then using a format
  


  
    
      3:13:44
    
  
  
  specifier I will display two decimal places
  


  
    
      3:13:50
    
  
  
  2f that's better I will line up all the keys after the key I will add a format
  


  
    
      3:13:58
    
  
  
  specifier then allocate 10 spaces yeah look at that it's all lined
  


  
    
      3:14:04
    
  
  
  up now before and after displaying our menu with this for loop I will add some decorative
  


  
    
      3:14:11
    
  
  
  text let's say menu
  


  
    
      3:14:20
    
  
  
  then outside of the for Loop I'll display a bunch of
  


  
    
      3:14:28
    
  
  
  dashes yeah look at that let's move on to the next step we will ask a user for some input
  


  
    
      3:14:36
    
  
  
  what item would they like to buy from the menu while our condition will be true if our condition is set to True
  


  
    
      3:14:44
    
  
  
  we'll need to break out of this Loop one way or another we will ask for some user input food
  


  
    
      3:14:50
    
  
  
  equals input select an
  


  
    
      3:14:57
    
  
  
  item Q2
  


  
    
      3:15:02
    
  
  
  quit if food is equal to a lowercase Q
  


  
    
      3:15:08
    
  
  
  then we will break Let's test it select an
  


  
    
      3:15:14
    
  
  
  item Pizza nachos
  


  
    
      3:15:19
    
  
  
  soda Q to quit yeah it works okay what if the user types in capital Q well we
  


  
    
      3:15:27
    
  
  
  can't escape the while loop if a user types in capital Q we're
  


  
    
      3:15:32
    
  
  
  assuming that they would like to quit when we accept our user input I'm going to add do lower method this will take
  


  
    
      3:15:39
    
  
  
  our user input and make it all lowercase so we should be able to
  


  
    
      3:15:44
    
  
  
  acknowledge any uppercase letters yeah it works cool let's add an LSI
  


  
    
      3:15:52
    
  
  
  statement what if a user types in an item that's not on our menu well there
  


  
    
      3:15:57
    
  
  
  is a get method of dictionaries if menu. getet pass in our food which is
  


  
    
      3:16:06
    
  
  
  user input if the user selection is not within our menu as a key it will return
  


  
    
      3:16:13
    
  
  
  none so we can use that else if menu .g get food is not
  


  
    
      3:16:21
    
  
  
  none then we would like to append that food item to our cart
  


  
    
      3:16:28
    
  
  
  cart. append our food item so outside of the while loop I'm
  


  
    
      3:16:36
    
  
  
  going to print our cart temporarily just to test
  


  
    
      3:16:41
    
  
  
  it okay select an item Pizza soda
  


  
    
      3:16:47
    
  
  
  pretzel how about a potato Q to quit we have our pizza soda
  


  
    
      3:16:54
    
  
  
  and pretzel but not our potato we don't want that in our cart because that's not on the menu yeah you can just add that
  


  
    
      3:17:00
    
  
  
  line else if menu item. get food is not none that will complete our wild Loop
  


  
    
      3:17:08
    
  
  
  let's calculate a total for every food in our cart let's
  


  
    
      3:17:14
    
  
  
  take our total variable set this equal to Total plus then we need a value
  


  
    
      3:17:22
    
  
  
  associated with a key plus
  


  
    
      3:17:27
    
  
  
  menu. getet method get the food item found within our cart but I'm going to shorten this
  


  
    
      3:17:35
    
  
  
  to Total plus equals menu. getet the
  


  
    
      3:17:40
    
  
  
  value associated with this food in our cart I will also display that food item
  


  
    
      3:17:46
    
  
  
  print print food I'm going to avoid printing our food item on every line I
  


  
    
      3:17:52
    
  
  
  will set the ending character in our print statement just to be a space okay
  


  
    
      3:17:58
    
  
  
  let's see what we have so far I would like popcorn
  


  
    
      3:18:04
    
  
  
  soda pretzel C to quit popcorn soda pretzel
  


  
    
      3:18:11
    
  
  
  then we will display the total I will print a new line
  


  
    
      3:18:18
    
  
  
  print I'll use an upst string total
  


  
    
      3:18:27
    
  
  
  is add a unit of currency total I'll add a format specifier 2f to display two
  


  
    
      3:18:34
    
  
  
  decimal places I'm going to add one line of decorative
  


  
    
      3:18:40
    
  
  
  text let's copy maybe this
  


  
    
      3:18:52
    
  
  
  all right let's test it
  


  
    
      3:18:58
    
  
  
  out select an item popcorn
  


  
    
      3:19:05
    
  
  
  pretzel soda potato CU
  


  
    
      3:19:11
    
  
  
  quit all right here's our cart popcorn pretzel soda we did not include the
  


  
    
      3:19:16
    
  
  
  potato that was not found within our dictionary the total is $1250 well there you have it everybody
  


  
    
      3:19:24
    
  
  
  that is a concession stand program the point of this program was to help us get used to working with dictionaries a
  


  
    
      3:19:30
    
  
  
  dictionary is a collection of key value pairs such as an item and a price and
  


  
    
      3:19:36
    
  
  
  yeah that's a concession stand program in Python well hello again everybody it's
  


  
    
  27.random numbers



  
    
      3:19:44
    
  
  
  me in today's topic I'm going to show you how we can generate some random numbers in Python then at the end of
  


  
    
      3:19:50
    
  
  
  this video as an exercise we're going to create a number guessing program let's begin we will be importing the random
  


  
    
      3:19:57
    
  
  
  module type import random the random module gives us access to a lot of
  


  
    
      3:20:02
    
  
  
  useful methods involving random numbers for a comprehensive list you can use the
  


  
    
      3:20:07
    
  
  
  help function pass in the random module and then we would want to print this
  


  
    
      3:20:16
    
  
  
  here's what we all have access to we have a shuffle method set State
  


  
    
      3:20:22
    
  
  
  seed sample random range random random int random bytes and there's a ton of
  


  
    
      3:20:29
    
  
  
  others but we'll discuss a few of the more useful methods for beginners for a random whole integer maybe you're
  


  
    
      3:20:35
    
  
  
  rolling a six-sided dice you would type the name of the random module dot that a
  


  
    
      3:20:40
    
  
  
  method for a random whole integer type Rand int add a set of parentheses within
  


  
    
      3:20:47
    
  
  
  the set of parentheses you will list a range if I'm rolling a six-sided dice I
  


  
    
      3:20:52
    
  
  
  would like the numbers 1 through six 1 comma 6 then I will assign what is
  


  
    
      3:20:58
    
  
  
  returned to maybe a variable print whatever my number
  


  
    
      3:21:05
    
  
  
  is my random number is a four 3 1 4 all
  


  
    
      3:21:11
    
  
  
  right I tend to play a lot of Dungeons and Dragons we use polyhedral dice that have more or less than six sides there
  


  
    
      3:21:18
    
  
  
  is a 20-sided dice for a random number between 1 and 20 I would set the range
  


  
    
      3:21:24
    
  
  
  to be 1 comma 20 here I rolled a 16 and a s and an 8 within the Rand int
  


  
    
      3:21:32
    
  
  
  method you can place variables as well as long as they contain numbers I will create a variable named low I'll set
  


  
    
      3:21:39
    
  
  
  that equal to one and a variable named High I will set that to be 100 I will replace the
  


  
    
      3:21:46
    
  
  
  numbers with my variables that behave as numbers give me a random integer between
  


  
    
      3:21:52
    
  
  
  my low variable and high variable so between 1 and 100 in this example I have
  


  
    
      3:21:58
    
  
  
  rolled a75 now in 88 if you need a random floating Point number you can use the
  


  
    
      3:22:04
    
  
  
  random method random. random then let's assign this to a
  


  
    
      3:22:10
    
  
  
  variable number equals the random method of the random module that would return a
  


  
    
      3:22:16
    
  
  
  random floating Point number between 0 and 1 you can pick a random Choice from a
  


  
    
      3:22:23
    
  
  
  sequence in the future we're going to create a game of rock paper scissors let's say we have a tuple of
  


  
    
      3:22:31
    
  
  
  options options equals
  


  
    
      3:22:36
    
  
  
  rock paper scissors we are accessing the random
  


  
    
      3:22:42
    
  
  
  module dot then use the choice method place your sequence within the choice
  


  
    
      3:22:48
    
  
  
  method give me a random Choice from options I will store this within a
  


  
    
      3:22:54
    
  
  
  variable let's say option equals random Choice from my options then I will print
  


  
    
      3:23:02
    
  
  
  the option our computer has generated scissors paper rock so the choice method is a
  


  
    
      3:23:10
    
  
  
  great use for games if you ever need a random element now there's also Shuffle
  


  
    
      3:23:16
    
  
  
  this time maybe we have a deck of cards cards equals I guess I'll use a list
  


  
    
      3:23:22
    
  
  
  this
  


  
    
      3:23:32
    
  
  
  time I have a list of cards that you would normally find within a deck of playing cards well besides the suit 2
  


  
    
      3:23:39
    
  
  
  through 10 Jack queen king Ace using the shuffle method I can Shuffle this
  


  
    
      3:23:45
    
  
  
  sequence access the random module do shuffle pass in your
  


  
    
      3:23:51
    
  
  
  sequence in my case it's cards then I will print cards yeah look at that my cards are now
  


  
    
      3:23:59
    
  
  
  shuffled in the future we'll be creating a game of Black Jack the shuffle method will be used then to shuffle our deck of
  


  
    
      3:24:06
    
  
  
  cards those are a few methods found within the random module for some practice let's create a number guessing
  


  
    
      3:24:12
    
  
  
  game as an exercise hey everybody so today we're
  


  
    
  28.number guessing game



  
    
      3:24:17
    
  
  
  going to create a number guessing game using python this is a project meant for beginners by completing this project it
  


  
    
      3:24:24
    
  
  
  will help us reinforce our understanding of previous topics let's begin we will import the random module we'll need to
  


  
    
      3:24:32
    
  
  
  pick a random number the random module is going to handle that for us what is the arrange of random numbers for our
  


  
    
      3:24:39
    
  
  
  number guessing game we'll store those as variables we will have one variable
  


  
    
      3:24:45
    
  
  
  named lowest number I'll set that to be one as well as a variable for highest number which I will
  


  
    
      3:24:52
    
  
  
  set to be 100 feel free to pick a different range if you would like I'll set the range to be 1 through 100 a
  


  
    
      3:25:00
    
  
  
  random number will be selected between this range which will be stored within a
  


  
    
      3:25:05
    
  
  
  variable named answer what is the correct answer so to choose a random number between these two values we will
  


  
    
      3:25:13
    
  
  
  access the random module called the Rand int method we will choose a random
  


  
    
      3:25:19
    
  
  
  integer between these two values the two arguments will be lowest
  


  
    
      3:25:25
    
  
  
  num comma highest num for the second
  


  
    
      3:25:31
    
  
  
  argument let's perform a test run I will print my
  


  
    
      3:25:37
    
  
  
  answer the number is going to be between 1 and
  


  
    
      3:25:43
    
  
  
  100 okay we know that that works here's a few more
  


  
    
      3:25:49
    
  
  
  variables we need to keep track of the number of wrong guesses which I will store as a variable named
  


  
    
      3:25:55
    
  
  
  guesses we want the user to keep guessing as long as our application is
  


  
    
      3:26:00
    
  
  
  running we will create a Boolean variable of is running which we will set
  


  
    
      3:26:05
    
  
  
  to be true once the user wins the game we will set is running to be
  


  
    
      3:26:13
    
  
  
  false we will print a welcome message
  


  
    
      3:26:18
    
  
  
  let's say python number guessing
  


  
    
      3:26:25
    
  
  
  game we will prompt the user I'll use an F string select a number between I'll add
  


  
    
      3:26:35
    
  
  
  two placeholders select a number between our
  


  
    
      3:26:41
    
  
  
  lowest number and our highest number
  


  
    
      3:26:47
    
  
  
  python number guessing game select a number between 1 and 100 now if I was to
  


  
    
      3:26:52
    
  
  
  change the range of these variables that should be reflected temporarily I changed the
  


  
    
      3:26:59
    
  
  
  lowest number to be 10 and the highest number to be 1,000 but let's set that
  


  
    
      3:27:06
    
  
  
  back between 1 and 100 is good we'll need a while loop to continue
  


  
    
      3:27:12
    
  
  
  the game each round we will say y while is
  


  
    
      3:27:18
    
  
  
  running since is running is a Boolean we don't need to say while is running equals true we can just say while is
  


  
    
      3:27:25
    
  
  
  running while this value remains true continue playing the game we will ask the user for some input
  


  
    
      3:27:34
    
  
  
  we will create a local variable of guess guess equals use the input function then enter
  


  
    
      3:27:42
    
  
  
  a prompt enter your guess there's one thing we want to
  


  
    
      3:27:50
    
  
  
  check python number guessing game select a number between 1 and 100 and to your guess what if somebody doesn't type in a
  


  
    
      3:27:57
    
  
  
  number like they type in the word Pizza we should let the user know that that's an invalid
  


  
    
      3:28:04
    
  
  
  guess we'll write the following if statement if our guess use the is digit
  


  
    
      3:28:13
    
  
  
  method if our guess is a digit a number then we will execute any code underneath
  


  
    
      3:28:19
    
  
  
  this if statement for the time being I'll WR pass we'll get back to that later else we will do something
  


  
    
      3:28:26
    
  
  
  else let's print the following print invalid
  


  
    
      3:28:34
    
  
  
  guess let's copy this print statement because I'm lazy and I don't feel like typing it
  


  
    
      3:28:40
    
  
  
  out please select a number between our lowest
  


  
    
      3:28:46
    
  
  
  number and our highest number let's try that again I will guess Pizza which isn't a
  


  
    
      3:28:54
    
  
  
  number and we get the message invalid guess please select a number between 1
  


  
    
      3:29:00
    
  
  
  and 100 all right that works underneath our if statement we'll write the
  


  
    
      3:29:06
    
  
  
  following once we get a guess that is a digit we need to convert it to a number
  


  
    
      3:29:11
    
  
  
  because when you accept user input it's a string we will reassign our guess
  


  
    
      3:29:17
    
  
  
  equal to typ cast our guess as an
  


  
    
      3:29:23
    
  
  
  integer then increase the number of guesses by one guesses plus equals 1
  


  
    
      3:29:29
    
  
  
  because we have already made one guess here's another scenario what if somebody guesses a
  


  
    
      3:29:36
    
  
  
  number outside of this range like one kajillion well we should give a warning
  


  
    
      3:29:43
    
  
  
  that that guess isn't valid if our guess is lower than the lowest
  


  
    
      3:29:53
    
  
  
  number or our guess is greater than the highest
  


  
    
      3:29:59
    
  
  
  number we will print the following that number is out of
  


  
    
      3:30:08
    
  
  
  range and I will reprompt the
  


  
    
      3:30:13
    
  
  
  user please select a number between between the lowest number and the highest
  


  
    
      3:30:20
    
  
  
  number let's perform a test run I will guess one
  


  
    
      3:30:25
    
  
  
  kajillion that number is out of range please select a number between 1 and 100
  


  
    
      3:30:32
    
  
  
  We'll add an lse if statement else if our guess is less than our answer we will
  


  
    
      3:30:40
    
  
  
  print the following to low try
  


  
    
      3:30:48
    
  
  
  again else if our guess is greater than our
  


  
    
      3:30:55
    
  
  
  answer we will print to high try again if our guess
  


  
    
      3:31:03
    
  
  
  isn't less than our answer and our guess isn't greater than our answer that means we must have the correct answer within
  


  
    
      3:31:11
    
  
  
  an L statement we will print I'll use an F string
  


  
    
      3:31:16
    
  
  
  string correct the answer was insert our answer
  


  
    
      3:31:23
    
  
  
  our answer variable then print the number of guesses it
  


  
    
      3:31:29
    
  
  
  took number of guesses add a placeholder place in our guesses within
  


  
    
      3:31:37
    
  
  
  the placeholder now to escape the while loop we will take our Boolean variable
  


  
    
      3:31:42
    
  
  
  of is running which is normally true and set that to be false to
  


  
    
      3:31:47
    
  
  
  escape and that should be all we need let's run this one last time python number guessing game select
  


  
    
      3:31:54
    
  
  
  a number between 1 and 100 let's select a number right in the middle 50 too low
  


  
    
      3:32:01
    
  
  
  try again so the number is between 50 and 100 75 too high it's between 50 and 75 then
  


  
    
      3:32:12
    
  
  
  62 too high
  


  
    
      3:32:18
    
  
  
  56 53 55 correct the answer was 55 number of
  


  
    
      3:32:26
    
  
  
  guesses it took me six all right everybody that is a python number guessing game you yourself can
  


  
    
      3:32:33
    
  
  
  create as a mini project hey everybody in today's topic I
  


  
    
  29.rock, paper, scissors game



  
    
      3:32:39
    
  
  
  thought we would create a game of rock paper scissors now that we know how the random module Works let's begin by by
  


  
    
      3:32:46
    
  
  
  importing the random module we will create some options we will use a tupple
  


  
    
      3:32:52
    
  
  
  we're not going to be changing the options so a tuple would be better than a list we have three options
  


  
    
      3:32:59
    
  
  
  rock paper or scissors I'll create a variable named
  


  
    
      3:33:06
    
  
  
  player to store the Player's Choice for now I'm going to set this to be none as
  


  
    
      3:33:12
    
  
  
  well as a computer our computer is going to pick a random Choice from these
  


  
    
      3:33:17
    
  
  
  options rock paper or scissors in order to do so we can use the choice method of
  


  
    
      3:33:23
    
  
  
  the random module random. choice pick a random Choice from
  


  
    
      3:33:31
    
  
  
  options let's have the player enter in some
  


  
    
      3:33:37
    
  
  
  input enter a
  


  
    
      3:33:43
    
  
  
  choice Rock paper
  


  
    
      3:33:50
    
  
  
  scissors then we will display the Player's Choice and the computer's Choice I'll use an FST
  


  
    
      3:33:58
    
  
  
  string player colon space the variable
  


  
    
      3:34:04
    
  
  
  player let's copy that paste it then change player to
  


  
    
      3:34:12
    
  
  
  computer let's see what we have so far enter a choice rock paper
  


  
    
      3:34:18
    
  
  
  scissors so I pick Rock the computer picks scissors let's try it again just
  


  
    
      3:34:23
    
  
  
  for good measure I pick paper this time the computer picks
  


  
    
      3:34:29
    
  
  
  scissors I pick scissors the computer picks paper okay we know that the computer is successfully picking a
  


  
    
      3:34:35
    
  
  
  random Choice from our options now what if the player picks something that's not within this tupple such as the gun well
  


  
    
      3:34:44
    
  
  
  we would want to stop that right we need the user to pick a valid option only rock paper or scissors I think what
  


  
    
      3:34:51
    
  
  
  we'll do is that when we accept the user input let's place it within a while loop so indent this
  


  
    
      3:34:57
    
  
  
  line while this condition is going to be kind of weird while our player variable
  


  
    
      3:35:04
    
  
  
  is not in our tle options let's try this again to see what
  


  
    
      3:35:10
    
  
  
  happens I pick the gun enter a choice all right well if I can't pick a gun how
  


  
    
      3:35:16
    
  
  
  about a sponge well I can't pick that either rock that works our condition is while
  


  
    
      3:35:24
    
  
  
  the player variable is not found within our options if the player doesn't pick
  


  
    
      3:35:30
    
  
  
  one of these options this while loop will continue forever once we pick something that's within our options we
  


  
    
      3:35:37
    
  
  
  then escape the while loop let's check some win conditions now if the player is
  


  
    
      3:35:44
    
  
  
  equal to computer that means it's a tie I will
  


  
    
      3:35:50
    
  
  
  print it's a tie I'll add a few else if statements
  


  
    
      3:35:56
    
  
  
  else if the player is equal to rock I'll
  


  
    
      3:36:01
    
  
  
  use the and logical operator and the computer is equal to
  


  
    
      3:36:08
    
  
  
  scissors that means you win let's print you win let's add another condition else
  


  
    
      3:36:17
    
  
  
  if the player picks paper and the
  


  
    
      3:36:25
    
  
  
  computer picks Rock then you also win you
  


  
    
      3:36:34
    
  
  
  win else if the player picks
  


  
    
      3:36:40
    
  
  
  scissors and the computer and the computer picks
  


  
    
      3:36:48
    
  
  
  paper then we will print you win
  


  
    
      3:36:55
    
  
  
  else if the Player's Choice is not the same as the computer's and we don't meet
  


  
    
      3:37:01
    
  
  
  any win conditions that must mean we lose print you
  


  
    
      3:37:08
    
  
  
  lose let's see if this works enter a choice rock paper scissors I pick the
  


  
    
      3:37:13
    
  
  
  gun nope I can't pick that I pick Rock I pick Rock the computer picks scissors
  


  
    
      3:37:19
    
  
  
  you win let me see if I can lose I'll pick paper you win
  


  
    
      3:37:25
    
  
  
  again scissors I need to stop winning I need to see if the lose condition
  


  
    
      3:37:31
    
  
  
  works okay it's a tie at least but I need to lose all right there we go I pick Rock
  


  
    
      3:37:38
    
  
  
  the computer picks paper you lose what if the user would like to play again
  


  
    
      3:37:43
    
  
  
  let's place all of this code with within a wild Loop let's do so right about here
  


  
    
      3:37:49
    
  
  
  now I'm not going to write while true like I normally do this time I'm going to create a variable let's say running
  


  
    
      3:37:57
    
  
  
  is our game running I will set that to be true while running equals true or we
  


  
    
      3:38:07
    
  
  
  could shorten this to just while running that's simpler I will place all of this code
  


  
    
      3:38:14
    
  
  
  within the wild Loop to mass indent some code just highlight all of the code then press tab hey everybody this is bro from
  


  
    
      3:38:21
    
  
  
  the future I forgot to explain something the reason I'm not setting the condition of my while loop to be true is that if
  


  
    
      3:38:28
    
  
  
  you have a lot of code within a while loop it can be really difficult to find where the break statement is if I set my
  


  
    
      3:38:35
    
  
  
  condition to be a Boolean variable such as running it's a lot easier to find any
  


  
    
      3:38:40
    
  
  
  instance where I use this variable if I were to highlight it we can see that running is found down here here if I
  


  
    
      3:38:46
    
  
  
  need to change any instance of this variable and rename it to something you can refactor let's rename running as
  


  
    
      3:38:53
    
  
  
  maybe playing then I will refactor so my variable running is now playing and that
  


  
    
      3:39:00
    
  
  
  change was made down here too so it's a coding preference every time we start a new game I will reset the player as well
  


  
    
      3:39:07
    
  
  
  as the computer let's move these two lines into the while loop at the beginning so when we start a new game we
  


  
    
      3:39:15
    
  
  
  will reset the player the computer will pick a new random choice so let's see what we have so
  


  
    
      3:39:21
    
  
  
  far Rock I pick Rock the computer picks Rock it's a tie then we have to play
  


  
    
      3:39:28
    
  
  
  again so paper you lose scissors it's a
  


  
    
      3:39:33
    
  
  
  tie now what if we would like to escape the while loop after our wi conditions
  


  
    
      3:39:38
    
  
  
  I'm going to create a temporary variable let's name this play again then we will
  


  
    
      3:39:44
    
  
  
  ask for some user input play again question
  


  
    
      3:39:51
    
  
  
  mark y sln meaning yes or no if the user types
  


  
    
      3:39:57
    
  
  
  in something that's capital I'm going to use the lower method to make it lowercase so if our play again variable
  


  
    
      3:40:05
    
  
  
  is equal to Y we would like to escape what I would
  


  
    
      3:40:10
    
  
  
  like to do is I would like to see if the player types in something that's not y I
  


  
    
      3:40:16
    
  
  
  will precede this condition with the not logical operator if the user does not
  


  
    
      3:40:24
    
  
  
  want to play again then let's take our Boolean variable running normally it's
  


  
    
      3:40:30
    
  
  
  true and set that to be false running equals false that means we will escape the wild
  


  
    
      3:40:38
    
  
  
  Loop once we escape the while loop I will print thanks for playing
  


  
    
      3:40:46
    
  
  
  now I'm going to change this momentarily I just want to test it Rock play again
  


  
    
      3:40:52
    
  
  
  yes paper play again yes scissors you lose play again nope thanks
  


  
    
      3:41:00
    
  
  
  for playing this is entirely optional I try and create as few variables as possible I would personally rather avoid
  


  
    
      3:41:08
    
  
  
  creating a variable here another way in which I could write this is that I can get rid of this variable
  


  
    
      3:41:19
    
  
  
  let's move if notot in front of the input and follow our input here then use
  


  
    
      3:41:28
    
  
  
  the comparison operator and add a colon if the user's
  


  
    
      3:41:34
    
  
  
  input after making it lowercase does not equal a y for yes set
  


  
    
      3:41:41
    
  
  
  running to be false so that should work the same Rock play again yes enter a choice paper
  


  
    
      3:41:51
    
  
  
  play again no thanks for playing this line would work the same but it's a
  


  
    
      3:41:56
    
  
  
  little more complex for beginners to read or you can use the other method that I showed you all right everybody
  


  
    
      3:42:02
    
  
  
  well that's a game of rock paper scissors hello everybody today we will
  


  
    
  30.dice roller program



  
    
      3:42:08
    
  
  
  be creating a dice roller program in Python we will be utilizing some aski art I'll post all of the ask ke art that
  


  
    
      3:42:15
    
  
  
  we'll need in the description of this video you can copy and paste it to save time if you'd like all right let's get
  


  
    
      3:42:21
    
  
  
  started everybody we will Begin by importing the random module because we will be rolling some random numbers
  


  
    
      3:42:27
    
  
  
  between 1 through six if we're going to create some esy art we'll be utilizing Unicode characters to enter in a Unicode
  


  
    
      3:42:35
    
  
  
  character it really varies depending on your operating system I think the easiest way would just be to use Python
  


  
    
      3:42:41
    
  
  
  to enter a Unicode character type award slash then a given code for each character here are all of the codes that
  


  
    
      3:42:47
    
  
  
  we'll
  


  
    
      3:42:57
    
  
  
  need after writing these seven Unicode characters let's run this program these
  


  
    
      3:43:03
    
  
  
  symbols that are output let's copy them I'll add them to a comment then we can
  


  
    
      3:43:09
    
  
  
  delete this line these are the Unicode characters we'll need to build some asy art some dice
  


  
    
      3:43:15
    
  
  
  each die will be made out of five lines let's begin with the first we'll
  


  
    
      3:43:22
    
  
  
  need a left corner nine dashes then the right
  


  
    
      3:43:30
    
  
  
  corner for the second line copy this vertical bar add nine
  


  
    
      3:43:38
    
  
  
  spaces then a vertical bar we can copy this whole line paste it two times
  


  
    
      3:43:46
    
  
  
  let's use the left bottom corner add nine of these
  


  
    
      3:43:52
    
  
  
  dashes then the bottom right corner and here's a basic box shape
  


  
    
      3:43:58
    
  
  
  depending on what the number die is we can add one of these bullet points for a one we can add that right to the middle
  


  
    
      3:44:04
    
  
  
  so that's good for now we'll delete this later let's create a dictionary I will name this dictionary dice
  


  
    
      3:44:13
    
  
  
  art our dictionary is made out of key value pairs so the keys will be the
  


  
    
      3:44:18
    
  
  
  numbers 1 through six beginning with one the value will be a tupple it's a
  


  
    
      3:44:25
    
  
  
  dictionary made out of key value pairs where the value is a tupple within the
  


  
    
      3:44:31
    
  
  
  tupple let's add these lines each separated with the comma
  


  
    
      3:44:47
    
  
  
  I'm going to format these so they form a box shape let's take our bullet point place
  


  
    
      3:44:55
    
  
  
  it right in the middle then add a comma to the end of this key value pair that is the first key value pair let's copy
  


  
    
      3:45:03
    
  
  
  all of this paste it again change one to two let's move this bullet point we need two
  


  
    
      3:45:10
    
  
  
  bullet points about right here and here
  


  
    
      3:45:15
    
  
  
  let's repeat this process for Keys 3 through
  


  
    
      3:45:41
    
  
  
  six be sure to get rid of the comma at the end and here is our dictionary of dice art
  


  
    
      3:45:49
    
  
  
  each key is a number each value is a tupple made of strings let's create a list of dice our
  


  
    
      3:45:58
    
  
  
  dice will be numbers randomly generated between 1 and six a total to calculate
  


  
    
      3:46:05
    
  
  
  the total I'll set that to be zero then we will ask a user for a
  


  
    
      3:46:10
    
  
  
  number of dice this will will be some
  


  
    
      3:46:16
    
  
  
  input how many dice then typ cast the input as an
  


  
    
      3:46:23
    
  
  
  integer we don't want somebody to write you know 2.5 dice you can't roll half a die to generate a random number you can
  


  
    
      3:46:30
    
  
  
  use the Rand int method of the random module we need a random number between 1
  


  
    
      3:46:37
    
  
  
  and six then we need to append this number to our list of dice dice data
  


  
    
      3:46:45
    
  
  
  pend then we can move this line to within the append
  


  
    
      3:46:50
    
  
  
  method we need to do this a number of times depending on how many dice the user enters in we can place this line
  


  
    
      3:46:57
    
  
  
  within a four Loop for every die in our
  


  
    
      3:47:04
    
  
  
  range number of dice this will be a number let's print our list of dice to
  


  
    
      3:47:11
    
  
  
  see what numbers we have in here how many dice I would like five dice 5 3 3 4
  


  
    
      3:47:18
    
  
  
  6 okay we know that that works let's calculate a total we'll need to iterate
  


  
    
      3:47:23
    
  
  
  and sum all of the elements within our list we can do that with the for Loop
  


  
    
      3:47:30
    
  
  
  for every die in our list dice take our
  


  
    
      3:47:36
    
  
  
  total variable plus equals the current value within our
  


  
    
      3:47:42
    
  
  
  dice then we will print a total I'll use an F string total colon
  


  
    
      3:47:49
    
  
  
  space our total variable let's see what we have so
  


  
    
      3:47:56
    
  
  
  far how many dice I would like five dice our total is 19 now between these two
  


  
    
      3:48:02
    
  
  
  for Loops we will display our ASI art the easiest way would be to create some
  


  
    
      3:48:08
    
  
  
  nested for Loops the outer for Loop will be in charge of the number of dice for
  


  
    
      3:48:14
    
  
  
  every die in our range number of
  


  
    
      3:48:23
    
  
  
  dice the inner for Loop will be in charge of printing every
  


  
    
      3:48:30
    
  
  
  tupple for every line in then to get a
  


  
    
      3:48:35
    
  
  
  value in our dictionary we would type the name of the dictionary dice art then
  


  
    
      3:48:41
    
  
  
  use the get method what are we getting we're getting a value at a given key
  


  
    
      3:48:48
    
  
  
  let's take our list of numbers dice at index of D our
  


  
    
      3:48:55
    
  
  
  counter depending on what the user types in for the number of dice D will begin at one then
  


  
    
      3:49:01
    
  
  
  increment within the inner four Loop we will print the line so let's take a look
  


  
    
      3:49:10
    
  
  
  how many dice I would like three Dice and here's our aski art six + 2 + 4 that
  


  
    
      3:49:16
    
  
  
  equals 12 if you would prefer we can display all of these dice on a single horizontal
  


  
    
      3:49:24
    
  
  
  line instead of one vertical line it's a little more tricky though if you would prefer that approach let's turn this
  


  
    
      3:49:31
    
  
  
  chunk of code into comments we will write this nested Loop
  


  
    
      3:49:36
    
  
  
  a little different so each tupple is made up of five elements
  


  
    
      3:49:42
    
  
  
  right so if we're printing a horizontal line let's say we roll the numbers 1
  


  
    
      3:49:48
    
  
  
  through 3 we would first need to display this line of the first dice then the
  


  
    
      3:49:54
    
  
  
  first line of the second dice then the first line of the third dice during the
  


  
    
      3:50:00
    
  
  
  next iteration of the outer loop we would display the second line of the first dice the second line of the second
  


  
    
      3:50:06
    
  
  
  dice the second line of the third dice so it's a little more complex let's
  


  
    
      3:50:12
    
  
  
  create an outer loop that will iterate five times for every line in range
  


  
    
      3:50:21
    
  
  
  five then the nested Loop will be for every die in
  


  
    
      3:50:28
    
  
  
  dice how many dice do we have within our
  


  
    
      3:50:33
    
  
  
  list we will print we're going to get one of the values found at one of the
  


  
    
      3:50:38
    
  
  
  numbers that we roll take our dictionary of dice art
  


  
    
      3:50:45
    
  
  
  do get then a number 1 through six that will be the value found within
  


  
    
      3:50:52
    
  
  
  our list of dice get the current die remember that this is a number 1 through
  


  
    
      3:50:58
    
  
  
  six we would then need one of the elements found within our Tuple so get
  


  
    
      3:51:03
    
  
  
  the first line then the second line third fourth
  


  
    
      3:51:10
    
  
  
  fifth so let's add the index operator place our counter of line
  


  
    
      3:51:16
    
  
  
  within the index operator let's see what we have so far we need to add one more thing how
  


  
    
      3:51:22
    
  
  
  many dice three this is an Abomination there's one
  


  
    
      3:51:27
    
  
  
  more change we need to make at the end of our print statement let's set the ending character to be an
  


  
    
      3:51:35
    
  
  
  empty string and that should fix that how many dice three okay we're getting better
  


  
    
      3:51:42
    
  
  
  results then when we escape the inner loop we will print a new line how many dice
  


  
    
      3:51:49
    
  
  
  three and there we are 3 + 6 + 1 is 10
  


  
    
      3:51:55
    
  
  
  all right everybody so that is a dice roller program it is kind of complex but I thought this might be a good exercise
  


  
    
      3:52:02
    
  
  
  if you would like a copy of this code I will post all of this in the comment section down below and well yeah that's
  


  
    
      3:52:07
    
  
  
  a dice roller program in Python hey everybody today I need to
  


  
    
  31.functions



  
    
      3:52:13
    
  
  
  explain function funs think of a function as a block of reusable code to invoke a function you place a set of
  


  
    
      3:52:20
    
  
  
  parentheses after the function name to invoke it here's a scenario I need to
  


  
    
      3:52:25
    
  
  
  sing Happy Birthday three times I know it's a weird example but it makes a lot of sense just trust me on this if I need
  


  
    
      3:52:32
    
  
  
  to sing Happy Birthday three times I would write something like this I'm going to create my own version of the
  


  
    
      3:52:38
    
  
  
  Happy Birthday song
  


  
    
      3:52:45
    
  
  
  this is one verse if I need to repeat this code three times without using functions I could either repeat this
  


  
    
      3:52:52
    
  
  
  code or maybe place it within a loop so here's my Happy Birthday song
  


  
    
      3:52:58
    
  
  
  three times but there's a better way of handling this that doesn't involve repeating our code or using Loops what
  


  
    
      3:53:05
    
  
  
  if I could write this code once then reuse it whenever I need to that's where functions come in to define a function
  


  
    
      3:53:12
    
  
  
  you would type DF then a unique function name let's name this function the happy
  


  
    
      3:53:19
    
  
  
  birthday function add a set of parentheses a colon any code that belongs to the function you'll want to
  


  
    
      3:53:26
    
  
  
  indent underneath then to invoke this function I would type the name of the
  


  
    
      3:53:31
    
  
  
  function happy birthday add a set of parentheses and that's
  


  
    
      3:53:36
    
  
  
  it when you invoke this function you will execute this code once if I need to
  


  
    
      3:53:42
    
  
  
  execute this code three times I would just call it two more times happy birthday happy birthday
  


  
    
      3:53:48
    
  
  
  happy birthday to invoke a function you type the function name then add a set of parentheses I like to think of the
  


  
    
      3:53:54
    
  
  
  parentheses as a pair of telephones talking to each other you call a function to invoke it hey happy birthday
  


  
    
      3:54:00
    
  
  
  function execute your code with functions you are able to send data directly to a function using what are
  


  
    
      3:54:07
    
  
  
  known as arguments you can send values or variables directly to a function place any data within the set of
  


  
    
      3:54:13
    
  
  
  parentheses I'll send my function a first name any data you send a function are known as arguments but you need a
  


  
    
      3:54:21
    
  
  
  matching set of parameters that are in order what exactly is the data we're sending in well it's a name I will add
  


  
    
      3:54:28
    
  
  
  one parameter to my happy birthday function I will name this data name a parameter is kind of like a temporary
  


  
    
      3:54:35
    
  
  
  variable that's used within a function I'm going to replace this instance of you with a name I will use an F string
  


  
    
      3:54:44
    
  
  
  repl place you with a placeholder I will add my parameter name so happy birthday
  


  
    
      3:54:50
    
  
  
  to bro we could pass in some other names what about
  


  
    
      3:54:57
    
  
  
  Steve and Joe here we are happy birthday to bro
  


  
    
      3:55:04
    
  
  
  happy birthday to Steve happy birthday to Joe when you invoke a function you can send more than one argument let's
  


  
    
      3:55:11
    
  
  
  send an age this time I'll send 20
  


  
    
      3:55:16
    
  
  
  30 and 40 but when I run this we have an error we're passing in two arguments but
  


  
    
      3:55:24
    
  
  
  our function is set up only to take one I would need a matching number of arguments to invoke this function we
  


  
    
      3:55:31
    
  
  
  will need two parameters we have a name and we have an
  


  
    
      3:55:36
    
  
  
  age then let's use this age you are let's make this line an F
  


  
    
      3:55:43
    
  
  
  string a age years old let's try that
  


  
    
      3:55:49
    
  
  
  again happy birthday to bro you are 20 years old happy birthday to Steve you
  


  
    
      3:55:55
    
  
  
  are 30 years old happy birthday to Joe you are 40 years old when you invoke a function you can pass in some data those
  


  
    
      3:56:02
    
  
  
  are known as arguments but you'll need a matching set of parameters the order does matter let's see what happens when
  


  
    
      3:56:09
    
  
  
  I switch these two parameters age then name
  


  
    
      3:56:15
    
  
  
  happy birthday 220 you are bro years old happy birthday 230 you are Steve years
  


  
    
      3:56:21
    
  
  
  old happy birthday 240 you are Joe years old so the position of the parameters
  


  
    
      3:56:27
    
  
  
  does matter same thing goes with the arguments you also could name these parameters something unique maybe X and
  


  
    
      3:56:34
    
  
  
  Y happy birthday to X you are y years old that's also valid let's try another
  


  
    
      3:56:42
    
  
  
  example I'm going to create a function to display an
  


  
    
      3:56:48
    
  
  
  invoice there will be three parameters a username an amount and a due
  


  
    
      3:56:57
    
  
  
  date let's print hello I should make this an FST
  


  
    
      3:57:04
    
  
  
  string username we'll use another FST
  


  
    
      3:57:11
    
  
  
  string your bill of
  


  
    
      3:57:18
    
  
  
  amount let's preedee this placeholder with the unit of currency I will also add a format specifier point
  


  
    
      3:57:27
    
  
  
  2f is do on our due date whatever that
  


  
    
      3:57:33
    
  
  
  parameter is to invoke this function we will type the function's name add a set
  


  
    
      3:57:38
    
  
  
  of parentheses a username an amount and a due date let's make up some username
  


  
    
      3:57:46
    
  
  
  an amount I guess $42.50 I'm just making up a number
  


  
    
      3:57:51
    
  
  
  here then a due date the 1st of January I guess here's my invoice hello bro code
  


  
    
      3:57:58
    
  
  
  your bill of $42.50 is due on January 1st let's change these arguments Joe Schmo is the
  


  
    
      3:58:06
    
  
  
  username he owes $100 and 1 Penny due on
  


  
    
      3:58:12
    
  
  
  the 1st of February or or January 2nd depending on how you read dates in your region hello Joe Mo your bill of $100
  


  
    
      3:58:20
    
  
  
  And1 is due on 1/2 that's another example now we need to explain the
  


  
    
      3:58:26
    
  
  
  return statement return is a statement that is used to end a function and send
  


  
    
      3:58:31
    
  
  
  a result back to the caller here's an example we have a variable z z will
  


  
    
      3:58:37
    
  
  
  equal will invoke a function to add two numbers together such as the numbers one
  


  
    
      3:58:43
    
  
  
  and two when we invoke a function we can send some data back after adding one and two
  


  
    
      3:58:50
    
  
  
  we will send the result which would be three then this value can be assigned to a variable then we can print whatever Z
  


  
    
      3:58:58
    
  
  
  is so let's create some functions let's create a function to add two numbers
  


  
    
      3:59:03
    
  
  
  together the parameters will be X and Y let's say Z
  


  
    
      3:59:10
    
  
  
  equal x + y then we will return our value Z so I'm not going to
  


  
    
      3:59:18
    
  
  
  print Z directly right now let's subtract X and Y subtract z = xus y return
  


  
    
      3:59:30
    
  
  
  Z multiply x *
  


  
    
      3:59:38
    
  
  
  y then divide
  


  
    
      3:59:44
    
  
  
  x / y return Z let's invoke our add function pass in two numbers 1 and two
  


  
    
      3:59:52
    
  
  
  then I'm going to print the result after adding these two numbers
  


  
    
      3:59:58
    
  
  
  together the result is three what about
  


  
    
      4:00:03
    
  
  
  subtract subtract 1 and two the result is -
  


  
    
      4:00:08
    
  
  
  1 multiply the result is
  


  
    
      4:00:15
    
  
  
  two then divide 1 / 2 is 0.5 after we resolve
  


  
    
      4:00:23
    
  
  
  this function a value is returned just imagine that after we finish this function this function becomes whatever
  


  
    
      4:00:29
    
  
  
  is returned three this function becomes - 1 this function becomes 2 this
  


  
    
      4:00:36
    
  
  
  function becomes 0.5 let's write something a little more
  


  
    
      4:00:42
    
  
  
  complex we will create a function to create a full name
  


  
    
      4:00:47
    
  
  
  create name we'll need two parameters for a first name and a last name I'll
  


  
    
      4:00:53
    
  
  
  name these first and last what do we want to do within this function let's capitalize the user's
  


  
    
      4:01:00
    
  
  
  first name first equals first. capitalize
  


  
    
      4:01:05
    
  
  
  method then do the same thing with the last name last equals last. capitalize
  


  
    
      4:01:15
    
  
  
  then I'm going to return the user's first name plus their last name then
  


  
    
      4:01:20
    
  
  
  I'll add a space in between their first and last name this is also valid outside of the
  


  
    
      4:01:26
    
  
  
  function let's create a full name variable then invoke the create name
  


  
    
      4:01:32
    
  
  
  function so this function is going to capitalize the first and last name for us I'll type in my first name all
  


  
    
      4:01:39
    
  
  
  lowercase same thing with my last name then let's let's print our full
  


  
    
      4:01:47
    
  
  
  name and here is my full name variable we sent our function some arguments we
  


  
    
      4:01:52
    
  
  
  have some parameters set up we took those values made them uppercase then concatenated these strings together then
  


  
    
      4:02:00
    
  
  
  return them as a single string let's try this with a different name
  


  
    
      4:02:05
    
  
  
  SpongeBob SquarePants SpongeBob now has a full
  


  
    
      4:02:11
    
  
  
  name the first and last names are now cap ized using the return statement you can return some data back to the place
  


  
    
      4:02:18
    
  
  
  in which you call a function well everybody that's a function it's a section of reusable code to call a
  


  
    
      4:02:25
    
  
  
  function you type the function's name add a set of parentheses you can send a function some data which are known as
  


  
    
      4:02:32
    
  
  
  arguments but you'll need a matching set of parameters you also do have the option of returning some data back to
  


  
    
      4:02:39
    
  
  
  the place in which you invoke a function we'll be using functions a lot in the future but we will get more practice
  


  
    
      4:02:45
    
  
  
  with them and those are functions in Python hey everybody today I'm going to
  


  
    
  32.default arguments



  
    
      4:02:52
    
  
  
  explain default arguments default arguments are a default value for
  


  
    
      4:02:57
    
  
  
  certain parameters the default is used when that argument is omitted when you invoke a function in the last topic we
  


  
    
      4:03:04
    
  
  
  discussed positional arguments today we will be examining default arguments then in future topics we'll examine keyword
  


  
    
      4:03:11
    
  
  
  and arbitrary arguments let's begin in let's define a function to calculate net
  


  
    
      4:03:17
    
  
  
  price there will be three parameters an original list
  


  
    
      4:03:22
    
  
  
  price a discount if there is one and sales
  


  
    
      4:03:29
    
  
  
  tax we will return a net price and here's the
  


  
    
      4:03:34
    
  
  
  formula list price times 1 minus our discount
  


  
    
      4:03:42
    
  
  
  percentage times 1 plus our sales tax maybe I'm buying a
  


  
    
      4:03:49
    
  
  
  PlayStation 5 for $500 I will pass in 500 for the list price well I can't actually execute this
  


  
    
      4:03:57
    
  
  
  function without also passing in an argument for Discount and tax perhaps the discount is zero and the sales tax
  


  
    
      4:04:04
    
  
  
  is 5% 0.05 well this would work and I should probably put this within a print
  


  
    
      4:04:10
    
  
  
  statement so you can see it there we are my total is
  


  
    
      4:04:16
    
  
  
  $525 the list price of 500 no discount and 5% sales tax now suppose that maybe
  


  
    
      4:04:24
    
  
  
  90% of the time when we're executing this function most of the time discount is zero and our sales tax is almost
  


  
    
      4:04:31
    
  
  
  always the same what we could do to make this function a little more flexible is to set these two parameters to have a
  


  
    
      4:04:38
    
  
  
  default value in place of sending in three arguments we can pass in one then
  


  
    
      4:04:43
    
  
  
  s our discount and our tax to have a default value so I will set discount to
  


  
    
      4:04:48
    
  
  
  be zero and tax to be 0.05 meaning 5% so
  


  
    
      4:04:54
    
  
  
  this function would work our total is 525 and that's assuming that our
  


  
    
      4:04:59
    
  
  
  discount is zero and our tax is 5% the nice thing about using default arguments
  


  
    
      4:05:05
    
  
  
  is that let's say that somebody has a discount well this function would also accept up to two additional
  


  
    
      4:05:12
    
  
  
  arguments so let's print our net price 500 and our customer has a coupon
  


  
    
      4:05:21
    
  
  
  for 10% off I'll add a second argument of
  


  
    
      4:05:26
    
  
  
  0.1 if we're passing in an argument for our discount we'll use whatever is passed in rather than the default our
  


  
    
      4:05:33
    
  
  
  total now is $472 or maybe this
  


  
    
      4:05:38
    
  
  
  time they are not paying sales tax I will set the sales tax to be zero
  


  
    
      4:05:45
    
  
  
  now the customer total is $450 so that's kind of the nice thing about default arguments it makes your
  


  
    
      4:05:51
    
  
  
  functions more flexible and it can reduce the number of arguments especially if the arguments that you're
  


  
    
      4:05:56
    
  
  
  passing in tend to be consistent most of the time people don't have a discount and almost everybody is paying 5% sales
  


  
    
      4:06:03
    
  
  
  tax why pass an arguments if we don't have to Let's cover an exercise we'll create a count up timer we will import
  


  
    
      4:06:11
    
  
  
  the time module we will Define this function define count there will be two
  


  
    
      4:06:18
    
  
  
  arguments start and end for X in
  


  
    
      4:06:27
    
  
  
  range start comma and within the range
  


  
    
      4:06:33
    
  
  
  function the second argument is exclusive so I'm going to add one to the end of our
  


  
    
      4:06:39
    
  
  
  time then I will print X to make this thread that's running the program sleep
  


  
    
      4:06:45
    
  
  
  you can access the time modules Sleep Method pass in one for one
  


  
    
      4:06:51
    
  
  
  second then outside of the for Loop let's print the word
  


  
    
      4:06:56
    
  
  
  done to invoke this function I need to pass in two arguments a start time and
  


  
    
      4:07:02
    
  
  
  an end time I'll set the start time to be zero the end time to be 10 10
  


  
    
      4:07:08
    
  
  
  seconds so we start at zero then we will increment by one every second I'll speed
  


  
    
      4:07:14
    
  
  
  up the video I think you get the idea but we'll stop at
  


  
    
      4:07:20
    
  
  
  10 let's assume that most of the time a user would like to begin at zero well we
  


  
    
      4:07:25
    
  
  
  don't necessarily need to pass that in as an argument let's set our start parameter to have a default value of
  


  
    
      4:07:32
    
  
  
  zero we only need to pass in one argument but we do have a problem
  


  
    
      4:07:38
    
  
  
  non-default arguments should follow default arguments so if you use any
  


  
    
      4:07:43
    
  
  
  default arguments you'll want to be sure that they're after any positional arguments so let's reverse these and
  


  
    
      4:07:51
    
  
  
  that should work so now when I run this program it's assuming we'd like to start at
  


  
    
      4:07:58
    
  
  
  zero but we'll need to pass in an ending amount of seconds when do we want to
  


  
    
      4:08:04
    
  
  
  stop that works the same but now we do have the option of starting at a different number this time let's end at
  


  
    
      4:08:12
    
  
  
  30 but we will begin at 15 we're beginning at 15 then we will
  


  
    
      4:08:19
    
  
  
  count to 30 I'll speed up the
  


  
    
      4:08:26
    
  
  
  video there we are all right everybody so in conclusion default arguments they
  


  
    
      4:08:31
    
  
  
  are default values for certain parameters the default value is used when an argument is omitted they can
  


  
    
      4:08:38
    
  
  
  make your functions more flexible and reduce the number of arguments you have to pass in especially if those arguments
  


  
    
      4:08:44
    
  
  
  are consistent most of the time so those are default arguments and in the next topic we will discuss keyword arguments
  


  
    
      4:08:50
    
  
  
  and well yeah those are default arguments in Python hey friends it's me again today
  


  
    
  33.keyword arguments 🗝️



  
    
      4:08:58
    
  
  
  I'm going to explain keyword arguments a keyword argument is an argument preceded
  


  
    
      4:09:03
    
  
  
  by an identifier it has a few benefits it helps with readability and the Order of the arguments doesn't matter if
  


  
    
      4:09:10
    
  
  
  they're keywords keyword arguments are one of four basic styles of arguments we
  


  
    
      4:09:15
    
  
  
  discuss positional default then next we'll discuss arbitrary but today we'll be focusing on keyword suppose I have a
  


  
    
      4:09:22
    
  
  
  function to display a message like a greeting I will name this function the
  


  
    
      4:09:27
    
  
  
  hello function we will need a greeting a title Mr Mrs
  


  
    
      4:09:34
    
  
  
  doctor a first name then a last name all I'm going to do within this
  


  
    
      4:09:40
    
  
  
  function is print an F string I will print my
  


  
    
      4:09:47
    
  
  
  greeting the user's title first
  


  
    
      4:09:54
    
  
  
  name last name then to invoke the hello function I
  


  
    
      4:09:59
    
  
  
  will need to pass in four arguments a greeting a title a first name and a last
  


  
    
      4:10:04
    
  
  
  name so for my greeting let's say hello the title will be Mr
  


  
    
      4:10:14
    
  
  
  the first name will be SpongeBob last name
  


  
    
      4:10:20
    
  
  
  SquarePants so you know this does work we're currently using positional arguments the position of these
  


  
    
      4:10:26
    
  
  
  arguments does matter so what if I were to switch these around we have hello
  


  
    
      4:10:32
    
  
  
  SpongeBob SquarePants followed by Mister hello SpongeBob SquarePants Mis an
  


  
    
      4:10:38
    
  
  
  optional feature when sending arguments to a function is that we could turn these into into keyword arguments prefix
  


  
    
      4:10:45
    
  
  
  any arguments with the name of the parameter followed by equals title equals
  


  
    
      4:10:51
    
  
  
  Mister first equals SpongeBob last equals SquarePants then
  


  
    
      4:10:57
    
  
  
  with these keyword arguments the order really doesn't matter maybe we move the first name to the
  


  
    
      4:11:04
    
  
  
  end and the still would print out is the same thing we have title first name last name if you're mixing and matching
  


  
    
      4:11:11
    
  
  
  positional arguments and key word arguments you want to be sure that the positional arguments are first so if I
  


  
    
      4:11:17
    
  
  
  was to move the string or greeting to the end well this technically wouldn't work
  


  
    
      4:11:24
    
  
  
  we have a syntax error positional arguments follow keyword arguments so make sure any positional arguments are
  


  
    
      4:11:31
    
  
  
  first before using any keyword arguments two helpful benefits of using keyword
  


  
    
      4:11:36
    
  
  
  arguments is that it helps with readability and the Order of the arguments doesn't matter we know what
  


  
    
      4:11:41
    
  
  
  this argument is as well as is these two title last name first
  


  
    
      4:11:46
    
  
  
  name let's say we have a first name and a last name John
  


  
    
      4:11:55
    
  
  
  James these two names kind of sound like first names is our first name John or is
  


  
    
      4:12:00
    
  
  
  it James we could use keyword arguments to clarify which is which you thought
  


  
    
      4:12:05
    
  
  
  John was the first name but it's actually the last name and the first name is
  


  
    
      4:12:11
    
  
  
  James then our title is still the same hello Mr James John Let's cover another
  


  
    
      4:12:18
    
  
  
  example I'm going to print the numbers 1 through 10 using a for Loop for X in
  


  
    
      4:12:25
    
  
  
  range 1 comma 11 because the second argument is exclusive then I will print
  


  
    
      4:12:33
    
  
  
  X after each print statement we print a new line do you remember in previous topics how we would follow our print
  


  
    
      4:12:40
    
  
  
  statement with comma and than a new character such as a
  


  
    
      4:12:46
    
  
  
  space while end is a keyword argument found within the built-in print
  


  
    
      4:12:51
    
  
  
  statement in place of ending each print statement with a new line we are using this keyword argument of end and sending
  


  
    
      4:12:59
    
  
  
  it to be a space another one is separate that's found within the print statement maybe we have some
  


  
    
      4:13:06
    
  
  
  numbers they're all separate
  


  
    
      4:13:12
    
  
  
  strings the numbers 1 through 5 I can use the separate keyword argument then
  


  
    
      4:13:18
    
  
  
  separate each of these strings with a given character or characters I will separate each of these strings with a
  


  
    
      4:13:25
    
  
  
  dash a lot of built-in functions such as the print function they have some keyword arguments you can use let's go
  


  
    
      4:13:33
    
  
  
  over an exercise now we're going to create a function to generate a phone number but we'll need
  


  
    
      4:13:39
    
  
  
  to pass in a country code area code the first three digits in the last four digits let's define this function as
  


  
    
      4:13:46
    
  
  
  Define get phone to get a phone number we have a country
  


  
    
      4:13:53
    
  
  
  code area code first meaning first few digits then
  


  
    
      4:14:00
    
  
  
  last meaning last few digits we will return an F
  


  
    
      4:14:05
    
  
  
  string we will place our country code first Dash then our area code
  


  
    
      4:14:14
    
  
  
  Dash the first few digits Dash the last few
  


  
    
      4:14:21
    
  
  
  digits my phone number phone num equals I will invoke the get phone number
  


  
    
      4:14:27
    
  
  
  function we just created but we'll need a country code an area
  


  
    
      4:14:35
    
  
  
  code first few digits then last few digits and remember the order doesn't
  


  
    
      4:14:41
    
  
  
  necessarily matter usually I try and be consistent with the order of the parameters make up a phone number I'm in
  


  
    
      4:14:48
    
  
  
  the United States my country code is one area code 1 2
  


  
    
      4:14:54
    
  
  
  3 the next few digits will be 456 the last few will be 7890 then let's print this phone number
  


  
    
      4:15:01
    
  
  
  print phone num and here is my phone number although
  


  
    
      4:15:08
    
  
  
  you can change it up based on how you do phone numbers in your country this is typically how you would see a phone
  


  
    
      4:15:14
    
  
  
  number in the United States all right everybody so those are keyword arguments they are just arguments preceded by an
  


  
    
      4:15:21
    
  
  
  identifier that matches the name of a function's parameters it does help with readability and the Order of the
  


  
    
      4:15:27
    
  
  
  arguments doesn't matter when invoking a function it could be helpful to identify some of these arguments and well
  


  
    
      4:15:34
    
  
  
  everybody those are keyword arguments in
  


  
    
      4:15:39
    
  
  
  Python Hello friends it's me again today I need to explain arbitrary arguments
  


  
    
  34.args & **kwargs



  
    
      4:15:44
    
  
  
  arbitrary meaning a varying amount of arguments we don't know how many arguments the user is going to pass in
  


  
    
      4:15:50
    
  
  
  when they invoke a function to accept a varying amount of arguments developers tend to use these parameters of args and
  


  
    
      4:15:57
    
  
  
  quars args means arguments quars means keyword arguments you would want to
  


  
    
      4:16:03
    
  
  
  prefix each of these parameters with the unpacking operator which is an asterisk when you invoke a function that has args
  


  
    
      4:16:10
    
  
  
  or quars as parameters you will pack all of those arguments into a tupple if it's
  


  
    
      4:16:15
    
  
  
  args or a dictionary if the parameters quars let's go over an example I will
  


  
    
      4:16:21
    
  
  
  create a function to add two numbers together Define add function there will
  


  
    
      4:16:28
    
  
  
  be two parameters a comma B all I'm going to do
  


  
    
      4:16:33
    
  
  
  is return a + b i will invoke this function pass in
  


  
    
      4:16:39
    
  
  
  two arguments because we have two parameter set up one comma 2 then I'm going to print the
  


  
    
      4:16:48
    
  
  
  result big surprise there my function return three all right well what if I
  


  
    
      4:16:53
    
  
  
  would like to pass in three parameters this time well I can no longer use this
  


  
    
      4:16:58
    
  
  
  function the add function takes two positional arguments but three were given I could modify this function so
  


  
    
      4:17:05
    
  
  
  that it could accept a varying amount of arguments any amount I'm going to replace the parameters with asterisk
  


  
    
      4:17:13
    
  
  
  than the word args meaning arguments so when we use the unpacking operator
  


  
    
      4:17:18
    
  
  
  what's going to happen now is that with the arguments that we pass into this function we will pack them all into a
  


  
    
      4:17:24
    
  
  
  tupple and if you don't believe me let's test it I'm going to print the type of
  


  
    
      4:17:31
    
  
  
  args then I'm going to remove this print statement for now my parameter args is a tupple that I
  


  
    
      4:17:38
    
  
  
  could work with we can use the built-in methods of this tupple or we could iterate over
  


  
    
      4:17:43
    
  
  
  it I'm going to iterate over this Tuple for every ARG in args for every argument
  


  
    
      4:17:52
    
  
  
  in arguments what we'll do is create a variable named total to keep track of the
  


  
    
      4:17:58
    
  
  
  total total plus equals the current Arc that we're iterating over then at the
  


  
    
      4:18:05
    
  
  
  end I will return the total let's print the result print add
  


  
    
      4:18:11
    
  
  
  these three numbers together there we are my total is six then we can pass in any amount of arguments for this
  


  
    
      4:18:19
    
  
  
  time maybe five or even
  


  
    
      4:18:24
    
  
  
  one with my parameter args you can change this name to something else like
  


  
    
      4:18:29
    
  
  
  nums meaning numbers for every num in
  


  
    
      4:18:35
    
  
  
  nums total plus equals num this would work too the name of the parameter isn't
  


  
    
      4:18:42
    
  
  
  as important as as the unpacking Operator just by typical naming conventions people tend to stick with
  


  
    
      4:18:47
    
  
  
  args but the parameter name can vary let's try a different example let's
  


  
    
      4:18:53
    
  
  
  create a function to display somebody's name display name we will accept a varying amount of
  


  
    
      4:19:01
    
  
  
  arguments use the unpacking operator then follow the unpacking operator with the unique parameter name for every ARG
  


  
    
      4:19:10
    
  
  
  in args let's print each argument then replace the ending
  


  
    
      4:19:17
    
  
  
  character of my print statement with a space now sometimes people can have a
  


  
    
      4:19:22
    
  
  
  varying number of names in their full name there can be a first name middle name last name maen name a title Etc so
  


  
    
      4:19:31
    
  
  
  I'm going to pass in just a first name and a last name
  


  
    
      4:19:38
    
  
  
  SpongeBob SquarePants if if I need to add a middle
  


  
    
      4:19:43
    
  
  
  name I can do that SpongeBob Herold SquarePants or a
  


  
    
      4:19:50
    
  
  
  title Dr SpongeBob Herold
  


  
    
      4:19:56
    
  
  
  SquarePants the third yeah as I was saying with the
  


  
    
      4:20:02
    
  
  
  unpacking operator followed by a unique parameter name you can pack all of these
  


  
    
      4:20:07
    
  
  
  arguments into a tuple which you can use within this function
  


  
    
      4:20:13
    
  
  
  now let's discuss quars you use two unpacking operators then typically
  


  
    
      4:20:18
    
  
  
  people follow this with the word quars meaning keyword arguments it allows you
  


  
    
      4:20:23
    
  
  
  to pass multiple keyword arguments which we discussed in the last topic I think
  


  
    
      4:20:28
    
  
  
  this would be great for an address Define print address
  


  
    
      4:20:36
    
  
  
  function use double asterisks then we can add a parameter name but people
  


  
    
      4:20:41
    
  
  
  usually stick with with quars meaning keyword arguments just as a placeholder
  


  
    
      4:20:47
    
  
  
  I'm going to type pass pass doesn't do anything I want this program to be able to run we'll get back to this function
  


  
    
      4:20:52
    
  
  
  momentarily I'm going to invoke this function print
  


  
    
      4:20:58
    
  
  
  address then pass in multiple keyword arguments with an address you would
  


  
    
      4:21:03
    
  
  
  typically have a street a
  


  
    
      4:21:09
    
  
  
  city state depending on what country you live in you may have more or less of
  


  
    
      4:21:14
    
  
  
  these keyword arguments I live in the United States we have a state then a zip
  


  
    
      4:21:21
    
  
  
  code okay my street will be I'm just making something up here one two three
  


  
    
      4:21:26
    
  
  
  fake Street City will be
  


  
    
      4:21:31
    
  
  
  Detroit State Michigan ZIP code 5 43 2
  


  
    
      4:21:39
    
  
  
  1 just to make this look better I'm going to place each of these keyword arguments on a new line for me that's
  


  
    
      4:21:45
    
  
  
  just more readable but you do you when I pass in these keyword arguments we will
  


  
    
      4:21:50
    
  
  
  pack them into a dictionary just to prove it let's print
  


  
    
      4:21:55
    
  
  
  the type of quars look at that class
  


  
    
      4:22:02
    
  
  
  dictionary within this function you can treat quars as if it's a dictionary there's a lot of built-in methods or we
  


  
    
      4:22:09
    
  
  
  could iterate over the keys the values or both to to iterate over the values let's say for every value in our
  


  
    
      4:22:17
    
  
  
  dictionary quars Dov values method print every
  


  
    
      4:22:26
    
  
  
  value here's all the values for the keys let's change this for Loop to be for
  


  
    
      4:22:33
    
  
  
  every key in quars do Keys method print
  


  
    
      4:22:38
    
  
  
  every key here are the keys for both you could
  


  
    
      4:22:43
    
  
  
  say for every key comma value in quars
  


  
    
      4:22:48
    
  
  
  do items method print every key actually let me turn this into an F
  


  
    
      4:22:54
    
  
  
  string print every key colon
  


  
    
      4:23:03
    
  
  
  value the items method will return key value pairs we can pass in a varying
  


  
    
      4:23:09
    
  
  
  amount of keyword arguments I'm going to add an apartment number
  


  
    
      4:23:15
    
  
  
  apartment equals
  


  
    
      4:23:21
    
  
  
  100 our keyword argument of apartment was packed into a dictionary along with all these other keyword arguments so
  


  
    
      4:23:28
    
  
  
  that's kind of nice we can pass in a varying amount of keyword arguments let's cover an exercise we're going to
  


  
    
      4:23:33
    
  
  
  use both args and quarks together we will print a shipping label
  


  
    
      4:23:40
    
  
  
  Define shipping label function the parameters will be
  


  
    
      4:23:45
    
  
  
  both ARS comma quars then just for now I'm going to write past just so that
  


  
    
      4:23:53
    
  
  
  this program will work for now we'll fill in the shipping label function momentarily when we invoke the shipping
  


  
    
      4:23:58
    
  
  
  label function we will first pass in any positional arguments followed by keyword
  


  
    
      4:24:04
    
  
  
  arguments and it won't work the other way around I'll prove that in a little bit so let's say we have doctor
  


  
    
      4:24:15
    
  
  
  SpongeBob SquarePants the
  


  
    
      4:24:22
    
  
  
  thir then I'll add my keyword arguments I'm going to put this on a new line
  


  
    
      4:24:27
    
  
  
  Street equals 123 Fake
  


  
    
      4:24:33
    
  
  
  Street Apartment equals
  


  
    
      4:24:38
    
  
  
  100 City equals Detroit
  


  
    
      4:24:46
    
  
  
  State equals Michigan zip equal
  


  
    
      4:24:54
    
  
  
  54321 when we invoke this function we have a mix of arbitrary positional
  


  
    
      4:24:59
    
  
  
  arguments and arbitrary keyword arguments this shipping label function
  


  
    
      4:25:05
    
  
  
  is designed to accept both you do need args first followed by quars this
  


  
    
      4:25:10
    
  
  
  program will run but if we have have it the other way around quars followed by
  


  
    
      4:25:16
    
  
  
  args it's not going to function properly you can see that we have a syntax
  


  
    
      4:25:22
    
  
  
  error with your parameters make sure that your keyword arguments follow your positional arguments let's iterate over
  


  
    
      4:25:29
    
  
  
  the positional arguments first for every ARG in
  


  
    
      4:25:35
    
  
  
  ARS let's print each ARG then I will change the ending
  


  
    
      4:25:41
    
  
  
  character of my print statement to be a space Here's the name of the user who
  


  
    
      4:25:46
    
  
  
  we're shipping something to with the shipping label function I will print a new line then we
  


  
    
      4:25:53
    
  
  
  will iterate over all the keyword arguments for every value in my
  


  
    
      4:26:00
    
  
  
  dictionary quars do values method I will print each
  


  
    
      4:26:08
    
  
  
  value then I will change the ending character of my print statement to be a
  


  
    
      4:26:14
    
  
  
  space all right it's not looking too bad so far if you were to remove some keyword
  


  
    
      4:26:20
    
  
  
  arguments or some positional arguments this should work still which
  


  
    
      4:26:25
    
  
  
  it does I'm going to change the format of this address slightly let's add our
  


  
    
      4:26:30
    
  
  
  street on one line then the city state and zip code on the next line let's get
  


  
    
      4:26:37
    
  
  
  rid of this four Loop to print the street I'm going to print
  


  
    
      4:26:42
    
  
  
  use an FST string add a placeholder quars doget method I'm going
  


  
    
      4:26:50
    
  
  
  to get the street key with this get method you'll probably need to place
  


  
    
      4:26:55
    
  
  
  them within single quotes because if you use double quotes python gets confused as to where this FST string ends we will
  


  
    
      4:27:02
    
  
  
  use single quotes Let's test it all right we have a street on the next line
  


  
    
      4:27:08
    
  
  
  we will print the city state and zip
  


  
    
      4:27:13
    
  
  
  print fing placeholder quars doget
  


  
    
      4:27:20
    
  
  
  within single quotes the city I'll add another
  


  
    
      4:27:27
    
  
  
  placeholder quars doget
  


  
    
      4:27:33
    
  
  
  State then quars doget
  


  
    
      4:27:38
    
  
  
  zip let's see what we have all right not too bad what if the user has an apartment
  


  
    
      4:27:45
    
  
  
  keyword apartment equals number
  


  
    
      4:27:51
    
  
  
  100 well we should probably add that too within this top print statement I will add another
  


  
    
      4:27:58
    
  
  
  placeholder invoke the get method of the dictionary the key we are looking for is
  


  
    
      4:28:05
    
  
  
  apartment Dr SpongeBob SquarePants 123 Fake Street apartment number 100 Detroit
  


  
    
      4:28:10
    
  
  
  Michigan 5432 1 what if our print statement is set up to display a street
  


  
    
      4:28:16
    
  
  
  and an apartment but the user doesn't have an apartment this would display none and we
  


  
    
      4:28:23
    
  
  
  don't want that I'm thinking what we'll do is we'll place this print statement within an if
  


  
    
      4:28:29
    
  
  
  statement what we'll check is if
  


  
    
      4:28:35
    
  
  
  apartment in quars if there's an apartment key in
  


  
    
      4:28:43
    
  
  
  quars our dictionary then print this line else we will
  


  
    
      4:28:52
    
  
  
  print just the
  


  
    
      4:28:57
    
  
  
  street the person doesn't have an apartment we won't print the apartment then but if they do have an apartment
  


  
    
      4:29:04
    
  
  
  apartment equals number 100 then we will 1 2 3 fake Street
  


  
    
      4:29:11
    
  
  
  apartment number 100 here's a challenge round what if a user has a PO Box let's change apartment
  


  
    
      4:29:18
    
  
  
  to P box the string will be P box number 1,1
  


  
    
      4:29:27
    
  
  
  I suppose I'll add an else if statement else
  


  
    
      4:29:33
    
  
  
  if PO Box in our dictionary
  


  
    
      4:29:40
    
  
  
  quars let's print the the street I'll copy this line paste
  


  
    
      4:29:46
    
  
  
  it followed by a second print statement quars doget PO
  


  
    
      4:29:57
    
  
  
  Box there we are Dr SpongeBob SquarePants 123 Fake Street p. box 1001
  


  
    
      4:30:04
    
  
  
  Detroit Michigan 54321 all right everybody those are arbitrary arguments when you invoke a
  


  
    
      4:30:10
    
  
  
  function you can pass in a a varying amount of arguments set up your parameter to be args for a varying
  


  
    
      4:30:16
    
  
  
  amount of non-keyword arguments or quars for a varying amount of keyword
  


  
    
      4:30:22
    
  
  
  arguments you can set up both in your parameters which we did for this exercise and well everybody those are
  


  
    
      4:30:28
    
  
  
  arbitrary arguments in Python hey everybody so today I got to
  


  
    
  35.iterables



  
    
      4:30:35
    
  
  
  talk about iterables in Python and iterable it's a category any object or
  


  
    
      4:30:40
    
  
  
  collection that can return its elements one at a time is considered an iterable
  


  
    
      4:30:46
    
  
  
  if an object or a collection is considered an iterable then it can be iterated over in a loop for example
  


  
    
      4:30:53
    
  
  
  let's create a list of numbers numbers equals a list I'll add the numbers 1 through 5 to keep it
  


  
    
      4:30:59
    
  
  
  simple lists are considered iterable we can use them within a for
  


  
    
      4:31:04
    
  
  
  Loop in the context of a for loop we're going to be given each element one at a
  


  
    
      4:31:10
    
  
  
  time each element that we're working with we can give a temporary nickname let's say
  


  
    
      4:31:17
    
  
  
  number for every number in my iterable of numbers let's just print each
  


  
    
      4:31:26
    
  
  
  number this will give us 1 through 5 the name of the current element in our
  


  
    
      4:31:32
    
  
  
  iterable should be descriptive of what we're iterating over for example I don't want to rename the current number that
  


  
    
      4:31:38
    
  
  
  we're working with as something like blah blah blah you know this would work but other
  


  
    
      4:31:44
    
  
  
  people looking over your code might not understand what a blah blah blah is and I don't blame them each element that
  


  
    
      4:31:51
    
  
  
  we're given from our iterable the name should be descriptive of what we're given or you might see item for every
  


  
    
      4:31:59
    
  
  
  item in numbers print each item that's also a good choice now you could even iterate
  


  
    
      4:32:06
    
  
  
  backwards by enclosing our iterable within the Reversed function
  


  
    
      4:32:12
    
  
  
  so take our iterable of numbers and reverse it then we get the numbers 5 4 3
  


  
    
      4:32:19
    
  
  
  2 1 if you would rather not print each element on a new line we can replace the
  


  
    
      4:32:24
    
  
  
  new line character at the end of print statements with something else print is a function we can pass in a keyword
  


  
    
      4:32:30
    
  
  
  argument of end rather than end each line with a new line character let's end
  


  
    
      4:32:36
    
  
  
  with the space this will space out each of the elements or we could replace it with
  


  
    
      4:32:41
    
  
  
  something else or what about a dash after each element append a dash
  


  
    
      4:32:48
    
  
  
  character we could even add multiple characters such as a space a dash and a space if we so
  


  
    
      4:32:55
    
  
  
  choose it's up to you tuples are also iterable let's convert our list to a
  


  
    
      4:33:02
    
  
  
  tupple by enclosing our numbers within a set of parentheses and I no longer want this
  


  
    
      4:33:08
    
  
  
  reversed for every number in my itable of numbers print each number then again
  


  
    
      4:33:15
    
  
  
  we get the numbers 1 through 5 let's cover
  


  
    
      4:33:21
    
  
  
  sets I will create a set of fruit which I will name fruits for a set enclose any values
  


  
    
      4:33:28
    
  
  
  within a set of curly braces let's add a string of Apple a string of orange a
  


  
    
      4:33:35
    
  
  
  string of banana and a string of coconut
  


  
    
      4:33:41
    
  
  
  so with our for Loop let's say for every fruit in my iterable of fruits I will
  


  
    
      4:33:48
    
  
  
  print each fruit that would give me apple banana orange
  


  
    
      4:33:54
    
  
  
  coconut now sets they're actually not reversible I will attempt to enclose our
  


  
    
      4:34:00
    
  
  
  iterable of fruits within the Reversed function here's what happens we have a
  


  
    
      4:34:06
    
  
  
  type error set object is not reversible sets you can't rever
  


  
    
      4:34:12
    
  
  
  verse let's cover strings I will create a string of name type in your full name
  


  
    
      4:34:19
    
  
  
  I'll use my YouTube channel name for every character in my iterable of name I
  


  
    
      4:34:27
    
  
  
  would like to print each
  


  
    
      4:34:32
    
  
  
  character maybe I would rather not have each character end with a new line I
  


  
    
      4:34:37
    
  
  
  will set the keyword argument of end to be a space
  


  
    
      4:34:44
    
  
  
  last we have dictionaries which are the most complicated let's name this dictionary my
  


  
    
      4:34:50
    
  
  
  dictionary dictionaries you enclose with a set of krly braces kind of like a set
  


  
    
      4:34:56
    
  
  
  but each element is a key value pair I will add a key of A with an Associated
  


  
    
      4:35:02
    
  
  
  value of one a key of B which has a value of two a key of C which has a
  


  
    
      4:35:10
    
  
  
  value of three if you iterate over a dictionary the
  


  
    
      4:35:15
    
  
  
  dictionary is going to return all the keys but not the values we'll test that
  


  
    
      4:35:20
    
  
  
  for every key in my iterable of my dictionary let's print each
  


  
    
      4:35:28
    
  
  
  key this would give me the keys of a b and c but none of the values 1 2 or
  


  
    
      4:35:36
    
  
  
  three if you need the values we're going to follow this iterable of my dictionary
  


  
    
      4:35:42
    
  
  
  use the built-in values method this will return all the values
  


  
    
      4:35:47
    
  
  
  of your dictionary as an iterable but let's rename a key as value because now
  


  
    
      4:35:54
    
  
  
  we're working with the values then we're given all the values 1
  


  
    
      4:35:59
    
  
  
  2 and three if you need both the keys and the values you're going to use the
  


  
    
      4:36:05
    
  
  
  items method we'll be given both a key and a
  


  
    
      4:36:11
    
  
  
  value make sure that the value and the key is separated with the comma let's print each key followed by
  


  
    
      4:36:18
    
  
  
  the value we get the key of A with its value of 1 b 2 c
  


  
    
      4:36:27
    
  
  
  3 we can reformat the output however we want let's use an F string I will add
  


  
    
      4:36:33
    
  
  
  two placeholders let's print each key equals then the
  


  
    
      4:36:39
    
  
  
  value a equals = 1 b = 2 c = 3 okay everybody so those are iterables
  


  
    
      4:36:48
    
  
  
  an object or collection that can return its elements one at a time is considered an iterable meaning that object or
  


  
    
      4:36:55
    
  
  
  collection can be iterated over using a loop and well everybody those are
  


  
    
      4:37:00
    
  
  
  iterables in Python hello again so today I got to
  


  
    
  36.membership operators



  
    
      4:37:06
    
  
  
  talk about membership operators in Python they are the operators in and not
  


  
    
      4:37:12
    
  
  
  in they're used to test whether a value or a variable is found within a sequence
  


  
    
      4:37:17
    
  
  
  which include but are not limited to Strings lists topples sets or dictionaries here's an example I'm going
  


  
    
      4:37:25
    
  
  
  to create a word a secret word let's say apple I'm going to turn this into a game
  


  
    
      4:37:32
    
  
  
  I will have a user guess a letter I will accept some user
  


  
    
      4:37:38
    
  
  
  input guess a letter in the
  


  
    
      4:37:43
    
  
  
  secret word what I would like to do is check to
  


  
    
      4:37:48
    
  
  
  see if my letter is found in my word I can write the following statement if our
  


  
    
      4:37:56
    
  
  
  letter in our word in is going to return a Boolean
  


  
    
      4:38:02
    
  
  
  value of true if that letter is found or false if it's not so if our letter is
  


  
    
      4:38:08
    
  
  
  found I'm going to print the following statement I'll use an F string there is a add a placeholder
  


  
    
      4:38:17
    
  
  
  insert our letter else let's
  


  
    
      4:38:23
    
  
  
  print I'll use an F string our letter was not
  


  
    
      4:38:31
    
  
  
  found Let's test this guess a letter in the secret word I will guess a capital A
  


  
    
      4:38:38
    
  
  
  so all these letters are uppercase do take note of that is there an a there is an a let's guess
  


  
    
      4:38:46
    
  
  
  a letter that's not within this word such as z z was not found the in
  


  
    
      4:38:52
    
  
  
  membership operator will test to see if a value or a variable is found within a
  


  
    
      4:38:58
    
  
  
  sequence if it is it returns true if not it returns false or for the inverse you
  


  
    
      4:39:04
    
  
  
  could say not in if letter is not in word we would have to flip these
  


  
    
      4:39:10
    
  
  
  statements around
  


  
    
      4:39:19
    
  
  
  if this value or variable is not found in this sequence it returns true
  


  
    
      4:39:25
    
  
  
  otherwise false so it does the opposite of in guess a letter in the secret word
  


  
    
      4:39:31
    
  
  
  is there an e there is an e is there a q q was not found depending
  


  
    
      4:39:38
    
  
  
  on the statement you're trying to write you can use either in or not in whichever makes more sense in that
  


  
    
      4:39:44
    
  
  
  context let's go over another example we were searching for a value or a variable
  


  
    
      4:39:50
    
  
  
  found within a string let's try a set list tles and sets are going to behave
  


  
    
      4:39:55
    
  
  
  similarly I will create a set of students for a set you need a set of
  


  
    
      4:40:01
    
  
  
  curly braces let's add a few student names such as
  


  
    
      4:40:06
    
  
  
  SpongeBob Patrick and Sandy
  


  
    
      4:40:13
    
  
  
  I will have a user type in a student to search for we will accept some user
  


  
    
      4:40:20
    
  
  
  input enter the name of a
  


  
    
      4:40:25
    
  
  
  student we're going to check if our student is
  


  
    
      4:40:31
    
  
  
  in our sequence of students if in returns true let's print
  


  
    
      4:40:38
    
  
  
  the following I'll use an F string insert our student is a
  


  
    
      4:40:47
    
  
  
  student else we will print I'll use an F
  


  
    
      4:40:52
    
  
  
  string insert that student was not
  


  
    
      4:40:59
    
  
  
  found enter the name of a student let's search for SpongeBob
  


  
    
      4:41:04
    
  
  
  SpongeBob is a student enter the name of a student let's attempt Squidward
  


  
    
      4:41:10
    
  
  
  Squidward was not found and much like the first example we
  


  
    
      4:41:16
    
  
  
  can do the opposite see if a value or a variable is not in a
  


  
    
      4:41:21
    
  
  
  sequence we would have to switch these statements
  


  
    
      4:41:28
    
  
  
  around enter the name of a student is Sandy a student Sandy is a student enter
  


  
    
      4:41:35
    
  
  
  the name of a student is Laria student Laria was not found now now we'll cover dictionaries I
  


  
    
      4:41:43
    
  
  
  will create a dictionary of grades student grades like a grade
  


  
    
      4:41:48
    
  
  
  book let's say that the student of Sandy she will be a key has a value of
  


  
    
      4:41:57
    
  
  
  a Squidward the key of Squidward has a
  


  
    
      4:42:03
    
  
  
  value of B SpongeBob he is also a
  


  
    
      4:42:09
    
  
  
  key SpongeBob has a grade of C then
  


  
    
      4:42:15
    
  
  
  Patrick Patrick has a grade of
  


  
    
      4:42:22
    
  
  
  D here is my dictionary of grades then we'll search for a student
  


  
    
      4:42:29
    
  
  
  student equals input enter the name of a
  


  
    
      4:42:37
    
  
  
  student we'll check if Let Me Close the this if our
  


  
    
      4:42:43
    
  
  
  student is found within grades then I will print the
  


  
    
      4:42:48
    
  
  
  following we're looking for keys is there a matching key if we find that
  


  
    
      4:42:53
    
  
  
  student I'll make this an F string let's display the associated value of that
  


  
    
      4:43:00
    
  
  
  key student students
  


  
    
      4:43:07
    
  
  
  grade is I'll add a placeholder once we find a student we
  


  
    
      4:43:12
    
  
  
  have to get that value at the given key to do that we'll take our dictionary
  


  
    
      4:43:18
    
  
  
  of grades at index of student this will retrieve the value at a given
  


  
    
      4:43:25
    
  
  
  key if we don't find a student we'll output the following again I'll use an FST
  


  
    
      4:43:33
    
  
  
  string student was not found so now if I search for a student
  


  
    
      4:43:41
    
  
  
  such as SpongeBob we're given a grade we're given the value at that key that
  


  
    
      4:43:46
    
  
  
  we're searching for Let's test Sandy Sand's great as a
  


  
    
      4:43:54
    
  
  
  Squidward Squidward's great as B and Patrick Patrick's great is D but Larry
  


  
    
      4:44:02
    
  
  
  is not a student if I search for him well Larry was not
  


  
    
      4:44:07
    
  
  
  found let's go over one last example we're going to create a variable of
  


  
    
      4:44:13
    
  
  
  email it's going to be a string type in whatever your email is Bro Code
  


  
    
      4:44:21
    
  
  
  gmail.com I would like to see if this email is valid does it contain at and a
  


  
    
      4:44:27
    
  
  
  period I will write if our value of at
  


  
    
      4:44:32
    
  
  
  that character is in our email and a period is in email
  


  
    
      4:44:42
    
  
  
  we have two conditions check if at is an email and check if a period is an email
  


  
    
      4:44:48
    
  
  
  if so it's a valid email then we'll print valid
  


  
    
      4:44:56
    
  
  
  email else we will print invalid
  


  
    
      4:45:04
    
  
  
  email is my email valid that email is valid I'll get rid of the app
  


  
    
      4:45:12
    
  
  
  invalid email I'll get rid of the period following
  


  
    
      4:45:18
    
  
  
  Gmail that email is also invalid in this example we're checking
  


  
    
      4:45:24
    
  
  
  two conditions if this value is found within this sequence and this value is
  


  
    
      4:45:30
    
  
  
  found within this sequence all right everybody so those are membership operators in and not in
  


  
    
      4:45:38
    
  
  
  they will return a Boolean based on whether a value or a variable is found within a sequence which include but are
  


  
    
      4:45:45
    
  
  
  not limited to Strings lists tles sets or dictionaries and well everybody those
  


  
    
      4:45:51
    
  
  
  are membership operators in Python hey what's going on everybody so
  


  
    
  37.list comprehensions



  
    
      4:45:57
    
  
  
  in today's video I got to explain list comprehensions in Python a list comprehension is a concise way to create
  


  
    
      4:46:04
    
  
  
  lists in Python they're Compact and easier to read than traditional Loops
  


  
    
      4:46:09
    
  
  
  basically you have to follow the this formula for every value in something that's iterable meaning you can Loop
  


  
    
      4:46:16
    
  
  
  through it check some condition then do this expression so let me give you an example with using a traditional Loop
  


  
    
      4:46:23
    
  
  
  then you'll be able to see why a list comprehension is useful we're going to create a list and double the numbers 1
  


  
    
      4:46:29
    
  
  
  through 10 doubles equals an empty list using a
  


  
    
      4:46:35
    
  
  
  traditional for Loop we will say for every value let's say X
  


  
    
      4:46:41
    
  
  
  in range 1 through 11 remember that in the range function the second number is
  


  
    
      4:46:47
    
  
  
  exclusive this will give you the numbers 1 through 10 for the first iteration X
  


  
    
      4:46:52
    
  
  
  is going to be 1 then 2 3 all the way up until 10 so we'll iterate 10 times
  


  
    
      4:46:59
    
  
  
  during each iteration I'm going to take my list of doubles use the built-in
  


  
    
      4:47:04
    
  
  
  append method we will append X during each iteration that's going to be the
  


  
    
      4:47:10
    
  
  
  value time 2 so if I were to print my list of
  


  
    
      4:47:16
    
  
  
  doubles here's the result we have the numbers 1 through 10 all doubled 2 4 6 8
  


  
    
      4:47:23
    
  
  
  10 12 14 16 18 20 so this is a lot to write we can use a list comprehension to
  


  
    
      4:47:30
    
  
  
  make this code more Compact and easier to read here's how we need a name for
  


  
    
      4:47:36
    
  
  
  this list let's say doubles equals an empty list within our list list will
  


  
    
      4:47:41
    
  
  
  follow this formula we have an expression for Value
  


  
    
      4:47:48
    
  
  
  in iterable and optionally we can check a condition we'll do this in exercises
  


  
    
      4:47:53
    
  
  
  later on in this topic we'll begin with for every value let's say X in our
  


  
    
      4:48:00
    
  
  
  iterable our iterable is going to be a range 1 through 10 again for the first
  


  
    
      4:48:08
    
  
  
  iteration X will be 1 then the second iteration X will be 2 all the way up
  


  
    
      4:48:13
    
  
  
  until 10 during each iteration what would we like to do with X our value
  


  
    
      4:48:19
    
  
  
  let's take X multiply it by two and return it then if I was to print my list of
  


  
    
      4:48:27
    
  
  
  doubles we have the numbers 2 4 6 8 10 12 14 16 18 20 for every value in this
  


  
    
      4:48:34
    
  
  
  iterable do this multiply it by two this is a list comprehension it's a concise
  


  
    
      4:48:40
    
  
  
  way to create list in Python we'll go over a few exercises so this time we will triple
  


  
    
      4:48:47
    
  
  
  each number we'll create a list of triples equals let's say this time for
  


  
    
      4:48:53
    
  
  
  every Y in range 1 through 10 so we have to write
  


  
    
      4:49:00
    
  
  
  11 take Y and multiply it by 3 then we
  


  
    
      4:49:06
    
  
  
  will print our list of triples 3 6 9 12 15 18 so on and so forth let's Square
  


  
    
      4:49:13
    
  
  
  each number we'll create a list of squares for every Z in range 1-
  


  
    
      4:49:23
    
  
  
  10 to square a number we take that number multiply it by
  


  
    
      4:49:29
    
  
  
  itself so the numbers 1 through 10^ squar is 1 4 9 16 15 36 49 64 81 100 so
  


  
    
      4:49:40
    
  
  
  10 * 10 is 100 now we're going to work with strings we'll create a list of fruits
  


  
    
      4:49:48
    
  
  
  equals think of some fruit these are all going to be strings Apple
  


  
    
      4:49:54
    
  
  
  orange banana coconut I'm going to take each string in
  


  
    
      4:50:00
    
  
  
  this list and make it uppercase we could assign this to a new list such as uppercase
  


  
    
      4:50:07
    
  
  
  fruits or we can simply just reassign it just to keep it simple I'll reassign
  


  
    
      4:50:13
    
  
  
  it so again we're following this formula I like to begin with the four value in
  


  
    
      4:50:19
    
  
  
  iterable portion for every fruit in our iterable of fruits what do we want to do
  


  
    
      4:50:28
    
  
  
  well let's take each fruit take each fruit use the built-in upper method to make it
  


  
    
      4:50:34
    
  
  
  uppercase then I'm going to print my list of fruits
  


  
    
      4:50:41
    
  
  
  each string in this list is now all uppercase you could even cut down on one of the steps with our iterable of fruits
  


  
    
      4:50:49
    
  
  
  I will place this
  


  
    
      4:50:54
    
  
  
  list and this does work too although I do find this a little more difficult to read but you can take either option how
  


  
    
      4:51:02
    
  
  
  about instead of making each string uppercase we'll take the first letter of each string then put it within a new
  


  
    
      4:51:09
    
  
  
  list so let's take each fruit at index of zero that will give us the first
  


  
    
      4:51:15
    
  
  
  letter we'll place it within a new list of fruit chars meaning
  


  
    
      4:51:23
    
  
  
  characters here's the result a o b c for every fruit in our list of
  


  
    
      4:51:30
    
  
  
  fruits return the first character of each string a o b c now we'll work with
  


  
    
      4:51:38
    
  
  
  conditions we'll create a list of numbers both
  


  
    
      4:51:43
    
  
  
  negative and positive numbers equals let's say one -2 3 -4 5
  


  
    
      4:51:53
    
  
  
  -6 we'll create a list comprehension to create a new list where all of the numbers are positive our new list will
  


  
    
      4:52:01
    
  
  
  be positive nums equals we'll write a list comprehension for every let's say
  


  
    
      4:52:09
    
  
  
  num in Num numbers we'll write a
  


  
    
      4:52:15
    
  
  
  condition return this number if our num is greater than or equal to zero we
  


  
    
      4:52:23
    
  
  
  do need an expression if we're not modifying each value we can just return
  


  
    
      4:52:29
    
  
  
  the value of num during this exercise we're more focused on the if condition rather than
  


  
    
      4:52:36
    
  
  
  the expression if our value of num meets this condition simply return it and
  


  
    
      4:52:41
    
  
  
  place it within this new list let's print our list of positive
  


  
    
      4:52:47
    
  
  
  numbers and we have 135 let's do this with negative numbers
  


  
    
      4:52:53
    
  
  
  I'll just copy what we have and change a few things around this list will be negative numbers negative nums for every
  


  
    
      4:53:02
    
  
  
  num in numbers check this condition check to see if num is less than zero if
  


  
    
      4:53:08
    
  
  
  so return that number let's print our list of negative numbers -2 -4
  


  
    
      4:53:16
    
  
  
  -6 let's check to see if there's any even numbers even nums equals for every num
  


  
    
      4:53:26
    
  
  
  in numbers check to see if our num is
  


  
    
      4:53:31
    
  
  
  divisible by two and we can do that with the modulus operator followed by two the
  


  
    
      4:53:36
    
  
  
  modulus operator will give you the remainder of any Division if our number is even number modulus 2 will equal Zer
  


  
    
      4:53:45
    
  
  
  if it's even this is going to equal zero if it's odd it's going to be one we're not modifying our value we're just going
  


  
    
      4:53:52
    
  
  
  to return our number our list of even numbers should
  


  
    
      4:53:58
    
  
  
  be -2 -4 -6 let me add one more value
  


  
    
      4:54:03
    
  
  
  let's add positive 8 -24 -6 positive 8
  


  
    
      4:54:11
    
  
  
  maybe we'll add one more -7 okay let's find any odd numbers let's
  


  
    
      4:54:18
    
  
  
  copy this line of code replace even numbers with odd numbers if num modulus 2 is equal to
  


  
    
      4:54:28
    
  
  
  one that means that number doesn't divide by two evenly then we'll print our odd
  


  
    
      4:54:34
    
  
  
  numbers 1 3 57 all these numbers are odd
  


  
    
      4:54:40
    
  
  
  here's the last exercise we'll create a list of
  


  
    
      4:54:47
    
  
  
  grades we'll create a new list of any grades that are considered passing meaning they scored 60 or above so let's
  


  
    
      4:54:55
    
  
  
  say one student has a grade of 85 another with of 42
  


  
    
      4:55:01
    
  
  
  79 90 56
  


  
    
      4:55:08
    
  
  
  61 let's say say 30 I will create a new list of passing
  


  
    
      4:55:16
    
  
  
  grades equals again follow this formula for every grade in
  


  
    
      4:55:23
    
  
  
  grades check our condition if our grade is greater than or equal to 60 we will
  


  
    
      4:55:32
    
  
  
  return the current grade then let's print our list of
  


  
    
      4:55:39
    
  
  
  passing grades that will give us 85 79 90 and 61
  


  
    
      4:55:46
    
  
  
  all of these grades are greater than or equal to 60 all right everybody so that
  


  
    
      4:55:52
    
  
  
  is a list comprehension it's a concise way to create lists in Python they're
  


  
    
      4:55:57
    
  
  
  Compact and easier to read than traditional Loops remember for every value in your iterable optionally you
  


  
    
      4:56:04
    
  
  
  can check a condition you can write an expression to modify that value if you choose and return something all right
  


  
    
      4:56:11
    
  
  
  everybody so those are list comprehensions in Python hey everybody so today I'm going
  


  
    
  38.match-case statements



  
    
      4:56:18
    
  
  
  to explain match case statements in Python if you're familiar with other programming languages this is also known
  


  
    
      4:56:25
    
  
  
  as a switch match case statements are alternatives to using many LF
  


  
    
      4:56:31
    
  
  
  statements we execute some code if a value matches a case the benefits of
  


  
    
      4:56:37
    
  
  
  using a match case statement is that they're cleaner and the syntax is more readable in this sample program I have a
  


  
    
      4:56:44
    
  
  
  function there is one parameter a day day will be a number ideally a number 1
  


  
    
      4:56:50
    
  
  
  through 7 depending on this number we'll return a string corresponding to the day of the week if day equals 1 then it is
  


  
    
      4:57:01
    
  
  
  Sunday two it is Monday all the way up to 7 where it will be Saturday I do have a
  


  
    
      4:57:10
    
  
  
  else Clause if we pass in something that's not valid like
  


  
    
      4:57:15
    
  
  
  pizza pizza is not a day but it really should be not a valid day a cleaner and
  


  
    
      4:57:21
    
  
  
  more readable alternative is to use a match case statement instead of many elif
  


  
    
      4:57:27
    
  
  
  statements here's how I'm going to take my if and many elif statements and
  


  
    
      4:57:33
    
  
  
  enclose them within a match case match case the case is going to be
  


  
    
      4:57:40
    
  
  
  the value we're examining the case will be day colon we're going to examine our value
  


  
    
      4:57:48
    
  
  
  of day against matching cases we're going to replace if day
  


  
    
      4:57:55
    
  
  
  equals with the following just simply case so let's do that with each of these
  


  
    
      4:58:01
    
  
  
  statements
  


  
    
      4:58:13
    
  
  
  if you have an else Clause you're instead going to have a case of
  


  
    
      4:58:18
    
  
  
  underscore an underscore and match case statement is a wild card we will perform
  


  
    
      4:58:24
    
  
  
  this case if there are no matching cases this case would function as the else
  


  
    
      4:58:29
    
  
  
  statement here's what we're working with now if I pass in one and return the day
  


  
    
      4:58:34
    
  
  
  of the week we would get Sunday two would be Monday 3
  


  
    
      4:58:42
    
  
  
  Tuesday 7 is Saturday and then let's try that
  


  
    
      4:58:48
    
  
  
  day of pizza that is not a valid day a match
  


  
    
      4:58:53
    
  
  
  case statement is an alternative to using many l statements I find this much
  


  
    
      4:58:58
    
  
  
  easier to read than the many l statements both would technically function let's go over a second example
  


  
    
      4:59:06
    
  
  
  we will create a function of is weekend we have to pass in a day this time our
  


  
    
      4:59:13
    
  
  
  day is going to be a string such as Monday the value for each case instead
  


  
    
      4:59:19
    
  
  
  of a number is going to be a string if our day matches a case of
  


  
    
      4:59:25
    
  
  
  Sunday let's return how about a Boolean of true we're checking to see if it's
  


  
    
      4:59:32
    
  
  
  the weekend if our day is equal to a case of
  


  
    
      4:59:37
    
  
  
  Monday then we will return false let's do this with the other days I'm going to
  


  
    
      4:59:43
    
  
  
  fast forward the
  


  
    
      5:00:02
    
  
  
  video we will call the function of is weekend then pass in a day of the week
  


  
    
      5:00:07
    
  
  
  such as Monday so is Sunday the weekend
  


  
    
      5:00:13
    
  
  
  that is true Monday that is false
  


  
    
      5:00:20
    
  
  
  Saturday that is true and we do have a wild card case if there are no
  


  
    
      5:00:25
    
  
  
  matches is pizza a day of the weekend that is false there is a way we can
  


  
    
      5:00:31
    
  
  
  modify this match case too we tend to be repeating ourselves a lot the days Monday through Friday all return false
  


  
    
      5:00:39
    
  
  
  we're going to use the or logical operator which is represented with a vertical bar if the case of
  


  
    
      5:00:48
    
  
  
  Saturday or Sunday return true if the case is
  


  
    
      5:00:54
    
  
  
  Monday or Tuesday you can get rid of that or
  


  
    
      5:01:05
    
  
  
  Wednesday or Thursday
  


  
    
      5:01:12
    
  
  
  or Friday then we will return
  


  
    
      5:01:20
    
  
  
  false we can keep our Wild Card case so is
  


  
    
      5:01:26
    
  
  
  Saturday part of the weekend that is true is
  


  
    
      5:01:31
    
  
  
  Monday false Sunday true Friday
  


  
    
      5:01:41
    
  
  
  false and pizza we have our Wild Card case that
  


  
    
      5:01:47
    
  
  
  gives us false all right everybody so those are match case statements they're similar to switches in other programming
  


  
    
      5:01:53
    
  
  
  languages they're an alternative to using many LF statements we execute some
  


  
    
      5:01:59
    
  
  
  code if a value matches a case the benefits is that the code is cleaner and
  


  
    
      5:02:05
    
  
  
  the syntax is more readable and well everybody those are match case statements in Python
  


  
    
      5:02:12
    
  
  
  on Hello friends it's me again today I'm going to explain modules a module is
  


  
    
  39.modules



  
    
      5:02:17
    
  
  
  just a python file containing code you want to include in your program you use the import keyword to include a module
  


  
    
      5:02:24
    
  
  
  you can use built-in modules or create your own sometimes it's useful to break up a large program into reusable
  


  
    
      5:02:31
    
  
  
  separate files for a list of all the modules found within the standard python Library you can use the help function
  


  
    
      5:02:37
    
  
  
  pass in the word modules and then we would need to print
  


  
    
      5:02:44
    
  
  
  this here are many of the different modules available to you a few you may recognize would be math string time one
  


  
    
      5:02:52
    
  
  
  of my favorite names of a module is the pickle module unfortunately it doesn't have anything to do with Pickles it's
  


  
    
      5:02:58
    
  
  
  used for serialization to list all of the different variables and functions found within the module you can place
  


  
    
      5:03:03
    
  
  
  that name of the module within the help function for example with the math module here are a few different
  


  
    
      5:03:10
    
  
  
  variables we would have access to and a few different functions to include a module we would
  


  
    
      5:03:16
    
  
  
  type import the name of the module for example math I now have access to everything found within the math module
  


  
    
      5:03:24
    
  
  
  including those variables and functions to access those variables and functions I would normally type the name of the
  


  
    
      5:03:29
    
  
  
  module dot the name of the variable or function such as Pi then let's print
  


  
    
      5:03:35
    
  
  
  this PI from the math module is 3.14 and some change another
  


  
    
      5:03:42
    
  
  
  way to import is to type import the name of the module as you can give your
  


  
    
      5:03:48
    
  
  
  module a nickname an alias whatever you think of such as m m short for math we
  


  
    
      5:03:54
    
  
  
  would no longer refer to this module as math we would refer to it as our Alias
  


  
    
      5:04:02
    
  
  
  M using an alias would reduce some of the typing you have to use if you have a very long module name another way to
  


  
    
      5:04:09
    
  
  
  import import is to use from the name of the module import something specific Pi
  


  
    
      5:04:15
    
  
  
  for instance you would no longer need the module name from math import Pi Pi would be
  


  
    
      5:04:23
    
  
  
  included within our namespace however I tend to not use from import as much just
  


  
    
      5:04:28
    
  
  
  because it's possible there could be name conflicts here's an example let's say from math import e e is an
  


  
    
      5:04:35
    
  
  
  exponential constant e is
  


  
    
      5:04:41
    
  
  
  2.71 what if I was to create a program where we have four variables named A B C
  


  
    
      5:04:47
    
  
  
  D A = 1 b = 2 c = 3 D = 4 then I'm going
  


  
    
      5:04:53
    
  
  
  to print E from the math module to the power of
  


  
    
      5:04:59
    
  
  
  a that would give me 2.71 then let's do this with b c and
  


  
    
      5:05:05
    
  
  
  d e to the power of b e to the power of C e to the power of D here are the
  


  
    
      5:05:12
    
  
  
  results let's say we have a different variable e e will be
  


  
    
      5:05:18
    
  
  
  five then I will print e to the power of E we have
  


  
    
      5:05:24
    
  
  
  imported E from the math module when we have declared all of these variables technically what we've done is we have
  


  
    
      5:05:31
    
  
  
  created another version of e we will end up using the second version rather than the version that we have imported from
  


  
    
      5:05:37
    
  
  
  the math module all my my results are now different and it's possible you may not realize it I like to be more
  


  
    
      5:05:44
    
  
  
  explicit I'm going to import math if I'm using a variable or function from a
  


  
    
      5:05:49
    
  
  
  module I much prefer to prefix that variable name or function with the name of the module in which it's from math. e
  


  
    
      5:05:57
    
  
  
  to the power of a to the power of B to the power of C to the power of d math. e
  


  
    
      5:06:03
    
  
  
  to the power of our variable e and these results are to be expected
  


  
    
      5:06:10
    
  
  
  Now to create a module what we're going to do is right click on our project folder go to new
  


  
    
      5:06:16
    
  
  
  python file think of a module name maybe example then click python
  


  
    
      5:06:22
    
  
  
  file we now have two tabs Main and example declare whatever you would like
  


  
    
      5:06:28
    
  
  
  within this module let's create our own variable Pi Pi equals
  


  
    
      5:06:34
    
  
  
  3.14159 then a few functions let's create a function to square an argument that's passed then Define Square we will
  


  
    
      5:06:42
    
  
  
  accept an argument which we will name X then return X to the^ of two let's
  


  
    
      5:06:51
    
  
  
  define a cube function we will accept one argument then return X to the^ of 3
  


  
    
      5:06:59
    
  
  
  maybe a circumference function Define circumference we will accept a
  


  
    
      5:07:05
    
  
  
  radius then return 2 * Pi * radius then
  


  
    
      5:07:12
    
  
  
  an area function to calculate the area of a circle we will accept a radius as
  


  
    
      5:07:17
    
  
  
  an argument then return Pi * radius to
  


  
    
      5:07:22
    
  
  
  the power of 2 all right here is our example module
  


  
    
      5:07:28
    
  
  
  within our main Python program let's import the name of our module which we named example we now have access to
  


  
    
      5:07:35
    
  
  
  everything within this module I'm going to declare a variable result and set it to the name of my
  


  
    
      5:07:42
    
  
  
  module do PI then I will print the result which is
  


  
    
      5:07:50
    
  
  
  3.14159 let's utilize the square function result equals example do Square
  


  
    
      5:07:58
    
  
  
  let's Square three which is n let's use the cube
  


  
    
      5:08:06
    
  
  
  function that would be 27
  


  
    
      5:08:13
    
  
  
  circumference that would give me 18.8 then
  


  
    
      5:08:19
    
  
  
  area that would be 28.2 that's how to create your own module it can be useful at times to
  


  
    
      5:08:26
    
  
  
  separate your program into individual files all right everybody in conclusion a module is just a file containing code
  


  
    
      5:08:33
    
  
  
  you want to include in your program you use import to include a module you can use built-in modules or create your own
  


  
    
      5:08:40
    
  
  
  if you do need a list of the modules available to you again you can use the help function then pass in the word modules and well everybody that's how to
  


  
    
      5:08:47
    
  
  
  get started with modules in Python hey friends it's me again today I'm going to explain both variable scope
  


  
    
  40.scope resolution



  
    
      5:08:55
    
  
  
  and scope resolution variable scope is where a variable is both visible and
  


  
    
      5:09:00
    
  
  
  accessible with scope resolution when we're using a variable there is a certain order known as the lb rule in
  


  
    
      5:09:07
    
  
  
  which we locate that variable local enclosed Global built-in we'll get to
  


  
    
      5:09:12
    
  
  
  this momentarily let's begin with variable scope I have two functions Function One function two within
  


  
    
      5:09:20
    
  
  
  function 1 a equal 1 then we print a within function 2 b equal 2 then we
  


  
    
      5:09:26
    
  
  
  print B if I were to invoke these functions let's invoke function one then
  


  
    
      5:09:31
    
  
  
  function two we would print one then two variables declared within a function
  


  
    
      5:09:38
    
  
  
  have a local scope variable a is local to function one variable B is local to
  


  
    
      5:09:44
    
  
  
  function 2 within function one if I were to print B and function two if I were to print a we would run into a name error
  


  
    
      5:09:52
    
  
  
  name B is not defined and the same thing would apply with a functions can't see
  


  
    
      5:09:58
    
  
  
  inside of other functions imagine that we're function one this is our house we
  


  
    
      5:10:03
    
  
  
  can see everything that's going on inside of our house but function two is our neighbor's house we can't see what's
  


  
    
      5:10:09
    
  
  
  going on inside of our neighbor's house we have no idea what B is with function 2 function 2 has no idea what a is
  


  
    
      5:10:17
    
  
  
  that's where variable scope comes in it's where a variable is visible and accessible functions can't see inside of
  


  
    
      5:10:24
    
  
  
  other functions but they can see inside of their own function that's why we sometimes pass arguments to functions so
  


  
    
      5:10:30
    
  
  
  that our functions are aware of them using this concept we could create different versions of the same variable
  


  
    
      5:10:37
    
  
  
  let's rename a to be X and B to be X as well then I will print
  


  
    
      5:10:44
    
  
  
  X we have two different versions of x a local version of X found within function
  


  
    
      5:10:50
    
  
  
  one and a local version of X found within function 2 whenever we utilize a variable we will first look to see if
  


  
    
      5:10:57
    
  
  
  there's any local instance of that variable if there isn't we would move to the enclosed scope with an enclosed
  


  
    
      5:11:04
    
  
  
  scope one example is when you have a function declared within another function I'm going to place function two
  


  
    
      5:11:11
    
  
  
  within function one this is allowed in Python this is a more advanced concept we'll cover this more in the future so
  


  
    
      5:11:18
    
  
  
  I'm going to eliminate this print statement let's get rid of function two at the end of function one we will
  


  
    
      5:11:25
    
  
  
  invoke function two like I said it's pretty complex we won't be using this until much later
  


  
    
      5:11:31
    
  
  
  within function two if I was to print X we would use the local version or x
  


  
    
      5:11:37
    
  
  
  equals 2 if I was to eliminate this variable
  


  
    
      5:11:42
    
  
  
  declaration we would use the enclosed version instead where x equals 1 there's
  


  
    
      5:11:47
    
  
  
  an order of operations use any local variables first then enclosed variables
  


  
    
      5:11:53
    
  
  
  we're printing X within function 2 since X wasn't found within the local scope we
  


  
    
      5:11:58
    
  
  
  would use x within the enclosed scope but like I said that's a more advanced topic you should at least be aware of it
  


  
    
      5:12:05
    
  
  
  let's move on to the global scope Global meaning outside of any function I will eliminate these variable
  


  
    
      5:12:13
    
  
  
  declarations within function one we're printing X and within function two we're also printing X I will declare a global
  


  
    
      5:12:20
    
  
  
  version of X where x equal 3 x is outside of any functions when I run this
  


  
    
      5:12:27
    
  
  
  program we're printing three twice once for function one and once for function 2
  


  
    
      5:12:34
    
  
  
  there's no longer a local version of X for both of these functions if there were we would end end up using these
  


  
    
      5:12:39
    
  
  
  local versions instead Function One prints one function two prints two if there's no local version as well as no
  


  
    
      5:12:47
    
  
  
  enclosed version we would move on to the global version where x equal 3 last in
  


  
    
      5:12:53
    
  
  
  our order is built in I think what we'll do though is from math import e e is an
  


  
    
      5:13:00
    
  
  
  exponential constant I'm going to print what e is e is
  


  
    
      5:13:06
    
  
  
  2.71 e is built in I will create a function to print e Define function one
  


  
    
      5:13:14
    
  
  
  all I'm doing is printing e then we should invoke it invoke function
  


  
    
      5:13:20
    
  
  
  one if I was to set e to be a different value like three what we're doing
  


  
    
      5:13:26
    
  
  
  technically is creating two different versions of e variables can share the same name as long as they're within a
  


  
    
      5:13:32
    
  
  
  different scope we have a buil-in version of e and a global version of e
  


  
    
      5:13:37
    
  
  
  if I was to print e now it would print my Global version because using the lb
  


  
    
      5:13:43
    
  
  
  order we would first look for any local version of e then enclosed version then
  


  
    
      5:13:49
    
  
  
  Global which we do have one of then lastly built-in all right everybody so
  


  
    
      5:13:54
    
  
  
  in conclusion variable scope is just where a variable is both visible and accessible python has a scope resolution
  


  
    
      5:14:01
    
  
  
  order lb if we're using a variable we will first look in the local scope for that
  


  
    
      5:14:06
    
  
  
  variable if we don't find that variable in the local scope we will move over to an enclosed scope then Global then
  


  
    
      5:14:13
    
  
  
  built-in we will have more practice with this in the future and well everybody that is both variable scope and scope
  


  
    
      5:14:20
    
  
  
  resolution in Python hey everybody so today I got to talk about this if statement if Dunder
  


  
    
  41.if name == 'main'



  
    
      5:14:27
    
  
  
  name is equal to a string of Dunder main when you see this if statement it's
  


  
    
      5:14:32
    
  
  
  usually followed by a call to a function named main or something similar a
  


  
    
      5:14:37
    
  
  
  majority of the driving code behind behind a program is usually found within some sort of main method when you see
  


  
    
      5:14:43
    
  
  
  this if statement basically speaking it means that this script can be imported
  


  
    
      5:14:48
    
  
  
  or it can run Standalone functions and classes in this module can be reused in other programs without the main block of
  


  
    
      5:14:55
    
  
  
  code running sometimes you would like the functionality of a program without executing the main body of code a good
  


  
    
      5:15:01
    
  
  
  example could be a library in a python Library we would like to import some of the useful functions such as the math
  


  
    
      5:15:08
    
  
  
  module but if we were to run that Library directly instead of importing it we could instead display a help page but
  


  
    
      5:15:15
    
  
  
  if we're importing that Library we don't necessarily want to display that help page only if we're running it directly
  


  
    
      5:15:21
    
  
  
  in many Python scripts you'll see the statement of if Thunder name is equal to main if we're not running this program
  


  
    
      5:15:28
    
  
  
  directly don't do it in this example we're going to delete our main python script be sure to recreate it at the end
  


  
    
      5:15:34
    
  
  
  of this topic in case I forget to mention that we will create two scripts go to file new python
  


  
    
      5:15:42
    
  
  
  file script one file new python file script
  


  
    
      5:15:52
    
  
  
  2 we have to add new run configurations for script one and script 2 so if you go
  


  
    
      5:15:58
    
  
  
  to the top go to run edit configurations we will add a new run
  


  
    
      5:16:03
    
  
  
  configuration select python select a new script path to script one
  


  
    
      5:16:09
    
  
  
  okay apply again we have to do this with script 2 add
  


  
    
      5:16:16
    
  
  
  python select a script path of script 2 okay apply then okay using the dropdown
  


  
    
      5:16:25
    
  
  
  menu we can select which run configuration we would like would we like to run our main python file but we
  


  
    
      5:16:31
    
  
  
  have deleted it do we want to run script one or script two for the time being
  


  
    
      5:16:37
    
  
  
  we'll select script one within script one if I was to
  


  
    
      5:16:42
    
  
  
  print then call the dur function dur meaning directory python has all of
  


  
    
      5:16:48
    
  
  
  these built-in attributes if you're not familiar with object-oriented programming for now think of an
  


  
    
      5:16:54
    
  
  
  attribute as a variable Dunder name is a special type of variable Dunder meaning
  


  
    
      5:17:00
    
  
  
  double underscore if I was to print what's contained within Dunder
  


  
    
      5:17:05
    
  
  
  name we would receive a string of Dunder main that's why in a script you may see
  


  
    
      5:17:11
    
  
  
  the statement if Dunder name is equal to a string of Dunder
  


  
    
      5:17:19
    
  
  
  main if so then you usually call a function named main to start your program I'm going to undo that so let's
  


  
    
      5:17:27
    
  
  
  import script 2 from script 2
  


  
    
      5:17:33
    
  
  
  import everything asterisk means everything within script script 2 I will
  


  
    
      5:17:40
    
  
  
  print Dunder name and we'll see what's within it again I'm running script
  


  
    
      5:17:48
    
  
  
  one within script two Dunder name is equal to a string of script two the name
  


  
    
      5:17:55
    
  
  
  of the Python script however within script one Dunder name is equal to a string of Dunder main
  


  
    
      5:18:03
    
  
  
  this means I am running script one directly let's delete this import then go to script 2 import script
  


  
    
      5:18:10
    
  
  
  one from script One Import asterisk meaning all we're now going to change
  


  
    
      5:18:17
    
  
  
  our run configuration from script one to script 2 we are running script 2
  


  
    
      5:18:23
    
  
  
  directly now Dunder name within script one is the name of the Python script
  


  
    
      5:18:28
    
  
  
  script one Dunder name within script 2 is now Dunder
  


  
    
      5:18:35
    
  
  
  main so by adding this if statement of Dunder name is equal to Dunder
  


  
    
      5:18:43
    
  
  
  main we can check to see which file is being run directly if Dunder name equals Dunder
  


  
    
      5:18:50
    
  
  
  main we will call a function of main to contain the main body of our program but
  


  
    
      5:18:55
    
  
  
  we need to Define this function define main our main function will contain the
  


  
    
      5:19:02
    
  
  
  majority of our python code anything that's not already within a function so let's print
  


  
    
      5:19:11
    
  
  
  this is script one then we'll Define another
  


  
    
      5:19:17
    
  
  
  function of favorite food we will have one parameter of
  


  
    
      5:19:23
    
  
  
  food let's print the following message I'll use an F string your favorite food is add a
  


  
    
      5:19:32
    
  
  
  placeholder add our parameter of food within our main function let's call
  


  
    
      5:19:38
    
  
  
  the favorite food function pass in your favorite food as a string I'll type in
  


  
    
      5:19:44
    
  
  
  pizza then let's print the word goodbye we're going to run script
  


  
    
      5:19:52
    
  
  
  one run it here's the result from the top down all of our code
  


  
    
      5:19:58
    
  
  
  is within functions we skip over it because we're not calling it quite yet the first thing we do in this program is
  


  
    
      5:20:04
    
  
  
  check this if statement if Dunder name is equal to Dunder are we running this program directly
  


  
    
      5:20:12
    
  
  
  which we are we're running script one if so call the main method to start the program we print this is script one your
  


  
    
      5:20:19
    
  
  
  favorite food is pizza goodbye now I'm going to go to script two delete our
  


  
    
      5:20:25
    
  
  
  print statement change the Run configuration to script 2 and run it nothing should
  


  
    
      5:20:31
    
  
  
  happen that's good now if we were missing this if statement of if under name is equal to Main
  


  
    
      5:20:38
    
  
  
  then we delete our main function here's what would happen we're importing script one but we're running
  


  
    
      5:20:45
    
  
  
  script two this is script one your favorite food is pizza goodbye I don't want this
  


  
    
      5:20:52
    
  
  
  code to execute we're not running it directly that's why we have that if statement if under name is equal to main
  


  
    
      5:21:00
    
  
  
  I only want to run this code if we're running it directly so what we'll do within script
  


  
    
      5:21:06
    
  
  
  2 now is Define a function of favorite drink there's one parameter of
  


  
    
      5:21:15
    
  
  
  drink I will print use an F string your favorite drink is I'll add a
  


  
    
      5:21:24
    
  
  
  placeholder we'll add our parameter of drink let's print the message this is script
  


  
    
      5:21:33
    
  
  
  2 we will call from script one the favorite food function
  


  
    
      5:21:39
    
  
  
  pass in your favorite food this time I'll say Sushi let's call our favorite drink
  


  
    
      5:21:46
    
  
  
  function favorite drink I'll pass in
  


  
    
      5:21:51
    
  
  
  coffee then we will print goodbye okay we are running script
  


  
    
      5:21:59
    
  
  
  2 this is script 2 your favorite food is Sushi your favorite drink is coffee
  


  
    
      5:22:04
    
  
  
  goodbye we're running script to but we're importing the functionality of the
  


  
    
      5:22:10
    
  
  
  favorite food function from script one sometimes from another python script you want to borrow something but you don't
  


  
    
      5:22:17
    
  
  
  want to run the main body of code directly I just want to borrow this function from script one and that's
  


  
    
      5:22:22
    
  
  
  it script 2 can be run as a standalone program but I can't import it without
  


  
    
      5:22:27
    
  
  
  this body of code running I can add that if statement if Thunder name is equal to a string of Thunder
  


  
    
      5:22:37
    
  
  
  main if we're running this program directly execute this code so let's call
  


  
    
      5:22:42
    
  
  
  a function of main Define main then Place main body of code within
  


  
    
      5:22:51
    
  
  
  it if I run script 2 we have the same message so by adding this if statement
  


  
    
      5:22:57
    
  
  
  of if name is equal to main this script can be run as a standalone program or it
  


  
    
      5:23:03
    
  
  
  can be imported a more practical example of this could be a python Library you can import the library for functionality
  


  
    
      5:23:11
    
  
  
  but if you run the library directly you could instead display a help page it is
  


  
    
      5:23:16
    
  
  
  good practice to include if Dunder name equals Dunder main it makes your code more modular helps with readability
  


  
    
      5:23:23
    
  
  
  leaves no Global variables and avoid unintended execution and well everybody
  


  
    
      5:23:29
    
  
  
  that is the purpose of if Dunder name equals Dunder Main in Python hey what's going on everybody so
  


  
    
  42.banking program



  
    
      5:23:36
    
  
  
  in this video we're going to create a very Simple banking program using python this is meant to be more of an exercise
  


  
    
      5:23:42
    
  
  
  to get us used to working with functions when creating a project I like to divide that project into smaller sections then
  


  
    
      5:23:48
    
  
  
  handle them one at a time so we'll do that by declaring all the functions we'll need first with the banking
  


  
    
      5:23:53
    
  
  
  program we'll need to show a user their balance we'll Define a function to show
  


  
    
      5:24:00
    
  
  
  balance for the time being I'll write pass just as a placeholder we'll need to make a deposit
  


  
    
      5:24:07
    
  
  
  Define deposit make
  


  
    
      5:24:12
    
  
  
  withdrawal Define withdraw near the end of this project we
  


  
    
      5:24:19
    
  
  
  will be creating a main function and placing the main body of our code within it we'll handle that near the end just
  


  
    
      5:24:25
    
  
  
  to contain everything we have our three functions with our banking program we'll need to show a balance make a deposit or
  


  
    
      5:24:33
    
  
  
  make a withdrawal what are some variables we'll need well we'll need a balance which I will set to be zero
  


  
    
      5:24:40
    
  
  
  initially I will also create a Boolean of is running this will be true if at
  


  
    
      5:24:46
    
  
  
  any time we said is running to be false we'll exit the program so with the majority of our code
  


  
    
      5:24:54
    
  
  
  we'll place it within a while loop while is running you can check to see if this
  


  
    
      5:24:59
    
  
  
  is equal to true but since this is a Boolean that's not necessary we will just say while is
  


  
    
      5:25:06
    
  
  
  running if is running becomes false false we'll exit the while loop within our while loop we'll print some sort of
  


  
    
      5:25:12
    
  
  
  Welcome message let's print banking
  


  
    
      5:25:20
    
  
  
  program then list some options let's print
  


  
    
      5:25:25
    
  
  
  one show
  


  
    
      5:25:31
    
  
  
  balance two deposit
  


  
    
      5:25:40
    
  
  
  three will be
  


  
    
      5:25:45
    
  
  
  withdraw four will be
  


  
    
      5:25:52
    
  
  
  exit afterwards we will set a choice variable to equal some user
  


  
    
      5:25:58
    
  
  
  input input enter your choice 1- 4 We're
  


  
    
      5:26:07
    
  
  
  encouraging a user to to type in a number 1 through 4 to select an option do they want to show their balance make
  


  
    
      5:26:13
    
  
  
  a deposit make a withdrawal or exit we'll add a few if and else if
  


  
    
      5:26:18
    
  
  
  statements let's check to see if the user's choice is equal to one that is a string
  


  
    
      5:26:26
    
  
  
  of one our user input is a string data type unless we were to typ cast it to something else if our choice is equal to
  


  
    
      5:26:33
    
  
  
  one we will call the function to show balance
  


  
    
      5:26:38
    
  
  
  else if our choice is equal to two we will make a deposit by calling
  


  
    
      5:26:46
    
  
  
  the deposit function else if choice is equal to
  


  
    
      5:26:54
    
  
  
  three we will call the withdraw
  


  
    
      5:27:01
    
  
  
  function else if choice is equal to 4 that means we would like to exit so we
  


  
    
      5:27:07
    
  
  
  need to exit this while loop we can do that by setting our variable of is running is this program running equal to
  


  
    
      5:27:15
    
  
  
  be false to exit if somebody types in some input that's not valid we can
  


  
    
      5:27:20
    
  
  
  handle that with an else statement else let's
  


  
    
      5:27:26
    
  
  
  print that is not a valid Choice okay let's see what we're working
  


  
    
      5:27:33
    
  
  
  with currently to test everything we haven't written anything within these functions yet show balance deposit or
  


  
    
      5:27:38
    
  
  
  withdraw so we can type 1 2 3 and for to
  


  
    
      5:27:46
    
  
  
  exit processed finished with exit Code Zero so we can't exit the program we
  


  
    
      5:27:51
    
  
  
  just have to select option four with this else statement this will execute if we type in something besides
  


  
    
      5:27:58
    
  
  
  the numbers 1 through 4 because there's no other options left so to test that
  


  
    
      5:28:03
    
  
  
  enter your choice 1 through four uh I'm just going to type the word poo that is not a valid
  


  
    
      5:28:10
    
  
  
  choice so we know that the L statement is working once we exit the while loop
  


  
    
      5:28:15
    
  
  
  let's print a message that
  


  
    
      5:28:21
    
  
  
  says thank you have a nice
  


  
    
      5:28:30
    
  
  
  day if I was to type for to exit we should exit the program thank you have a
  


  
    
      5:28:36
    
  
  
  nice day let's make that h capital now we'll work on our functions
  


  
    
      5:28:41
    
  
  
  beginning with show balance currently these two variables are Global we don't need to pass them as a parameter to
  


  
    
      5:28:48
    
  
  
  these functions quite yet we will be enclosing all of this code within a main function we'll handle that later though
  


  
    
      5:28:55
    
  
  
  so with show balance all we're going to do is print I'll use an F
  


  
    
      5:29:00
    
  
  
  string your balance is add a dollar sign or other
  


  
    
      5:29:07
    
  
  
  unit of currency of your choosing add a placeholder our balance
  


  
    
      5:29:12
    
  
  
  variable and let's see what we have I will type one to show balance
  


  
    
      5:29:20
    
  
  
  your balance is 0 I'll display our balance with two decimal places after I will add a format
  


  
    
      5:29:27
    
  
  
  specifier after balance colon. 2f will add two decimal places we covered format
  


  
    
      5:29:34
    
  
  
  specifiers in a previous topic so if I were to run this again type one we show $0 and 0 cents we're
  


  
    
      5:29:44
    
  
  
  displaying two floating Point decimal places now we need to make a deposit that'll be the next
  


  
    
      5:29:51
    
  
  
  function we will Define a local variable of amount equals accept some user
  


  
    
      5:29:58
    
  
  
  input enter an amount to be deposited
  


  
    
      5:30:08
    
  
  
  again when we accept user input it's a string we'll typ cast it to a number a
  


  
    
      5:30:13
    
  
  
  floating Point number because we have to include dollars and cents we'll add some checks though after
  


  
    
      5:30:20
    
  
  
  accepting some user input if our amount is greater than zero we don't want
  


  
    
      5:30:26
    
  
  
  anybody to make a negative deposit let's
  


  
    
      5:30:32
    
  
  
  print that's not a valid amount
  


  
    
      5:30:40
    
  
  
  else we are going to return our amount so this function is
  


  
    
      5:30:46
    
  
  
  going to return something so within our else if
  


  
    
      5:30:52
    
  
  
  statement we will take our balance plus equals the deposit we're
  


  
    
      5:30:59
    
  
  
  being returned with this will add our deposit to our balance balance plus
  


  
    
      5:31:04
    
  
  
  equals deposit let's try it
  


  
    
      5:31:10
    
  
  
  let's show our balance our balance is $0 we'll make a deposit of $100
  


  
    
      5:31:20
    
  
  
  exactly again we'll show our balance after making the deposit your balance is
  


  
    
      5:31:26
    
  
  
  $100 let's attempt to deposit negative money we'll select two to make a
  


  
    
      5:31:31
    
  
  
  deposit we'll deposit 42069
  


  
    
      5:31:37
    
  
  
  that's not a valid amount so we have a problem we have a type error unsupported operand for float
  


  
    
      5:31:46
    
  
  
  and nonone type so within this statement within if within our deposit function
  


  
    
      5:31:52
    
  
  
  we're not returning anything let's just return zero we have
  


  
    
      5:31:57
    
  
  
  to return something and within this if statement we didn't return anything previously will either return zero or
  


  
    
      5:32:05
    
  
  
  return a valid amount let's try this again let's make a deposit I will
  


  
    
      5:32:12
    
  
  
  attempt to deposit -420 69 that's not a valid amount our
  


  
    
      5:32:19
    
  
  
  program's not crashing that's good now we'll attempt to make a valid deposit
  


  
    
      5:32:25
    
  
  
  $50 And1 then show my balance your balance is $50 And1 Cent okay that is the
  


  
    
      5:32:33
    
  
  
  deposit function we'll work on the withdraw function next
  


  
    
      5:32:41
    
  
  
  we will create a local variable of amount accept some user
  


  
    
      5:32:46
    
  
  
  input enter amount to be
  


  
    
      5:32:54
    
  
  
  withdrawn our user input is going to be a string we will typ cast it to be a floating Point
  


  
    
      5:33:01
    
  
  
  number we need to check to see if our amount we're trying to withdraw
  


  
    
      5:33:07
    
  
  
  is greater than our balance users shouldn't be able to withdraw more money than what they have
  


  
    
      5:33:13
    
  
  
  in their bank account if the amount is greater than our balance that we have we
  


  
    
      5:33:18
    
  
  
  will print insufficient
  


  
    
      5:33:27
    
  
  
  funds else if the amount somebody's trying to withdraw is less than
  


  
    
      5:33:33
    
  
  
  zero we will print a different message
  


  
    
      5:33:39
    
  
  
  amount must be greater than
  


  
    
      5:33:45
    
  
  
  zero else we will return our valid
  


  
    
      5:33:50
    
  
  
  amount so with our if and else if statements we do need to return something if we take one of these
  


  
    
      5:33:56
    
  
  
  routes we will return
  


  
    
      5:34:02
    
  
  
  zero we're not making any changes within our else if statement
  


  
    
      5:34:08
    
  
  
  where we select choice three we're going to take our balance minus equals the
  


  
    
      5:34:15
    
  
  
  withdraw amount Let's test this banking program let's show our
  


  
    
      5:34:23
    
  
  
  balance our balance is zero we'll make a deposit of
  


  
    
      5:34:29
    
  
  
  $100 show my balance again your balance is $100 let's press three to withdraw money
  


  
    
      5:34:37
    
  
  
  enter amount to be withdrawn one1 kajillion dollar insufficient funds yeah no
  


  
    
      5:34:45
    
  
  
  kidding Let's attempt to withdraw money again we shouldn't be able to select a
  


  
    
      5:34:50
    
  
  
  negative amount negative $420 69 amount must be greater than
  


  
    
      5:34:57
    
  
  
  zero let's enter in a valid number this time I would like to withdraw
  


  
    
      5:35:03
    
  
  
  $49.99 that has appeared to work we'll show our balance again your balance is now
  


  
    
      5:35:09
    
  
  
  $501 then we can exit by pressing for to exit thank you and have a nice
  


  
    
      5:35:16
    
  
  
  day the last few changes I'm going to make is that I'm going to enclose all of this code our main portion of code
  


  
    
      5:35:23
    
  
  
  within a main function just to encapsulate all of our variables and help with
  


  
    
      5:35:28
    
  
  
  readability we will Define a function of main take all of our code within the
  


  
    
      5:35:34
    
  
  
  main body of our program and place it within the function I'm just going to select all of it and
  


  
    
      5:35:39
    
  
  
  indent it at the end of our program we need to call a main function to run
  


  
    
      5:35:46
    
  
  
  it if you're familiar with the statement of if Dunder name is equal to a string
  


  
    
      5:35:54
    
  
  
  of Dunder main that means this program can be imported or run stand alone it is good
  


  
    
      5:36:00
    
  
  
  practice to include this if statement we discussed this in the previous video if we're running this program directly
  


  
    
      5:36:07
    
  
  
  execute the main function however our variables of balance and is running they're now
  


  
    
      5:36:13
    
  
  
  enclosed within this local scope these other functions have no idea what these variables are of balance so we need to
  


  
    
      5:36:20
    
  
  
  pass in our balance to those functions of withdraw and show
  


  
    
      5:36:27
    
  
  
  balance when we show our balance we have to pass in our variable of balance same
  


  
    
      5:36:32
    
  
  
  thing with withdraw then set up those parameters within show balance we will
  


  
    
      5:36:38
    
  
  
  have one parameter of balance the same thing with withdraw the last thing I'm going to do
  


  
    
      5:36:44
    
  
  
  is add a little bit of text decoration around my program just to make it look
  


  
    
      5:36:49
    
  
  
  nice so I will print a bunch of asterisks it's not necessary but I think
  


  
    
      5:36:56
    
  
  
  it'll look
  


  
    
      5:37:04
    
  
  
  nice let's add some text decoration before and after the title of banking
  


  
    
      5:37:09
    
  
  
  program also before our choice basically whenever we print
  


  
    
      5:37:15
    
  
  
  anything we'll add some text
  


  
    
      5:37:24
    
  
  
  decoration let's do that with show balance our
  


  
    
      5:37:35
    
  
  
  deposit and within withdrawal
  


  
    
      5:37:47
    
  
  
  okay let's run this one last
  


  
    
      5:37:52
    
  
  
  time banking program let's show our
  


  
    
      5:37:58
    
  
  
  balance your balance is $0 we'll make it deposit $100
  


  
    
      5:38:04
    
  
  
  And1 show our balance again your balance is $100
  


  
    
      5:38:09
    
  
  
  And1 we will withdraw money enter an amount to be withdrawn
  


  
    
      5:38:16
    
  
  
  $11,000 insufficient funds let's try that again let's withdraw
  


  
    
      5:38:21
    
  
  
  $50 show our balance again $501 then press for to exit thank you
  


  
    
      5:38:27
    
  
  
  and have a nice day all right everybody that is a simple banking program you can write using
  


  
    
  43.slot machine



  
    
      5:38:34
    
  
  
  python hey everybody in today's video we're going to create a beginners slot machine program using python this
  


  
    
      5:38:40
    
  
  
  Project's meant for beginners so let's get started when creating a project I like to break up that project into
  


  
    
      5:38:46
    
  
  
  different sections then tackle them one at a time so with the slot machine what are some of the different functions
  


  
    
      5:38:52
    
  
  
  we'll need well we'll need to spin a row we'll Define a function to spin row as a
  


  
    
      5:38:59
    
  
  
  placeholder I'll write pass we'll return to this function later we need to display or print the
  


  
    
      5:39:06
    
  
  
  row print row if somebody gets matching symbols on
  


  
    
      5:39:14
    
  
  
  the slot machine we need to give them a payout we'll create a function to get
  


  
    
      5:39:20
    
  
  
  payout in this function we'll calculate what that payout is going to be but again we'll get to that later we'll
  


  
    
      5:39:27
    
  
  
  write the majority of our code within a main
  


  
    
      5:39:33
    
  
  
  function at the end of this program I will add the if statement of if Dunder
  


  
    
      5:39:38
    
  
  
  name is equal to a string of Dunder
  


  
    
      5:39:43
    
  
  
  main then we will call the main function which drives our code this program can
  


  
    
      5:39:49
    
  
  
  be imported or stand alone it is good practice to add this if statement a majority of the code we're going to
  


  
    
      5:39:54
    
  
  
  write is going to be within our main function So within our main function let's declare the variables we'll need
  


  
    
      5:40:00
    
  
  
  throughout this program we will need a starting balance which I will just name balance we will start with 100 00 as in
  


  
    
      5:40:09
    
  
  
  $100 we'll need to display some sort of Welcome message let's print something we
  


  
    
      5:40:15
    
  
  
  will print welcome to Let's name our game python
  


  
    
      5:40:22
    
  
  
  slots just for some flavor I'm going to add some text decoration just a bunch of as risks I think it'll look cool but you
  


  
    
      5:40:30
    
  
  
  don't have to Let's display our symbols we're going to use
  


  
    
      5:40:38
    
  
  
  symbols I'll add some emojis we'll use emojis in this program in place of images if you're on Windows you can hold
  


  
    
      5:40:45
    
  
  
  down the window key plus semicolon let's add a cherry you typically see a lot of
  


  
    
      5:40:51
    
  
  
  fruit in slot machines a
  


  
    
      5:40:57
    
  
  
  watermelon a lemon there's also a lot of bells for
  


  
    
      5:41:03
    
  
  
  some reason but we'll add those and a
  


  
    
      5:41:10
    
  
  
  star let me just align
  


  
    
      5:41:19
    
  
  
  everything let's do a test run welcome to python
  


  
    
      5:41:25
    
  
  
  slots let me make one adjustment okay I'm happy with
  


  
    
      5:41:32
    
  
  
  that so after our welcome message we'll continue playing this game while our
  


  
    
      5:41:38
    
  
  
  balance is greater than zero while we still have money we can continue playing
  


  
    
      5:41:44
    
  
  
  we will print I'll use an FST string current
  


  
    
      5:41:50
    
  
  
  balance colon space I'll add a placeholder pick a unit of currency I'll pick American dollars then we will
  


  
    
      5:41:58
    
  
  
  display the user's balance we will prompt the user to enter in their bet
  


  
    
      5:42:03
    
  
  
  which we will assign to a variable of BET so
  


  
    
      5:42:10
    
  
  
  input place your bet amount let's do a test
  


  
    
      5:42:18
    
  
  
  run welcome to python slots current balance $100 place your bet amount we
  


  
    
      5:42:25
    
  
  
  won't deduce the BET amount from the balance quite yet I just want to be sure that we can enter in something
  


  
    
      5:42:31
    
  
  
  $1 good $10 $100 what if somebody body types in a
  


  
    
      5:42:38
    
  
  
  word like pizza we need to prevent that input and correct
  


  
    
      5:42:45
    
  
  
  it we'll check if take our bet use the is digit method is our bet a digit if
  


  
    
      5:42:54
    
  
  
  somebody types in a word like pizza we need to tell them that's not valid so this will return true if our bet is a
  


  
    
      5:43:02
    
  
  
  digit but we're going to use the not logical operator if our our bet is not a
  


  
    
      5:43:09
    
  
  
  digit then do this we will
  


  
    
      5:43:14
    
  
  
  print please enter a valid
  


  
    
      5:43:19
    
  
  
  number followed by the continue keyword the continue keyword will skip the
  


  
    
      5:43:25
    
  
  
  current iteration of this Loop and start from the beginning Let's test
  


  
    
      5:43:33
    
  
  
  it place your bet amount Pizza please enter a valid number we have our
  


  
    
      5:43:39
    
  
  
  current balance again place your bet amount I'll type in one okay we did not get that message of
  


  
    
      5:43:46
    
  
  
  please enter a valid number this bet of $1 is valid so if our bet is a digit we'll
  


  
    
      5:43:54
    
  
  
  convert it to be an integer using typ casting because when you accept user input it's a string it has the string
  


  
    
      5:44:01
    
  
  
  data type let's reassign our bet type cast our bet as an integer
  


  
    
      5:44:10
    
  
  
  then we will check to see if our bet is greater than our balance people can't
  


  
    
      5:44:15
    
  
  
  bet money that they don't have if the bet is greater than the
  


  
    
      5:44:21
    
  
  
  current balance if bet is greater than balance we will print this message
  


  
    
      5:44:26
    
  
  
  instead insufficient funds then continue
  


  
    
      5:44:37
    
  
  
  if somebody tries to bet negative money or no money we'll add this statement if
  


  
    
      5:44:43
    
  
  
  bet is less than or equal to zero we will
  


  
    
      5:44:50
    
  
  
  print bet must be greater than zero and
  


  
    
      5:45:00
    
  
  
  continue if all these checks pass if our bet is not a digit if our bet is greater
  


  
    
      5:45:05
    
  
  
  than our balance or if our bet is greater than zero we will take our
  


  
    
      5:45:10
    
  
  
  original balance minus equals our bet to subtract
  


  
    
      5:45:18
    
  
  
  it let's do a test run place your bet amount pizza please
  


  
    
      5:45:25
    
  
  
  enter a valid number I will bet1 kajillion dollar insufficient funds
  


  
    
      5:45:33
    
  
  
  yeah no kidding 0 bet must be greater than zero what about
  


  
    
      5:45:40
    
  
  
  $1 our bet should be subtracted from our balance let's try 10 we are now down to
  


  
    
      5:45:48
    
  
  
  89 let's bet $90 insufficient funds
  


  
    
      5:45:55
    
  
  
  89 and that has appeared to work once we subtract our bet from our
  


  
    
      5:46:00
    
  
  
  balance we will call the function to spin row
  


  
    
      5:46:07
    
  
  
  this function is going to return a list which we will assign to be row row will
  


  
    
      5:46:14
    
  
  
  be a list using the spin row function we have to generate three random symbols
  


  
    
      5:46:19
    
  
  
  then return them within a list we'll work on the spin row function next within our spin row function we
  


  
    
      5:46:26
    
  
  
  will declare a list of symbols add your
  


  
    
      5:46:33
    
  
  
  symbols but these need to be strings
  


  
    
      5:46:39
    
  
  
  make sure they're all comma
  


  
    
      5:46:53
    
  
  
  separated there we go this is where list comprehensions can come in if you don't
  


  
    
      5:46:59
    
  
  
  know what a list comprehension is here's an alternative we will declare an empty list of results this is an empty list we
  


  
    
      5:47:08
    
  
  
  need a for Loop to generate three random symbols we could say
  


  
    
      5:47:13
    
  
  
  for symbol in range
  


  
    
      5:47:19
    
  
  
  three this for Loop will iterate three times during each iteration let's take
  


  
    
      5:47:25
    
  
  
  our empty list of results use the append method we will append a random.
  


  
    
      5:47:34
    
  
  
  choice among our symbols so we need to import the random
  


  
    
      5:47:42
    
  
  
  module we'll do so at the top import random we're telling the random module
  


  
    
      5:47:49
    
  
  
  to pick a random Choice from this list of symbols then we will append them to our
  


  
    
      5:47:55
    
  
  
  empty list of results after we escape the for Loop we will return our results
  


  
    
      5:48:04
    
  
  
  it's a list now a much better option is to use a list comprehension here's how
  


  
    
      5:48:11
    
  
  
  it's going to be a lot more concise we will return a list within the list we
  


  
    
      5:48:17
    
  
  
  will write a list comprehension for every let's say
  


  
    
      5:48:22
    
  
  
  symbol in range three there is no condition what do we
  


  
    
      5:48:29
    
  
  
  want to return during each iteration access the random module use
  


  
    
      5:48:35
    
  
  
  the choice method then pass in our symbols symbol isn't used in this
  


  
    
      5:48:43
    
  
  
  example what you may see people do is use an underscore as a placeholder
  


  
    
      5:48:48
    
  
  
  basically what we're saying is for every iteration in range three return a random
  


  
    
      5:48:54
    
  
  
  symbol that's all we need for the spin row function going back we have our list of
  


  
    
      5:49:01
    
  
  
  row afterwards I am going to print it to test it print row
  


  
    
      5:49:07
    
  
  
  and we should have three random symbols after making a bet all right it looks
  


  
    
      5:49:13
    
  
  
  like it's working we'll make a few changes
  


  
    
      5:49:20
    
  
  
  though instead of printing our row I'm going to print the word
  


  
    
      5:49:28
    
  
  
  spinning I will add a new line character just to give us some space like after
  


  
    
      5:49:33
    
  
  
  this word of spinning then we will call the print row
  


  
    
      5:49:40
    
  
  
  function we'll pass in one argument R row that's returned to us after we spin
  


  
    
      5:49:46
    
  
  
  the row so going to our print row function we need to set up one parameter
  


  
    
      5:49:52
    
  
  
  our row that we receive it's going to be a list one easy way to print the elements of a list is that we can print
  


  
    
      5:50:00
    
  
  
  pick some sort of separator for each item in the list for example I'll just print a space with strings there are bu
  


  
    
      5:50:07
    
  
  
  methods we will use the join method then pass in our list or other iterable
  


  
    
      5:50:13
    
  
  
  basically what we're saying using the join method we're going to take our iterable in this case our list join each
  


  
    
      5:50:19
    
  
  
  element by a space a space character here's the
  


  
    
      5:50:25
    
  
  
  result we have three symbols you could join them by a different character I'll
  


  
    
      5:50:31
    
  
  
  add a vertical bar and to your bet amount $1 now we
  


  
    
      5:50:36
    
  
  
  have a vertical bar between each of these symbols we could include more than one character I'll add a space before
  


  
    
      5:50:42
    
  
  
  and after this vertical bar just to space things out I think that looks a lot better and
  


  
    
      5:50:50
    
  
  
  you don't have to but I'm going to add some text decoration before and after I'll add a bunch of
  


  
    
      5:50:59
    
  
  
  asterisks let's see what we're working with not bad
  


  
    
      5:51:07
    
  
  
  so every time we make a bet we get a new set of symbols now what if all three symbols
  


  
    
      5:51:14
    
  
  
  match we need to calculate a payout and give it to the user because well they
  


  
    
      5:51:20
    
  
  
  won so after we print our row we will call the
  


  
    
      5:51:25
    
  
  
  get payout function but we will pass in our row it's a list and our bet how much
  


  
    
      5:51:33
    
  
  
  did we bet we will be returned with a pay out which we will add to our balance
  


  
    
      5:51:40
    
  
  
  let's go to the get payout function we're sending two arguments to
  


  
    
      5:51:47
    
  
  
  our get payout function a row and a bet
  


  
    
      5:51:52
    
  
  
  we have to check to see if each element in our row is all the same is it all the same character we can do that with an if
  


  
    
      5:52:00
    
  
  
  statement if our row at index of zero that's going to be the first symbol is
  


  
    
      5:52:06
    
  
  
  equal to row at index one that's the second symbol is equal to
  


  
    
      5:52:14
    
  
  
  row at the second index and that's the third symbol if all three symbols match
  


  
    
      5:52:20
    
  
  
  we have to return the BET multiplied within our if statement we will add another if
  


  
    
      5:52:26
    
  
  
  statement I will check to see if our row at index0 is equal to our first symbol of
  


  
    
      5:52:34
    
  
  
  cherry be sure to place it within quotes because it's a
  


  
    
      5:52:40
    
  
  
  string now the reason I'm only checking if row at index zero is a Cherry Emoji
  


  
    
      5:52:45
    
  
  
  all these symbols are going to be the same if we're within this if statement all of these symbols are going to match
  


  
    
      5:52:52
    
  
  
  we only need to check one of them it could be zero one or two but I'll just add zero they're all going to be the
  


  
    
      5:52:59
    
  
  
  same regardless if somebody has all cherries we will return their bet * 3
  


  
    
      5:53:07
    
  
  
  or some other amount you can make the payouts higher or lower else if row at index zero is equal
  


  
    
      5:53:16
    
  
  
  to a watermelon then we will return their bet
  


  
    
      5:53:23
    
  
  
  Time 4 so watermelons are worth more than
  


  
    
      5:53:28
    
  
  
  cherries else if row at index zero is equal to a lemon
  


  
    
      5:53:38
    
  
  
  we will return their bet Time
  


  
    
      5:53:43
    
  
  
  5 else if row at index zero is equal to
  


  
    
      5:53:49
    
  
  
  a bell let's give them times 10 return bet
  


  
    
      5:53:56
    
  
  
  time 10 else if row at index zero is is equal
  


  
    
      5:54:06
    
  
  
  to a star that's worth the most we will return their bet time 20
  


  
    
      5:54:15
    
  
  
  make sure we're not within our if statement anymore if all three symbols don't match within our list we don't
  


  
    
      5:54:21
    
  
  
  want to give the user anything they lost that spin we will return zero that's all
  


  
    
      5:54:27
    
  
  
  we need for the get payout function scrolling back down after receiving a
  


  
    
      5:54:33
    
  
  
  payout it's returned to us from this function we'll check to see if our
  


  
    
      5:54:38
    
  
  
  payout is greater than zero that means they want to spin I will
  


  
    
      5:54:45
    
  
  
  print I'll use an F string U1 I'll add a placeholder preced this
  


  
    
      5:54:52
    
  
  
  with a unit of currency I'll use dollars will display the
  


  
    
      5:54:58
    
  
  
  payout else if they did not receive a payout that means they lost that spin we
  


  
    
      5:55:04
    
  
  
  will print s sorry you lost this
  


  
    
      5:55:11
    
  
  
  round then take our balance this is our original balance
  


  
    
      5:55:17
    
  
  
  plus equals our payout in most cases the payout is going to be zero but if the
  


  
    
      5:55:23
    
  
  
  user wins something we will add that to the balance okay let's do a test
  


  
    
      5:55:29
    
  
  
  run I will bet $1 sorry you lost this round and my current balance is 99
  


  
    
      5:55:36
    
  
  
  let's bet again I'll just keep on doing this until I
  


  
    
      5:55:42
    
  
  
  win we're going to lose more times than what we
  


  
    
      5:55:51
    
  
  
  win okay see I got all Bells it says you won $10 once somebody runs out of money
  


  
    
      5:55:58
    
  
  
  we want to stop them from playing or if they would like to exit we'll create a variable of play again
  


  
    
      5:56:06
    
  
  
  we will accept some user input do you want to spin
  


  
    
      5:56:16
    
  
  
  again we'll add y for yes sln for
  


  
    
      5:56:23
    
  
  
  no if our variable of play again does not equal a character of capital Y then
  


  
    
      5:56:31
    
  
  
  we will break to break out of this Loop let's do a test run and to your bet
  


  
    
      5:56:37
    
  
  
  amount I'll just bet a dollar do you want to spin again if I type in anything besides a capital Y we will exit I will
  


  
    
      5:56:44
    
  
  
  type in no then we
  


  
    
      5:56:49
    
  
  
  exit and to your bet amount I'll bet a dollar if somebody were to type in a
  


  
    
      5:56:55
    
  
  
  lowercase y that doesn't register we'll make it uppercase by following our input with the upper method to make it
  


  
    
      5:57:02
    
  
  
  uppercase place your bet a dollar hey I won I won $3 do you want to play again
  


  
    
      5:57:08
    
  
  
  I'll type in a lowercase y yes I would like to play again but I did not hold
  


  
    
      5:57:14
    
  
  
  shift in order to make this a capital Y that will still register and our current
  


  
    
      5:57:19
    
  
  
  balance is $12 we're ahead currently place your bet amount I'll bet
  


  
    
      5:57:25
    
  
  
  $10 we lost this round I will press n
  


  
    
      5:57:30
    
  
  
  because I don't want to play again then we exit so at the end of our program
  


  
    
      5:57:37
    
  
  
  I will print I'll use an F string game over
  


  
    
      5:57:43
    
  
  
  your final balance is I'll add a placeholder pick a unit of currency I'll
  


  
    
      5:57:50
    
  
  
  pick dollars display our balance then I'll just add some text decoration
  


  
    
      5:57:55
    
  
  
  before and after to make it all look
  


  
    
      5:58:02
    
  
  
  nice okay let's play this one last time enter your bet amount I'll bet a
  


  
    
      5:58:07
    
  
  
  dollar sorry you lost this round do you want to spin again yes I do I will bet
  


  
    
      5:58:13
    
  
  
  $5 you lost spin again yes I will bet
  


  
    
      5:58:18
    
  
  
  10 20 again I'll bet 20 I keep
  


  
    
      5:58:27
    
  
  
  losing I'm running out of money guys hey I won $10 though do you want to spin again no game over your final balance is
  


  
    
      5:58:36
    
  
  
  $1 that's why you shouldn't gamble you tend to lose more money than what you gain all right everybody so that is a
  


  
    
      5:58:42
    
  
  
  slot machine program you can write using python hello everybody today I'm going
  


  
    
  44.encryption program



  
    
      5:58:47
    
  
  
  to show you how we can write a substitution Cipher encryption program basically speaking what we're going to
  


  
    
      5:58:53
    
  
  
  do is that we have a message to hide the message we can encrypt it by replacing
  


  
    
      5:58:59
    
  
  
  every instance of one character with another chosen at random using the same
  


  
    
      5:59:04
    
  
  
  key we can then decrypt to the message when I was at my University I took an intro to cyber security course I turned
  


  
    
      5:59:12
    
  
  
  this program in as a final assignment and I did get an A on it I don't know maybe it'll help you at the very least
  


  
    
      5:59:18
    
  
  
  it's a good exercise all right let's get started everybody we will Begin by importing the random module as well as
  


  
    
      5:59:25
    
  
  
  the string module let's create a string of characters named
  


  
    
      5:59:31
    
  
  
  chariz whatever characters you would like to use for your encryption program list them here as a string however this
  


  
    
      5:59:38
    
  
  
  can be a lot to write I think a better solution would be to import some constants from the string module I'm
  


  
    
      5:59:45
    
  
  
  going to include some punctuation I will import the punctuation constant of the string
  


  
    
      5:59:51
    
  
  
  module how the heck do you spell punctuation okay that's right plus I
  


  
    
      5:59:57
    
  
  
  will add some digits string. digits constant plus string Dot
  


  
    
      6:00:08
    
  
  
  asky letters let's take a look at our character so
  


  
    
      6:00:16
    
  
  
  far we have one long string of characters what if I would like to
  


  
    
      6:00:21
    
  
  
  include a space a white space well there is a constant for that but that includes
  


  
    
      6:00:27
    
  
  
  things like carriage return that's going to warp our results let me show you just
  


  
    
      6:00:32
    
  
  
  for a demonstration string Dot Whit space plus all the other
  


  
    
      6:00:39
    
  
  
  stuff we have a carriage return and some other characters I would like to avoid that so in place of importing the Whit
  


  
    
      6:00:46
    
  
  
  space constant from the string module I'm going to add a space character
  


  
    
      6:00:51
    
  
  
  that's good enough here are all the characters I will be using this program feel free to
  


  
    
      6:00:57
    
  
  
  add more or less this is all one long string I'm going to turn the string into
  


  
    
      6:01:03
    
  
  
  a list where each character is an individual element to do that I'm going
  


  
    
      6:01:09
    
  
  
  to take our string of chars reassign it then typ cast my string of characters as
  


  
    
      6:01:17
    
  
  
  a list then let's print it again print chars instead of one long string we have
  


  
    
      6:01:25
    
  
  
  a list a list of all the characters we'll need I am then going to create a
  


  
    
      6:01:30
    
  
  
  key which we will Shuffle eventually key then to create a copy of a list you can
  


  
    
      6:01:36
    
  
  
  type the original list. copy method then I will print my
  


  
    
      6:01:44
    
  
  
  key I'm going to place these lists within an F
  


  
    
      6:01:53
    
  
  
  string
  


  
    
      6:01:59
    
  
  
  chars then key let's see what we have
  


  
    
      6:02:06
    
  
  
  we have two identical lists one for the original characters and the other for the key we're going to shuffle this
  


  
    
      6:02:16
    
  
  
  key random. shuffle pass in our list of
  


  
    
      6:02:23
    
  
  
  key look at that all of the characters are now shuffled in a random order what we'll be doing when somebody
  


  
    
      6:02:29
    
  
  
  types in some text to be encrypted we will replace every instance of one
  


  
    
      6:02:34
    
  
  
  character within that string let's say an O then replace it with another one
  


  
    
      6:02:40
    
  
  
  every time we run this program this key will be reshuffled let's ask for some user
  


  
    
      6:02:46
    
  
  
  input this part of our program we will do some
  


  
    
      6:02:51
    
  
  
  encryption plain text is the original message plain text equals we will accept
  


  
    
      6:02:58
    
  
  
  some user input enter a message
  


  
    
      6:03:03
    
  
  
  to encrypt cyppher text is the name of the
  


  
    
      6:03:09
    
  
  
  encrypted message that will be an empty string okay let's say a user types in a
  


  
    
      6:03:16
    
  
  
  message enter a message to encrypt I like pizza it's a very important
  


  
    
      6:03:23
    
  
  
  message every instance of a character within my plain text I will refer to the
  


  
    
      6:03:28
    
  
  
  key and replace that letter with a different one for example any z's I have two Z's in this program
  


  
    
      6:03:35
    
  
  
  will be replaced with let's see capital B every time we run this
  


  
    
      6:03:42
    
  
  
  program though it's going to shuffle the key so it's not going to be consistent what we're going to be doing is
  


  
    
      6:03:48
    
  
  
  iterating over every letter in our plain text for every letter in plain text
  


  
    
      6:03:55
    
  
  
  strings are iterable find the index of every letter
  


  
    
      6:04:00
    
  
  
  from our plain text within our list of characters let's assign a variable index
  


  
    
      6:04:07
    
  
  
  index equals take our list of chars use the
  


  
    
      6:04:12
    
  
  
  index method we are looking for that letter whatever letter we're currently on then return an
  


  
    
      6:04:20
    
  
  
  index then refer to our key get whatever letter is at that same index so we will
  


  
    
      6:04:26
    
  
  
  append that to our Cipher text it's currently an empty string Cypher text
  


  
    
      6:04:32
    
  
  
  plus equals our key at the given
  


  
    
      6:04:41
    
  
  
  index our Cipher text should be the encrypted message now let's print it out
  


  
    
      6:04:47
    
  
  
  print I'll use an FST string original
  


  
    
      6:04:52
    
  
  
  message let's print our plain text then our encrypted
  


  
    
      6:05:04
    
  
  
  message print our cyppher text string let's take a look so far enter a
  


  
    
      6:05:12
    
  
  
  message to encrypt I like pizza then here's the new encrypted
  


  
    
      6:05:19
    
  
  
  message every instance of a character within my plain text was replaced with another so for example any z's were
  


  
    
      6:05:26
    
  
  
  replaced with E I have two e within this encrypted message if I were to run this program again it would likely be
  


  
    
      6:05:32
    
  
  
  different I like pizza and here's my new encrypted message my
  


  
    
      6:05:39
    
  
  
  Z's were replaced with semicolons this time for every ladder in our plane text
  


  
    
      6:05:44
    
  
  
  get the index of each letter then refer to the key add the new character to our encrypted message it's probably best for
  


  
    
      6:05:51
    
  
  
  us not to display the characters and the key so let's hide those we will be reusing this key for
  


  
    
      6:05:59
    
  
  
  decryption now to decrypt the message let's copy this section of code paste
  


  
    
      6:06:06
    
  
  
  it we are now decrypting we will ask for some Cipher
  


  
    
      6:06:11
    
  
  
  text then reset our plain text for every letter in our Cipher text
  


  
    
      6:06:18
    
  
  
  refer to our key append a character to our plain
  


  
    
      6:06:27
    
  
  
  text within our list chars at a given index we will display our encrypted
  


  
    
      6:06:34
    
  
  
  message followed by the original message let's try it one last time enter
  


  
    
      6:06:40
    
  
  
  a message to encrypt I like
  


  
    
      6:06:46
    
  
  
  tacos here's my original message then the encrypted message if I were to
  


  
    
      6:06:52
    
  
  
  decrypt the encrypted message it should give me my original message I will type
  


  
    
      6:06:57
    
  
  
  in these characters exactly hit enter and here is my message
  


  
    
      6:07:03
    
  
  
  decrypted I like talking goes all right everybody so that is a substitution
  


  
    
      6:07:09
    
  
  
  Cipher encryption program for beginners when I was at University I did turn this program in for a final assignment for a
  


  
    
      6:07:16
    
  
  
  cyber security class and I did get an A on it so maybe it'll help you and well yeah that's an encryption program for
  


  
    
      6:07:22
    
  
  
  beginners in Python what's up everybody so in today's
  


  
    
  45.hangman game



  
    
      6:07:28
    
  
  
  video we're going to create a game of hangman using python I thought that this would be a good mini project for us
  


  
    
      6:07:34
    
  
  
  while learning to code it is important to create small projects as you go along here's one that we can make together
  


  
    
      6:07:40
    
  
  
  when creating a project I like to declare the various variables and data structures I'll need first followed by
  


  
    
      6:07:46
    
  
  
  the functions I'll need for this game we will need a set of words one of these
  


  
    
      6:07:52
    
  
  
  words is going to be chosen at random so let's create a few words I'll add some
  


  
    
      6:07:58
    
  
  
  fruit apple orange banana
  


  
    
      6:08:05
    
  
  
  coconut and one more pineapple using the random module let's
  


  
    
      6:08:12
    
  
  
  import that import random using the random module we will
  


  
    
      6:08:18
    
  
  
  pick one of these words at random we won't be able to see what it
  


  
    
      6:08:23
    
  
  
  is but we can guess what the word is one letter at a time once we reach six incorrect guesses we lose the game
  


  
    
      6:08:31
    
  
  
  before each guess we will display some asky art which trial name as hangman
  


  
    
      6:08:37
    
  
  
  art this will be a dictionary a dictionary where each key value pair contains a
  


  
    
      6:08:43
    
  
  
  tuple so this is a dictionary of we'll have a key which
  


  
    
      6:08:52
    
  
  
  will be a number and a tupple the key is going to represent the incorrect number
  


  
    
      6:08:57
    
  
  
  of guesses so we'll start at zero we will display a tupple which will contain
  


  
    
      6:09:02
    
  
  
  some aski art then let me just copy this for one incorrect guess we'll
  


  
    
      6:09:09
    
  
  
  display some different s art I'll just put each on a new line for
  


  
    
      6:09:19
    
  
  
  readability so we're going to go all the way up to six once we hit six incorrect guesses we
  


  
    
      6:09:25
    
  
  
  lose the game each key corresponds to the number
  


  
    
      6:09:33
    
  
  
  of incorrect guesses once we reach six we lose the game each Tuple that
  


  
    
      6:09:39
    
  
  
  corresponds to the incorrect number of guesses we will display a certain image
  


  
    
      6:09:44
    
  
  
  if you would like feel free to look in the description of this video if you would like to copy this to save you some time each topple will consist of three
  


  
    
      6:09:51
    
  
  
  rows three strings for no incorrect guesses where
  


  
    
      6:09:57
    
  
  
  incorrect guesses a zero we will display nothing we can't see our hangman person
  


  
    
      6:10:05
    
  
  
  for one incorrect guess we will display their head for two incorrect guesses we will
  


  
    
      6:10:11
    
  
  
  display their head and the main torso of their body which will represent with a vertical
  


  
    
      6:10:17
    
  
  
  bar let me copy this one for three incorrect guesses we will
  


  
    
      6:10:24
    
  
  
  display their left arm represented with the forward
  


  
    
      6:10:29
    
  
  
  slash with four incorrect guesses we will display their right arm however if you use a backs slash
  


  
    
      6:10:36
    
  
  
  that's an escape sequence within a string you have to use double backs slashes to literally print a
  


  
    
      6:10:43
    
  
  
  backslash so with five incorrect guesses we will display their left leg of the
  


  
    
      6:10:50
    
  
  
  person then once we reach six incorrect guesses we display the full person
  


  
    
      6:10:55
    
  
  
  that's when we lose the game when we see the entire person that's some asky Arch that we can use so let's test it just to
  


  
    
      6:11:03
    
  
  
  be sure that everything is working fine I will print my hangman
  


  
    
      6:11:10
    
  
  
  art at the Key of zero to represent no incorrect
  


  
    
      6:11:16
    
  
  
  guesses okay so when we display this person we're going to have to use some sort of loop for every let's say line in hangman
  


  
    
      6:11:26
    
  
  
  art at index of zero for zero incorrect guesses I will print each line
  


  
    
      6:11:37
    
  
  
  line with no incorrect guesses we don't display anything that's correct we can't see the person and
  


  
    
      6:11:44
    
  
  
  that's okay so with one incorrect guess display
  


  
    
      6:11:50
    
  
  
  the dictionary where the key is one that displays the person's
  


  
    
      6:11:57
    
  
  
  head two two would be the main torso of their body
  


  
    
      6:12:03
    
  
  
  three they're left arm four their right arm five their left
  


  
    
      6:12:12
    
  
  
  leg and six their right leg once we see the entire person we lose the
  


  
    
      6:12:18
    
  
  
  game so we can delete these two lines of code we no longer need them we know that our dictionary is
  


  
    
      6:12:25
    
  
  
  working I'm going to zoom out a little bit following our dictionary we'll declare the various functions we'll need
  


  
    
      6:12:31
    
  
  
  throughout this program we will Define a function to display man our hangman there will be
  


  
    
      6:12:39
    
  
  
  one parameter wrong guesses and then for the time being I'll
  


  
    
      6:12:45
    
  
  
  write pass we'll fill in this function later when we display our man we need to
  


  
    
      6:12:51
    
  
  
  know the number of incorrect guesses to display the Right
  


  
    
      6:12:57
    
  
  
  image we have a display man function and a
  


  
    
      6:13:02
    
  
  
  display hint function we will have a string of
  


  
    
      6:13:10
    
  
  
  hint then I'll write pass for now our hint is going to be a list a list of
  


  
    
      6:13:17
    
  
  
  underscore characters for each letter that we guess right will flip one of those underscores to be a letter if that
  


  
    
      6:13:24
    
  
  
  letter is correct I'll create a function of display
  


  
    
      6:13:30
    
  
  
  answer within this function we will display the correct answer either when we lose the game or win the game and I
  


  
    
      6:13:37
    
  
  
  will write pass we will create a function of main to contain the main
  


  
    
      6:13:43
    
  
  
  body of code of our program again I'll write pass for
  


  
    
      6:13:48
    
  
  
  now I'll add the following if statement if Dunder name is equal to a string of
  


  
    
      6:13:56
    
  
  
  Dunder main if we are running this file directly I would like to call the main
  


  
    
      6:14:01
    
  
  
  function to start the program all right let me zoom out this will be the main
  


  
    
      6:14:07
    
  
  
  skeletal structure of our program import the random module we have our set of
  


  
    
      6:14:12
    
  
  
  words we'll be importing more from a separate file near the end of this video we have a dictionary where the key is a
  


  
    
      6:14:19
    
  
  
  number to represent the number of incorrect guesses and a tuple to display some asky art we have four functions
  


  
    
      6:14:26
    
  
  
  display our man display the hint display the answer and the main function to contain the main body of code all right
  


  
    
      6:14:33
    
  
  
  let's work within our main function within our main function we will create a variable of answer what is
  


  
    
      6:14:41
    
  
  
  the correct answer that we have to guess I will access the random module call the
  


  
    
      6:14:46
    
  
  
  method of choice then pass in our set of words one of these words will be chosen
  


  
    
      6:14:53
    
  
  
  at random Let's test that I will print our
  


  
    
      6:14:58
    
  
  
  answer just temporarily we should get a random word
  


  
    
      6:15:03
    
  
  
  Apple Apple pineapple Apple I guess it really likes apple for some reason there we go we
  


  
    
      6:15:10
    
  
  
  have orange we are choosing a word at random we no longer need this print
  


  
    
      6:15:16
    
  
  
  statement looks like everything is working fine now we'll display our
  


  
    
      6:15:21
    
  
  
  hint our hint is going to be a list of underscore characters I need the number
  


  
    
      6:15:27
    
  
  
  of underscore characters to equal the number of characters in one of these
  


  
    
      6:15:32
    
  
  
  words that is chosen at random so I could multiply my list by the
  


  
    
      6:15:40
    
  
  
  length using the length function of my answer so let's print our
  


  
    
      6:15:47
    
  
  
  hint to see what we're working with with my selected word we have how
  


  
    
      6:15:54
    
  
  
  many underscores 1 2 3 4 5 6 7 okay we
  


  
    
      6:15:59
    
  
  
  have a different word 1 2 3 4 5 that is probably Apple it has five
  


  
    
      6:16:07
    
  
  
  characters all right so that's our hint it's a list of underscore characters
  


  
    
      6:16:13
    
  
  
  when we guess a letter if it's correct we'll fill in one of the underscores with that correct
  


  
    
      6:16:19
    
  
  
  character we need to keep track of the number of wrong guesses we'll create a variable of wrong guesses set that equal
  


  
    
      6:16:27
    
  
  
  to be zero when we start the game we're going to keep track of all of the incorrect guesses that we've made we
  


  
    
      6:16:33
    
  
  
  will create a set of guest letters for an empty set we'll call the
  


  
    
      6:16:40
    
  
  
  set function normally in Python you can't create an empty set with just a set of parentheses we have to use the
  


  
    
      6:16:46
    
  
  
  set function then I will create a Boolean variable of is
  


  
    
      6:16:51
    
  
  
  running set that to be true while our game is running continue playing once we
  


  
    
      6:16:57
    
  
  
  lose or win the game we will switch this to be false to exit the game we will
  


  
    
      6:17:03
    
  
  
  keep this as true when we initially run this program after we declare the variables we'll need within the main
  


  
    
      6:17:10
    
  
  
  function we'll create a loop a while loop while is running we don't need to
  


  
    
      6:17:16
    
  
  
  say while is running is equal to true we don't necessarily need to create that comparison we can just say while is
  


  
    
      6:17:23
    
  
  
  running while this is true continue doing some code so what would we like to
  


  
    
      6:17:29
    
  
  
  do let's call the function of display man but we have to pass in the wrong
  


  
    
      6:17:35
    
  
  
  number of guesses call our function of display man
  


  
    
      6:17:41
    
  
  
  pass in our variable of wrong guesses when we begin the game we would like to
  


  
    
      6:17:46
    
  
  
  display one of these images then we will display our hint then we'll call the function to display
  


  
    
      6:17:53
    
  
  
  our hint pass in our hint that was the list
  


  
    
      6:17:59
    
  
  
  of underscore characters to represent the answer we have to guess we will create a variable of guess and accept
  


  
    
      6:18:06
    
  
  
  some user input will'll prompt the user to enter a
  


  
    
      6:18:12
    
  
  
  letter just in case a user types in a character that's uppercase let's add the lower method to
  


  
    
      6:18:20
    
  
  
  make it lowercase so let's fill in our display man function there's not a lot to write
  


  
    
      6:18:26
    
  
  
  here when we call this function we need to display one of these images based on the wrong number of
  


  
    
      6:18:33
    
  
  
  guesses one of these Keys within the display man function
  


  
    
      6:18:40
    
  
  
  we'll create a for Loop for every line in my hangman art this
  


  
    
      6:18:48
    
  
  
  dictionary at the Key of wrong guesses this will be a number 0 through
  


  
    
      6:18:55
    
  
  
  six depending on what this number is I will print each
  


  
    
      6:19:01
    
  
  
  line print each line of that Tuple let's see what we're working with
  


  
    
      6:19:08
    
  
  
  we'll do a test run so we are displaying no person we
  


  
    
      6:19:13
    
  
  
  can't see them for testing purposes I am going to change wrong guesses to be one
  


  
    
      6:19:19
    
  
  
  we're displaying their head two displays their body
  


  
    
      6:19:25
    
  
  
  three displays their left arm four is their right
  


  
    
      6:19:31
    
  
  
  arm five their left leg leg and
  


  
    
      6:19:37
    
  
  
  six is their full body that's when we lose now you don't necessarily need to
  


  
    
      6:19:43
    
  
  
  do this but I'll add some text decoration before and after I'll add just a bunch of asterisks
  


  
    
      6:19:50
    
  
  
  before and after I think that looks better but you
  


  
    
      6:19:57
    
  
  
  do you let's be sure to set wrong gesses back to zero after we display our hangman we
  


  
    
      6:20:03
    
  
  
  have to display the hint what's the clue we're trying to solve so we will call our display hint function
  


  
    
      6:20:10
    
  
  
  and pass in our list of hint So within the display hint function
  


  
    
      6:20:16
    
  
  
  let me zoom out I will print the following between each character within
  


  
    
      6:20:21
    
  
  
  our hint each underscore we will display a space
  


  
    
      6:20:26
    
  
  
  character strings have a built in join method we'll call that then pass in our
  


  
    
      6:20:32
    
  
  
  hint for each character within our hint join it by an empty
  


  
    
      6:20:38
    
  
  
  space so now when we do a test run we are displaying an underscore to
  


  
    
      6:20:44
    
  
  
  represent each character each is separated with the space while we're here we'll fill in the
  


  
    
      6:20:52
    
  
  
  display answer function we just have to copy this line of code from display hint replace hint with answer and that's all
  


  
    
      6:20:59
    
  
  
  we need for the display answer function so let me test that real quick after playing our hint temporarily I will
  


  
    
      6:21:07
    
  
  
  display our answer just to be sure that it's working yep there's our hint and there's
  


  
    
      6:21:15
    
  
  
  our answer that we have to guess okay let's delete this line of code we don't want to display the
  


  
    
      6:21:21
    
  
  
  answer I was just testing it so the user is going to be able to type in a letter to guess such as a for example once we
  


  
    
      6:21:30
    
  
  
  guess a letter if that letter is found within the hint if it's one of these characters we need to switch that
  


  
    
      6:21:37
    
  
  
  underscore to be one of those characters so we'll write the following if statement if our guess is in our
  


  
    
      6:21:48
    
  
  
  answer in is a membership operator if this letter is found within our string
  


  
    
      6:21:53
    
  
  
  of answer we're going to create a loop we will create a loop that will iterate once for each character within the
  


  
    
      6:22:00
    
  
  
  answer but we don't know the length of the answer because python we'll choose it at random so let's say for every
  


  
    
      6:22:08
    
  
  
  index we can shorten this to I for I in
  


  
    
      6:22:14
    
  
  
  range the length of my
  


  
    
      6:22:19
    
  
  
  answer let's say the word is Apple the length of the word Apple has five characters this would return five for I
  


  
    
      6:22:28
    
  
  
  in range five then we will iterate five times we'll iterate this Loop once for
  


  
    
      6:22:33
    
  
  
  the number of characters within my answer we'll check during each iteration
  


  
    
      6:22:39
    
  
  
  if our answer at index of I during the first iteration that will be zero then
  


  
    
      6:22:46
    
  
  
  the second iteration it will be one then two so on and so forth strings are
  


  
    
      6:22:52
    
  
  
  iterable if our answer at index of I is equal to our guess if there's a match if
  


  
    
      6:22:59
    
  
  
  we guess the correct letter then we're going to take our hint
  


  
    
      6:23:06
    
  
  
  at that given index of I and set that equal to be our guess looks like this if
  


  
    
      6:23:13
    
  
  
  statement is outside of the while loop I'm just going to invent it by one somewhere within
  


  
    
      6:23:18
    
  
  
  it okay let's do a test run I'm going to guess the letter
  


  
    
      6:23:25
    
  
  
  A yes we have one a let's do something that's probably not in
  


  
    
      6:23:31
    
  
  
  here Q okay okay so there were no matches we don't end up doing
  


  
    
      6:23:37
    
  
  
  anything so what is this word probably this should be the word
  


  
    
      6:23:43
    
  
  
  orange so let's guess o r
  


  
    
      6:23:50
    
  
  
  n e g all right we know that it works
  


  
    
      6:23:56
    
  
  
  what if somebody types in some input that's not valid before checking if that guess is correct we'll do some input
  


  
    
      6:24:03
    
  
  
  validation what if the user types in a whole word like
  


  
    
      6:24:08
    
  
  
  pizza we want the user to only guess a single character not many
  


  
    
      6:24:13
    
  
  
  characters We'll add the following line if the length of Our Guest that we type
  


  
    
      6:24:21
    
  
  
  in does not equal one then I will print the following
  


  
    
      6:24:27
    
  
  
  message let's say invalid
  


  
    
      6:24:32
    
  
  
  input then we will use the keyword of continue to skip this
  


  
    
      6:24:38
    
  
  
  Loop continue okay enter a letter I will type
  


  
    
      6:24:44
    
  
  
  the word Pizza we get this message of invalid input we skip that Loop's current
  


  
    
      6:24:50
    
  
  
  iteration I will guess a there are two A's I will type banana and again we get
  


  
    
      6:24:57
    
  
  
  invalid input we have to guess one letter at a time what if somebody types in a number like one we would like to
  


  
    
      6:25:05
    
  
  
  prevent that so within this if statement I would
  


  
    
      6:25:12
    
  
  
  like to execute this code if our guess is not an alphabetical character I can
  


  
    
      6:25:18
    
  
  
  add the following or not take our guess dot use
  


  
    
      6:25:25
    
  
  
  the is Alpha method if our guess is an alphabetical
  


  
    
      6:25:31
    
  
  
  character this returns true if it's not an alphabetical character it's false so
  


  
    
      6:25:37
    
  
  
  we are checking if this is not an alphabetical character we execute this
  


  
    
      6:25:43
    
  
  
  code let's try this again I will type in one invalid
  


  
    
      6:25:49
    
  
  
  input 42069 invalid input let's say we guess the letter A
  


  
    
      6:25:57
    
  
  
  what if we type in a letter we have already guessed I will guess a again if they already guessed a letter I
  


  
    
      6:26:04
    
  
  
  don't want that to count we'll skip the current Loop iteration I'll add another if
  


  
    
      6:26:11
    
  
  
  statement if our guess is
  


  
    
      6:26:16
    
  
  
  in our set of guest letters then I will print the
  


  
    
      6:26:24
    
  
  
  following I'll use an F string our guess
  


  
    
      6:26:30
    
  
  
  is already guessed
  


  
    
      6:26:36
    
  
  
  oh one thing I'm forgetting once we check that our guest is not within our guest characters we'll take our guest
  


  
    
      6:26:43
    
  
  
  letters this is a set add the guess we're keeping track of the letters
  


  
    
      6:26:51
    
  
  
  we have already guessed so I will type let's guess a we
  


  
    
      6:26:57
    
  
  
  have one a if I were to guess a again we get that message of a is already guessed
  


  
    
      6:27:04
    
  
  
  and then be sure to add continue to skip the current Loop
  


  
    
      6:27:10
    
  
  
  iteration all right now going down to this if statement if guess is in our
  


  
    
      6:27:15
    
  
  
  answer if we guess a character that's incorrect we will take our variable of
  


  
    
      6:27:22
    
  
  
  wrong guesses incremented by one wrong guesses plus equals 1 let's do a test
  


  
    
      6:27:30
    
  
  
  run I will guess a there is an a what about Q There is no
  


  
    
      6:27:38
    
  
  
  Q we display our dictionary where the key is one we display that asky
  


  
    
      6:27:43
    
  
  
  art R is there an R yes there is an R this is probably
  


  
    
      6:27:52
    
  
  
  orange I would like to be sure we display the entire person I will guess some wrong
  


  
    
      6:28:01
    
  
  
  characters we know that that works now we need a win condition if we guess all of the correct characters and
  


  
    
      6:28:08
    
  
  
  display the entire word we'll work on that next if there are no underscore
  


  
    
      6:28:15
    
  
  
  characters not in our hint this will be true if there are no
  


  
    
      6:28:22
    
  
  
  underscore characters in our hint if underscores not in
  


  
    
      6:28:28
    
  
  
  hint we'll call our function of display man pass in the wrong number of guesses
  


  
    
      6:28:36
    
  
  
  call the function of display answer pass in our
  


  
    
      6:28:44
    
  
  
  answer we will print the text of you win then set our
  


  
    
      6:28:50
    
  
  
  Boolean variable of is running equal to be
  


  
    
      6:28:56
    
  
  
  false let's win this time I already know that this word is probably pineapple
  


  
    
      6:29:04
    
  
  
  let's guess something
  


  
    
      6:29:11
    
  
  
  incorrect there we go we have two wrong guesses but we have correctly guessed
  


  
    
      6:29:16
    
  
  
  the word pineapple you win and we exit the program what if we lose I'll add the
  


  
    
      6:29:23
    
  
  
  following if statement else if our variable of wrong
  


  
    
      6:29:29
    
  
  
  guesses is greater than or equal so the length of our hangman art is a total of
  


  
    
      6:29:37
    
  
  
  seven there's seven total keys but once we hit six we lose the
  


  
    
      6:29:47
    
  
  
  game with this LF statement if the length of our hangman
  


  
    
      6:29:54
    
  
  
  art the length of our hangman art is going to be seven so we are going to subtract one for six for a total of
  


  
    
      6:30:02
    
  
  
  six once our wrong guesses is greater than or equal to 6 that means we lose
  


  
    
      6:30:08
    
  
  
  the game we will call the display man function pass in the wrong number of
  


  
    
      6:30:14
    
  
  
  guesses display what the correct answer should have been display answer pass in
  


  
    
      6:30:20
    
  
  
  our answer we will print you
  


  
    
      6:30:27
    
  
  
  lose then take our Boolean variable of is running set that to be false
  


  
    
      6:30:36
    
  
  
  I'll guess incorrect
  


  
    
      6:30:43
    
  
  
  letters there the word was coconut we have six incorrect guesses we display the entire hangman the correct answer
  


  
    
      6:30:50
    
  
  
  was coconut you lose if you would like to import a larger variety of words we could create
  


  
    
      6:30:57
    
  
  
  a separate python file for that so within our project folder we will create a new python file I will name this
  


  
    
      6:31:04
    
  
  
  python file words list this will be a python
  


  
    
      6:31:11
    
  
  
  file let's take our set of words cut it I'll add a note that these are words
  


  
    
      6:31:20
    
  
  
  for Hangman game Words will be a set I recommend
  


  
    
      6:31:27
    
  
  
  looking online for a very large set of words that we can use then just copy and paste them within here while while
  


  
    
      6:31:34
    
  
  
  browsing online I found an extensive list of animals that I can use so here are all the possible words
  


  
    
      6:31:40
    
  
  
  for my game so from my main python file I have to import this module of words
  


  
    
      6:31:50
    
  
  
  list from the module of words list import
  


  
    
      6:31:57
    
  
  
  words and now I have a greater variety of words I can use let's run this one last time this word has four letters
  


  
    
      6:32:05
    
  
  
  I'll guess the vowels there's an a no E
  


  
    
      6:32:10
    
  
  
  I O there is an O is it
  


  
    
      6:32:16
    
  
  
  Goat nope t r
  


  
    
      6:32:23
    
  
  
  bore all right the word was bore you win all right everybody so that is a game of
  


  
    
      6:32:29
    
  
  
  hangman that we can create using python hey everybody so so we have finally made it to Python objectoriented
  


  
    
  46.python object oriented programming



  
    
      6:32:37
    
  
  
  Programming this is a very important topic in Python an object is a bundle of
  


  
    
      6:32:43
    
  
  
  related attributes and methods attributes are similar to variables to describe what the object has so look
  


  
    
      6:32:50
    
  
  
  around you right now you are surrounded by different Real World objects next to me I have a phone a cup and a book each
  


  
    
      6:32:58
    
  
  
  of these objects can have different attributes to represent it for example an attribute of the phone next to me
  


  
    
      6:33:05
    
  
  
  could be version number I could set that to be 13 is on could be another attribute is the phone powered on or not
  


  
    
      6:33:12
    
  
  
  that could be true or false or even a price I have a cup next to me what
  


  
    
      6:33:17
    
  
  
  liquid is within the cup in this case coffee what's the temperature of the cup is the cup empty is empty or even a book
  


  
    
      6:33:26
    
  
  
  What's the title of the book that could be a string how many pages does the book have Pages could be another attribute
  


  
    
      6:33:33
    
  
  
  now objects also have the capability to do things they have methods which are
  


  
    
      6:33:39
    
  
  
  functions that belong to an object people mix up functions and methods all
  


  
    
      6:33:44
    
  
  
  the time they're technically different even when teaching I tend to make that mistake calling a method a function and
  


  
    
      6:33:49
    
  
  
  a function of method usually people know what you're referring to though a method is a function that belongs within an
  


  
    
      6:33:56
    
  
  
  object what are some actions these objects can perform with a phone you can
  


  
    
      6:34:01
    
  
  
  make a call or receive a call call turn the phone on or turn the phone off those
  


  
    
      6:34:07
    
  
  
  could all be functions with a cup you could fill the cup drink from the cup or empty the cup with a book you can open
  


  
    
      6:34:14
    
  
  
  the book read the book and close the book an object is a bundle of related
  


  
    
      6:34:21
    
  
  
  attributes and methods they can represent real world items to create
  


  
    
      6:34:26
    
  
  
  many objects we'll need to utilize a Class A Class is a type of blueprint
  


  
    
      6:34:32
    
  
  
  used to design design the structure and layout of an object we need to design
  


  
    
      6:34:37
    
  
  
  what our objects have their attributes and what they can do their methods we
  


  
    
      6:34:43
    
  
  
  will create a class of car we will create some car objects class
  


  
    
      6:34:51
    
  
  
  car to construct a car object we need a special type of method called a
  


  
    
      6:34:56
    
  
  
  Constructor it works similarly to a function we will Define a function of
  


  
    
      6:35:03
    
  
  
  double underscore init meaning initialize double underscore again and
  


  
    
      6:35:09
    
  
  
  then follow this with a set of parentheses this is our Constructor method we need this method in order to
  


  
    
      6:35:15
    
  
  
  construct objects it's a Dunder method Dunder meaning double underscore that's
  


  
    
      6:35:20
    
  
  
  a future topic I don't want you to be overloaded with information right now all you need to know is that we need
  


  
    
      6:35:26
    
  
  
  this method in order to create objects this method behaves similar to a function we need to set up the
  


  
    
      6:35:33
    
  
  
  parameters self is already provided to us self means this object we're creating right
  


  
    
      6:35:39
    
  
  
  now this car so what are some attributes that a car should have a
  


  
    
      6:35:45
    
  
  
  model that could be a string like a BMW a year that could be a
  


  
    
      6:35:52
    
  
  
  number a color let's add a Boolean of four sale
  


  
    
      6:35:59
    
  
  
  is the car for sale or not that's true or false to assign these attributes
  


  
    
      6:36:04
    
  
  
  we're going to access self self do the name of the attribute self. model equals
  


  
    
      6:36:13
    
  
  
  the model we receive these are parameters when we receive the name of a model we will
  


  
    
      6:36:20
    
  
  
  assign it to this object let's do this with year self. year equals year self.
  


  
    
      6:36:29
    
  
  
  color equals color self. for for sale
  


  
    
      6:36:35
    
  
  
  equals for sale this is an example of a few attributes that a car might have a
  


  
    
      6:36:41
    
  
  
  model year color and if it's for sale or not represented by a Boolean now to
  


  
    
      6:36:47
    
  
  
  construct a car object we need a unique name for this car let's just say car one
  


  
    
      6:36:53
    
  
  
  car 1 equals take the name of the class add a set of parentheses to invoke The
  


  
    
      6:37:00
    
  
  
  Constructor we're going to do this almost exact L like a function we have parameter set up we need to send a
  


  
    
      6:37:07
    
  
  
  matching number of arguments self is provided to us behind the scenes automatically we need a model year color
  


  
    
      6:37:15
    
  
  
  and if it's for sale or not so pick a car if you're choosing I'll pick my favorite
  


  
    
      6:37:21
    
  
  
  car the model will be a Mustang for the year I'll go with the recent year of
  


  
    
      6:37:27
    
  
  
  2024 a color I'll pick red is the car for sale I like this car so no I will
  


  
    
      6:37:35
    
  
  
  set that to be false make sure false is capitalized let's see what happens if I
  


  
    
      6:37:41
    
  
  
  attempt to print our car object of car
  


  
    
      6:37:46
    
  
  
  one what we're given is the memory address of this car object where it's
  


  
    
      6:37:52
    
  
  
  located but I would like one of the attributes located at this memory
  


  
    
      6:37:57
    
  
  
  address instead of printing the object itself we're going to access one of the attributes found within this car
  


  
    
      6:38:04
    
  
  
  we will follow the name of the car with a DOT this dot it's known as the
  


  
    
      6:38:09
    
  
  
  attribute access operator I would like the model of car
  


  
    
      6:38:15
    
  
  
  one that would give me Mustang let's access the year take the
  


  
    
      6:38:21
    
  
  
  name of the car car one dot the year 2024 followed by the color car1
  


  
    
      6:38:32
    
  
  
  docolor red car one is it for sale we'll print
  


  
    
      6:38:40
    
  
  
  that that is false now let's create a second car
  


  
    
      6:38:45
    
  
  
  we're going to reuse this class to create a second car we will create Car 2
  


  
    
      6:38:51
    
  
  
  equals car we'll pass in some different arguments a Corvette the year will be
  


  
    
      6:38:58
    
  
  
  2025 the color will be blue is this car for sale let's say that is
  


  
    
      6:39:04
    
  
  
  true instead of accessing car 1's attributes let's access car 2's
  


  
    
      6:39:11
    
  
  
  attributes that would give us a Corvette the year is 2025 the color is blue for
  


  
    
      6:39:18
    
  
  
  sale is set to true or even a third car car 3 equals a
  


  
    
      6:39:24
    
  
  
  new car we will pass in a string of charger the year
  


  
    
      6:39:32
    
  
  
  2026 the color will be yellow is this car for sale let's say that is true as
  


  
    
      6:39:38
    
  
  
  well then I will print car 3's
  


  
    
      6:39:45
    
  
  
  attributes the model is charger the year is 2026 the color is yellow for sale is
  


  
    
      6:39:51
    
  
  
  set to True with classes they can take up a lot of space for better
  


  
    
      6:39:56
    
  
  
  organization you can place them within a new python file so let's cut our class
  


  
    
      6:40:04
    
  
  
  and we will create a new python file within our project folder file new
  


  
    
      6:40:10
    
  
  
  python file the name of this python file is going to be all lowercase
  


  
    
      6:40:17
    
  
  
  car then we will paste the class that we cut originally class car which has a capital
  


  
    
      6:40:26
    
  
  
  c so from our main python file we're going to import our car file our car
  


  
    
      6:40:32
    
  
  
  module from the name of the module car import
  


  
    
      6:40:37
    
  
  
  the name of the class car then when I run this program nothing should change
  


  
    
      6:40:43
    
  
  
  we should still have access to all of our car objects you could either keep your
  


  
    
      6:40:49
    
  
  
  classes within your main python file or import them if you would like to organize things let's talk about methods
  


  
    
      6:40:56
    
  
  
  methods are actions that our objects can perform within our class we will Define
  


  
    
      6:41:01
    
  
  
  a method of Drive self is going to be provided to us when we invoke the drive
  


  
    
      6:41:09
    
  
  
  function let's print you drive the car what other
  


  
    
      6:41:15
    
  
  
  things can cars do let's stop we will
  


  
    
      6:41:22
    
  
  
  print you stop the
  


  
    
      6:41:28
    
  
  
  car let's take car1 access the drive method
  


  
    
      6:41:35
    
  
  
  you drive the car car 2 also has a drive method you drive the car same thing with
  


  
    
      6:41:41
    
  
  
  car 3 you drive the car let's access the stop
  


  
    
      6:41:47
    
  
  
  method car one. stop car 2.
  


  
    
      6:41:54
    
  
  
  stop and car 3. stop these methods are identical for
  


  
    
      6:42:00
    
  
  
  each car object instead of printing the word car let's insert the model of the
  


  
    
      6:42:06
    
  
  
  car I will convert these print statements to F strings instead of the word car let's
  


  
    
      6:42:13
    
  
  
  add a placeholder let's add self. model self is referring to the object
  


  
    
      6:42:21
    
  
  
  we're currently working with use the attribute axis operator followed by the
  


  
    
      6:42:26
    
  
  
  name of the attribute let's also do this with the stop method self do
  


  
    
      6:42:36
    
  
  
  model let's take car one use the drive method you drive the Mustang car
  


  
    
      6:42:43
    
  
  
  one. stop you drive the Mustang you stop the
  


  
    
      6:42:49
    
  
  
  Mustang let's do this with Car 2 you drive the Corvette you stop the
  


  
    
      6:42:55
    
  
  
  Corvette car three you drive the charger you stop the
  


  
    
      6:43:01
    
  
  
  charger now now within our F strings let's also insert let's insert the
  


  
    
      6:43:08
    
  
  
  color I'll add a placeholder self. color
  


  
    
      6:43:13
    
  
  
  do this with stop as well self.
  


  
    
      6:43:20
    
  
  
  color you drive the yellow charger you stop the yellow charger car one you
  


  
    
      6:43:27
    
  
  
  drive the red Mustang you stop the red Mustang card to you drive the blue
  


  
    
      6:43:32
    
  
  
  Corvette you stop the blue Corvette let's add one last method let's create a method to describe
  


  
    
      6:43:40
    
  
  
  our car we'll print the details of the car let's print I'll use an F
  


  
    
      6:43:47
    
  
  
  string add three placeholders let's print
  


  
    
      6:43:53
    
  
  
  self.y year followed by self. color then self. model
  


  
    
      6:44:04
    
  
  
  we'll take car 1 use the describe method that we created describe car 1 car 1 is a 2024
  


  
    
      6:44:14
    
  
  
  red Mustang describe Car 2 Car 2 is a 2025 blue Corvette car 3 is a 2026
  


  
    
      6:44:24
    
  
  
  yellow charger all right everybody so those are objects in Python an object is
  


  
    
      6:44:30
    
  
  
  a bundle of related attributes attributes are variables that an object
  


  
    
      6:44:35
    
  
  
  has and methods methods are functions that belong to an object they Define
  


  
    
      6:44:42
    
  
  
  what this object can do and well everybody that is a summary of object-oriented programming using python
  


  
    
  47.class variables



  
    
      6:44:50
    
  
  
  hey everybody today I got to talk about class variables in Python class variables are shared among all instances
  


  
    
      6:44:58
    
  
  
  meaning objects created from a class instance variables are defined in inside
  


  
    
      6:45:03
    
  
  
  of the Constructor class variables are defined outside of the Constructor with
  


  
    
      6:45:08
    
  
  
  class variables they allow you to share data among all objects created from the
  


  
    
      6:45:13
    
  
  
  class with instance variables each object has their own version with a class variable all those objects share
  


  
    
      6:45:21
    
  
  
  one variable here's an example we will create a class of student we also need a
  


  
    
      6:45:29
    
  
  
  Constructor when we create a student object this construct structor is automatically going to be called but we
  


  
    
      6:45:35
    
  
  
  need to pass in some arguments we are provided with self self refers to the
  


  
    
      6:45:40
    
  
  
  object we're currently working with we will set up a name parameter and an age
  


  
    
      6:45:46
    
  
  
  parameter we will assign self the object we're currently working with set the
  


  
    
      6:45:52
    
  
  
  name attribute to equal the data for the name that we receive from this parameter
  


  
    
      6:45:58
    
  
  
  and self. AG equals age let's let's construct two student objects we will
  


  
    
      6:46:06
    
  
  
  have student one equals then call the Constructor for
  


  
    
      6:46:11
    
  
  
  student so type the name of the class followed by a set of parentheses to invoke it this will automatically call
  


  
    
      6:46:17
    
  
  
  The Constructor but we have to pass in data for the name and the age for the name let's pass in SpongeBob because
  


  
    
      6:46:25
    
  
  
  basically everybody in the world knows who SpongeBob is I don't know how old SpongeBob is we'll say he's 30 we'll
  


  
    
      6:46:32
    
  
  
  create another student object which we will refer to as student 2 we will call
  


  
    
      6:46:37
    
  
  
  the Constructor of our student class pass and data for the name and age
  


  
    
      6:46:43
    
  
  
  student two will be Patrick Patrick will be 35 okay let's make sure this works let's
  


  
    
      6:46:51
    
  
  
  print student 1's name followed by student 1's
  


  
    
      6:47:00
    
  
  
  age and we should get SpongeBob and his age is 30 let's print student 2's name
  


  
    
      6:47:07
    
  
  
  and student 2's age Patrick Patrick is 35 now we'll create a class variable
  


  
    
      6:47:14
    
  
  
  class variables are defined outside the Constructor and they are shared among all objects created from that class each
  


  
    
      6:47:22
    
  
  
  object has their own name and age property these are instance variables but class variables are defined outside
  


  
    
      6:47:29
    
  
  
  the Constructor each object will share this one variable so if we're working
  


  
    
      6:47:34
    
  
  
  with students let's say there is a class variable of class year what is the
  


  
    
      6:47:44
    
  
  
  graduating year of this class 2024 now let's print student 1's
  


  
    
      6:47:52
    
  
  
  graduating year print student one.
  


  
    
      6:47:59
    
  
  
  class year
  


  
    
      6:48:05
    
  
  
  okay so SpongeBob has a class year of 2024 that's when he's graduating let's
  


  
    
      6:48:11
    
  
  
  check student two Patrick is ages 35 his graduating
  


  
    
      6:48:19
    
  
  
  class year is 2024 now with class variables you can
  


  
    
      6:48:25
    
  
  
  access them through any one object such as student one or student 2 it's good practice to access a class variable by
  


  
    
      6:48:32
    
  
  
  the name of the class rather than any object created from the class since we're accessing class year we'll access
  


  
    
      6:48:40
    
  
  
  this class variable by the name of the class of student make sure the S is
  


  
    
      6:48:47
    
  
  
  capital this helps with Clarity and readability if I was looking at this print statement I can tell that class
  


  
    
      6:48:54
    
  
  
  year is a class variable because we're accessing it directly from the class and not any instance from this class without
  


  
    
      6:49:02
    
  
  
  looking at this class I can't tell if class year is an instance variable or a
  


  
    
      6:49:08
    
  
  
  class variable but if I access it via the class name it's more explicit so
  


  
    
      6:49:13
    
  
  
  it's good practice to access a class variable by the class name itself and not any one instance of this
  


  
    
      6:49:20
    
  
  
  class let's create another class variable we'll create a class variable
  


  
    
      6:49:26
    
  
  
  to keep track of how many students we have created this class variable will be num students meaning number of students
  


  
    
      6:49:35
    
  
  
  equals z So within our Constructor we can write any code that we want this
  


  
    
      6:49:40
    
  
  
  code will always be executed when we instantiate an object I would like to
  


  
    
      6:49:45
    
  
  
  take our number of students and increment it by one each time we construct a new student object so
  


  
    
      6:49:52
    
  
  
  instead of using self self refers to the object we're currently working with if we're constructing student one just
  


  
    
      6:49:59
    
  
  
  imagine we're replacing self with student one or student two if we were
  


  
    
      6:50:04
    
  
  
  constructing student two if we're going to be modifying a class variable in
  


  
    
      6:50:09
    
  
  
  place of self we'll use the name of the class student access our class of
  


  
    
      6:50:15
    
  
  
  student get the class variable of number of students then I will increment it by
  


  
    
      6:50:21
    
  
  
  one plus equals 1 we are constructing two student
  


  
    
      6:50:28
    
  
  
  objects I will print access our class of
  


  
    
      6:50:33
    
  
  
  student get the number of students and print it we're constructing two student
  


  
    
      6:50:39
    
  
  
  objects if I print the number of students that we have it should be two
  


  
    
      6:50:44
    
  
  
  then just to be sure that this is working let's construct a third student object student 3 equals student this
  


  
    
      6:50:53
    
  
  
  student will have a name of Squidward Squidward's age will be
  


  
    
      6:50:59
    
  
  
  55 now we have three students and for good measure let's construct one
  


  
    
      6:51:06
    
  
  
  more student 4 equals we will create a new student with a name of Sandy sy's
  


  
    
      6:51:15
    
  
  
  age will be 27 the number of students is now four
  


  
    
      6:51:20
    
  
  
  just as an exercise using an FST string let's print the student classes class year as well
  


  
    
      6:51:28
    
  
  
  as the number of students I will print use an fing
  


  
    
      6:51:33
    
  
  
  my graduating class of let's add a
  


  
    
      6:51:40
    
  
  
  placeholder access the class of student then access the class
  


  
    
      6:51:47
    
  
  
  Year my graduating class of 2024 has then we need the number of
  


  
    
      6:51:55
    
  
  
  students We'll add a placeholder access the class of student access the number of students
  


  
    
      6:52:03
    
  
  
  has blank students let's see if this works my
  


  
    
      6:52:10
    
  
  
  graduating class of 2024 has four students now if I were to change 2024 to
  


  
    
      6:52:17
    
  
  
  2025 my graduating class of 2025 has four
  


  
    
      6:52:22
    
  
  
  students let's print the name of each student these are instance variables
  


  
    
      6:52:28
    
  
  
  student one. name then we need Student two three and
  


  
    
      6:52:38
    
  
  
  four my graduating class of 2025 has four students SpongeBob Patrick
  


  
    
      6:52:44
    
  
  
  Squidward Sandy all right everybody so those are class variables class
  


  
    
      6:52:49
    
  
  
  variables are shared among all instances of a class they are defined outside of
  


  
    
      6:52:55
    
  
  
  the Constructor the benefit is that they allow you to share data among all objects created from that class and
  


  
    
      6:53:02
    
  
  
  while everybody those are class variables in Python what is going on everybody so
  


  
    
  48.inheritance 👨‍👦‍



  
    
      6:53:08
    
  
  
  today I got to talk about inheritance in Python inheritance allows a class to
  


  
    
      6:53:13
    
  
  
  inherit the attributes and methods from another class much like how a child in real life can inherit traits from A
  


  
    
      6:53:20
    
  
  
  parent by having a class inherit attributes and methods from another class this helps with code reusability
  


  
    
      6:53:27
    
  
  
  and extensibility in this example we're going to create an animal class the dog cat and mouse class will inherit
  


  
    
      6:53:34
    
  
  
  attributes and methods from the animal class we will create a class of
  


  
    
      6:53:40
    
  
  
  animal then I will Define The Constructor when we construct an animal
  


  
    
      6:53:47
    
  
  
  object let's pass in a name it's not required but it might be good for this
  


  
    
      6:53:53
    
  
  
  example we will assign the attribute of name equal to the name we
  


  
    
      6:53:58
    
  
  
  receive let's also add an attribute of is alive whenever we create an animal we
  


  
    
      6:54:05
    
  
  
  will set there is alive attribute to be true and that is a capital
  


  
    
      6:54:10
    
  
  
  T all animals can eat Define eat we will
  


  
    
      6:54:16
    
  
  
  print using an F string add a placeholder self. name the name of this
  


  
    
      6:54:23
    
  
  
  animal is eating all animals should be able to sleep Define
  


  
    
      6:54:31
    
  
  
  sleep print I'll use an FST string insert self. name is sleeping and that
  


  
    
      6:54:41
    
  
  
  is all we need for the animal class let's define class dog for a child class
  


  
    
      6:54:48
    
  
  
  to inherit the attributes and methods from another class after the class name that's going to inherit we need to add
  


  
    
      6:54:55
    
  
  
  an inheritance list with the set of parentheses then list the name of the class we're inheriting from the parent
  


  
    
      6:55:02
    
  
  
  the the dog class is going to inherit all of the attributes and methods of its parent
  


  
    
      6:55:07
    
  
  
  animal for the time being as a placeholder I'll add pass just to demonstrate this class cat is also going
  


  
    
      6:55:16
    
  
  
  to inherit from animal and class Mouse will also inherit
  


  
    
      6:55:24
    
  
  
  from animal okay I will collapse this for now
  


  
    
      6:55:30
    
  
  
  we'll create a dog object dog equals dog then pass it a name for this dog because
  


  
    
      6:55:36
    
  
  
  we have one parameter set up of name this dog will be
  


  
    
      6:55:41
    
  
  
  named Scooby as in Scooby-Doo cat equals call the cat
  


  
    
      6:55:50
    
  
  
  Constructor this cat will be named Garfield and
  


  
    
      6:55:56
    
  
  
  mouse mouse equals Mouse our Mouse will have a name of Mickey
  


  
    
      6:56:03
    
  
  
  even though there's nothing within this dog cat or Mouse class we should still have these attributes and these methods
  


  
    
      6:56:10
    
  
  
  if you inherit the animal class you should have a name attribute and is alive attribute set to true you can eat
  


  
    
      6:56:18
    
  
  
  and you can sleep let's print our dog's name dog.
  


  
    
      6:56:24
    
  
  
  name Scooby print dog. is alive
  


  
    
      6:56:34
    
  
  
  our dog is alive that is true let's have our dog object use the
  


  
    
      6:56:39
    
  
  
  eat method Scooby is eating and sleep dog.
  


  
    
      6:56:46
    
  
  
  sleep Scooby is sleeping let's replace dog with
  


  
    
      6:56:54
    
  
  
  cat the name of the cat is Garfield Garfield is alive Garfield is eating Garfield is sleeping and mouse
  


  
    
      6:57:03
    
  
  
  replace any instance of cat with mouse our mouse's name is Mickey Mickey
  


  
    
      6:57:08
    
  
  
  is alive Mickey is eating Mickey is sleeping even though these children classes are empty we're still inheriting
  


  
    
      6:57:16
    
  
  
  these attributes and methods from its parent of animal this is convenient because you don't need to copy and paste
  


  
    
      6:57:22
    
  
  
  these attributes and methods for every single class for example if I were to copy these attributes and methods and
  


  
    
      6:57:29
    
  
  
  paste them well we have a lot more codee to write
  


  
    
      6:57:35
    
  
  
  and as a consequence if I need to make a change to one of these methods I would have to do that to every single instance
  


  
    
      6:57:41
    
  
  
  of this method for example let's replace is sleeping with is asleep well now I
  


  
    
      6:57:48
    
  
  
  need to find every single Sleep Method and change it
  


  
    
      6:57:56
    
  
  
  manually it's not too bad if you only have a few classes but imagine if you have hundreds of classes that's going to
  


  
    
      6:58:02
    
  
  
  take a lot of work it's a lot easier to write the code once and then reuse it
  


  
    
      6:58:07
    
  
  
  and I only need to make that change in one place rather than make that change many times so let's change is sleeping
  


  
    
      6:58:14
    
  
  
  to is asleep and see if that works again Mickey is
  


  
    
      6:58:21
    
  
  
  asleep let's replace Mouse with dog Scooby is asleep not only that but
  


  
    
      6:58:30
    
  
  
  with children classes they can have their own attributes and methods that are different from one
  


  
    
      6:58:35
    
  
  
  another so dogs have all these attributes and methods and they can
  


  
    
      6:58:40
    
  
  
  speak let's create a speak method and I will print a unique message for dogs
  


  
    
      6:58:47
    
  
  
  woof cats will also have a speak method but it's going to be different cats will
  


  
    
      6:58:57
    
  
  
  meow then for our Mouse class they will squeak
  


  
    
      6:59:05
    
  
  
  let's have our dog
  


  
    
      6:59:10
    
  
  
  speak woof let's have our cat speak meow and our
  


  
    
      6:59:16
    
  
  
  Mouse squeak all right everybody so that's an introduction to inheritance inheritance
  


  
    
      6:59:23
    
  
  
  allows a class to inherit attributes and methods from another class much like in
  


  
    
      6:59:28
    
  
  
  real life a child can inherit traits from A parent these are also known as sub and super
  


  
    
      6:59:36
    
  
  
  classes which is a topic for another day inheritance helps with code reusability
  


  
    
      6:59:41
    
  
  
  and extensibility if all of these children classes inherit these attributes and methods from another
  


  
    
      6:59:47
    
  
  
  class we only need to write that code once and not copy it for every single class that needs it we can write and
  


  
    
      6:59:54
    
  
  
  change the code in one place for better reusability and extensibility and well everybody that is an introduction to
  


  
    
      7:00:00
    
  
  
  inheritance in Python hey everybody so today we got to talk about both multiple and multi-level
  


  
    
  49.multiple inheritance



  
    
      7:00:07
    
  
  
  inheritance we'll begin with multiple inheritance that's when a child class inherits from more than one parent class
  


  
    
      7:00:14
    
  
  
  for example a class of C can inherit the traits from both class A and B in Python
  


  
    
      7:00:21
    
  
  
  you can have more than one parent multi-level inheritance we'll talk about near the end of this topic so in this
  


  
    
      7:00:27
    
  
  
  example we're going to create two parent classes prey I'll write pass for
  


  
    
      7:00:33
    
  
  
  now and
  


  
    
      7:00:39
    
  
  
  Predator we'll create a class of rabbit a class of
  


  
    
      7:00:48
    
  
  
  Hawk then class
  


  
    
      7:00:54
    
  
  
  fish rabbit Hawk and fish are going to be children classes prey and Predator
  


  
    
      7:01:01
    
  
  
  will be parents if one of these classes rabbit hawk or fish inherit from prey they get the
  


  
    
      7:01:07
    
  
  
  ability to flee we will Define a method of flee all we'll do in this example is
  


  
    
      7:01:14
    
  
  
  print the following text this animal is fleeing if you're a
  


  
    
      7:01:21
    
  
  
  predator you get the method to hunt Define
  


  
    
      7:01:26
    
  
  
  hunt we will print this animal is is
  


  
    
      7:01:34
    
  
  
  hunting rabbits they will inherit from the prey class they're typically not Predators except that one rabbit and
  


  
    
      7:01:41
    
  
  
  Monty Python and the Holy Grail that's the exception rabbit will inherit the prey class then it gets access to a flea
  


  
    
      7:01:49
    
  
  
  method Hawks are predators they will inherit the Predator class now fish they
  


  
    
      7:01:56
    
  
  
  will hunt smaller fish and flee from bigger fish you could consider fish both
  


  
    
      7:02:02
    
  
  
  prey and predators so they will inherit both classes we will use multiple
  


  
    
      7:02:08
    
  
  
  inheritance they will inherit everything from the prey class and the Predator class now let's see if this does in fact
  


  
    
      7:02:15
    
  
  
  work now we'll create a rabbit object rabbit equals rabbit there are no parameter setup we don't need to send
  


  
    
      7:02:21
    
  
  
  any arguments to the Constructor Hawk equals Hawk and fish equals
  


  
    
      7:02:29
    
  
  
  fish so let's take our rabbit object and they should have a flea method rabbit.
  


  
    
      7:02:35
    
  
  
  flea method this animal is fleeing but they do not have a hunt method because they're not
  


  
    
      7:02:41
    
  
  
  Predators rabbit object has no attribute hunt Hawks can
  


  
    
      7:02:47
    
  
  
  hunt they're Predators they inherited that method this animal is hunting but
  


  
    
      7:02:53
    
  
  
  they can't flee they're not prey Hawk object has no attribute flea fish can do
  


  
    
      7:03:00
    
  
  
  both they inherit from the prey class and the Predator class fish. flee this animal is fleeing
  


  
    
      7:03:09
    
  
  
  fish. hunt this animal is hunting children
  


  
    
      7:03:14
    
  
  
  classes can inherit from more than one parent which is what we did for fish they are both prey and predators whereas
  


  
    
      7:03:22
    
  
  
  in rabbits are just prey Hawks are just Predators if you need to inherit from more than one parent you just add that
  


  
    
      7:03:28
    
  
  
  additional class to The Inheritance list with multi-level inheritance a parent
  


  
    
      7:03:35
    
  
  
  can inherit from another parent we will create a class of
  


  
    
      7:03:41
    
  
  
  animal and for now I'll write pass prey and Predator are going to inherit from
  


  
    
      7:03:47
    
  
  
  the animal class so we need to add animal to each inheritance
  


  
    
      7:03:53
    
  
  
  list let's say if you're an animal you get a method to eat all animals will eat
  


  
    
      7:04:01
    
  
  
  print this animal is eating and you can sleep
  


  
    
      7:04:08
    
  
  
  Define sleep print this animal is
  


  
    
      7:04:17
    
  
  
  sleeping so think of rabbit Hawk and fish as children classes prey and
  


  
    
      7:04:24
    
  
  
  Predator are those class's parents and animal is the grandparent prey and
  


  
    
      7:04:30
    
  
  
  Predator will inherit everything that the animal class has rabbit Hawk and fish will inherit everything the prey
  


  
    
      7:04:37
    
  
  
  and Predator classes have so now our rabbit Hawk and fish classes should have
  


  
    
      7:04:42
    
  
  
  the ability to eat and sleep and we'll test that rabbit.
  


  
    
      7:04:48
    
  
  
  eat this animal is eating rabbit. sleep this animal is sleeping let's
  


  
    
      7:04:55
    
  
  
  check out fish fish. eat this animal is eating fish. sleep
  


  
    
      7:05:03
    
  
  
  this animal is sleeping okay we're going to expand upon our example a little bit let me zoom out
  


  
    
      7:05:11
    
  
  
  each of our objects is going to have a name our rabbit will have a first name of bugs Hawk will be Tony as in Tony
  


  
    
      7:05:20
    
  
  
  Hawk our fish will be Nemo within our classes we don't have
  


  
    
      7:05:26
    
  
  
  any Constructor set up in which class should we assign the name attribute
  


  
    
      7:05:33
    
  
  
  let's do so within our animal class so we will Define a
  


  
    
      7:05:39
    
  
  
  Constructor to assign these attributes we will receive a
  


  
    
      7:05:44
    
  
  
  name we'll assign self. name equals name
  


  
    
      7:05:50
    
  
  
  now with these other classes if you're not assigning any attributes or if you don't need any other initialization
  


  
    
      7:05:56
    
  
  
  logic you don't need a Constructor we'll implicitly use the Constructor we inherit from the
  


  
    
      7:06:02
    
  
  
  parent let's convert each of these print statements to an F
  


  
    
      7:06:09
    
  
  
  string replace animal with self.
  


  
    
      7:06:21
    
  
  
  name now let's have our rabbit use the E
  


  
    
      7:06:28
    
  
  
  method oh we should get rid of this
  


  
    
      7:06:35
    
  
  
  there we go bugs is eating rabbit. sleep
  


  
    
      7:06:41
    
  
  
  bugs is sleeping rabbit. flee bugs is fleeing let's check out our
  


  
    
      7:06:47
    
  
  
  Hawk Hawks don't have a flea method because they're Predators not
  


  
    
      7:06:53
    
  
  
  prey let's eat Tony is eating let's sleep Tony is sleeping let's
  


  
    
      7:07:02
    
  
  
  hunt Tony is hunting let's check our fish next our fish can eat Nemo is
  


  
    
      7:07:09
    
  
  
  eating our fish can sleep Nemo is sleeping they can
  


  
    
      7:07:15
    
  
  
  flee Nemo is fleeing and Hunt Nemo is
  


  
    
      7:07:21
    
  
  
  hunting okay everybody that is both multiple and multi-level inheritance with multiple inheritance a
  


  
    
      7:07:29
    
  
  
  child can inherit from more than one parent class you just add each additional class to The Inheritance list
  


  
    
      7:07:36
    
  
  
  with multi-level inheritance a child can inherit from a parent which inherits
  


  
    
      7:07:42
    
  
  
  from another parent Class C can inherit from B where Class B inherits from a
  


  
    
      7:07:48
    
  
  
  think of C as the child b as the parent and a as the grandparent c will have all
  


  
    
      7:07:54
    
  
  
  the attributes and methods even available within the grandparent class of a and well everybody that is both
  


  
    
      7:08:01
    
  
  
  multiple and multi-level inheritance in Python hey everybody so today I got to
  


  
    
  50.super()



  
    
      7:08:06
    
  
  
  talk about the super function in Python super is a function it's used within a
  


  
    
      7:08:12
    
  
  
  child class to call methods from a parent class the child class is the
  


  
    
      7:08:17
    
  
  
  subass the parent class is the super class hence why this function is named the super function using the super
  


  
    
      7:08:24
    
  
  
  function it allows you to extend the functionality of the inherited methods here's an example we'll create a few
  


  
    
      7:08:30
    
  
  
  shape object objects we'll need to set up the classes though we'll have class
  


  
    
      7:08:36
    
  
  
  Circle for the time being I'll just write pass we'll fill it in later class
  


  
    
      7:08:44
    
  
  
  square and class
  


  
    
      7:08:49
    
  
  
  triangle for each of these classes in order to instantiate objects we'll need a Constructor we will Define our
  


  
    
      7:08:56
    
  
  
  Constructor our init method when creating circles what sorts
  


  
    
      7:09:02
    
  
  
  of attributes should a circle have let's say a color what's the color of the
  


  
    
      7:09:07
    
  
  
  circle is it filled or not fil will be another attribute and a
  


  
    
      7:09:14
    
  
  
  radius then let's assign these self. color equals the color that
  


  
    
      7:09:20
    
  
  
  we receive self. filled equals
  


  
    
      7:09:26
    
  
  
  filled self. rius equals radius
  


  
    
      7:09:32
    
  
  
  let's do this with the square and Triangle really I'll just copy our Constructor and paste it squares don't
  


  
    
      7:09:39
    
  
  
  have a radius with a square the width and the height are the same let's replace radius with width we'll also
  


  
    
      7:09:46
    
  
  
  keep the color and filled attributes self. width equals width now with
  


  
    
      7:09:54
    
  
  
  triangles again let's copy our Constructor we'll need a width and a height
  


  
    
      7:10:02
    
  
  
  self. height equals height so with programming we try not to
  


  
    
      7:10:08
    
  
  
  repeat ourselves if we don't have to what do all of these classes have in common they all share the attributes of
  


  
    
      7:10:15
    
  
  
  color and filled the ways in which they are different is that Circle has a radius
  


  
    
      7:10:22
    
  
  
  attribute square has a width triangle has a width and a height if we have to make any changes to one of these
  


  
    
      7:10:28
    
  
  
  attributes we would have to do so manually for example let's replace filled with is
  


  
    
      7:10:34
    
  
  
  filed now I need to look throughout my code for any instance of filled and replace it with is
  


  
    
      7:10:40
    
  
  
  filled it's a lot of work and I might make a mistake such as here and here it's
  


  
    
      7:10:48
    
  
  
  better to write your code once and try and reuse it so that's where inheritance and the super function can come in handy
  


  
    
      7:10:54
    
  
  
  we're going to take the attributes of color and is filled and place it within a parent class these children classes
  


  
    
      7:11:00
    
  
  
  will inherit those attributes so class what do they all have in common they're all shapes class
  


  
    
      7:11:08
    
  
  
  shape and for now I'll write pass circle is going to inherit from its parent of
  


  
    
      7:11:14
    
  
  
  shape that also applies with square and triangle we'll set up a Constructor for
  


  
    
      7:11:20
    
  
  
  shape Define init we will pass in the color and is
  


  
    
      7:11:29
    
  
  
  filled then we will assign these
  


  
    
      7:11:35
    
  
  
  attributes self. color equals color self. is filled equals is filled
  


  
    
      7:11:46
    
  
  
  we don't need to manually assign these attributes within each of these Constructors for the children instead what we have to do is
  


  
    
      7:11:53
    
  
  
  within the Constructor for each of these children classes we have to call the Constructor for the parent also known as
  


  
    
      7:12:00
    
  
  
  the super class of shape so we will eliminate these two lines of
  


  
    
      7:12:05
    
  
  
  code use the super function dot call The Constructor of the
  


  
    
      7:12:12
    
  
  
  parent that is the dunder init method but we need to pass in the color that we
  


  
    
      7:12:19
    
  
  
  receive and is filled this will be a Boolean and let's do this with the
  


  
    
      7:12:25
    
  
  
  square class and the triangle class
  


  
    
      7:12:31
    
  
  
  we still need radius for the circle width for the square width and height for the triangle we're going to call the
  


  
    
      7:12:37
    
  
  
  super function to take care of whatever attributes all these types of shapes have in common such as color and is
  


  
    
      7:12:44
    
  
  
  filled now let's see if this works let's construct a few objects we will create a circle named
  


  
    
      7:12:50
    
  
  
  Circle call The Constructor for Circle we have to pass in a color a Boolean if
  


  
    
      7:12:56
    
  
  
  it's filled or not and a radius so for the color of the circle let's say red
  


  
    
      7:13:03
    
  
  
  is filled let's say that is true and a radius of five you could even use
  


  
    
      7:13:09
    
  
  
  keyword arguments for better readability although not necessary but for clarity let's say color equals
  


  
    
      7:13:16
    
  
  
  red is filled equals true radius equals
  


  
    
      7:13:22
    
  
  
  5 let's see if this works I will print our Circle color
  


  
    
      7:13:33
    
  
  
  it is red print our colors is filled
  


  
    
      7:13:39
    
  
  
  attribute the circle is filled that is true and the
  


  
    
      7:13:44
    
  
  
  radius print Circle do radius the radius of the
  


  
    
      7:13:49
    
  
  
  circle is five we could even convert this to an F string I'll add a
  


  
    
      7:13:59
    
  
  
  placeholder then add centim
  


  
    
      7:14:04
    
  
  
  5 cm let's construct a square object square equals
  


  
    
      7:14:11
    
  
  
  Square we'll need a color is filled and a width I'll just copy what we have and make a few changes replace radius with
  


  
    
      7:14:20
    
  
  
  width the color will be blue is filled will be false the width will be six we
  


  
    
      7:14:27
    
  
  
  don't need a height because squares have an even width and height if we ever need the height we can assume it's the same
  


  
    
      7:14:33
    
  
  
  as the width in this case six let's check out our Square square. color
  


  
    
      7:14:39
    
  
  
  Square dot is filled Square do
  


  
    
      7:14:44
    
  
  
  width our square is blue it's not filled in the width is 6
  


  
    
      7:14:50
    
  
  
  cm let's create a triangle object triangle equals
  


  
    
      7:14:56
    
  
  
  triangle pass in our arguments the color will be yellow is
  


  
    
      7:15:02
    
  
  
  filled will be true the width will be seven and the height will be
  


  
    
      7:15:10
    
  
  
  eight let's print our triangle's color is it filled it's width and its
  


  
    
      7:15:21
    
  
  
  height our triangle is yellow it's filled in the width is 7 cm the height
  


  
    
      7:15:27
    
  
  
  is 8 cm so that's how you can use the super super function to reuse the Constructor
  


  
    
      7:15:33
    
  
  
  of a parent class we don't need to manually assign each of these attributes within each of the children classes we
  


  
    
      7:15:39
    
  
  
  can do that in just one place when we refer to Super imagine that we're replacing this with the parent class
  


  
    
      7:15:46
    
  
  
  name such as shape that might be a good way to think of
  


  
    
      7:15:52
    
  
  
  it use the Constructor of the parent class of shape and pass these arguments
  


  
    
      7:15:58
    
  
  
  in what you could do as well is is extend the functionality of a method So within our shape class let's create a
  


  
    
      7:16:06
    
  
  
  method of describe we will describe the attributes of this shape we will
  


  
    
      7:16:13
    
  
  
  print use an FST string when we want to describe our shape let's say it is at a
  


  
    
      7:16:20
    
  
  
  placeholder self. color what is the color of this shape and is it filled or
  


  
    
      7:16:27
    
  
  
  not and add a placeholder we'll use a turn AR operator print
  


  
    
      7:16:34
    
  
  
  filled if self. is filled is true else
  


  
    
      7:16:40
    
  
  
  we will print not
  


  
    
      7:16:45
    
  
  
  filled each of these types of shapes circle square and triangle will have
  


  
    
      7:16:51
    
  
  
  access to a describe method let's attempt to use it take our Circle use the describe
  


  
    
      7:16:58
    
  
  
  method that's inherited it is red and filled
  


  
    
      7:17:04
    
  
  
  Square it is blue and not filled triangle it is yellow and
  


  
    
      7:17:11
    
  
  
  filled so then we also have method overwriting what if we create a similar
  


  
    
      7:17:16
    
  
  
  method of describe within circle square and triangle let's do
  


  
    
      7:17:22
    
  
  
  that Define a describe
  


  
    
      7:17:27
    
  
  
  method within our Circle let's C calculate the area what's the area of the circle I'll use an F string it is a
  


  
    
      7:17:37
    
  
  
  circle with an area of then we'll calculate the area given the
  


  
    
      7:17:44
    
  
  
  radius to calculate the area of a circle we can take Pi I'll just say 3.14 just
  


  
    
      7:17:50
    
  
  
  to keep it simple times the radius squared self. radius times self.
  


  
    
      7:17:58
    
  
  
  rius if I were to call the describe method will we use the parents version
  


  
    
      7:18:03
    
  
  
  of describe or the child so let's take our Circle use the
  


  
    
      7:18:10
    
  
  
  describe method the result it is a circle with an area of
  


  
    
      7:18:17
    
  
  
  78.5 I should really add cenim squar after that ctim
  


  
    
      7:18:24
    
  
  
  squared this is called method overwriting if a child shares a similar method with a parent you'll use the
  


  
    
      7:18:31
    
  
  
  child's version and not the parents this is Method overwriting if you would like to extend the functionality of a method
  


  
    
      7:18:39
    
  
  
  from a parent you can use the super function not only do I want to use the describe method of the child I would
  


  
    
      7:18:45
    
  
  
  also like to use the describe method of the parent So within this function we will use the super function access the
  


  
    
      7:18:54
    
  
  
  describe method of the parent what we're doing is extending the functionality of the descrip
  


  
    
      7:19:02
    
  
  
  method it is a circle with an area of 78.5 CM squ the circle is red and it's
  


  
    
      7:19:10
    
  
  
  filled or you could change up the order let's use the parent classes
  


  
    
      7:19:17
    
  
  
  describe method and extend the functionality with our own print statement it is red and filled it is a
  


  
    
      7:19:24
    
  
  
  circle with an area of 78.5 CM squ let's finish this with the square and triangle
  


  
    
      7:19:30
    
  
  
  classes I'll copy what we have for the described method within the circle class but we'll make a different
  


  
    
      7:19:39
    
  
  
  calculation describe the square it is a square with an area of take self. width
  


  
    
      7:19:47
    
  
  
  times self. width the height and the width are going to be the same if it's a
  


  
    
      7:19:54
    
  
  
  square then describe our triangle
  


  
    
      7:20:01
    
  
  
  it is a triangle with an area of width time height we have a height in this case
  


  
    
      7:20:08
    
  
  
  divided two we've already described our Circle let's describe our
  


  
    
      7:20:14
    
  
  
  Square it is a square with an area of 36 CM squ it is blue and not filled let's
  


  
    
      7:20:21
    
  
  
  describe our triangle it is a triangle with an area of 28.0 CM squ it is yellow and filled
  


  
    
      7:20:30
    
  
  
  all all right everybody that is the super function it's used in a child class to call the methods from a parent
  


  
    
      7:20:36
    
  
  
  class also known as the super class it allows you to extend the functionality
  


  
    
      7:20:41
    
  
  
  of the inherited methods within a child class you could use it within a Constructor to assign any attributes
  


  
    
      7:20:48
    
  
  
  that all of its siblings have in common such as color or if that shape is filled
  


  
    
      7:20:54
    
  
  
  when used within any other method you can extend the functionality of that method not only are we printing this
  


  
    
      7:21:01
    
  
  
  message from the parent we're tacking on another print statement before that and well everybody that is the super
  


  
    
      7:21:07
    
  
  
  function in Python what is going on everybody so today I got to talk about
  


  
    
  51.polymorphism



  
    
      7:21:13
    
  
  
  polymorphism in Python polymorphism is a programming concept it's a Greek word
  


  
    
      7:21:18
    
  
  
  that means to have many forms or faces poly means many morph means form in
  


  
    
      7:21:24
    
  
  
  programming an object can take one of many forms there's two ways to achieve polymorphism one is through inheritance
  


  
    
      7:21:31
    
  
  
  an object could be treated of the same type as a parent class there's also duck
  


  
    
      7:21:37
    
  
  
  typing which we'll talk about in the next Topic in this video we're more focused on inheritance what we'll do in
  


  
    
      7:21:43
    
  
  
  this video is create a class of shape we'll write pass as a placeholder we
  


  
    
      7:21:49
    
  
  
  will create a class of circle which will inherit from shape again writing
  


  
    
      7:21:56
    
  
  
  pass class Square inherits from from
  


  
    
      7:22:02
    
  
  
  shape class triangle which inherits from
  


  
    
      7:22:10
    
  
  
  shape if I was to create a circle object Circle equals
  


  
    
      7:22:15
    
  
  
  Circle our Circle identifies as a circle and since our Circle class inherits from
  


  
    
      7:22:21
    
  
  
  the shape class our circle is also considered a shape it has two forms it's
  


  
    
      7:22:26
    
  
  
  a circle and it's a shape but our Circle isn't a square or a triangle that could
  


  
    
      7:22:31
    
  
  
  also apply to our Square class our square is a square our square
  


  
    
      7:22:37
    
  
  
  is also considered a shape but our square is not a circle or a triangle those are two possible forms for our
  


  
    
      7:22:43
    
  
  
  Square it's a square and a shape so let's say we would like to create a list of shapes what do they all have in
  


  
    
      7:22:50
    
  
  
  common well they're all shapes a descriptive name for this list would be shapes equals an empty list I will
  


  
    
      7:22:58
    
  
  
  instantiate a circle object object a square object and a triangle
  


  
    
      7:23:06
    
  
  
  object our circle is a circle and a shape our square is a square and a shape
  


  
    
      7:23:12
    
  
  
  our triangle is a triangle and a shape each of these objects has two forms or
  


  
    
      7:23:18
    
  
  
  two faces let's fill in some of these classes let's say that with our shape class we will define an area method
  


  
    
      7:23:26
    
  
  
  Define area I'm going to turn this into an abstract method meod I'll just write
  


  
    
      7:23:31
    
  
  
  pass to work with abstract classes we need to import that from ABC import
  


  
    
      7:23:39
    
  
  
  Capital ABC as well as abstract method
  


  
    
      7:23:44
    
  
  
  preceding the area method I will add a decorator of abstract method our circle
  


  
    
      7:23:50
    
  
  
  square and triangle classes they're all considered shapes they inherit from this class we need to Define an area method
  


  
    
      7:23:57
    
  
  
  for each since they're all considered a shape every shape has an area with our
  


  
    
      7:24:02
    
  
  
  class of circle let's define a Constructor Define in
  


  
    
      7:24:08
    
  
  
  nit we will pass in one argument a radius what is the radius of the circle
  


  
    
      7:24:14
    
  
  
  assign an attribute of radius equals the radius we receive let's do this with
  


  
    
      7:24:20
    
  
  
  square Define innit one parameter the length of a side
  


  
    
      7:24:28
    
  
  
  self. side equal side then
  


  
    
      7:24:33
    
  
  
  triangle Define init we have two parameters base and
  


  
    
      7:24:43
    
  
  
  height self. base equals base self.
  


  
    
      7:24:49
    
  
  
  height equals height all right now let's finish defining these area methods for
  


  
    
      7:24:54
    
  
  
  each class we will return
  


  
    
      7:25:02
    
  
  
  3.14 time self. radius to the^ of
  


  
    
      7:25:08
    
  
  
  two so given a radius that's how to calculate the area of a circle then with
  


  
    
      7:25:14
    
  
  
  our Square Define area we will
  


  
    
      7:25:22
    
  
  
  return self do side to the power of
  


  
    
      7:25:28
    
  
  
  two then with our triangle Define
  


  
    
      7:25:35
    
  
  
  area return self. Bas time self. height time
  


  
    
      7:25:45
    
  
  
  0.5 now we have to pass in some arguments for our Circle we need a radius I'll pick four for the square the
  


  
    
      7:25:52
    
  
  
  length of a side will be five then our triangle the base will be six the height
  


  
    
      7:25:57
    
  
  
  will be seven we're going to write a loop to iterate through our shapes for every shape in
  


  
    
      7:26:05
    
  
  
  shapes then we're going to print for every shape called the area
  


  
    
      7:26:14
    
  
  
  method and that would give me these numbers if you would like you can format
  


  
    
      7:26:19
    
  
  
  the output I'll just use an F
  


  
    
      7:26:25
    
  
  
  string I'll add cm squared
  


  
    
      7:26:35
    
  
  
  much better what if we were to create a class that's completely unrelated to
  


  
    
      7:26:41
    
  
  
  shapes I will create a class of
  


  
    
      7:26:47
    
  
  
  pizza I will Define a Constructor to construct a pizza object
  


  
    
      7:26:53
    
  
  
  we need a topping and a radius what is the radius of the pizza
  


  
    
      7:27:00
    
  
  
  self. topping equals topping self. rius equals
  


  
    
      7:27:09
    
  
  
  radius within my list of shapes I'll add a pizza object but I have to pass in a topping
  


  
    
      7:27:16
    
  
  
  such as pepperoni and what is the radius of the
  


  
    
      7:27:22
    
  
  
  pizza let's say 15 cm so our pizza our pizza class doesn't have an area method
  


  
    
      7:27:29
    
  
  
  here's what happens when I run this we get an attribute error Pizza
  


  
    
      7:27:35
    
  
  
  object has no attribute area our pizza object is considered a
  


  
    
      7:27:40
    
  
  
  pizza but it is not considered a shape it does not inherit from the shape class
  


  
    
      7:27:45
    
  
  
  at the top here you know what a pizza is circular it could be considered a circle
  


  
    
      7:27:51
    
  
  
  so how about this let's take the pizza class it will inherit from the circle
  


  
    
      7:27:56
    
  
  
  class and within our Circle class we're already assigning the radius to the radius attribute so instead of doing
  


  
    
      7:28:04
    
  
  
  that here within the Constructor for our pizza class let's call the super Constructor super which refers to the
  


  
    
      7:28:11
    
  
  
  parent use its Constructor then pass in the radius we
  


  
    
      7:28:16
    
  
  
  receive let's see if this works now that does here is the area of our
  


  
    
      7:28:24
    
  
  
  pizza our pizza is considered a pizza it inherits from the circle class so it's
  


  
    
      7:28:29
    
  
  
  also considered a circle and our Circle class inherits from the shape class our
  


  
    
      7:28:35
    
  
  
  pizza has three forms our pizza is considered a pizza it's also considered a circle and it's also considered a
  


  
    
      7:28:42
    
  
  
  shape it would make sense for it to fit into this list of shapes because our pizza also identifies as a shape so
  


  
    
      7:28:50
    
  
  
  that's polymorphism everybody it's a Greek word meaning to have many forms or faces poly meaning many morph meaning
  


  
    
      7:28:57
    
  
  
  form in Python there's two ways to achieve polymorphism one through inheritance an object could be treated
  


  
    
      7:29:04
    
  
  
  of the same type as a parent and there's also duck typing which we'll discuss more in the next topic stay tuned for
  


  
    
      7:29:11
    
  
  
  that and well everybody that's polymorphism in Python hey everybody so today I got to
  


  
    
  52.duck typing



  
    
      7:29:17
    
  
  
  talk about duck typing in Python duck typing is another way to achieve polymorphism besides using inheritance
  


  
    
      7:29:25
    
  
  
  objects can be treated as if they're a different type as long as they meet the minimum necessary at attributes and
  


  
    
      7:29:30
    
  
  
  methods required of them it follows this adage if it looks like a duck and quacks
  


  
    
      7:29:35
    
  
  
  like a duck it must be a duck as long as an object resembles another it could
  


  
    
      7:29:41
    
  
  
  also be treated of that type so in this example let's create a class of
  


  
    
      7:29:47
    
  
  
  animal we will have a class attribute of aive if you're an animal you will have
  


  
    
      7:29:53
    
  
  
  an attribute of aive you're a living creature let's create a class of dog
  


  
    
      7:30:00
    
  
  
  the dog class will inherit from the animal class they will inherit the alive
  


  
    
      7:30:05
    
  
  
  attribute let's also Define a speak method if you're a dog you gain the ability to speak we will
  


  
    
      7:30:14
    
  
  
  print woof then we'll create a cat class class cat inherits from animal for
  


  
    
      7:30:23
    
  
  
  the speak method we will print meow let's create a list of animals what
  


  
    
      7:30:29
    
  
  
  do these two classes have in common they both could be considered animals let's
  


  
    
      7:30:34
    
  
  
  create a list of animals we will construct a dog object
  


  
    
      7:30:40
    
  
  
  and a cat object if I was to write a for Loop for every animal in my list of
  


  
    
      7:30:48
    
  
  
  animals have each animal use its speak method which will result in the dog
  


  
    
      7:30:56
    
  
  
  going woof the cat going meow they're both speaking what if we add a class that has nothing
  


  
    
      7:31:02
    
  
  
  to do with animals like class car cars will have a horn method that's
  


  
    
      7:31:11
    
  
  
  how they speak when you honk the horn you will
  


  
    
      7:31:16
    
  
  
  print honk within my list of animals let's
  


  
    
      7:31:21
    
  
  
  create a car object it really doesn't belong in here but let's see what
  


  
    
      7:31:28
    
  
  
  happens we have an attribute error car object has no attribute
  


  
    
      7:31:34
    
  
  
  speak our car object doesn't have the minimum necessary attributes and
  


  
    
      7:31:40
    
  
  
  methods when iterating through this list of animals we're calling each animal speak method which our car object
  


  
    
      7:31:47
    
  
  
  doesn't have but it does have a horn method so what if we rename our horn
  


  
    
      7:31:52
    
  
  
  method as speak maybe it's an AI car or
  


  
    
      7:31:58
    
  
  
  something well this woodwork the dog goes woof the cat goes meow the car goes
  


  
    
      7:32:05
    
  
  
  honk so our car object it quacks like a duck we could
  


  
    
      7:32:11
    
  
  
  consider it a duck it has the minimum necessary methods to be considered an
  


  
    
      7:32:17
    
  
  
  animal animals inherit this alive attribute let's utilize that after the
  


  
    
      7:32:23
    
  
  
  animal speaks let's print their alive attribute print my animals Al live
  


  
    
      7:32:31
    
  
  
  attribute my car object doesn't have that attribute we get an attribute error
  


  
    
      7:32:37
    
  
  
  car object has no attribute alive but if I was to add that
  


  
    
      7:32:43
    
  
  
  attribute alive equals
  


  
    
      7:32:48
    
  
  
  false we have true for the dog it's living true for the cat it's living but
  


  
    
      7:32:54
    
  
  
  false for the car it's not living it's not a living creature my car meets the minimum
  


  
    
      7:33:00
    
  
  
  necessary requirements to be considered an animal if I were to set this to be
  


  
    
      7:33:07
    
  
  
  alive well then it would be a living car kind of like the movie Cars so with
  


  
    
      7:33:13
    
  
  
  python duck typing is another way to achieve polymorphism besides using
  


  
    
      7:33:18
    
  
  
  inheritance as long as an object has the minimum necessary attributes and methods you could treat it as a different type
  


  
    
      7:33:24
    
  
  
  of object if it looks like a duck and quacks like a duck it must be a duck
  


  
    
      7:33:30
    
  
  
  and well everybody that is duck typing in Python hey what's going on everybody
  


  
    
  53.static methods



  
    
      7:33:36
    
  
  
  today I'm going to talk about static methods in Python a static method is a method that belongs to a class rather
  


  
    
      7:33:44
    
  
  
  than any object from that class any instance instance methods we're already
  


  
    
      7:33:49
    
  
  
  familiar with them they are methods that belong to individual objects created from that class they're best for
  


  
    
      7:33:56
    
  
  
  operations on instances of that class any objects whereas static methods
  


  
    
      7:34:01
    
  
  
  they're best for utility functions within a class that do not need access to class data I'll demonstrate the
  


  
    
      7:34:08
    
  
  
  differences between an instance method and a static method we'll Begin by creating a class of
  


  
    
      7:34:15
    
  
  
  employee we'll need a Constructor let's define
  


  
    
      7:34:20
    
  
  
  that to create an employee object we'll need a name and a job
  


  
    
      7:34:26
    
  
  
  position we will assign self. name equals name
  


  
    
      7:34:33
    
  
  
  self.pos equals position we will create an instance
  


  
    
      7:34:39
    
  
  
  method of get info we will return employee info we will return an FST string where
  


  
    
      7:34:48
    
  
  
  we will display self. name equals
  


  
    
      7:34:57
    
  
  
  self.pos get info is an instance method each object that we create from this
  


  
    
      7:35:03
    
  
  
  class will have their own get info method to return the information on that object the object's name and the
  


  
    
      7:35:10
    
  
  
  object's position now we'll create a static method to create a static method we need
  


  
    
      7:35:16
    
  
  
  a decorator of static method static methods are best for General utility
  


  
    
      7:35:23
    
  
  
  functions within a class we'll Define a method to check to see if a job a
  


  
    
      7:35:29
    
  
  
  position is valid which we will name is valid
  


  
    
      7:35:35
    
  
  
  position so static methods they don't have self as the first argument we're not working with any objects created
  


  
    
      7:35:42
    
  
  
  from this class to check to see if a position is valid we will pass in a job position which I will name as
  


  
    
      7:35:51
    
  
  
  position I will create a list of valid
  


  
    
      7:35:57
    
  
  
  positions let's assume that our is the Crusty Crab what are some valid positions a manager is a valid position
  


  
    
      7:36:06
    
  
  
  a cashier a cook then let's say a
  


  
    
      7:36:13
    
  
  
  janitor then we will return we'll use a membership operator check if position that we
  


  
    
      7:36:22
    
  
  
  receive is in our list of valid positions
  


  
    
      7:36:30
    
  
  
  what we have done is that we have created a static method we don't need to rely on any objects to use this method
  


  
    
      7:36:37
    
  
  
  for example to use a static method we will use the name of the class rather than
  


  
    
      7:36:44
    
  
  
  any object that we create from this class such as this we don't need to do
  


  
    
      7:36:51
    
  
  
  that we type the class name followed by the static method is valid position
  


  
    
      7:37:02
    
  
  
  then I did set this up to accept one argument let's check to see if a cook is
  


  
    
      7:37:08
    
  
  
  a valid position then I do need to print this
  


  
    
      7:37:13
    
  
  
  what is the output a cook is a valid position what
  


  
    
      7:37:19
    
  
  
  about a rocket scientist that would probably be s's job
  


  
    
      7:37:25
    
  
  
  that is false a rocket scientist is not a valid position at the crusty
  


  
    
      7:37:30
    
  
  
  crab this is a static method it belongs to the class not any object created from
  


  
    
      7:37:36
    
  
  
  that class now let's create a few employee objects let's say employee 1
  


  
    
      7:37:42
    
  
  
  equals a new employee we have to pass in a name and a job Eugene will be the first name that's
  


  
    
      7:37:50
    
  
  
  Mr Krabs he will be a manager employee
  


  
    
      7:37:57
    
  
  
  2 equals employee
  


  
    
      7:38:02
    
  
  
  Squidward will be a cashier employee
  


  
    
      7:38:08
    
  
  
  3 equals employee employee 3 will be
  


  
    
      7:38:14
    
  
  
  SpongeBob SpongeBob will be a cook to call an instance method we have
  


  
    
      7:38:20
    
  
  
  to access one of the instances of the class in order to use it if I want to check the info on
  


  
    
      7:38:27
    
  
  
  employee 1 I will access that object that instance use the get info method then I
  


  
    
      7:38:35
    
  
  
  need to print it take employee one get the info Eugene
  


  
    
      7:38:43
    
  
  
  is the manager let's do this with employee 2 and employee
  


  
    
      7:38:50
    
  
  
  3 Eugene Mr Krabs is the manager Squidward is the cashier SpongeBob is
  


  
    
      7:38:56
    
  
  
  the cook for an instance method you access a object then call the instance
  


  
    
      7:39:01
    
  
  
  method with the static method you only need to access that class you don't even
  


  
    
      7:39:07
    
  
  
  need to create any objects from that class it's a general utility
  


  
    
      7:39:12
    
  
  
  method all right everybody those are static methods they're a method that belongs to a class rather than any
  


  
    
      7:39:19
    
  
  
  objects created from that class they're usually used for General utility functions that do not need access to
  


  
    
      7:39:26
    
  
  
  class data and well everybody those are static methods in Python hey what's going on people so
  


  
    
  54.class methods



  
    
      7:39:33
    
  
  
  today I got to talk about class methods in Python a class method allows operations related to the class itself
  


  
    
      7:39:40
    
  
  
  they take CLS as the first parameter whereas instance methods will take self
  


  
    
      7:39:46
    
  
  
  self refers to any object created from that class CLS meaning class refers to
  


  
    
      7:39:51
    
  
  
  the class not any objects here's an example we will create a class of
  


  
    
      7:39:57
    
  
  
  student we'll need a Constructor to construct some student
  


  
    
      7:40:03
    
  
  
  objects all students will have a name and a
  


  
    
      7:40:08
    
  
  
  GPA self. name equals name self. GPA
  


  
    
      7:40:14
    
  
  
  equals GPA we will also create a class variable for this demonstration of count we will
  


  
    
      7:40:23
    
  
  
  count how many students we create whenever we construct a student
  


  
    
      7:40:28
    
  
  
  object we will access the class of student take our count variable
  


  
    
      7:40:34
    
  
  
  increment it by one whenever we create a student object increase count by
  


  
    
      7:40:40
    
  
  
  one I will create an instance method of get
  


  
    
      7:40:47
    
  
  
  info instance methods have self as the first parameter we're referring to the
  


  
    
      7:40:52
    
  
  
  object we're currently working with I will return an F string where we will
  


  
    
      7:40:59
    
  
  
  display the students name and their GPA self.
  


  
    
      7:41:05
    
  
  
  name self. GPA I'll add a comment that this is an
  


  
    
      7:41:12
    
  
  
  instance method Now to create a class method to
  


  
    
      7:41:17
    
  
  
  work with class data we will declare a class method with a class method
  


  
    
      7:41:22
    
  
  
  decorator class method what we're going to do is Define
  


  
    
      7:41:28
    
  
  
  a method to get the count the class variable of count this method will be called get
  


  
    
      7:41:37
    
  
  
  count rather than self as the first parameter we'll be working with a class
  


  
    
      7:41:42
    
  
  
  CLS meaning class I will return an F
  


  
    
      7:41:47
    
  
  
  string total number of
  


  
    
      7:41:53
    
  
  
  students at a placeholder CLS count let's test this to call a class
  


  
    
      7:42:01
    
  
  
  method you take the name of the class followed by the class method get count
  


  
    
      7:42:07
    
  
  
  and then we do need to print this what is the count of my current
  


  
    
      7:42:14
    
  
  
  students total number of students is zero let's create a few student
  


  
    
      7:42:20
    
  
  
  objects we will create student one equals called the student Constructor we
  


  
    
      7:42:26
    
  
  
  have to pass in a name and a GPA let's say that the name is SpongeBob SpongeBob
  


  
    
      7:42:32
    
  
  
  has a GPA of 3.2 we'll create two more students student two student three
  


  
    
      7:42:40
    
  
  
  student two will be Patrick Patrick has a
  


  
    
      7:42:46
    
  
  
  2.0 then Sandy Sandy Smart in fact she's a genius she has a perfect
  


  
    
      7:42:53
    
  
  
  4.0 now let's count the number of students total number of students is
  


  
    
      7:43:00
    
  
  
  three when we call this class method we can access or modify class
  


  
    
      7:43:06
    
  
  
  data this class variable of count rather than using self we use CLS for the
  


  
    
      7:43:14
    
  
  
  class let's create one more class method this time I'll calculate the total GPA
  


  
    
      7:43:20
    
  
  
  of all my students we'll need a class variable to hold that data let's say total GPA
  


  
    
      7:43:29
    
  
  
  equals 0 whenever we construct a student object we will access our class of student get
  


  
    
      7:43:37
    
  
  
  the total GPA then add plus equals this student's
  


  
    
      7:43:44
    
  
  
  GPA that we have just created basically speaking the total GPA this variable is
  


  
    
      7:43:50
    
  
  
  going to accumulate all of the GPA of every student and store it as a sum to
  


  
    
      7:43:56
    
  
  
  find the average we're going to divide it by the count the number of students we'll do that within a class method to
  


  
    
      7:44:03
    
  
  
  create a class method again we need to use the class method decorator I will Define a method of get
  


  
    
      7:44:11
    
  
  
  average GPA the first parameter is CLS for
  


  
    
      7:44:16
    
  
  
  class I will check if CLS count the
  


  
    
      7:44:22
    
  
  
  count variable of my class is equal to zero that means if we
  


  
    
      7:44:27
    
  
  
  have no students if that's the case if there's no students we're going to return
  


  
    
      7:44:32
    
  
  
  zero because otherwise we're going to divide by zero and we'll get an
  


  
    
      7:44:38
    
  
  
  erir else we're going to return an F string follow this formula we're going
  


  
    
      7:44:45
    
  
  
  to take the total GPA of my class class. total GPA divided by class. count the
  


  
    
      7:44:53
    
  
  
  number of students we have that's how to calculate the average GPA after getting the count of the
  


  
    
      7:44:59
    
  
  
  number of students to access a class method we take the name of the class student call the class method get
  


  
    
      7:45:07
    
  
  
  average GPA then I will print
  


  
    
      7:45:15
    
  
  
  it total number of students is three the average GPA is 3.06
  


  
    
      7:45:22
    
  
  
  repeating after calculating the average I'm going to add a format specifier of
  


  
    
      7:45:27
    
  
  
  2f just around to two decimal places and I'll add average GPA coin
  


  
    
      7:45:35
    
  
  
  space then we'll calculate the average all right everybody those are
  


  
    
      7:45:41
    
  
  
  class methods instance methods are best for operations on instances of the class
  


  
    
      7:45:47
    
  
  
  any objects static methods are best for General utility functions which do not
  


  
    
      7:45:53
    
  
  
  need access to class data class methods are best used when we're working with
  


  
    
      7:45:59
    
  
  
  class level data or we require access to the class itself such as when we're working with class variables rather than
  


  
    
      7:46:06
    
  
  
  using self as the first parameter we're going to use CLS meaning class and well
  


  
    
      7:46:12
    
  
  
  everybody those are class methods in Python yo what's going on people so
  


  
    
  55.magic methods



  
    
      7:46:18
    
  
  
  today I'm going to explain magic methods in Python magic methods are also known as Dunder methods meaning double
  


  
    
      7:46:25
    
  
  
  underscore you typically find these within classes we're already familiar with one of them our Dunder init method
  


  
    
      7:46:32
    
  
  
  we have double underscores on the left and double underscores on the right but there are others I'll cover a few of the
  


  
    
      7:46:38
    
  
  
  more beginner friendly ones so what these methods do is that they're automatically called by using some of
  


  
    
      7:46:45
    
  
  
  pythons built-in operations such as printing an object seeing if two objects
  


  
    
      7:46:50
    
  
  
  are equal greater than or less than when we use many of Python's built-in operations with objects we can Define
  


  
    
      7:46:58
    
  
  
  and customize the behavior of those objects so in this demonstration I'm going to create a class of book we will
  


  
    
      7:47:05
    
  
  
  construct some book objects we will Define a magic method a Dunder method of
  


  
    
      7:47:11
    
  
  
  init to initialize these objects for a book we need a title an
  


  
    
      7:47:18
    
  
  
  author and the number of pages we'll say num
  


  
    
      7:47:23
    
  
  
  Pages self. tile equals title
  


  
    
      7:47:28
    
  
  
  self. author equals author self. number of
  


  
    
      7:47:36
    
  
  
  pages equals number of pages when we call the class of book we Are
  


  
    
      7:47:41
    
  
  
  automatically calling Dunder init so let's create a book object book one
  


  
    
      7:47:47
    
  
  
  equals book we need a title an author and number of pages so since we're dealing
  


  
    
      7:47:53
    
  
  
  with this topic of magic methods I'll pick some fantasy related books for my first book book I'll pick the
  


  
    
      7:48:00
    
  
  
  Hobbit that's the title the author is
  


  
    
      7:48:05
    
  
  
  JRR token the number of pages is 310 so for my next
  


  
    
      7:48:12
    
  
  
  book book two I will pick Harry
  


  
    
      7:48:19
    
  
  
  Potter and the philosopher
  


  
    
      7:48:26
    
  
  
  stone the author is J K rolling the number of pages is
  


  
    
      7:48:34
    
  
  
  223 then we have book three for my third book I will pick The
  


  
    
      7:48:42
    
  
  
  Lion the Witch and the
  


  
    
      7:48:49
    
  
  
  Wardrobe the author is CS Lewis the number of pages is
  


  
    
      7:48:56
    
  
  
  172 okay here are my three free book objects when we call the class of book
  


  
    
      7:49:01
    
  
  
  and pass an arguments we will call the dunder init method it's a magic method
  


  
    
      7:49:07
    
  
  
  it's automatically called behind the scenes within this magic method we can Define and customize the behavior of
  


  
    
      7:49:14
    
  
  
  objects and in this example we're just assigning the attributes of title author
  


  
    
      7:49:19
    
  
  
  and number of pages that is one built-in operation of python what would happen if
  


  
    
      7:49:25
    
  
  
  I was to print book one directly to the console here's what happens well we're given a
  


  
    
      7:49:32
    
  
  
  memory address here's book two and book three well we can customize this
  


  
    
      7:49:41
    
  
  
  Behavior we will use the dunder string method double underscore St Str meaning
  


  
    
      7:49:49
    
  
  
  string double underscore again we have one parameter of self instead of
  


  
    
      7:49:54
    
  
  
  returning a memory address we can customize this Behavior let's instead return an F
  


  
    
      7:50:01
    
  
  
  string I'll add two placeholders we will display self. tile the title of the book
  


  
    
      7:50:08
    
  
  
  by self. author and I'll place the title within
  


  
    
      7:50:13
    
  
  
  single quotes now let's print book one we have
  


  
    
      7:50:18
    
  
  
  The Hobbit by JRR token let's print book
  


  
    
      7:50:24
    
  
  
  two Harry Potter and the philosopher stone by JK Rowling and book three the
  


  
    
      7:50:30
    
  
  
  line the witch in The Wardrobe by CS Lewis so that is thunder string we can
  


  
    
      7:50:35
    
  
  
  return a string representation of the object when we print it directly to the
  


  
    
      7:50:41
    
  
  
  console here's another Dunder method we can check to see if two objects are equal I will
  


  
    
      7:50:48
    
  
  
  print is book one equal to book
  


  
    
      7:50:53
    
  
  
  two that gives me false if they were to have the same title
  


  
    
      7:51:00
    
  
  
  the same author and the same number of pages then python would say they're not
  


  
    
      7:51:07
    
  
  
  equal still so let's customize this
  


  
    
      7:51:13
    
  
  
  Behavior we will Define a method of Dunder equals which is just
  


  
    
      7:51:19
    
  
  
  EQ for parameters we have self the first book we're examining in this case book
  


  
    
      7:51:24
    
  
  
  one and other other means the other book we're examining two objects for
  


  
    
      7:51:31
    
  
  
  equality to do that we'll see if the title of two books and the author is the
  


  
    
      7:51:37
    
  
  
  same we'll disregard the number of pages you can have two different versions of
  


  
    
      7:51:42
    
  
  
  the same book they might have different font sizes or the dimensions of the physical Pages might be
  


  
    
      7:51:49
    
  
  
  different so we will return a Boolean value we will examine if self that's the
  


  
    
      7:51:55
    
  
  
  first book is the title attribute equal to our other books title and is
  


  
    
      7:52:04
    
  
  
  the author of the first book self. author equal to our other books
  


  
    
      7:52:10
    
  
  
  author if I were to run this we get false book one does not equal book two
  


  
    
      7:52:16
    
  
  
  but if they have the same title I'm going to replace these and the same
  


  
    
      7:52:23
    
  
  
  author then they would be equal and we'll disregard the number of pages
  


  
    
      7:52:29
    
  
  
  let's say that with this version of The Hobbit they're using a smaller font size so there's less
  


  
    
      7:52:35
    
  
  
  Pages we're using Dunder equals to compare if two objects are equal what if I was to print book two is
  


  
    
      7:52:45
    
  
  
  less than book three like what does that even mean and I'm just going to get rid of these two
  


  
    
      7:52:53
    
  
  
  lines type error less than is not supported between instances of book and
  


  
    
      7:52:58
    
  
  
  book so we can't use less than on two objects but we can customize that
  


  
    
      7:53:04
    
  
  
  behavior by using Dunder less than which is just LT we're examining one book and
  


  
    
      7:53:11
    
  
  
  the other book self and other let's compare the number of pages
  


  
    
      7:53:18
    
  
  
  we'll compare if the pages of book two is less than book three we will return a
  


  
    
      7:53:24
    
  
  
  Boolean value is self. number of pages less than
  


  
    
      7:53:32
    
  
  
  other number of pages so now this should not give us an
  


  
    
      7:53:38
    
  
  
  error book two does not have less Pages than book three another would be greater than I'll
  


  
    
      7:53:46
    
  
  
  just copy what we have Dunder GT for greater than for our first book of self
  


  
    
      7:53:52
    
  
  
  is it greater than the number of pages of the other book
  


  
    
      7:54:01
    
  
  
  well that's true the number of pages of book two is greater than book three let's use Thunder add to add the
  


  
    
      7:54:08
    
  
  
  pages of two books together what would happen if I were to add two books together book two plus book
  


  
    
      7:54:15
    
  
  
  3 well we get a type error unsupported operand for book and
  


  
    
      7:54:20
    
  
  
  book well to customize the behavior of addition we will Define Dunder add
  


  
    
      7:54:28
    
  
  
  we have self and other for the other object let's add the pages together of
  


  
    
      7:54:34
    
  
  
  two books maybe we need a summer reading list and we would like to see what the total number of pages is I will return
  


  
    
      7:54:42
    
  
  
  self. number of pages attribute plus our other books number of
  


  
    
      7:54:51
    
  
  
  pages that would give me 395 that's 223 + 172 heck I'll even put
  


  
    
      7:54:58
    
  
  
  this within an F string cuz why
  


  
    
      7:55:06
    
  
  
  not then I will add the word Pages 395
  


  
    
      7:55:13
    
  
  
  Pages within an object we can search for a keyword within one of the attributes
  


  
    
      7:55:19
    
  
  
  so let's find the word the lion within book three to do that I would write a statement like this Lion in book
  


  
    
      7:55:29
    
  
  
  three type error argument of type book is not
  


  
    
      7:55:35
    
  
  
  iterable we will Define Dunder
  


  
    
      7:55:40
    
  
  
  contains besides self we will pass in a keyword a keyword that we're searching
  


  
    
      7:55:47
    
  
  
  for I will return then we'll use the in membership operator is our keyword in
  


  
    
      7:55:55
    
  
  
  self. tile I'm looking for the word lion that's going to return true if lion is
  


  
    
      7:56:02
    
  
  
  in the title of this book or is our keyword in self. author maybe we're
  


  
    
      7:56:09
    
  
  
  searching for an author let's try that again that returns true lion is in book
  


  
    
      7:56:17
    
  
  
  three however lion is not within book one that's
  


  
    
      7:56:23
    
  
  
  false is rolling in book two that's the author
  


  
    
      7:56:29
    
  
  
  that is true is rolling in book three that is
  


  
    
      7:56:34
    
  
  
  false that is dund contains we are searching for a keyword in an
  


  
    
      7:56:41
    
  
  
  object now we could search for a key given an object for book one we'll use
  


  
    
      7:56:47
    
  
  
  the index operator and look up an attribute let's get the title of book
  


  
    
      7:56:54
    
  
  
  one the default behavior is that we get a type error book object is not
  


  
    
      7:57:01
    
  
  
  subscriptable so to customize this Behavior we will use dund get
  


  
    
      7:57:09
    
  
  
  item besides self we have one parameter of key we're accessing book attributes
  


  
    
      7:57:16
    
  
  
  by indexing with this object return the value at this key what's that
  


  
    
      7:57:22
    
  
  
  attribute we will check if our key that we receive
  


  
    
      7:57:28
    
  
  
  is equal to title which it is in this case we will return self. tile What's
  


  
    
      7:57:35
    
  
  
  the title of the book so that would give me The Hobbit
  


  
    
      7:57:41
    
  
  
  here's book two and book three what if the key is
  


  
    
      7:57:49
    
  
  
  author none we didn't set that up yet if key is equal to author
  


  
    
      7:57:59
    
  
  
  then return self. author the author of book three is CS
  


  
    
      7:58:07
    
  
  
  Lewis two is JK Rowling book one is JRR
  


  
    
      7:58:14
    
  
  
  tolken what about number of pages num Pages well we're not set up for that
  


  
    
      7:58:22
    
  
  
  yet I'm going to turn this into an El if statement else if
  


  
    
      7:58:28
    
  
  
  key is equal to num Pages then we will return self.
  


  
    
      7:58:38
    
  
  
  num Pages the number of pages in book one is
  


  
    
      7:58:44
    
  
  
  310 book two is 223 book three is
  


  
    
      7:58:50
    
  
  
  172 what if there is no key otherwise if there is no matching key I'll add an L
  


  
    
      7:58:56
    
  
  
  statement let let's return an F string key
  


  
    
      7:59:03
    
  
  
  placeholder our key that we pass in as an argument was not
  


  
    
      7:59:09
    
  
  
  found what do books not have well they don't have audio I guess unless it's an
  


  
    
      7:59:15
    
  
  
  audio book is there a key of audio in book three there is not key audio was
  


  
    
      7:59:22
    
  
  
  not found and I'll place that within single quotes
  


  
    
      7:59:28
    
  
  
  much better all right everybody so those are magic methods also known as Thunder
  


  
    
      7:59:33
    
  
  
  methods meaning double underscore they are automatically called by many of Python's built-in operations they allow
  


  
    
      7:59:40
    
  
  
  developers to define or customize the behavior of objects when we use those
  


  
    
      7:59:45
    
  
  
  built-in operations and well everybody those are magic methods in Python hey
  


  
    
  56.property ⚙️



  
    
      7:59:51
    
  
  
  everybody so in today's video I got to talk about the property decorator in Python the property decorator allows us
  


  
    
      7:59:57
    
  
  
  to Define a method as a property we can access it like it's an attribute one of
  


  
    
      8:00:02
    
  
  
  the benefits is that when Reading Writing or deleting attributes we can add additional Logic the property
  


  
    
      8:00:09
    
  
  
  decorator gives us a getter method to read a Setter method to write and a deleter method to delete when working
  


  
    
      8:00:16
    
  
  
  with attributes in this example we'll create a class of rectangle we need a Constructor let's
  


  
    
      8:00:23
    
  
  
  define that when constructing a rectangle object we will need a width and a
  


  
    
      8:00:30
    
  
  
  height we will assign the attribute of width equal to the width that we receive
  


  
    
      8:00:36
    
  
  
  when constructing this object self. height equals
  


  
    
      8:00:42
    
  
  
  height let's construct a rectangle object rectangle equals
  


  
    
      8:00:48
    
  
  
  rectangle we need to pass in a width and a height then I will print my rectangles
  


  
    
      8:00:55
    
  
  
  width rectangle. width and the height rectangle.
  


  
    
      8:01:02
    
  
  
  height with my rectangle the width is three the height is four using the property decorator when reading these
  


  
    
      8:01:09
    
  
  
  attributes of width or height I can write some additional logic let's say that when accessing the width or the
  


  
    
      8:01:15
    
  
  
  height I would like to display one digit after the decimal then add centimeters
  


  
    
      8:01:21
    
  
  
  here's one way in which I can do that for each of these attributes I'm going to create a method we will Define a
  


  
    
      8:01:27
    
  
  
  method of width no parameters besid self for now I'll write
  


  
    
      8:01:33
    
  
  
  pass and Define height preceding each of these methods I
  


  
    
      8:01:39
    
  
  
  will use the property decorator so at
  


  
    
      8:01:45
    
  
  
  property now when accessing the width or the height will be returned with whatever is Within These methods of
  


  
    
      8:01:51
    
  
  
  width and height but there's one change we're going to make to these attributes we'll set these attributes to be private
  


  
    
      8:01:58
    
  
  
  prefix each of these attributes with an underscore this tells you and other
  


  
    
      8:02:04
    
  
  
  developers that these attributes they're meant to be protected they're internal we shouldn't access the width or the
  


  
    
      8:02:10
    
  
  
  height directly outside of this class technically we could I will access the
  


  
    
      8:02:16
    
  
  
  internal version of width and height we get three and four but we do have a warning access to a protected
  


  
    
      8:02:23
    
  
  
  member width of a class that applies to height as well our width and our height
  


  
    
      8:02:28
    
  
  
  are only meant to be used inside of this class if we need to get the width and the height we will do so through these
  


  
    
      8:02:35
    
  
  
  getter methods provided by the property decorator so when accessing the width
  


  
    
      8:02:40
    
  
  
  let's return an F string I will access
  


  
    
      8:02:46
    
  
  
  self. private width add a format specifier to display one digit after the
  


  
    
      8:02:53
    
  
  
  decimal. 1f followed by centim we'll do this with the height as
  


  
    
      8:02:59
    
  
  
  well we will return self. private
  


  
    
      8:03:05
    
  
  
  height so now when we access the width or the height we will do so using these getter
  


  
    
      8:03:12
    
  
  
  methods if I access these private width and height attributes
  


  
    
      8:03:18
    
  
  
  instead again they will be three and four it's kind of like their raw these
  


  
    
      8:03:24
    
  
  
  attributes are meant to be used internally inside of the class so that that's the point of a getter method we
  


  
    
      8:03:29
    
  
  
  can add additional logic when reading one of these attributes when we try to get them we can also add Setter methods
  


  
    
      8:03:37
    
  
  
  if we would like to set or write these attributes here's how let's take our
  


  
    
      8:03:42
    
  
  
  width we will create a decorator of at width. Setter when attempting to set the width
  


  
    
      8:03:50
    
  
  
  we will do so using this method we will Define our method name of width we will have one parameter a new width we don't
  


  
    
      8:03:58
    
  
  
  want the parameter name to be the same as the method name that's why we're naming it something
  


  
    
      8:04:04
    
  
  
  different when setting the width let's check to see if the new width is greater
  


  
    
      8:04:10
    
  
  
  than zero if so we will take self. private
  


  
    
      8:04:15
    
  
  
  width equals our new width else let's print something let's
  


  
    
      8:04:24
    
  
  
  print width must be greater than
  


  
    
      8:04:31
    
  
  
  zero and let's do this with the
  


  
    
      8:04:36
    
  
  
  height height. Setter Define height pass in a
  


  
    
      8:04:43
    
  
  
  new height if our new height is greater than zero assign self. private height
  


  
    
      8:04:51
    
  
  
  equals the new height else print height must be greater than zero
  


  
    
      8:04:59
    
  
  
  before printing the width and the height let's take our rectangle width set it to be zero then
  


  
    
      8:05:05
    
  
  
  see what happens well we get that message width must be greater than zero if I were to
  


  
    
      8:05:13
    
  
  
  set width to be five well that does work our width is now five let's change the
  


  
    
      8:05:20
    
  
  
  height rectangle. height I will set this to be Nega 1
  


  
    
      8:05:27
    
  
  
  height must be greater than zero and the height hasn't changed what about six six does
  


  
    
      8:05:34
    
  
  
  work when using these Setter methods we can add additional logic when writing or
  


  
    
      8:05:40
    
  
  
  changing one of these attributes these are Setter methods now if you need to delete an
  


  
    
      8:05:46
    
  
  
  attribute here's how there is a delete keyword we will
  


  
    
      8:05:52
    
  
  
  delete our rectangle's width and delete our rectangle's height
  


  
    
      8:05:57
    
  
  
  in this series we really won't be using the delete keyword but you should still know that it exists so we will create a deleter
  


  
    
      8:06:05
    
  
  
  method at take one of the attributes in this example with we will create a
  


  
    
      8:06:11
    
  
  
  deleter method the method name will be width the name of the
  


  
    
      8:06:17
    
  
  
  attribute there will be no parameters besid self we will delete
  


  
    
      8:06:24
    
  
  
  self. private width then let's print something just to confirm that this was
  


  
    
      8:06:31
    
  
  
  deleted width has been deleted same thing applies to
  


  
    
      8:06:38
    
  
  
  height take the attribute of height Define
  


  
    
      8:06:44
    
  
  
  height delete private height height has been
  


  
    
      8:06:54
    
  
  
  deleted when deleting our width or our height we get that confirmation message
  


  
    
      8:06:59
    
  
  
  width has been deleted and height has been deleted all right everybody so that is the property decorator we can define a
  


  
    
      8:07:07
    
  
  
  method as a property meaning it can be accessed as if it was an attribute one
  


  
    
      8:07:12
    
  
  
  of the benefits is that we can add additional logic when we read write or delete attributes the property decorator
  


  
    
      8:07:20
    
  
  
  gives us a getter Setter and deleter method getter methods to read Setter
  


  
    
      8:07:25
    
  
  
  methods to write and delete methods to delete and well everybody that is the
  


  
    
      8:07:30
    
  
  
  property decorator in Python what is going on everybody so today I got to talk about decorators in
  


  
    
  57.decorators



  
    
      8:07:37
    
  
  
  Python a decorator is a function that extends the behavior of another function
  


  
    
      8:07:43
    
  
  
  without modifying That Base function we pass the base function as an argument to The Decorator function for example let's
  


  
    
      8:07:50
    
  
  
  say we have a base function of get ice cream and you can pass in a flavor of ice cream well some people might want
  


  
    
      8:07:56
    
  
  
  sprinkles on their ice cream and others may not they might just want plain vanilla well we could add sprinkles by
  


  
    
      8:08:02
    
  
  
  using a decorator we're extending the behavior of a function where we get ice cream where we're adding sprinkles but
  


  
    
      8:08:09
    
  
  
  we may not want to change the base function because some people don't like sprinkles think of decorators that way
  


  
    
      8:08:14
    
  
  
  we're adding something to a base function without changing it here's how to create a decorator let's start with
  


  
    
      8:08:20
    
  
  
  the base function we will create a function to get ice cream there will be
  


  
    
      8:08:26
    
  
  
  no parameters for now all we're going to do is print the following
  


  
    
      8:08:32
    
  
  
  message here is your ice cream and for fun I'll add an emoji because I like
  


  
    
      8:08:39
    
  
  
  emojis I'll add an ice cream Emoji to call this function all I got to do is
  


  
    
      8:08:45
    
  
  
  call the get ice cream function here is your ice cream here's
  


  
    
      8:08:50
    
  
  
  how to create a decorator a decorator is a function
  


  
    
      8:08:55
    
  
  
  we'll need to define it Define add sprinkles our decorator function is
  


  
    
      8:09:02
    
  
  
  going to have one parameter a function but we'll just rename it to Funk for
  


  
    
      8:09:08
    
  
  
  short we're going to pass a function to our decorator
  


  
    
      8:09:13
    
  
  
  function within our decorator function we will define an inner function of
  


  
    
      8:09:19
    
  
  
  wrapper currently there's no parameters we'll set that up later within this wrapper function we
  


  
    
      8:09:26
    
  
  
  will call the function that we receive this parameter then we will return our
  


  
    
      8:09:34
    
  
  
  wrapper function up until this point we've been returning values but now we're going to return an entire function
  


  
    
      8:09:41
    
  
  
  here's the basic formula to create a decorator to apply a decorator to a base function preceding that function you're
  


  
    
      8:09:49
    
  
  
  going to add at the name of The Decorator so add sprinkles is a decorator the base function is get ice
  


  
    
      8:09:57
    
  
  
  cream within our decorator how do we want to add sprinkles exactly currently our
  


  
    
      8:10:03
    
  
  
  decorator doesn't do anything here's what happens we just print here is your
  


  
    
      8:10:08
    
  
  
  ice cream let's say that before we're given our ice cream we'll print a statement that we add
  


  
    
      8:10:14
    
  
  
  sprinkles within our decorator imagine that we're replacing calling function
  


  
    
      8:10:20
    
  
  
  with this print statement let's create another print statement where we add sprinkles before
  


  
    
      8:10:26
    
  
  
  it I will print the following
  


  
    
      8:10:33
    
  
  
  message you add sprinkles and I'll add an emoji how about
  


  
    
      8:10:40
    
  
  
  confetti that could resemble sprinkles okay let's see what
  


  
    
      8:10:45
    
  
  
  happens you add sprinkles here is your ice cream we're decorating our base function
  


  
    
      8:10:52
    
  
  
  of get ice cream with a decorator of AD sprinkles where're not modifying the
  


  
    
      8:10:58
    
  
  
  base function we're extending it now we have a nested function of wrapper within
  


  
    
      8:11:03
    
  
  
  our decorator it is necessary to have this here's why so I'm not going to call
  


  
    
      8:11:08
    
  
  
  the get ice cream function quite yet so nothing should
  


  
    
      8:11:13
    
  
  
  happen if I was to remove this
  


  
    
      8:11:21
    
  
  
  wrapper well we'll end up calling this function as soon as we apply The Decorator we're not even calling
  


  
    
      8:11:27
    
  
  
  following the get ice cream function at all we only want to execute this code when we want ice cream not whenever we
  


  
    
      8:11:34
    
  
  
  apply The Decorator that's why we need that wrapper
  


  
    
      8:11:40
    
  
  
  function we'll get ice cream and add sprinkles only when we call that
  


  
    
      8:11:46
    
  
  
  function then at any point in my program if I call the get ice cream
  


  
    
      8:11:52
    
  
  
  function then we get ice cream with sprinkles let's apply more than one
  


  
    
      8:11:58
    
  
  
  decorator we'll create a decorator to add fudge Define add
  


  
    
      8:12:05
    
  
  
  fudge we have one parameter a function which we will rename as Funk we need an
  


  
    
      8:12:11
    
  
  
  inner rapper function this is so that we don't call this function when we apply a
  


  
    
      8:12:18
    
  
  
  decorator I will print you add fudge
  


  
    
      8:12:30
    
  
  
  close enough we'll add a bar of chocolate then call the base function
  


  
    
      8:12:36
    
  
  
  that we receive then we need to return the wrapper function all right given our base
  


  
    
      8:12:43
    
  
  
  function we can apply more than one decorator let's say that after adding
  


  
    
      8:12:48
    
  
  
  sprinkles we will apply The Decorator where we add fudge so
  


  
    
      8:12:54
    
  
  
  now we have the following output you add sprinkles you add fudge here is
  


  
    
      8:13:00
    
  
  
  your ice cream so with decorators you can apply more than one decorator to a base
  


  
    
      8:13:06
    
  
  
  function what if your base function accepts Arguments for example when we get our ice cream we need to pass in a
  


  
    
      8:13:13
    
  
  
  flavor like vanilla I will set up one parameter of
  


  
    
      8:13:19
    
  
  
  flavor I will convert our print statement to be an F string here is your
  


  
    
      8:13:25
    
  
  
  add a placeholder flavor of ice cream let's run this and
  


  
    
      8:13:31
    
  
  
  see what happens all right we have a type
  


  
    
      8:13:36
    
  
  
  air our wrapper function isn't set up to accept arguments what you'll see within
  


  
    
      8:13:41
    
  
  
  wrapper functions is that they'll have parameters of args and quars to accept any number of
  


  
    
      8:13:48
    
  
  
  arguments and keyword arguments then when you call your base
  


  
    
      8:13:53
    
  
  
  function in this case get ice cream we we will also set this up to accept any
  


  
    
      8:13:58
    
  
  
  number of arguments and keyword arguments let's do that within our ad fudge decorator too our wrapper function
  


  
    
      8:14:06
    
  
  
  will accept any number of arguments and keyword arguments same thing goes with the base function and now this should
  


  
    
      8:14:13
    
  
  
  work you add sprinkles you add fudge here is your vanilla ice
  


  
    
      8:14:19
    
  
  
  cream or any other flavor of your choosing like
  


  
    
      8:14:24
    
  
  
  chocolate you add sprinkles you add fudge here is your chocolate ice cream
  


  
    
      8:14:30
    
  
  
  all right everybody so those are decorators they're a function that extends the behavior of a base function
  


  
    
      8:14:37
    
  
  
  in this case get ice cream decorators extend a function without modifying it
  


  
    
      8:14:42
    
  
  
  if you would like to apply a decorator to a function you precede that function when you define it with at the name of
  


  
    
      8:14:49
    
  
  
  The Decorator and you can apply more than one and well everybody that is an introduction to decorators in Python
  


  
    
  58.exception handling



  
    
      8:14:57
    
  
  
  hey everybody so today I got to talk about exception handling in Python an exception is an event that interrupts
  


  
    
      8:15:04
    
  
  
  the normal flow of a program there are many different types of exceptions which include but are not limited to zero
  


  
    
      8:15:10
    
  
  
  division error exceptions when you attempt to divide a number by zero for example 1 divided 0 that would interrupt
  


  
    
      8:15:18
    
  
  
  our program we have a zero division error another is a type error that's if we attempt to perform an operation of a
  


  
    
      8:15:25
    
  
  
  value that's of the wrong data type for example 1 plus a string of one that would give us a type error
  


  
    
      8:15:33
    
  
  
  unsupported operand for INT and string value errors tend to happen when you
  


  
    
      8:15:38
    
  
  
  attempt to typ cast a value of the wrong data type so let's say we attempt to type cast the word Pizza as an
  


  
    
      8:15:47
    
  
  
  integer well Pizza isn't a number we have a value error invalid literal for
  


  
    
      8:15:52
    
  
  
  INT base with 10 pizza so exceptions will interrupt our program if they're
  


  
    
      8:15:57
    
  
  
  not handled gracefully and here's how we can do that there's three steps we can
  


  
    
      8:16:03
    
  
  
  write a try accept and finally block any code that's dangerous where it could
  


  
    
      8:16:09
    
  
  
  cause an error you'll place within a tri block for example anytime we accept user input that is considered dangerous code
  


  
    
      8:16:17
    
  
  
  because a user can type in anything so let's say we have a number number equals
  


  
    
      8:16:23
    
  
  
  we will accept some user input we will tell a user to enter a
  


  
    
      8:16:29
    
  
  
  number then we're going to typ cast it as an
  


  
    
      8:16:34
    
  
  
  integer then I'm going to print 1 divided by whatever the user types
  


  
    
      8:16:41
    
  
  
  in if I were to type in zero we get a zero division error if I type in the word Pizza we get
  


  
    
      8:16:49
    
  
  
  a value error we would like to prevent our program from stopping this code is
  


  
    
      8:16:54
    
  
  
  considered dangerous a user can really type in anything so we're going to surround this code within a tri
  


  
    
      8:17:01
    
  
  
  block we'll type try colon and then indent any code underneath it we're
  


  
    
      8:17:08
    
  
  
  going to try this code if an exception happens we will move on to step two
  


  
    
      8:17:13
    
  
  
  subsequently following the tri block we will add an accept block if we run into one of these
  


  
    
      8:17:21
    
  
  
  exceptions we can execute some alternative code for example a zero division error if somebody attempts to
  


  
    
      8:17:28
    
  
  
  divide a number by zero we can take a different course of action instead of our program crashing and coming to a
  


  
    
      8:17:35
    
  
  
  halt let's print you can't divide by
  


  
    
      8:17:43
    
  
  
  zero idiot let's attempt to divide by zero enter a number zero you can't divide by
  


  
    
      8:17:51
    
  
  
  zero idiot we have gracefully handled this exception so now let's say somebody
  


  
    
      8:17:57
    
  
  
  types in the word Pizza when we're asking for a number well we have a value error well we can chain accept blocks if
  


  
    
      8:18:05
    
  
  
  we encounter a value error let's add an accept block for that
  


  
    
      8:18:11
    
  
  
  accept value error we're going to
  


  
    
      8:18:16
    
  
  
  print enter only numbers
  


  
    
      8:18:22
    
  
  
  please enter a number I'll type in the word Pizza enter only numbers please
  


  
    
      8:18:28
    
  
  
  that's good we're not interrupting our program now what you may see some people do is they will just catch all
  


  
    
      8:18:35
    
  
  
  exceptions accept exception now this is actually
  


  
    
      8:18:40
    
  
  
  considered bad practice exception will catch all exceptions however it's too
  


  
    
      8:18:46
    
  
  
  broad of a clause it's good practice to tell the user what went wrong exactly if we
  


  
    
      8:18:52
    
  
  
  resort to just catching all exceptions you may see an error message such such as something went wrong I'm looking at
  


  
    
      8:19:01
    
  
  
  you Microsoft we want to tell the user what went wrong exactly I would only
  


  
    
      8:19:06
    
  
  
  catch all exceptions as a last resort first let's try and tell the user what went wrong
  


  
    
      8:19:12
    
  
  
  exactly so I'm going to undo all this code if there's an exception that occurs
  


  
    
      8:19:19
    
  
  
  it's not a zero division error and it's not a value error then we can add that catch all where we catch any unseen
  


  
    
      8:19:26
    
  
  
  except itions now lastly we have the finally block the finally block always executes
  


  
    
      8:19:33
    
  
  
  regardless if there's an exception or not it's usually used for any sort of cleanup that you need to do such as if
  


  
    
      8:19:40
    
  
  
  you're handling files you may try and open a file and then you'll want to be sure to close that file when you're done
  


  
    
      8:19:46
    
  
  
  with it that would be handled within the finally block but we'll get to file handling pretty soon in the next topic
  


  
    
      8:19:53
    
  
  
  so just for the time being I'm going to print do some cleanup
  


  
    
      8:20:00
    
  
  
  here all right let's test this enter a number I'm going to divide by zero you
  


  
    
      8:20:07
    
  
  
  can't divide by zero and we still execute the finally block enter a number I'll enter in
  


  
    
      8:20:14
    
  
  
  one 1 / 1 is 1 and we still execute that finally block the finally block will be
  


  
    
      8:20:22
    
  
  
  more useful in future videos all you need to know is that it always executes regardless if there's an exception or
  


  
    
      8:20:28
    
  
  
  not all right everybody so that's exception handling an exception is an event that interrupts the normal flow of
  


  
    
      8:20:34
    
  
  
  a program there are many different types of exceptions you can always look under the official python documentation for an
  


  
    
      8:20:40
    
  
  
  extensive list and well everybody that's exception handling in Python hey what's going on everybody
  


  
    
  59.file detection 🕵️‍♂️



  
    
      8:20:47
    
  
  
  today I'm going to show you how we can handle a basic file detection using python this topic is the first of many
  


  
    
      8:20:53
    
  
  
  involving a minseries on file handling using python first we'll need to cover file detection before we read and write
  


  
    
      8:21:00
    
  
  
  files to work with files using python we will import the OS module OS means
  


  
    
      8:21:06
    
  
  
  operating system this module provides a way for python programs to interact with the operating system be sure to import
  


  
    
      8:21:13
    
  
  
  the OS module at the top for my demonstration within my project folder
  


  
    
      8:21:19
    
  
  
  I'm going to create a new file new file I will name this file test and this will
  


  
    
      8:21:25
    
  
  
  be a plain text file it will have the file extension of txt this file really doesn't need to say
  


  
    
      8:21:32
    
  
  
  anything I'm just going to type I like pizza because I do the context doesn't matter we're not
  


  
    
      8:21:39
    
  
  
  going to be reading files in this video for convenience I'm going to assign a variable of file
  


  
    
      8:21:45
    
  
  
  path this will be a string for file detection we can either use a relative
  


  
    
      8:21:51
    
  
  
  file path or an absolute file path we'll cover relative file paths first these
  


  
    
      8:21:57
    
  
  
  two files are right next to each other my main python file and my test file if
  


  
    
      8:22:02
    
  
  
  we're using a relative file path I only need the file name including the extension test.txt
  


  
    
      8:22:09
    
  
  
  we'll be passing in the string of file path as an argument to check to see if
  


  
    
      8:22:15
    
  
  
  this file exists I will use an if statement if access the OS
  


  
    
      8:22:20
    
  
  
  module access the path there is a built-in method of exists
  


  
    
      8:22:28
    
  
  
  we'll pass in our file path as the argument this method returns a Boolean
  


  
    
      8:22:33
    
  
  
  value of true or false if this file exists so if this file does exist
  


  
    
      8:22:40
    
  
  
  test.txt let's print the following I'll use an F
  


  
    
      8:22:46
    
  
  
  string the location I'll add a placeholder
  


  
    
      8:22:53
    
  
  
  exists I will place my file path within that place holder and I'll surround it
  


  
    
      8:22:59
    
  
  
  with single quotes to make it look nice if this method returns true do
  


  
    
      8:23:05
    
  
  
  this else we'll do something else I will print that
  


  
    
      8:23:12
    
  
  
  location doesn't exist all right let's see what
  


  
    
      8:23:19
    
  
  
  happens the location test.txt exists now what if I get the extension
  


  
    
      8:23:25
    
  
  
  wrong let's say that I'm looking for a PDF but it's really a txt
  


  
    
      8:23:31
    
  
  
  file well that location doesn't exist you do have to be sure to get the file
  


  
    
      8:23:36
    
  
  
  extension correct what if this file was in a
  


  
    
      8:23:41
    
  
  
  folder within my python project I will create a new directory I will name this directory
  


  
    
      8:23:49
    
  
  
  stuff then I will place my test file within the stuff folder pycharm wants me to refactor my
  


  
    
      8:23:56
    
  
  
  code because the location changed I'm not going to do that I'm going to be sure that this box is unchecked and
  


  
    
      8:24:03
    
  
  
  press refactor we're using a relative file path that test file is no longer
  


  
    
      8:24:08
    
  
  
  next to my main python file here's what happens that location doesn't
  


  
    
      8:24:14
    
  
  
  exist with our relative file path we'll have to navigate to our stuff folder
  


  
    
      8:24:19
    
  
  
  then find the test file so preing this file name I will access the stuff folder
  


  
    
      8:24:26
    
  
  
  stuff slash the name of the file test.txt and now we can locate that file the
  


  
    
      8:24:33
    
  
  
  location stuff SL test exists when working with relative file paths you may
  


  
    
      8:24:40
    
  
  
  need to open up a folder then find your file you also could work with absolute
  


  
    
      8:24:45
    
  
  
  file paths so for this demonstration on my desktop I'm going to create a new
  


  
    
      8:24:51
    
  
  
  file new text document text
  


  
    
      8:24:58
    
  
  
  test if I were to look at the properties this is a txt file a text
  


  
    
      8:25:04
    
  
  
  document I'm going to copy the location within my file path I will
  


  
    
      8:25:11
    
  
  
  paste it then list the name of the file test.txt
  


  
    
      8:25:17
    
  
  
  this is an absolute file path one problem we're running into when working
  


  
    
      8:25:22
    
  
  
  with strings a backs slash does serve as an escape sequence on python thinks
  


  
    
      8:25:27
    
  
  
  we're trying to print a tab character we can solve this with double backs
  


  
    
      8:25:33
    
  
  
  slashes or we could use a forward slash either one works all right let's
  


  
    
      8:25:40
    
  
  
  see if that file exists that does the location of that absolute file
  


  
    
      8:25:46
    
  
  
  path does exist if I were to get the extension wrong let's say this is a
  


  
    
      8:25:54
    
  
  
  PDF well that location doesn't exist there is a built-in method of is
  


  
    
      8:26:00
    
  
  
  file to check to see if that file is in fact a file and not a directory let's add the
  


  
    
      8:26:07
    
  
  
  following after we detect this file we'll write a Nesta if statement if
  


  
    
      8:26:13
    
  
  
  os. path. is
  


  
    
      8:26:18
    
  
  
  file then passing our file path as an argument if this file is in fact a file
  


  
    
      8:26:25
    
  
  
  and not a directory I will print that is a
  


  
    
      8:26:32
    
  
  
  file the location of that absolute file path does exist that is a file what if
  


  
    
      8:26:39
    
  
  
  it was a directory a folder I'm going to delete this go to
  


  
    
      8:26:45
    
  
  
  new folder I will name this folder
  


  
    
      8:26:50
    
  
  
  test to check to see if a location is a directory let's add an LF statement else
  


  
    
      8:26:56
    
  
  
  if os. paath do iser meaning is
  


  
    
      8:27:03
    
  
  
  directory this is a method we'll pass in our file path if this is a directory a
  


  
    
      8:27:10
    
  
  
  folder I will print that is a
  


  
    
      8:27:16
    
  
  
  directory let's run this again that location doesn't exist oh we have to get
  


  
    
      8:27:21
    
  
  
  rid of the file extension it is not a plain text file
  


  
    
      8:27:29
    
  
  
  the location of that absolute file path exists that is a directory a
  


  
    
      8:27:35
    
  
  
  folder all right everybody that's basic file detection in the next few videos
  


  
    
      8:27:40
    
  
  
  we're going to be reading and writing files and well everybody that is basic file detection using python hey what's
  


  
    
  60.writing files



  
    
      8:27:47
    
  
  
  going on everybody in today's video I'm going to show you how we can write and output files using python we'll cover
  


  
    
      8:27:53
    
  
  
  plain text Json and CSV v files but we'll start with plain text because it's
  


  
    
      8:27:59
    
  
  
  the easiest suppose we have some data that we would like to Output I'll create a variable of text
  


  
    
      8:28:05
    
  
  
  Data think of a food you like I will output I like
  


  
    
      8:28:11
    
  
  
  pizza for convenience we'll create a variable a file path this can be a
  


  
    
      8:28:16
    
  
  
  relative file path or an absolute file path within this file path we'll need a name for this file I will name this
  


  
    
      8:28:24
    
  
  
  output then include the file extension this will be a txt file a plain text
  


  
    
      8:28:30
    
  
  
  file this is a relative file path when I generate this file it will be within the same project folder as my main python
  


  
    
      8:28:38
    
  
  
  file to create a file we'll write the following with open
  


  
    
      8:28:45
    
  
  
  function pass in our file path and a character of w to write as
  


  
    
      8:28:53
    
  
  
  file and for now I'll write pass there's a few things going on here with is a
  


  
    
      8:28:59
    
  
  
  statement it's used to wrap a block of code to execute if we open a file the
  


  
    
      8:29:05
    
  
  
  width statement will also close that file when we're done with it so we don't need to manually close files when you
  


  
    
      8:29:11
    
  
  
  open a file it is good practice to close it because if you don't you may run into unexpected Behavior the width statement
  


  
    
      8:29:18
    
  
  
  takes care of that for you the open function will return a file object the
  


  
    
      8:29:24
    
  
  
  first parameter is the file path the second parameter is the mode w Is Write
  


  
    
      8:29:29
    
  
  
  X will also write if this file doesn't exist if it already does exist we'll
  


  
    
      8:29:35
    
  
  
  receive an error A is for append to append a file and R is to read but we'll
  


  
    
      8:29:40
    
  
  
  take care of reading in the next video so we will stick with W to write a file
  


  
    
      8:29:45
    
  
  
  the open function returns a file object the first argument is the
  


  
    
      8:29:51
    
  
  
  file the second argument is the mode you can set these to be key word arguments
  


  
    
      8:29:56
    
  
  
  if it's easier for you to read when the open function returns a file object for us we're using the as
  


  
    
      8:30:04
    
  
  
  keyword to give it a name as file it's kind of like we're instantiating a file
  


  
    
      8:30:09
    
  
  
  object file equals file file is the name of the file object to write to this file
  


  
    
      8:30:16
    
  
  
  we're going to take our file object use the built-in write method then pass in
  


  
    
      8:30:22
    
  
  
  our text Data then when this is done I'm going to print a confirmation
  


  
    
      8:30:28
    
  
  
  message I'll use an F string let's say text
  


  
    
      8:30:33
    
  
  
  file I'll add our file path place it within single
  


  
    
      8:30:39
    
  
  
  quotes was created let's see what
  


  
    
      8:30:44
    
  
  
  happens text file output.txt was created and here's that
  


  
    
      8:30:51
    
  
  
  file I like pizza we also have the capability ability of setting an absolute file path
  


  
    
      8:30:58
    
  
  
  let's say I would like to Output this file to my desktop I would just need that location let me just get the
  


  
    
      8:31:04
    
  
  
  location from one of these folders by going to properties I will copy this location
  


  
    
      8:31:10
    
  
  
  this is the location to my desktop but for you it's probably going to be different then I will paste the
  


  
    
      8:31:17
    
  
  
  absolute file path a backs slash is an escape sequence within a string we
  


  
    
      8:31:23
    
  
  
  either could use double backs slashes or a forward
  


  
    
      8:31:31
    
  
  
  slash now let's see if this outputs to my desktop text file here's the file path
  


  
    
      8:31:39
    
  
  
  was created and here's that file it's a plain text file and it
  


  
    
      8:31:46
    
  
  
  says I like pizza so when working with the file path
  


  
    
      8:31:53
    
  
  
  it could be a relative file path or an absolute file path all right now for our
  


  
    
      8:31:58
    
  
  
  text Data there are different modes as well W is for write if we use x we'll
  


  
    
      8:32:05
    
  
  
  write a file if that file doesn't already exist in this case it does on my desktop we already have a file named
  


  
    
      8:32:12
    
  
  
  output and it's a plain text file so when I run this with the mod of X we get
  


  
    
      8:32:19
    
  
  
  a file exists error that file already exists we could catch this exception so
  


  
    
      8:32:26
    
  
  
  that our program isn't interrupted I will copy the name of this
  


  
    
      8:32:31
    
  
  
  error I will place my code within a triy block we will try this code and catch
  


  
    
      8:32:37
    
  
  
  any exceptions except file exists error if
  


  
    
      8:32:44
    
  
  
  this file already exists let's take a different course of action let's print
  


  
    
      8:32:50
    
  
  
  that file already exists so now when I run this again our
  


  
    
      8:32:57
    
  
  
  program isn't interrupted we receed this message that file already exists if I
  


  
    
      8:33:04
    
  
  
  were to delete that file bye-bye then run this
  


  
    
      8:33:11
    
  
  
  again well we create a new file text file that absolute file path was created
  


  
    
      8:33:18
    
  
  
  and here it is again now for the mode there's also a a to append any new data will be append to
  


  
    
      8:33:26
    
  
  
  that file we get I like pizza I like pizza
  


  
    
      8:33:33
    
  
  
  when a pending data if you would like that data on a new line we can add a new line character W will overwrite a
  


  
    
      8:33:43
    
  
  
  file so we're back to the original when a pending either before or
  


  
    
      8:33:49
    
  
  
  after we write our Text data we could add a new line character let's say let's
  


  
    
      8:33:54
    
  
  
  do that before new line plus our text Data here's the
  


  
    
      8:34:01
    
  
  
  output again we're appending not writing I like pizza I like pizza our
  


  
    
      8:34:07
    
  
  
  second sentence is on a new line let's run this a couple
  


  
    
      8:34:12
    
  
  
  times we should have several lines
  


  
    
      8:34:17
    
  
  
  now let's work with a collection let's say we have a list of
  


  
    
      8:34:23
    
  
  
  employees we'll pick some employees at the CR crab so we have Eugene I guess he is
  


  
    
      8:34:29
    
  
  
  technically the manager I don't know if that counts as an employee
  


  
    
      8:34:34
    
  
  
  Squidward SpongeBob and Patrick Patrick worked at the K Crusty Crab in one episode he
  


  
    
      8:34:42
    
  
  
  counts then we'll to be sure we're writing our employees this is what's going to
  


  
    
      8:34:49
    
  
  
  happen we have a type error write argument must be a string not a list in
  


  
    
      8:34:55
    
  
  
  order for us to write each item within a list we'll need to iterate over it using some sort of loop we can't write a list
  


  
    
      8:35:03
    
  
  
  or any other collection directly here's what we'll change for
  


  
    
      8:35:08
    
  
  
  every employee in our collection of
  


  
    
      8:35:15
    
  
  
  employees we're iterating over something that is iterable we will access our file object
  


  
    
      8:35:22
    
  
  
  use the write method then write each employee
  


  
    
      8:35:28
    
  
  
  here's the result we get one long string of each
  


  
    
      8:35:34
    
  
  
  item in this list if you prefer after writing each employee we could add a new line
  


  
    
      8:35:41
    
  
  
  character
  


  
    
      8:35:47
    
  
  
  after and here's the output we get each item in our list on a
  


  
    
      8:35:52
    
  
  
  new line or rather than a new line character we could use a
  


  
    
      8:35:57
    
  
  
  space this would output all the employees but space them out now we'll be outputting a Json file
  


  
    
      8:36:05
    
  
  
  in summary a Json file is made of key value pairs for our data let's say we
  


  
    
      8:36:12
    
  
  
  have a dictionary of employee a dictionary is made of key
  


  
    
      8:36:17
    
  
  
  value pairs we'll have a name of
  


  
    
      8:36:22
    
  
  
  SpongeBob SpongeBob's age will be
  


  
    
      8:36:28
    
  
  
  30 his job his position is that he is a
  


  
    
      8:36:34
    
  
  
  cook so this is the data I would like to Output I'll keep the file path the same
  


  
    
      8:36:39
    
  
  
  we'll change the file extension tojson we will need the help of the Json
  


  
    
      8:36:45
    
  
  
  module let's be sure to import that import Json within our width block we'll make
  


  
    
      8:36:52
    
  
  
  the following change we're going to access our Json module use the dump method the dump
  


  
    
      8:37:00
    
  
  
  method will convert our dictionary to a Json string to Output it so we have to
  


  
    
      8:37:06
    
  
  
  pass in our Json data of employee our file as the second
  


  
    
      8:37:13
    
  
  
  argument then for a confirmation message let's print Json file was created here's
  


  
    
      8:37:19
    
  
  
  the result Json file at this location was created
  


  
    
      8:37:26
    
  
  
  and here's my Json file I'll go to properties we'll confirm it is a Json file it is and I'll open
  


  
    
      8:37:34
    
  
  
  it here's the result now you could add indentation after each key value pair here's
  


  
    
      8:37:41
    
  
  
  how after our second argument our file we can pass in a keyword argument of
  


  
    
      8:37:48
    
  
  
  indent for each key value Pair by how many spaces do we want to indent each
  


  
    
      8:37:54
    
  
  
  let's say four and let's take a look I think that's more readable we're
  


  
    
      8:38:01
    
  
  
  indenting each key value Pair by four spaces so that is a Json file it's a
  


  
    
      8:38:08
    
  
  
  collection of key value pairs a dictionary or anything that uses
  


  
    
      8:38:13
    
  
  
  key value pairs is a great candidate to be output to a Json file all right now we're going to work
  


  
    
      8:38:20
    
  
  
  with CSV files CSV means comma separated values C CSV files are pretty common
  


  
    
      8:38:26
    
  
  
  with a spreadsheet of data like an Excel spreadsheet we will create a 2d data structure of
  


  
    
      8:38:34
    
  
  
  employees this will be a list of lists let's add
  


  
    
      8:38:46
    
  
  
  four we'll need the help of the CSV module import
  


  
    
      8:38:52
    
  
  
  CSV think of our 2D data structure as a table of rows and columns so for the
  


  
    
      8:38:58
    
  
  
  first row I will add name comma
  


  
    
      8:39:03
    
  
  
  age comma job the second row will have a name of
  


  
    
      8:39:10
    
  
  
  SpongeBob age 30 job cook for the next
  


  
    
      8:39:15
    
  
  
  row we'll have Patrick Patrick will be
  


  
    
      8:39:22
    
  
  
  37 what is Patrick's job I don't know he's
  


  
    
      8:39:29
    
  
  
  unemployed then we'll have Sandy Sandy will be
  


  
    
      8:39:35
    
  
  
  27 Sandy is a scientist okay now with our file path
  


  
    
      8:39:42
    
  
  
  the file extension is going to be a CSV file comma separated values within the
  


  
    
      8:39:48
    
  
  
  context of our width block we're going to create a writer object to write to a
  


  
    
      8:39:54
    
  
  
  file writer equals access the CSV module use the writer method of that module
  


  
    
      8:40:02
    
  
  
  then pass in our file writer is an object it provides
  


  
    
      8:40:07
    
  
  
  methods for writing data to a CSV file and then we'll print a confirmation
  


  
    
      8:40:13
    
  
  
  message of CSV file was created here's the output
  


  
    
      8:40:19
    
  
  
  currently we have a CSV file I'll go to properties to confirm it
  


  
    
      8:40:26
    
  
  
  well we have no output we have to iterate over all the rows in our 2D
  


  
    
      8:40:32
    
  
  
  collection we'll write the following for every Row in our data of
  


  
    
      8:40:41
    
  
  
  employees we'll take our writer object use the right row method and pass in
  


  
    
      8:40:48
    
  
  
  that row that we're iterating over now let's take a look
  


  
    
      8:40:56
    
  
  
  that's better however the writer method gives us a new line after each
  


  
    
      8:41:02
    
  
  
  row so if we would like to prevent that when we open this file I will set the keyword argument of
  


  
    
      8:41:10
    
  
  
  new line equal to no characters an empty
  


  
    
      8:41:16
    
  
  
  string let's take a look again yeah that's much better so this is
  


  
    
      8:41:22
    
  
  
  a CSV file it's made of Comm separated values all right everybody so that is an
  


  
    
      8:41:29
    
  
  
  introduction to writing files using python what's going on everybody today
  


  
    
  61.reading files



  
    
      8:41:35
    
  
  
  I'm going to show you how we can read files using python we'll cover plain text Json and CSV files in the previous
  


  
    
      8:41:43
    
  
  
  topic we have created some sample files to work with here is my plain text
  


  
    
      8:41:48
    
  
  
  file my Json file and my CSV file they're all named
  


  
    
      8:41:55
    
  
  
  input they each have a different file extension for convenience I will create
  


  
    
      8:42:00
    
  
  
  a variable of file path we can list a relative file path or
  


  
    
      8:42:05
    
  
  
  an absolute file path I'll use an absolute file path I'm going to right click on the file I would like to read
  


  
    
      8:42:12
    
  
  
  go to properties copy the location then paste it then add the file
  


  
    
      8:42:19
    
  
  
  name including the extension input and this is a txt file
  


  
    
      8:42:25
    
  
  
  within the context of a string backs slashes are Escape sequences for special
  


  
    
      8:42:30
    
  
  
  characters we would either need to use double back slashes or a forward
  


  
    
      8:42:36
    
  
  
  slash here is the absolute file path to the file I would like to read to read this file I will add a wi
  


  
    
      8:42:45
    
  
  
  block with is a statement it's going to wrap a block of code within a context
  


  
    
      8:42:50
    
  
  
  manager and it'll close a file if we open it it is good practice to to close a file if you do open it if you don't it
  


  
    
      8:42:57
    
  
  
  can lead to unexpected Behavior we will use the open function the open function
  


  
    
      8:43:03
    
  
  
  has two arguments our file path and a mode to read a file we'll set the mode
  


  
    
      8:43:11
    
  
  
  to be R for read the open function is going to return a file object which we will give
  


  
    
      8:43:18
    
  
  
  a nickname of file as
  


  
    
      8:43:23
    
  
  
  file when we read our file object it's going to return one long string which we
  


  
    
      8:43:29
    
  
  
  will assign to a variable named content content equals file use the read method
  


  
    
      8:43:36
    
  
  
  and assign it to this variable then I'm going to print the content print our content the content of
  


  
    
      8:43:44
    
  
  
  the file here's the result that is the content of my file I
  


  
    
      8:43:50
    
  
  
  like pizza it's really good let's say we can't find this file
  


  
    
      8:43:57
    
  
  
  perhaps I forget the file extension we'll run into a file not
  


  
    
      8:44:02
    
  
  
  found error this will interrupt our program we can catch exceptions when they happen any dangerous code that may
  


  
    
      8:44:09
    
  
  
  cause an exception we can wrap within a tri block if there's an exception we will
  


  
    
      8:44:16
    
  
  
  catch them by stating accept the name of the exception in this case File not
  


  
    
      8:44:22
    
  
  
  found error instead of our program being interrupted let's take a different
  


  
    
      8:44:27
    
  
  
  course of action we will print that file was not found let's try this
  


  
    
      8:44:37
    
  
  
  again that file was not found at least our program isn't being
  


  
    
      8:44:42
    
  
  
  interrupted let's add the file extension back what if we don't have permission to
  


  
    
      8:44:47
    
  
  
  read this file to demonstrate that I'm going to rightclick on that file go to properties
  


  
    
      8:44:55
    
  
  
  go to security edit the permissions I will deny any sort of
  


  
    
      8:45:02
    
  
  
  control I will attempt to read this file and we get a permission error permission
  


  
    
      8:45:07
    
  
  
  denied we could handle this exception as well if we encounter a permission error
  


  
    
      8:45:15
    
  
  
  I will print the following you do not have
  


  
    
      8:45:21
    
  
  
  permission to read that file let's run this again you do not have permission to
  


  
    
      8:45:28
    
  
  
  read that file those are a few exceptions we can handle in case they appear file not
  


  
    
      8:45:34
    
  
  
  found errors and permission errors let's say we would like to read a Json file we
  


  
    
      8:45:40
    
  
  
  will need the help of the Json module I will import the Json module at the top of my
  


  
    
      8:45:46
    
  
  
  program I need to get the file path of this Json file it's pretty much the same as before
  


  
    
      8:45:52
    
  
  
  in this case the file extension is a Json file
  


  
    
      8:46:01
    
  
  
  there's only one change we're going to make we will assign our variable of content equal to access the Json module
  


  
    
      8:46:10
    
  
  
  use the load method and load our file and that should read the contents of my
  


  
    
      8:46:16
    
  
  
  file here's my Json file name SpongeBob age3 job
  


  
    
      8:46:23
    
  
  
  cook with the data of your Json file you could access a value given a key I will
  


  
    
      8:46:30
    
  
  
  access our content by its key of name that will return the value of
  


  
    
      8:46:36
    
  
  
  SpongeBob age 30 job
  


  
    
      8:46:42
    
  
  
  cook now here's how to read a CSV file we will import the CSV
  


  
    
      8:46:48
    
  
  
  module the file extension is going to be CSV again this is on my desktop in the
  


  
    
      8:46:53
    
  
  
  same location as the previous files my content will equal access the CSV
  


  
    
      8:47:00
    
  
  
  module access the reader method and pass in our
  


  
    
      8:47:06
    
  
  
  file here's the content currently we're given a memory
  


  
    
      8:47:11
    
  
  
  address with the CSV file what we need to do is read the CSV file line by line
  


  
    
      8:47:18
    
  
  
  all of the data is within a collection which we need to iterate
  


  
    
      8:47:23
    
  
  
  over so to do that we're going to create a for Loop for every line in my content
  


  
    
      8:47:31
    
  
  
  I will print each line that's much better the format
  


  
    
      8:47:38
    
  
  
  resembles a spreadsheet like an Excel spreadsheet there's
  


  
    
      8:47:44
    
  
  
  rows and columns to get a specified column we can
  


  
    
      8:47:51
    
  
  
  access an index in my example R line at index of zero would give me the First Column name
  


  
    
      8:47:59
    
  
  
  SpongeBob Patrick Sandy the next index would be all the
  


  
    
      8:48:05
    
  
  
  ages of each person 30 35 27 and index two would be the job
  


  
    
      8:48:12
    
  
  
  positions cook unemployed and scientist if you need a specific column
  


  
    
      8:48:19
    
  
  
  of data from a CSV file you can use an index as one possibility all right
  


  
    
      8:48:24
    
  
  
  everybody so those are a few ways in which we can read files using python hey what's going on everybody so
  


  
    
  62.dates & times



  
    
      8:48:31
    
  
  
  in today's video I'm going to show you how we can work with dates and times using python we will import the date
  


  
    
      8:48:38
    
  
  
  time module this allows us to work with dates and times using our system clock
  


  
    
      8:48:43
    
  
  
  our computer's clock this video serves as more of an introduction to create a date object we will assign an object of
  


  
    
      8:48:50
    
  
  
  date let me zoom in a little bit we will access the date time module
  


  
    
      8:48:56
    
  
  
  called the date method within the date method we will pass in the following arguments a year of our choosing so for
  


  
    
      8:49:04
    
  
  
  me I'll say 2025 a month one corresponds to January these are numeric months and
  


  
    
      8:49:11
    
  
  
  a day a day of the month I will say the second if I was to print the state
  


  
    
      8:49:18
    
  
  
  object here's what it outputs the year is 2025 January 2nd
  


  
    
      8:49:26
    
  
  
  to get the date right now let's say today this will return a date object
  


  
    
      8:49:32
    
  
  
  that represents today access the date time module access the class of date then
  


  
    
      8:49:40
    
  
  
  call the today method to return the date of today let's print today currently I'm
  


  
    
      8:49:47
    
  
  
  recording this video July 14th 2024 for me that is the result of my
  


  
    
      8:49:53
    
  
  
  today object when I print it now we'll work with time I will create a Time object access the date time
  


  
    
      8:50:01
    
  
  
  module call the time method we have to pass in hours minutes and then seconds
  


  
    
      8:50:08
    
  
  
  so for the hour let's say 12 30 and 0 seconds I will print the current time it
  


  
    
      8:50:16
    
  
  
  is 12:30 now to get the time right now on
  


  
    
      8:50:21
    
  
  
  our system clock I will create a datetime object of now equals access the
  


  
    
      8:50:28
    
  
  
  datetime module now within the datetime module there is a date time class we have to access we will access that I
  


  
    
      8:50:37
    
  
  
  know it looks kind of silly date time. dat time do the now method so we're
  


  
    
      8:50:44
    
  
  
  accessing the datetime module there's a built-in datetime class we have to access then within that class there's a
  


  
    
      8:50:51
    
  
  
  now method what is the time right now according to my system
  


  
    
      8:50:57
    
  
  
  clock this returns a date and a Time July 14th 2024 it is just after 9:00
  


  
    
      8:51:05
    
  
  
  a.m. we can format the appearance of the string here's how I'm going to reassign our datetime
  


  
    
      8:51:13
    
  
  
  object of now our datetime object has a string
  


  
    
      8:51:19
    
  
  
  format time method stf time we're going
  


  
    
      8:51:24
    
  
  
  to pass in a string and include some format specifiers let's say I would like
  


  
    
      8:51:29
    
  
  
  to display the hour first I'm going to add a percent these format specifiers
  


  
    
      8:51:35
    
  
  
  you can find according to the datetime documentation online so I will display the hours that
  


  
    
      8:51:41
    
  
  
  would be percent H percent M for
  


  
    
      8:51:48
    
  
  
  minutes percent s for seconds let's see what we're working with
  


  
    
      8:51:55
    
  
  
  we have the hours the minutes and the seconds I will separate each of these with the
  


  
    
      8:52:02
    
  
  
  colon that's better now I'll add the date I'll start
  


  
    
      8:52:07
    
  
  
  with the month I will add a format specifier of lowercase
  


  
    
      8:52:13
    
  
  
  M then the day a format specifier of D then the year format specifier capital Y
  


  
    
      8:52:22
    
  
  
  here's the result we have the month the day and the year
  


  
    
      8:52:28
    
  
  
  I'll add a dash to separate these that's better or if you prefer the
  


  
    
      8:52:36
    
  
  
  day first rather than the month we can switch this around it depends on how you read dates
  


  
    
      8:52:42
    
  
  
  in your country now we're going to cover an exercise we're going to see if the current date and time has passed a
  


  
    
      8:52:49
    
  
  
  Target date and time so we are going to create a Target date date time
  


  
    
      8:52:57
    
  
  
  equals access the date time module we will create a new date
  


  
    
      8:53:03
    
  
  
  time so now we have to pass in a date and a time for my date time let's say it's
  


  
    
      8:53:10
    
  
  
  something far into the future like the year 2030 January 2nd for the hour it will be 12 30 and 1
  


  
    
      8:53:21
    
  
  
  second I'm going to get the time right now which I will name current date
  


  
    
      8:53:28
    
  
  
  time equals access the date time module access the date time class call
  


  
    
      8:53:36
    
  
  
  the now method to return the current date and time right now using an if statement I will see if
  


  
    
      8:53:44
    
  
  
  our Target date time is less than the current date
  


  
    
      8:53:51
    
  
  
  time have we already passed this date if our Target date is less than the current
  


  
    
      8:53:57
    
  
  
  date that means this date and time has already passed I will print the
  


  
    
      8:54:02
    
  
  
  following if that's the case Target date has
  


  
    
      8:54:09
    
  
  
  passed else I will
  


  
    
      8:54:15
    
  
  
  print Target date has not
  


  
    
      8:54:21
    
  
  
  passed here's the result Target date has not passed what if I set
  


  
    
      8:54:27
    
  
  
  the target date to the year 2020 well then the target date has
  


  
    
      8:54:33
    
  
  
  passed so that's how we can check to see if a date and time has already passed has it
  


  
    
      8:54:39
    
  
  
  elapsed all right everybody so that is an introduction to working with dates and times using
  


  
    
      8:54:45
    
  
  
  python all right everybody so in today's video we're going to create a working alarm clock using python
  


  
    
  63.alarm clock



  
    
      8:54:58
    
  
  
  for this project we will need the following Imports we will import time
  


  
    
      8:55:03
    
  
  
  we'll be updating our clock every second the time module is going to help us with that as well as import date time the
  


  
    
      8:55:12
    
  
  
  date time module allows us to work with string representations of a time in my opinion the easiest way to work with
  


  
    
      8:55:19
    
  
  
  sound effects is to actually use pame so we will import pame game now you may
  


  
    
      8:55:26
    
  
  
  need to download the pame package here I'm getting a message that there's no module named pame there might be a link
  


  
    
      8:55:32
    
  
  
  to install it even too one way in which you can download the pame package is to
  


  
    
      8:55:38
    
  
  
  open up a terminal then use pip pip is Python's package manager pip install py
  


  
    
      8:55:47
    
  
  
  game all right we have our three Imports let's create a function to set a
  


  
    
      8:55:54
    
  
  
  alarm we have one parameter and alarm time and for now all right
  


  
    
      8:56:02
    
  
  
  pass our alarm time parameter is going to be a string representation of a time
  


  
    
      8:56:08
    
  
  
  in military time I would like to start this program if I running my main python file
  


  
    
      8:56:14
    
  
  
  directly I can add the following if statement if Dunder name is equal to a
  


  
    
      8:56:21
    
  
  
  string of Dunder Main if we are running this main python file
  


  
    
      8:56:26
    
  
  
  directly then we will set the alarm but first we have to prompt the user what they would like to set the alarm too so
  


  
    
      8:56:33
    
  
  
  we will Define a variable of alarm time equals ask for some user input using the
  


  
    
      8:56:40
    
  
  
  input function we will prompt the user to enter the alarm time and give a
  


  
    
      8:56:48
    
  
  
  format hours minutes and seconds again this is going to be in
  


  
    
      8:56:54
    
  
  
  military time once we have our alarm time we will call the set alarm function
  


  
    
      8:57:01
    
  
  
  and pass in our alarm time all right we are now within the set
  


  
    
      8:57:07
    
  
  
  alarm function when we call this function let's print the following I'll use an F
  


  
    
      8:57:13
    
  
  
  string alarm set 4 then include the alarm
  


  
    
      8:57:19
    
  
  
  time you will need an MP3 file to work with if you don't have available here's
  


  
    
      8:57:25
    
  
  
  one recommendation you could use YouTube's audio library and then search for sound
  


  
    
      8:57:31
    
  
  
  effects or some music these audio files are only allowed for non-commercial use
  


  
    
      8:57:36
    
  
  
  outside of YouTube so you can search for a song or some sound effects find one that you
  


  
    
      8:57:42
    
  
  
  like and download it once you find a song that you like move it to your project
  


  
    
      8:57:50
    
  
  
  folder now I will create a variable of sound file equals this will be a
  


  
    
      8:57:57
    
  
  
  relative or absolute file path my MP3 file is right next to my main python
  


  
    
      8:58:02
    
  
  
  file I only need to list the file name I named mine my music and this is an MP3
  


  
    
      8:58:09
    
  
  
  file I'm going to perform a test run we're not going to play our sound quite
  


  
    
      8:58:14
    
  
  
  yet we do have this output that displays that says hello from the pame community
  


  
    
      8:58:19
    
  
  
  let's say I set my alarm to 9:00 a.m. then enter alarm set for 9:00
  


  
    
      8:58:26
    
  
  
  a.m. if you would like to suppress this output for pame we can navigate to our virtual environment go to library pame
  


  
    
      8:58:35
    
  
  
  underneath this file named Dunder init let's scroll all the way to the
  


  
    
      8:58:45
    
  
  
  bottom and we should have this if statement we display the version of P game we're using and a print statement
  


  
    
      8:58:51
    
  
  
  of hello from the pame community we could comment this out or even just delete it that is the most simple
  


  
    
      8:58:59
    
  
  
  solution so we shouldn't get that message anymore we're going to create a Boolean
  


  
    
      8:59:06
    
  
  
  variable of is running is our alarm clock running I will set that to be
  


  
    
      8:59:13
    
  
  
  true while is running while this is true we will continue the alarm
  


  
    
      8:59:20
    
  
  
  clock we need to get the current time current
  


  
    
      8:59:25
    
  
  
  time equals we will access the date time module access the class of date
  


  
    
      8:59:33
    
  
  
  time call the now method to get the time and date right now we could method chain
  


  
    
      8:59:39
    
  
  
  the string format method stf time I would like the hours minutes and
  


  
    
      8:59:46
    
  
  
  seconds but not the date so we will type percent H colon let me zoom out a little
  


  
    
      8:59:54
    
  
  
  little percent M for minutes and percent s for
  


  
    
      9:00:00
    
  
  
  seconds we're getting the hours minutes and seconds of the date and time right
  


  
    
      9:00:06
    
  
  
  now and storing it within this variable of current time then I'm going to print the current
  


  
    
      9:00:15
    
  
  
  time we'll perform a test run however currently we're within an infinite loop
  


  
    
      9:00:20
    
  
  
  at the end of the while loop all set is running to be false
  


  
    
      9:00:27
    
  
  
  okay Enter the alarm time let's say 10:00 a.m. alarm set for 10:00 a.m. and the
  


  
    
      9:00:34
    
  
  
  time for me right now is 9:42 and 16 seconds we'll get rid of this line where
  


  
    
      9:00:40
    
  
  
  we set is running to be false instead I'm going to access the time module and
  


  
    
      9:00:46
    
  
  
  call the Sleep Method we will pass in a number of seconds to sleep so 1
  


  
    
      9:00:52
    
  
  
  second I'll set set the alarm to be 10: a.m. now the time should update every
  


  
    
      9:00:58
    
  
  
  second which it is however when the current time is
  


  
    
      9:01:04
    
  
  
  equal to the alarm time we have to trigger the alarm so after printing the current time
  


  
    
      9:01:13
    
  
  
  we will write an if statement to check if the current time is equal to the
  


  
    
      9:01:19
    
  
  
  alarm time if this is true that let's print
  


  
    
      9:01:24
    
  
  
  the following wake
  


  
    
      9:01:31
    
  
  
  up and I'll add an emoji cuz it's silly once our alarm triggers we will
  


  
    
      9:01:37
    
  
  
  set is running to be false within the if statement let's do a test run we're not
  


  
    
      9:01:43
    
  
  
  going to play the sound quite yet I will set the alarm to
  


  
    
      9:01:50
    
  
  
  9:45 and then I'll come back a little bit later
  


  
    
      9:01:57
    
  
  
  all right once the current time matches the alarm time we print wake up and set is
  


  
    
      9:02:05
    
  
  
  running to be false to exit the while loop and then subsequently exiting the
  


  
    
      9:02:10
    
  
  
  program now we need to play an MP3 file we will access our package of
  


  
    
      9:02:18
    
  
  
  pame access the module of mixer so mix is a module for loading and
  


  
    
      9:02:25
    
  
  
  playing sounds but we have to initialize it but we're going to initialize it with init
  


  
    
      9:02:32
    
  
  
  to initialize the initialize method is another way to call the Constructor we
  


  
    
      9:02:38
    
  
  
  can pass in some keyword arguments for the frequency size channels buffer all
  


  
    
      9:02:43
    
  
  
  that but that might be a little too complicated for us at this level we'll use the default settings by not passing
  


  
    
      9:02:49
    
  
  
  in anything the next step is to load our sound file access the package of pame access the
  


  
    
      9:02:57
    
  
  
  module of mixer access the module of music then
  


  
    
      9:03:03
    
  
  
  call the load method we will load our sound
  


  
    
      9:03:10
    
  
  
  file our sound file contains the file path to our MP3 file once we load our
  


  
    
      9:03:16
    
  
  
  music we have to play it py game.
  


  
    
      9:03:21
    
  
  
  mixer. music called the play Method our MP3 file is only going to
  


  
    
      9:03:28
    
  
  
  play for a brief second I'll demonstrate that I will set the alarm to
  


  
    
      9:03:35
    
  
  
  949 and just give it a few
  


  
    
      9:03:42
    
  
  
  seconds our sound file stops playing when the program terminates what we need
  


  
    
      9:03:48
    
  
  
  to do next is continue playing our sound file while that sound file is BU busy we
  


  
    
      9:03:54
    
  
  
  will add a while loop while access pygame do
  


  
    
      9:04:04
    
  
  
  mixer. music call the get busy
  


  
    
      9:04:09
    
  
  
  method this returns a Boolean if our song is busy if it's
  


  
    
      9:04:14
    
  
  
  still playing then we will call the time modules Sleep Method and sleep for 1
  


  
    
      9:04:21
    
  
  
  second once the song finishes or we terminate the program prematurely
  


  
    
      9:04:27
    
  
  
  the sound file will no longer be busy so this should be the finished product
  


  
    
      9:04:32
    
  
  
  let's test it I will set the alarm for
  


  
    
      9:04:39
    
  
  
  952 and we just have to give it some time
  


  
    
      9:04:49
    
  
  
  [Music]
  


  
    
  64.multithreading



  
    
      9:05:03
    
  
  
  so uh yeah I'm going to talk about multi-threading in Python today multi-threading is used to perform
  


  
    
      9:05:09
    
  
  
  multiple tasks concurrently think of it like we're multitasking we're performing
  


  
    
      9:05:14
    
  
  
  a few different actions at once for example I could study and listen to music and eat something at the same time
  


  
    
      9:05:21
    
  
  
  multi-threading is good for Io bound tasks IO meaning input output such as
  


  
    
      9:05:27
    
  
  
  reading files or fetching data from an API things that may take some time to do and we don't know when it's going to end
  


  
    
      9:05:33
    
  
  
  exactly to use multi-threading we'll import the threading module import
  


  
    
      9:05:41
    
  
  
  threading we access the threading module then call the thread Constructor and
  


  
    
      9:05:46
    
  
  
  pass in a Target function what we'll do for this demonstration let's say we have a bunch of chores to do we have to walk
  


  
    
      9:05:53
    
  
  
  the dog get the mail and take out the trash let's define some functions to handle that we have a function to walk
  


  
    
      9:06:00
    
  
  
  the dog then I will print the following message you finish walking the
  


  
    
      9:06:11
    
  
  
  dog let's create a function to take out
  


  
    
      9:06:19
    
  
  
  trash then we will print you take out the
  


  
    
      9:06:27
    
  
  
  trash then another function of get mail as in get the mail from the
  


  
    
      9:06:34
    
  
  
  mailbox then I will print you get the
  


  
    
      9:06:41
    
  
  
  mail just to simulate these functions taking an indeterminate amount of time
  


  
    
      9:06:46
    
  
  
  I'm going to import the time module to help us let's say walking the dog t takes 8
  


  
    
      9:06:55
    
  
  
  seconds I will access the time module call the Sleep Method and pass in 8 for
  


  
    
      9:07:01
    
  
  
  8 seconds when we call the walk dog function we'll wait around for 8 seconds
  


  
    
      9:07:08
    
  
  
  then finish walking the dog this chore will take quite a bit of time to complete taking out the trash it's
  


  
    
      9:07:15
    
  
  
  fairly quick taking out the trash will take 2 seconds getting the mill will take 4
  


  
    
      9:07:26
    
  
  
  seconds let's call these functions and see what happens we will Begin by
  


  
    
      9:07:31
    
  
  
  walking the dog I will call the walk dog function followed by take out trash
  


  
    
      9:07:42
    
  
  
  function and the get mail function here's the
  


  
    
      9:07:48
    
  
  
  result we're going to wait around for 8 seconds until the walk dog function is complete
  


  
    
      9:07:55
    
  
  
  right about now you finish walking the dog you take out the
  


  
    
      9:08:01
    
  
  
  trash and you get the mail these functions are running on the
  


  
    
      9:08:08
    
  
  
  same thread the main thread our main Python program we have to complete these chores in order one by one because
  


  
    
      9:08:16
    
  
  
  they're all running on the same thread instead of walking the dog and then when we're done taking out the trash and then
  


  
    
      9:08:22
    
  
  
  when that's done we get the mail we could accomplish all three tasks at the same
  


  
    
      9:08:28
    
  
  
  time let's say we have a thread object we could say thread one or to be more
  


  
    
      9:08:33
    
  
  
  descriptive let's say we have chore one let me zoom in a little
  


  
    
      9:08:39
    
  
  
  bit chore one is going to contain a thread we will access the threading
  


  
    
      9:08:46
    
  
  
  module call The Constructor for a thread we have to pass in a keyword argument of
  


  
    
      9:08:52
    
  
  
  Target what is the first chore that we have to do let's walk the
  


  
    
      9:08:57
    
  
  
  dog to start this thread we will take our thread object of chore
  


  
    
      9:09:02
    
  
  
  one and call the start method to start it okay let's do this with chore
  


  
    
      9:09:10
    
  
  
  2 access the threading module call the thread Constructor pass
  


  
    
      9:09:16
    
  
  
  in a Target then the name of a function take out trash chore two do
  


  
    
      9:09:25
    
  
  
  start and then we have chore three I'll just copy what we have because I'm feeling
  


  
    
      9:09:32
    
  
  
  lazy chore three will be get mail here's the result
  


  
    
      9:09:40
    
  
  
  now we finish taking out the trash first then we get the mail then we finish walking the dog so
  


  
    
      9:09:49
    
  
  
  we're executing these functions concurrently we're multitasking were taking out the trash and getting the
  


  
    
      9:09:55
    
  
  
  mail and walking the dog all at the same time one thing that I did want to point
  


  
    
      9:10:01
    
  
  
  out notice how we finished taking out the trash first followed by getting the mail then walking the dog these tasks
  


  
    
      9:10:08
    
  
  
  finished in a different order compared to when we weren't multi-threading that's because taking out the trash
  


  
    
      9:10:14
    
  
  
  finished first it took 2 seconds getting the male took 4 seconds and walking the
  


  
    
      9:10:20
    
  
  
  dog took the longest it took 8 Seconds previously we finished walking the dog
  


  
    
      9:10:25
    
  
  
  first then took out the trash then got the mail when all the chores are complete I would like to print a message
  


  
    
      9:10:32
    
  
  
  I will print the following all chores are
  


  
    
      9:10:39
    
  
  
  complete here's what happens currently we get this message that all
  


  
    
      9:10:44
    
  
  
  chores are complete but we haven't finished any yet we're still completing
  


  
    
      9:10:50
    
  
  
  them there may be at times you want your program to wait for all threads to
  


  
    
      9:10:56
    
  
  
  finish before we print that confirmation message that all chores are complete
  


  
    
      9:11:01
    
  
  
  we're going to use the join method take each thread use the join
  


  
    
      9:11:08
    
  
  
  method we'll do this with chore 2 and chore 3 as well with the join method we will wait
  


  
    
      9:11:16
    
  
  
  for these threads to finish before continuing with the rest of the program here's the result now
  


  
    
      9:11:23
    
  
  
  you take out the trash you get the
  


  
    
      9:11:29
    
  
  
  mail and you finish walking the dog all chores are complete when constructing a thread
  


  
    
      9:11:35
    
  
  
  object and we have a keyword argument of Target if some of these functions take parameters for example with the function
  


  
    
      9:11:42
    
  
  
  of walk dog let's say we have a first name I will convert this print statement
  


  
    
      9:11:48
    
  
  
  to an FST string we will display first for the first name you finish walking whatever
  


  
    
      9:11:56
    
  
  
  your dog's name is so when we're creating a thread and the target is that function and that
  


  
    
      9:12:03
    
  
  
  function accepts arguments we need one more keyword argument and that is args
  


  
    
      9:12:09
    
  
  
  we will send this function a tuple we need a set of parentheses within this
  


  
    
      9:12:14
    
  
  
  tupple we will list our arguments let's say that our dog's first name is
  


  
    
      9:12:20
    
  
  
  Scooby now since this is a topple if we only have one argument we have to end that tupple with a comma to let python
  


  
    
      9:12:28
    
  
  
  know that this is a tupple here's the result you take out the trash you get
  


  
    
      9:12:36
    
  
  
  the mail you finish walking Scooby all
  


  
    
      9:12:42
    
  
  
  chores are complete if we were missing this comma this is what would happen we're no
  


  
    
      9:12:50
    
  
  
  longer passing in a tuple what if what if we have multiple parameters we have first for first name
  


  
    
      9:12:57
    
  
  
  and last for last name you finish walking first and
  


  
    
      9:13:03
    
  
  
  last we have first name of Scooby last name of
  


  
    
      9:13:10
    
  
  
  do you take out the trash you get the
  


  
    
      9:13:16
    
  
  
  mail you finish walking Scooby-Doo all chores are
  


  
    
      9:13:22
    
  
  
  complete all right everybody so that is multi-threading it's used to perform multiple tasks concurrently as if we're
  


  
    
      9:13:29
    
  
  
  multitasking we're executing multiple functions at the same time multi-threading is good for Io bound
  


  
    
      9:13:36
    
  
  
  tasks such as reading files or fetching data from apis and well everybody that
  


  
    
      9:13:41
    
  
  
  is an introduction to multi-threading in Python hey everybody in this video I'm
  


  
    
  65.request API data ↩️



  
    
      9:13:47
    
  
  
  going to show you how we can connect to an API using python in this demonstration we're going to connect to
  


  
    
      9:13:52
    
  
  
  the poke API to get some information on a Pokémon of our choosing I'm assuming that most of us are familiar with
  


  
    
      9:13:58
    
  
  
  Pokémon I thought it'd be a fun example so according to this API we can look up
  


  
    
      9:14:03
    
  
  
  a Pokémon such as Pikachu then we can get the stats for
  


  
    
      9:14:09
    
  
  
  Pikachu such as Pikachu's name height ID number and all sorts of
  


  
    
      9:14:17
    
  
  
  moves and abilities that a Pikachu may have we will need this URL but we'll handle that
  


  
    
      9:14:24
    
  
  
  later our first step is that we're going to import the requests library to make
  


  
    
      9:14:30
    
  
  
  an API request however when I run this I have a module not found error no module
  


  
    
      9:14:36
    
  
  
  named requests requests is one package we'll have to install it's not normally
  


  
    
      9:14:42
    
  
  
  included with the standard python download if I was to go to my project folder go to my virtual environment
  


  
    
      9:14:49
    
  
  
  library site packages there is no package for request ests we'll have to
  


  
    
      9:14:54
    
  
  
  download that with py charm and vs code there is a built-in terminal that we can
  


  
    
      9:14:59
    
  
  
  use to download the request package we can use pip pip is a package manager for
  


  
    
      9:15:05
    
  
  
  python it's normally included when you install python we'll type pip install
  


  
    
      9:15:12
    
  
  
  requests it'll take just a second and now we have that package of
  


  
    
      9:15:17
    
  
  
  requests within our project folder if I run this again
  


  
    
      9:15:23
    
  
  
  that error goes away process finished with exit Code Zero that means there were no
  


  
    
      9:15:29
    
  
  
  errors going back to our Pokemon API we will need this URL let me zoom in so you can see
  


  
    
      9:15:40
    
  
  
  it I'm going to store that as a base URL so it's easier to work
  


  
    
      9:15:46
    
  
  
  with for convenience I'm going to create a function name get Pokemon
  


  
    
      9:15:54
    
  
  
  info to get some info on a Pokemon we'll have to pass in the name of a Pokemon for now I'll write
  


  
    
      9:16:01
    
  
  
  pass outside of this function let's say we have a variable of Pokemon
  


  
    
      9:16:07
    
  
  
  name pick a Pokemon I will pick Pikachu for now then
  


  
    
      9:16:13
    
  
  
  I will call the get Pokemon info function then pass in my Pokémon
  


  
    
      9:16:18
    
  
  
  name remember that your parameters can be named different than your arguments
  


  
    
      9:16:23
    
  
  
  when you send data to a function you can rename it to something else temporarily now that we have the name of
  


  
    
      9:16:29
    
  
  
  the Pokémon we would like to look up we can complete the URL this will be an F
  


  
    
      9:16:36
    
  
  
  string so with our Pokemon API we have the base URL followed by the word
  


  
    
      9:16:42
    
  
  
  Pokemon then the name of a Pokémon so we have the base URL I'll add
  


  
    
      9:16:49
    
  
  
  a placeholder and insert itward slash the word Pokémon slash the name of that
  


  
    
      9:16:57
    
  
  
  Pokémon in this example it's going to be Pikachu we now have the full
  


  
    
      9:17:03
    
  
  
  URL we'll access the request module use the get method and pass in that
  


  
    
      9:17:10
    
  
  
  URL this method is going to return a response object which I will assign to
  


  
    
      9:17:16
    
  
  
  response response is a response object and I'm just going to print our
  


  
    
      9:17:22
    
  
  
  response just to see what we're working with here's our response object it has a
  


  
    
      9:17:29
    
  
  
  status code this is an HTTP status code of 200 200 means the response was
  


  
    
      9:17:36
    
  
  
  okay here's a few examples of response codes you're probably familiar with 404
  


  
    
      9:17:42
    
  
  
  not found so we are looking for 200 the
  


  
    
      9:17:49
    
  
  
  response is okay after we to get our response I'll add an if
  


  
    
      9:17:56
    
  
  
  statement if our response our response object does have an attribute of status
  


  
    
      9:18:02
    
  
  
  code to read what the status code is if this status code is equal to 200 that
  


  
    
      9:18:08
    
  
  
  means the response is okay but for now I'll write pass else I'm going to print the
  


  
    
      9:18:16
    
  
  
  following else I'm going to print failed to retrieve
  


  
    
      9:18:24
    
  
  
  data and I will print the status code of the response
  


  
    
      9:18:30
    
  
  
  object so temporarily I will print data retrieved if it was
  


  
    
      9:18:39
    
  
  
  successful I can't spell okay we have our data data was
  


  
    
      9:18:45
    
  
  
  retrieved if our status code of our response object is equal to 200 I will take our response object and
  


  
    
      9:18:54
    
  
  
  use the Json method our response is a Json format using this method we'll convert it to a
  


  
    
      9:19:01
    
  
  
  python dictionary it will consist of key value pairs much like a Json file but
  


  
    
      9:19:07
    
  
  
  I'm going to assign that to a variable of Pokemon data so it's easier to work
  


  
    
      9:19:15
    
  
  
  with then I will print our Pokemon data
  


  
    
      9:19:24
    
  
  
  so here's the data on Pikachu it's really difficult to read all this you can see some keywords we have
  


  
    
      9:19:32
    
  
  
  abilities base experience this is an extremely large
  


  
    
      9:19:38
    
  
  
  dictionary once we have our dictionary I will return that dictionary of Pokemon
  


  
    
      9:19:44
    
  
  
  data back to the place where we call this function and I will store that as a
  


  
    
      9:19:50
    
  
  
  variable Pokemon info equals get Pokemon info pass in a
  


  
    
      9:19:56
    
  
  
  Pokémon's name and now we should have a dictionary that we can work with let me zoom
  


  
    
      9:20:05
    
  
  
  out if our dictionary exists we can use the if keyword if Pokemon info if that's true
  


  
    
      9:20:13
    
  
  
  if it exists this will be true I will print the following I'll use an F
  


  
    
      9:20:20
    
  
  
  string to access the value of addiction iary we can access it by a key we'll
  


  
    
      9:20:25
    
  
  
  take our dictionary of Pokémon info access the key of
  


  
    
      9:20:31
    
  
  
  name let's see what happens exactly we get Pikachu let's get
  


  
    
      9:20:37
    
  
  
  Pikachu's ID number we will access the key of ID the
  


  
    
      9:20:43
    
  
  
  given value is 25 Pikachu is the 25th Pokémon in the
  


  
    
      9:20:51
    
  
  
  franchise let's get at Pikachu's height Pikachu's height is four I don't
  


  
    
      9:20:58
    
  
  
  know what unit of measurement they use in that franchise 4 feet or 4 in I don't know let's get Pikachu's
  


  
    
      9:21:08
    
  
  
  weight Pikachu's weight is 60 60 lb 60
  


  
    
      9:21:13
    
  
  
  kg I don't know just to make this look nice I'm going to add
  


  
    
      9:21:18
    
  
  
  Name ID
  


  
    
      9:21:24
    
  
  
  height and weight that looks much
  


  
    
      9:21:29
    
  
  
  better let's pick a different Pokemon I will pick my favorite Pokemon of
  


  
    
      9:21:39
    
  
  
  tyion failed to retrieve data does that have to be a lowercase
  


  
    
      9:21:45
    
  
  
  T yes it does okay so name tyan I'll follow the name with the
  


  
    
      9:21:52
    
  
  
  capitalize method to make it
  


  
    
      9:21:58
    
  
  
  capital there we go so my favorite Pokemon is tyan ID is 157 Ty loan's height is 17
  


  
    
      9:22:07
    
  
  
  and weight is 795 all right everybody that is one way in which we can connect to an API using
  


  
    
      9:22:13
    
  
  
  python also tell me what your favorite Pokémon is in the comment section down below all right everybody in today's
  


  
    
  66.PyQt5 GUI intro 🖥️



  
    
      9:22:20
    
  
  
  video we're going to get started working with with the pi qd5 graphical user interface also known as a guy GUI in
  


  
    
      9:22:28
    
  
  
  this topic we'll be creating a basic window so let's get started all right the first step is that using pip we're
  


  
    
      9:22:34
    
  
  
  going to install the pi qt5 package open up a terminal both pycharm and vs code
  


  
    
      9:22:40
    
  
  
  have a built-in terminal that you can use we're going to use pip that is Python's package manager pip install Pi
  


  
    
      9:22:50
    
  
  
  qt5 enter and this might just take a second once your download has finished
  


  
    
      9:22:57
    
  
  
  you should have a package within your site packages folder named Pi qt5 we can
  


  
    
      9:23:02
    
  
  
  work with it as long as we import it first we are going to import the
  


  
    
      9:23:08
    
  
  
  module of CIS CIS meaning system this module provides access to variables used
  


  
    
      9:23:14
    
  
  
  and maintained by the python interpreter then from the package of Pi qt5 do pay
  


  
    
      9:23:21
    
  
  
  attention to the capitalization it's easy to mess that up use dot to access
  


  
    
      9:23:26
    
  
  
  the module of QT widgets widgets are the building
  


  
    
      9:23:32
    
  
  
  blocks of a pi qt5 application they begin with Q that helps distinguish them from widgets from other libraries they
  


  
    
      9:23:39
    
  
  
  typically begin with Q from this module import the following widgets Q
  


  
    
      9:23:48
    
  
  
  application and Q main window
  


  
    
      9:23:54
    
  
  
  here's some boiler plate code that we have to write in order to get this application up and running first we will
  


  
    
      9:23:59
    
  
  
  create a class of main window which will inherit from the class of qain
  


  
    
      9:24:06
    
  
  
  window by inheriting from the parent of Cain window we can customize our own Windows to display to the user we will
  


  
    
      9:24:14
    
  
  
  need a Constructor let's define that Define Dunder init there will be no
  


  
    
      9:24:20
    
  
  
  arguments currently besides self and in case we have to pass any arguments to the parent of Cain window we will access
  


  
    
      9:24:27
    
  
  
  the super class that's the parent and call the parents
  


  
    
      9:24:32
    
  
  
  Constructor but currently we don't have any arguments to pass in we will return to this class
  


  
    
      9:24:39
    
  
  
  momentarily let's define a function of main When We Begin this program we will
  


  
    
      9:24:45
    
  
  
  call the function of main to begin the application for now I'll WR
  


  
    
      9:24:50
    
  
  
  pass if we are running this file directly let's add the following if statement if Dunder name is equal to a
  


  
    
      9:24:59
    
  
  
  string of Dunder main if we are running this file directly call the main
  


  
    
      9:25:04
    
  
  
  function in order for us to begin if that's true we will call the
  


  
    
      9:25:09
    
  
  
  function of main within the main function we will create an app object
  


  
    
      9:25:15
    
  
  
  app equals we will call the Constructor for Q application that class but there
  


  
    
      9:25:22
    
  
  
  one argument that we have to pass in we will access our module of CIS do
  


  
    
      9:25:29
    
  
  
  argv meaning arguments so by passing in this argument this allows Pi QT to
  


  
    
      9:25:36
    
  
  
  process any command line arguments intended for it that's if we use command prompt or terminal we won't be doing
  


  
    
      9:25:42
    
  
  
  that in this series but you may someday in the future it would be a good idea for us to Future proof our code
  


  
    
      9:25:48
    
  
  
  otherwise you may see people pass in an empty list so we now have an app object
  


  
    
      9:25:53
    
  
  
  next we will create a window object window equals call The Constructor for
  


  
    
      9:25:59
    
  
  
  our class of main window currently we don't have any arguments to pass in we have an app object and a window object
  


  
    
      9:26:07
    
  
  
  by calling their respective Constructors now if I run this program currently our window is not going to show the default
  


  
    
      9:26:14
    
  
  
  behavior for a window is to hide it in order to show our window we will access
  


  
    
      9:26:21
    
  
  
  our window call the show method to show it it's only going to appear for a brief
  


  
    
      9:26:27
    
  
  
  second when I run the script I don't know if you saw it but it pops up for a brief
  


  
    
      9:26:34
    
  
  
  second we need to ensure that the window stays until we interact with it or close
  


  
    
      9:26:39
    
  
  
  it after we show our window we will access our module of
  


  
    
      9:26:45
    
  
  
  CIS call the exit method the exit method ensures a clean exit of our program
  


  
    
      9:26:51
    
  
  
  within our exit method we will pass in as an argument our app object our app
  


  
    
      9:26:58
    
  
  
  object has a built-in method of EX ecore and this is a method so we can
  


  
    
      9:27:04
    
  
  
  call it this is the execute method there isn't underscore character after exec
  


  
    
      9:27:10
    
  
  
  for execute that distinguishes it from the execute method there is a separate version of this execute function that
  


  
    
      9:27:17
    
  
  
  ends with an underscore our apps execute method it waits around for user input
  


  
    
      9:27:22
    
  
  
  and handles events such as if we click buttons press keys or close the window
  


  
    
      9:27:28
    
  
  
  now that we're calling this method when we run our program this window should stay in place we can maximize it
  


  
    
      9:27:36
    
  
  
  minimize it or close it that's all the boiler plate code that
  


  
    
      9:27:42
    
  
  
  we need for a basic window let's customize it within our Constructor for our main window what would we like to
  


  
    
      9:27:49
    
  
  
  add let's set the title for our window self. set window title method we will
  


  
    
      9:27:59
    
  
  
  pass in a string think of a title for your program my cool first GUI
  


  
    
      9:28:09
    
  
  
  gooey and now we have a new title my cool first gooey graphical user
  


  
    
      9:28:15
    
  
  
  interface when this window appears we can set the geometry of where the window appears and the size of the window
  


  
    
      9:28:23
    
  
  
  access self do set geometry
  


  
    
      9:28:29
    
  
  
  method there's four arguments X and Y for the X and Y
  


  
    
      9:28:34
    
  
  
  coordinates a width of the window and a height of the window if I were to set X
  


  
    
      9:28:40
    
  
  
  and Y to be both zero this window will appear in the top left corner of my screen I'll also need a width and a
  


  
    
      9:28:47
    
  
  
  height let's say I don't know 5 00 for
  


  
    
      9:28:53
    
  
  
  each so now my window is now a square the width and the height are both the
  


  
    
      9:28:59
    
  
  
  same they're both 500 the width is 500 pixels the height is 500 pixels with the
  


  
    
      9:29:04
    
  
  
  first two arguments we set the initial placement of our window to be where X is z and y is zero that corresponds to the
  


  
    
      9:29:12
    
  
  
  top left corner if I set the first argument to be 100 well then the window is going to
  


  
    
      9:29:19
    
  
  
  move to the right by 100 pixels there are ways to Center your window in the very center of your screen but
  


  
    
      9:29:26
    
  
  
  that's a little too advanced for us right now for the time being I'll pick something roughly near the middle of my
  


  
    
      9:29:32
    
  
  
  screen 700 pixels on the x axis and 300 on the Y AIS it should appear roughly in
  


  
    
      9:29:40
    
  
  
  the middle but feel free to adjust these values based on the size of your screen we'll discuss layouts in the future now
  


  
    
      9:29:48
    
  
  
  if you would like a window icon we can change that you will need a image to work with So within my project
  


  
    
      9:29:56
    
  
  
  folder I have a profile picture for my YouTube channel I'll set that to be the icon find an image that you like then
  


  
    
      9:30:04
    
  
  
  add it to your project folder in order to work with icons we'll need to make the following import from
  


  
    
      9:30:11
    
  
  
  PI qt5 that's the package access the module
  


  
    
      9:30:17
    
  
  
  of QT GUI import the following
  


  
    
      9:30:23
    
  
  
  Q icon now we can work with icons after we set the geometry for our
  


  
    
      9:30:31
    
  
  
  window access this object of self this main window call the method of set
  


  
    
      9:30:38
    
  
  
  window icon within this method we will call the Constructor of Q icon we'll pass in
  


  
    
      9:30:47
    
  
  
  either a relative file path or an absolute file path my main python file
  


  
    
      9:30:52
    
  
  
  is right next to my profile picture that image I only need the file name within a
  


  
    
      9:30:58
    
  
  
  string so the name of my image it's going to be different for you depending on what the name of your image is my
  


  
    
      9:31:04
    
  
  
  image is named profile uncore pick and this image is a JPEG
  


  
    
      9:31:12
    
  
  
  jpg then when I run this program I'm using my image as an icon
  


  
    
      9:31:18
    
  
  
  for this window all right everybody that is how to create a window using pi qt5 and in
  


  
    
      9:31:24
    
  
  
  the next topic we will be creating some labels what's up everybody in today's
  


  
    
  67.PyQt5 labels 🏷️



  
    
      9:31:29
    
  
  
  topic we're going to create some labels using pi qt5 we will import the widget
  


  
    
      9:31:35
    
  
  
  of Q label this label class is used to create
  


  
    
      9:31:40
    
  
  
  label widgets that can display text or images within the Constructor of our
  


  
    
      9:31:45
    
  
  
  main window this is where we'll create a label we will declare a label object lab
  


  
    
      9:31:52
    
  
  
  equals call The Constructor for Q label for the text of the label we'll
  


  
    
      9:31:59
    
  
  
  pass in a string that's the first argument let's say the word hello for the second argument we will
  


  
    
      9:32:06
    
  
  
  pass in self self refers to this window object that we're calling and
  


  
    
      9:32:12
    
  
  
  instantiating all right let's do a test run here is my label although you can
  


  
    
      9:32:19
    
  
  
  barely see it the font is really small but it does say hello let's set the font we'll need
  


  
    
      9:32:26
    
  
  
  another import from PI
  


  
    
      9:32:31
    
  
  
  qt5 do QT
  


  
    
      9:32:36
    
  
  
  GUI import Q font by importing the Q font class we
  


  
    
      9:32:43
    
  
  
  can begin working with fonts we're going to take our label call the set font method
  


  
    
      9:32:52
    
  
  
  within this method we will call the Constructor of Q font pick a font that you would like I
  


  
    
      9:32:59
    
  
  
  will pick aial but feel free to choose really any font then the second argument
  


  
    
      9:33:05
    
  
  
  is a font size I'll pick 30 let's do another test
  


  
    
      9:33:11
    
  
  
  run that's much better let's increase this to 40 for the font
  


  
    
      9:33:17
    
  
  
  size now I'm going to set the geometry of this label such as the positioning
  


  
    
      9:33:23
    
  
  
  and the width and the height let's take our
  


  
    
      9:33:28
    
  
  
  label use the set geometry method we will pass in X and Y coordinates 0 0
  


  
    
      9:33:37
    
  
  
  corresponds to the top left corner for the width let's set the width to be 500
  


  
    
      9:33:42
    
  
  
  and the height to be 100 that's better I'll cover more
  


  
    
      9:33:48
    
  
  
  advanced alignments momentarily let's add a style sheet sheet pqt does have styles that are very
  


  
    
      9:33:55
    
  
  
  similar to CSS if you would like to learn more about CSS I do have a full course on that topic we will add some
  


  
    
      9:34:02
    
  
  
  CSS like Properties by accessing our label object call the method of set
  


  
    
      9:34:09
    
  
  
  style sheet within this method we will pass in
  


  
    
      9:34:15
    
  
  
  some CSS like properties such as a color for the color let's say blue
  


  
    
      9:34:22
    
  
  
  these CSS like properties should end with a semicolon and now the font color is blue
  


  
    
      9:34:29
    
  
  
  you could also use RGB values or heximal values you could always look up a Color
  


  
    
      9:34:36
    
  
  
  Picker and pick a very specific color let's pick something
  


  
    
      9:34:42
    
  
  
  green we can either use RGB values or heximal values so I will copy this value
  


  
    
      9:34:51
    
  
  
  so I will paste that heximal value and now we have a very specific shade of
  


  
    
      9:34:58
    
  
  
  green but I think I'll go with something dark such as
  


  
    
      9:35:06
    
  
  
  that so this color is going to be a dark gray color we could set a background color
  


  
    
      9:35:13
    
  
  
  this will be a new string background Das color
  


  
    
      9:35:22
    
  
  
  and I will pick a new color I will pick something
  


  
    
      9:35:31
    
  
  
  blue that's a decent
  


  
    
      9:35:36
    
  
  
  color we have a blue background with dark gray text we can set the font to be bold font
  


  
    
      9:35:45
    
  
  
  weight will be bold so the font is now bold
  


  
    
      9:35:53
    
  
  
  the font style can be italic font style
  


  
    
      9:36:00
    
  
  
  italic so our font is italic and we can
  


  
    
      9:36:05
    
  
  
  underline text decoration
  


  
    
      9:36:12
    
  
  
  underline the text on our label is now underlined let's work on positioning
  


  
    
      9:36:17
    
  
  
  next currently my text is left Justified and to the center
  


  
    
      9:36:23
    
  
  
  vertically to work with alignments we need this import from PI
  


  
    
      9:36:30
    
  
  
  qt5 QT core import
  


  
    
      9:36:37
    
  
  
  QT the class of QT is used for alignments to Center the text of our
  


  
    
      9:36:44
    
  
  
  label at the top vertically we will take our label use the set alignment method
  


  
    
      9:36:52
    
  
  
  then pass in a flag access the class of qot access the flag of a line
  


  
    
      9:37:00
    
  
  
  top this will align our text vertically to the
  


  
    
      9:37:07
    
  
  
  top so then our text is aligned vertically to the top rather than the
  


  
    
      9:37:13
    
  
  
  center for the bottom we will use the flag of a line
  


  
    
      9:37:20
    
  
  
  bottom we will align vertically on the
  


  
    
      9:37:27
    
  
  
  bottom the text is now on the bottom to align vertically in the
  


  
    
      9:37:33
    
  
  
  center align V
  


  
    
      9:37:38
    
  
  
  Center this will be vertically Center which it was
  


  
    
      9:37:44
    
  
  
  originally now for horizontal alignment we can add the following okay to align right we will
  


  
    
      9:37:52
    
  
  
  pass in a flag of align right
  


  
    
      9:37:59
    
  
  
  horizontally align right the text is now all the way to the
  


  
    
      9:38:08
    
  
  
  right for the center a line H H for
  


  
    
      9:38:14
    
  
  
  horizontal Center the text is now horizontally
  


  
    
      9:38:20
    
  
  
  aligned in the center center for the
  


  
    
      9:38:30
    
  
  
  left Aline
  


  
    
      9:38:36
    
  
  
  left the text will be aligned to the left we could combine both horizontal
  


  
    
      9:38:42
    
  
  
  and vertical positioning here's how take our label
  


  
    
      9:38:48
    
  
  
  call the set alignment method we will align horizontally in the center
  


  
    
      9:38:55
    
  
  
  follow this with the or bitwise operator which is a vertical bar this allows us
  


  
    
      9:39:01
    
  
  
  to combine Flags we will align horizontally in the center then vertically let's align to the
  


  
    
      9:39:09
    
  
  
  top so our text should be aligned horizontally we're aligned in the center
  


  
    
      9:39:14
    
  
  
  and vertically we're aligned to the top align bottom vertically
  


  
    
      9:39:24
    
  
  
  horizontally we are in the center vertically we're aligned on the bottom then for the very center of our
  


  
    
      9:39:37
    
  
  
  label a line horizontal Center and a line vertical
  


  
    
      9:39:49
    
  
  
  Center our text will now be in the very middle of our label both horizontally
  


  
    
      9:39:54
    
  
  
  and vertically now there is a shortcut for the very center we don't need both of
  


  
    
      9:39:59
    
  
  
  these flags the shortcut is the following set
  


  
    
      9:40:07
    
  
  
  alignment align Center that will align the text both
  


  
    
      9:40:12
    
  
  
  horizontally and vertically so that is Center and Center
  


  
    
      9:40:18
    
  
  
  all right everybody so that is an introduction to labels in pi qt5 what is going on everybody in
  


  
    
  68.PyQt5 images



  
    
      9:40:24
    
  
  
  today's video I'm going to show you how we can add images to Pi qt5 you will need an image to work with me I'll be
  


  
    
      9:40:31
    
  
  
  using my profile picture for my YouTube channel feel free to take a moment to find a picture of your own maybe a
  


  
    
      9:40:37
    
  
  
  profile picture of yourself we will need the following Imports Q label the most
  


  
    
      9:40:44
    
  
  
  common and straightforward approach to displaying an image is to add an image to a label in order to display it then
  


  
    
      9:40:51
    
  
  
  we will need this other import from PI qt5 that's the package then the module
  


  
    
      9:40:58
    
  
  
  of QT GUI import the class of
  


  
    
      9:41:03
    
  
  
  qix map the class of qix map it's used for handling images and provides
  


  
    
      9:41:10
    
  
  
  functionality for loading manipulating and displaying images we will load our image to a q piix map object then add
  


  
    
      9:41:17
    
  
  
  this Q pix map object to a label in order to display it within our Constructor of our main
  


  
    
      9:41:23
    
  
  
  window we will create a label label equals call the Q label
  


  
    
      9:41:30
    
  
  
  Constructor then pass in self self refers to the window object our window
  


  
    
      9:41:36
    
  
  
  will be the parent widget our label widget is one of its children once we have our label we'll set the geometry of
  


  
    
      9:41:43
    
  
  
  the label label. set geometry method we have to pass in X and Y coordinates and
  


  
    
      9:41:51
    
  
  
  as well as a width and height of the label for the coordinates let's say zero
  


  
    
      9:41:56
    
  
  
  for each the label will appear in the top left corner for the width 250 is
  


  
    
      9:42:02
    
  
  
  good and the height 250 as well here's my window the label is going
  


  
    
      9:42:08
    
  
  
  to appear in the top left corner however there's nothing added to the label that's where the widget of Q pix map
  


  
    
      9:42:14
    
  
  
  comes in we will create a PIX map object equals call the Constructor of Q pix map
  


  
    
      9:42:24
    
  
  
  we have to pass in a string that represents a relative file path or an absolute file path to our image my image
  


  
    
      9:42:31
    
  
  
  is right next to my main python file I just need the file name the name of my image is profile uncore pick and this is
  


  
    
      9:42:39
    
  
  
  a JPEG when I run this we don't see our image we have to add the Pix map object
  


  
    
      9:42:47
    
  
  
  to the label we have to set it here's how take take our label use the set
  


  
    
      9:42:54
    
  
  
  pixmap method and pass in our pixmap object and now we can see the image
  


  
    
      9:43:01
    
  
  
  however the image doesn't scale according to the size of the label to enable that we have to call the
  


  
    
      9:43:07
    
  
  
  following method take our label call the set
  


  
    
      9:43:13
    
  
  
  scaled contents method then pass in true our image will now scale to the size of
  


  
    
      9:43:20
    
  
  
  the label if we were to change the size of the label let's say it's 100
  


  
    
      9:43:28
    
  
  
  pixels it will scale down even further or I could even increase it to
  


  
    
      9:43:35
    
  
  
  500 so now the image takes up the entire width and height of the window let's set that back to
  


  
    
      9:43:44
    
  
  
  250 there's a few tricks that we can do with positioning of the image we've set our label with an image we can move the
  


  
    
      9:43:51
    
  
  
  label within the confines of the window currently it's set in the top left corner but here's a few tricks that we
  


  
    
      9:43:58
    
  
  
  can do with positioning with our label we will set the geometry
  


  
    
      9:44:05
    
  
  
  again so the top left corner is 0 0 for the coordinates we could pass in 250 and 250
  


  
    
      9:44:13
    
  
  
  again for the width and the height but if we were to change that here when we
  


  
    
      9:44:18
    
  
  
  initially create this label we would have to manually change that here as well I think it would be better if we
  


  
    
      9:44:24
    
  
  
  were to get the current width and height of the label take our label call the width method to get the width same thing
  


  
    
      9:44:31
    
  
  
  applies with the height label. height method that should work
  


  
    
      9:44:39
    
  
  
  fine let's say we would like to take our image and move it to the right side of our window here's
  


  
    
      9:44:45
    
  
  
  how with the x coordinate we're going to access self that means our window called
  


  
    
      9:44:52
    
  
  
  the width method here's what we have currently we can't see the
  


  
    
      9:44:58
    
  
  
  label it was placed outside of the confines of the window let's subtract our labels
  


  
    
      9:45:06
    
  
  
  with label. width I'll put each of these arguments on a new line just to help with
  


  
    
      9:45:15
    
  
  
  readability so now our image is Right Justified within our window for the bottom right corner we
  


  
    
      9:45:23
    
  
  
  will take the second argument access self. height that's the
  


  
    
      9:45:29
    
  
  
  height of the window that we're instantiating minus our label's
  


  
    
      9:45:36
    
  
  
  height and now our image is in the bottom right corner for the bottom left corner we
  


  
    
      9:45:42
    
  
  
  will set X to be zero now here's the tricky part to have
  


  
    
      9:45:49
    
  
  
  our image placed in the center center of our window we will take the width of the window minus the width of the label / by
  


  
    
      9:45:58
    
  
  
  two for integer division we'll be using double forward slashes we need our
  


  
    
      9:46:03
    
  
  
  pixels to be whole integers so we're going to be using integer Division and not standard division we will round to
  


  
    
      9:46:10
    
  
  
  the nearest whole pixel then we will do this with the height as
  


  
    
      9:46:17
    
  
  
  well and now our image should be in the middle of our window
  


  
    
      9:46:23
    
  
  
  all right everybody and that is how to add an image to your Pi qt5 application well hello again friends
  


  
    
  69.PyQt5 layout managers



  
    
      9:46:29
    
  
  
  today I got to explain layouts in pqt 5 we'll discuss vertical horizontal and
  


  
    
      9:46:35
    
  
  
  grid layouts but we'll need the following Imports we will be importing Q
  


  
    
      9:46:41
    
  
  
  label Q widget I'm going to put these Imports on a new line just because we have a
  


  
    
      9:46:49
    
  
  
  lot QV for vertical box
  


  
    
      9:46:55
    
  
  
  layout and I'm just going to copy this qh for horizontal box
  


  
    
      9:47:02
    
  
  
  layout and Q grid layout let's be sure
  


  
    
      9:47:07
    
  
  
  that we have all these Imports these classes deal with layout managers they aren't widgets we'll be
  


  
    
      9:47:14
    
  
  
  writing a majority of the code within our main window class however it can get disorganized really quick what will help
  


  
    
      9:47:21
    
  
  
  keep things organized is if we declare a separate function within the main window class this is a common practice that
  


  
    
      9:47:28
    
  
  
  you'll see within Pi qt5 there will be a function for innit for initialize UI for
  


  
    
      9:47:34
    
  
  
  user interface no other arguments besides self and for now I'll write
  


  
    
      9:47:40
    
  
  
  pass when we construct a window object we will call Self do init UI to
  


  
    
      9:47:48
    
  
  
  initialize the user interface so anything that deals with the user interface we're going to be writing
  


  
    
      9:47:54
    
  
  
  within this function to help keep our code clean and organized normally we can't add a layout manager to a main
  


  
    
      9:48:00
    
  
  
  window object main window widgets have a specific design and layout structure
  


  
    
      9:48:06
    
  
  
  that's normally incompatible with layout managers what we would need to do is create a generic widget add a layout
  


  
    
      9:48:13
    
  
  
  manager to that widget then add that widget to the main window in order to display the layout within our method to
  


  
    
      9:48:21
    
  
  
  initialize our user interface we are going to create what is called a central widget called The Constructor
  


  
    
      9:48:29
    
  
  
  for Q widget this is a generic widget then we
  


  
    
      9:48:34
    
  
  
  will take self self is our window call the
  


  
    
      9:48:40
    
  
  
  set Central widget method then pass in our Central
  


  
    
      9:48:47
    
  
  
  widget when working with layout managers we will add that layout manager to the
  


  
    
      9:48:52
    
  
  
  central Widget the central widget is then added to the main
  


  
    
      9:48:57
    
  
  
  window so currently this is what we're working with we will need some widgets to organize because right now it's
  


  
    
      9:49:05
    
  
  
  empty let's create a few labels let's say label one equals Q
  


  
    
      9:49:12
    
  
  
  label I'll pass in some text number one okay let's create four additional labels
  


  
    
      9:49:19
    
  
  
  1 through five I'll just do some copying and
  


  
    
      9:49:27
    
  
  
  pasting all of our labels are overlapping let's add some colors let's
  


  
    
      9:49:34
    
  
  
  take label one use the set stylesheet
  


  
    
      9:49:39
    
  
  
  method then pass in a background color as a CSS property
  


  
    
      9:49:46
    
  
  
  background-color will be red let copy this line of code paste it
  


  
    
      9:49:53
    
  
  
  four additional times for labels 1 through
  


  
    
      9:49:59
    
  
  
  5 we'll have a label that is yellow another that is
  


  
    
      9:50:04
    
  
  
  green blue then
  


  
    
      9:50:11
    
  
  
  purple here are the labels they're all overlapping one another that's why we can only see
  


  
    
      9:50:17
    
  
  
  five this is where a layout manager comes in we'll start with the vertical layout we
  


  
    
      9:50:23
    
  
  
  will create a vertical layout manager which we will name vbx vbox equals call The Constructor for
  


  
    
      9:50:34
    
  
  
  QV box layout we are calling the Constructor we will take our layout
  


  
    
      9:50:42
    
  
  
  manager call the add widget method then pass in a widget such as label one near
  


  
    
      9:50:50
    
  
  
  the top here we'll do this with the other labels we'll do some copying and
  


  
    
      9:50:56
    
  
  
  pasting add label two 3 four and five there's one last
  


  
    
      9:51:05
    
  
  
  step we will take our Central widget which we have declared at the top of this
  


  
    
      9:51:11
    
  
  
  function call the set layout method we are setting the layout of our
  


  
    
      9:51:18
    
  
  
  Central widget with the layout manager a vbx vertical box here's the new
  


  
    
      9:51:25
    
  
  
  layout all of our labels all of our widgets are arranged vertically for
  


  
    
      9:51:31
    
  
  
  horizontal we will use qh box layout for horizontal replace any instance of vbx
  


  
    
      9:51:38
    
  
  
  with hbox for the set layout method pass in
  


  
    
      9:51:46
    
  
  
  hbox this allows for a horizontal layout then we have
  


  
    
      9:51:52
    
  
  
  grid Q grid layout replace hbox with
  


  
    
      9:52:02
    
  
  
  grid so what we have to do with grids after adding a widget we have to specify
  


  
    
      9:52:08
    
  
  
  a row and column with separate arguments the row and column both begin with zero
  


  
    
      9:52:13
    
  
  
  so Row one column 1 would be row0 column 0 for label two let's say row 0 column 1
  


  
    
      9:52:24
    
  
  
  Label 3 will be Row 1 column 0 four will be Row one column 1 then
  


  
    
      9:52:33
    
  
  
  five row one column 2 so here's the current
  


  
    
      9:52:38
    
  
  
  layout we have labels 1 and two both within row zero labels 3 four and 5 are
  


  
    
      9:52:44
    
  
  
  both within the second row let's say label five is Row 2 column 2
  


  
    
      9:52:51
    
  
  
  that would result with something like this we have label five which is purple
  


  
    
      9:52:56
    
  
  
  in row two column 2 so it depends on how you want to arrange your widgets all
  


  
    
      9:53:01
    
  
  
  right everybody so that is an introduction to layout managers in pi qt5 today I'm going to show you how we
  


  
    
  70.PyQt5 buttons 🛎️



  
    
      9:53:08
    
  
  
  can create push button widgets in pi qt5 to begin we will need the following Imports Q push button as well as Q label
  


  
    
      9:53:19
    
  
  
  for this demonstration during the previous topic on layout managers within our Constructor for our
  


  
    
      9:53:25
    
  
  
  main window we defined a method of initialize UI for user interface let's
  


  
    
      9:53:31
    
  
  
  be sure that we're calling that method within our Constructor within this method is where we'll be handling managing the user interface to create a
  


  
    
      9:53:38
    
  
  
  button we will call the push button Constructor normally when creating widgets we would want to prefix that
  


  
    
      9:53:44
    
  
  
  widget with self then follow the name of the widget for example button however
  


  
    
      9:53:50
    
  
  
  I'm going to demonstrate what happens when we don't do that because without self we're declaring a local variable
  


  
    
      9:53:57
    
  
  
  we'll get back to that in just a moment let's create a local button object by calling the Q push button
  


  
    
      9:54:04
    
  
  
  Constructor we can pass in some text such as click me we will add this to our window self
  


  
    
      9:54:12
    
  
  
  self refers to our window object let's set the geometry of the button button. set geometry
  


  
    
      9:54:22
    
  
  
  we could use a layout manager but I do want to keep this lesson as simple as possible so let's pick some coordinates
  


  
    
      9:54:28
    
  
  
  I've picked the following for the X and Y coordinates 150 and 200 for the width
  


  
    
      9:54:34
    
  
  
  200 and the height 100 here is our button currently the font is a little
  


  
    
      9:54:39
    
  
  
  small so I'm going to set the stylesheet set style
  


  
    
      9:54:47
    
  
  
  sheet I'll just increase the font size we could could use Q font but that might
  


  
    
      9:54:52
    
  
  
  be overkill for this demonstration let's just say the font size will be 30
  


  
    
      9:54:58
    
  
  
  pixels now we can read it so we have our button we're going to be connecting our
  


  
    
      9:55:05
    
  
  
  button to a function but we need to Define that function we'll do so within our main window
  


  
    
      9:55:11
    
  
  
  class so we will Define a function of on click there are no parameters besid self
  


  
    
      9:55:19
    
  
  
  when we click on the button but what would we like to do let's print a test
  


  
    
      9:55:24
    
  
  
  message let's say button clicked and that's
  


  
    
      9:55:31
    
  
  
  it when we click this button nothing happens we have to set up a signal and
  


  
    
      9:55:37
    
  
  
  slot for the button here's how we will take our button dot list a
  


  
    
      9:55:44
    
  
  
  signal a signal is emitted when a widget is interacted with we have to list the
  


  
    
      9:55:50
    
  
  
  type of signal so the signal we're looking for is clicked when we click this button we
  


  
    
      9:55:57
    
  
  
  will perform a slot an action we will take the signal of clicked connect it to
  


  
    
      9:56:04
    
  
  
  a slot connect is a method the slot will be self dot the
  


  
    
      9:56:10
    
  
  
  name of the method on click when we press this button we
  


  
    
      9:56:16
    
  
  
  perform this slot this method of onclick each time I press the button we perform
  


  
    
      9:56:24
    
  
  
  that action not only should we print a message for this demonstration let's set
  


  
    
      9:56:29
    
  
  
  the text of the button so we have button. set text let's change the text
  


  
    
      9:56:39
    
  
  
  to clicked so this actually isn't going to work because we're not prefixing self
  


  
    
      9:56:47
    
  
  
  let me demonstrate what happens we print button clicked but then we have
  


  
    
      9:56:53
    
  
  
  a problem we have an exit code our program was interrupted button is considered local
  


  
    
      9:57:00
    
  
  
  to our initializer method our onclick function doesn't recognize what our button is that's why we're going to
  


  
    
      9:57:06
    
  
  
  prefix our button with self so it belongs to the class of main window and not this method any instance of button
  


  
    
      9:57:14
    
  
  
  we're going to prefix with self and now this should work the text
  


  
    
      9:57:22
    
  
  
  on my button is going to change when I click it
  


  
    
      9:57:27
    
  
  
  clicked you don't have to do this but with my personal coding style whenever I
  


  
    
      9:57:33
    
  
  
  create a variable or an object within a class I like to do so within the Constructor even py charm is giving me a
  


  
    
      9:57:41
    
  
  
  warning when we declare this button I'm going to move it to the
  


  
    
      9:57:47
    
  
  
  Constructor and let me just rearrange everything
  


  
    
      9:57:52
    
  
  
  self. button equals a q push button widget within my initializer method
  


  
    
      9:57:59
    
  
  
  that's when I like to rearrange everything and style it we can also disable buttons when we click on them to
  


  
    
      9:58:06
    
  
  
  do that we will take self. button call the set disabled method then pass and
  


  
    
      9:58:14
    
  
  
  true when I click the button it will be disabled I can no longer click on
  


  
    
      9:58:21
    
  
  
  it for the last part of this demonstration when we click on our button let's change the text of a
  


  
    
      9:58:29
    
  
  
  label let's declare self. label within our Constructor equals a q
  


  
    
      9:58:36
    
  
  
  label the text of the label will be hello we will add this label to self the
  


  
    
      9:58:43
    
  
  
  window when we set up the user interface let's set the geometry of the
  


  
    
      9:58:48
    
  
  
  label self. label do set
  


  
    
      9:58:53
    
  
  
  geometry we could use a layout manager but just to keep things simple I'm going to set some coordinates 150 for X 300
  


  
    
      9:59:02
    
  
  
  for y the width will be 200 and the height 100 let's change the font
  


  
    
      9:59:09
    
  
  
  size self. label do set style
  


  
    
      9:59:15
    
  
  
  sheet I will set the font size to be 30
  


  
    
      9:59:22
    
  
  
  maybe 50 better all right within our onclick
  


  
    
      9:59:28
    
  
  
  function let's instead take self. label. set text method then pass in some
  


  
    
      9:59:37
    
  
  
  new text to display we're saying hello but when we click the button let's say
  


  
    
      9:59:45
    
  
  
  goodbye so now when I click the button we will change the text on a separate
  


  
    
      9:59:50
    
  
  
  widget my label which now says goodbye so with buttons you need a
  


  
    
      9:59:56
    
  
  
  signal that's connected to a slot the signal is an event the slot is an action
  


  
    
      10:00:02
    
  
  
  that this widget is going to take when the signal occurs and well everybody that is an
  


  
    
      10:00:08
    
  
  
  introduction to push buttons in pi qt5 hey uh so today I got to explain
  


  
    
  71.PyQt5 checkboxes



  
    
      10:00:14
    
  
  
  checkboxes in pqt 5 to work with checkboxes we will need the following
  


  
    
      10:00:20
    
  
  
  import from the module of widgets from PI qt5 import Q check
  


  
    
      10:00:27
    
  
  
  box to work with different states we will also need the following import from
  


  
    
      10:00:34
    
  
  
  PI qt5 do QT core import QT this module of QT core it
  


  
    
      10:00:43
    
  
  
  contains non- classes relevant to Pi qt5 applications so be sure that you get
  


  
    
      10:00:49
    
  
  
  the this import as well to create a checkbox I will create this within the Constructor of my main window we will
  


  
    
      10:00:56
    
  
  
  create a checkbox with self the name of the checkbox which I will name
  


  
    
      10:01:02
    
  
  
  checkbox equals call The Constructor of the Q checkbox class the first argument is
  


  
    
      10:01:09
    
  
  
  going to be the text of the checkbox what do you want the checkbox to say
  


  
    
      10:01:14
    
  
  
  let's ask do you like food
  


  
    
      10:01:20
    
  
  
  the second argument is the parent widget where we will be adding this checkbox let's say self self will apply to this
  


  
    
      10:01:27
    
  
  
  window we could use a layout manager but I want to keep this lesson as simple as possible we're just going to focus on
  


  
    
      10:01:34
    
  
  
  checkboxes and their functionality so we should have a checkbox however we can barely see it
  


  
    
      10:01:41
    
  
  
  the font is really small I have a method to initialize the user
  


  
    
      10:01:46
    
  
  
  interface that's where we'll set the stylesheet and the g ometry of our checkbox let's set the stylesheet self
  


  
    
      10:01:54
    
  
  
  do the name of the checkbox checkbox do set Styles sheet method then
  


  
    
      10:02:03
    
  
  
  we can pass in some CSS like properties let's set the font size to be 30
  


  
    
      10:02:11
    
  
  
  pixels and I will pick a font family font family aial
  


  
    
      10:02:21
    
  
  
  oh and we should change the geometry of the label it's getting cut off self do the name of the
  


  
    
      10:02:30
    
  
  
  checkbox which is checkbox let's set the
  


  
    
      10:02:35
    
  
  
  geometry pass in some X and Y coordinates for the placement as well as
  


  
    
      10:02:40
    
  
  
  a width and a height I will pick 500 and 100 uh maybe I'll move it a little more
  


  
    
      10:02:48
    
  
  
  to the right by 10 pixels that's pretty good our checkbox
  


  
    
      10:02:54
    
  
  
  has an initial State it's normally unchecked that's the default Behavior
  


  
    
      10:02:59
    
  
  
  but we could set that to be checked with the following method when the window loads let's take our checkbox self.
  


  
    
      10:03:07
    
  
  
  checkbox call the set checked method then pass in true so then when the
  


  
    
      10:03:14
    
  
  
  window loads the checkbox is already checked but let's keep that is
  


  
    
      10:03:21
    
  
  
  false now this checkbox it doesn't do anything when I check it let's add some
  


  
    
      10:03:28
    
  
  
  functionality we'll take our checkbox connect a signal to a
  


  
    
      10:03:33
    
  
  
  slot the slot can be a function or a method let's define a method within our
  


  
    
      10:03:39
    
  
  
  main window class let's name this method checkbox changed we will call this
  


  
    
      10:03:47
    
  
  
  method when the state of our checkbox changed changes there is one parameter besides self a state now the state
  


  
    
      10:03:55
    
  
  
  parameter is going to be provided to us when we interact with our checkbox when we check the checkbox let's print
  


  
    
      10:04:02
    
  
  
  something like a test message you like
  


  
    
      10:04:07
    
  
  
  food we have to connect a signal of State changed to a slot of checkbox
  


  
    
      10:04:13
    
  
  
  changed we will take self dot the name of the checkbox which is checkbox
  


  
    
      10:04:20
    
  
  
  the signal will be State changed to connect a slot to a signal we
  


  
    
      10:04:27
    
  
  
  use the connect method then pass in a function or method name so we are
  


  
    
      10:04:32
    
  
  
  working with methods this method belongs to the window class we'll prefix the method
  


  
    
      10:04:39
    
  
  
  name with self self. checkbox changed so when I run this program when
  


  
    
      10:04:46
    
  
  
  I check the checkbox we execute this method you like food now when I uncheck it I
  


  
    
      10:04:53
    
  
  
  instead would like to display you do not like food so that's where our state is going
  


  
    
      10:04:59
    
  
  
  to come in I'm going to print our state just to see what it
  


  
    
      10:05:05
    
  
  
  is our state is going to be a
  


  
    
      10:05:10
    
  
  
  value when we check the checkbox our state has a value of two when we uncheck
  


  
    
      10:05:16
    
  
  
  it it has a value of zero 0 zero means unchecked two means checked there's also
  


  
    
      10:05:23
    
  
  
  one for partially checked but that's not going to be relevant to this topic so
  


  
    
      10:05:28
    
  
  
  zero or two we could add an if statement such as if state is equal to two then
  


  
    
      10:05:35
    
  
  
  print you like food however that's not really readable other developers looking
  


  
    
      10:05:40
    
  
  
  over your code aren't going to understand what two is by looking at it instead let's use the following we will
  


  
    
      10:05:46
    
  
  
  access the class of QT there's a built-in constant of
  


  
    
      10:05:54
    
  
  
  checked this also equals two but it's more readable it's a constant so if
  


  
    
      10:06:00
    
  
  
  state is equal to QT checked print you like food I will check the checkbox you like
  


  
    
      10:06:08
    
  
  
  food when I uncheck it nothing happens let's add an else
  


  
    
      10:06:14
    
  
  
  statement else let's print you do not not like
  


  
    
      10:06:21
    
  
  
  food so then when I check the checkbox we print you like food when I uncheck it
  


  
    
      10:06:28
    
  
  
  we print you do not like food you like food you do not like food you like food
  


  
    
      10:06:34
    
  
  
  you do not like food all right everybody so that is an introduction to checkboxes in pi
  


  
    
      10:06:41
    
  
  
  qt5 all right let's do this thing today I got to talk about radio buttons in pi
  


  
    
  72.PyQt5 radio buttons



  
    
      10:06:46
    
  
  
  qt5 to work with radio buttons we will need the following imports from the module of QT widgets we will need the
  


  
    
      10:06:54
    
  
  
  class of Q radio button as well as Q
  


  
    
      10:07:00
    
  
  
  button group to group together different buttons let's create three radio buttons
  


  
    
      10:07:06
    
  
  
  within the Constructor of my main window we will construct three radio buttons
  


  
    
      10:07:12
    
  
  
  for the first radio button this will be named radio one we will call the Constructor of the class Q radio button
  


  
    
      10:07:20
    
  
  
  then we can pass in some text what is the radio button going to say let's say that we're working with payment options
  


  
    
      10:07:28
    
  
  
  let's say visa for the first option then for the second argument I will pass in
  


  
    
      10:07:34
    
  
  
  we will add this radio button directly to our window that would be self let's
  


  
    
      10:07:39
    
  
  
  create two more additional radio buttons Radio 2 and radio 3 the text of radio
  


  
    
      10:07:45
    
  
  
  button two will be MasterCard and three will be a gift card
  


  
    
      10:07:51
    
  
  
  we are selecting different payment options we need to set the geometry of
  


  
    
      10:07:57
    
  
  
  these radio buttons because we're not using a layout manager I have a method to initialize my
  


  
    
      10:08:02
    
  
  
  user interface this is where I will set the geometry of my radio buttons so
  


  
    
      10:08:08
    
  
  
  let's say self. radio1 we will call the set geometry method pass in some
  


  
    
      10:08:15
    
  
  
  coordinates 0 0 is good that applies to the top left corner of my window for the
  


  
    
      10:08:20
    
  
  
  width 300 and the height 50 is good let's do this with radio buttons 2 and
  


  
    
      10:08:27
    
  
  
  three Radio 2 radio 3 we'll just move each radio button down on the Y AIS by
  


  
    
      10:08:33
    
  
  
  50 pixels each so 50 then 100 here are the three radio buttons
  


  
    
      10:08:41
    
  
  
  however the font is kind of small we can barely see it so let's apply a stylesheet here's a trick that we can do
  


  
    
      10:08:48
    
  
  
  with stylesheets we can apply multiple CSS like properties to an entire group
  


  
    
      10:08:53
    
  
  
  of widgets rather than having to type them and apply them individually we will select our window
  


  
    
      10:09:00
    
  
  
  of self set the style sheet of our window with the set style sheet
  


  
    
      10:09:07
    
  
  
  method we will add a selector the selector is going to be the name of the widget Q radio button in this case then
  


  
    
      10:09:15
    
  
  
  add a set of curly braces we can apply CSS like properties to an
  


  
    
      10:09:22
    
  
  
  entire group of widgets this way so let's set the font size of all radio
  


  
    
      10:09:28
    
  
  
  buttons to be 40 pixels
  


  
    
      10:09:34
    
  
  
  better let's set the font family to be
  


  
    
      10:09:40
    
  
  
  aial then I will add a little bit of padding around each radio button padding 10 pixels
  


  
    
      10:09:50
    
  
  
  that's pretty good so with radio buttons we can only select one from any one
  


  
    
      10:09:55
    
  
  
  radio button group if I was making a payment I can't pay with a Visa and
  


  
    
      10:10:00
    
  
  
  Mastercard at the same time I can only select one option that's the point of radio buttons we're limited to just one
  


  
    
      10:10:08
    
  
  
  option with the default behavior of Pi qt5 all radio buttons unless explicitly
  


  
    
      10:10:14
    
  
  
  stated are all part of the same group to demonstrate that let's create two
  


  
    
      10:10:19
    
  
  
  additional radio buttons Radio 4 and Radio 5 radio button 4 will be for a
  


  
    
      10:10:26
    
  
  
  payment method rather than a payment type for example we could say we're paying in
  


  
    
      10:10:33
    
  
  
  store radio button 5 will be we're paying online radio buttons 1 through 3
  


  
    
      10:10:39
    
  
  
  will be for the payment type radio buttons four and five will be for the payment method we're either paying in
  


  
    
      10:10:45
    
  
  
  store or we're ordering something online we do need to set the geometry for these
  


  
    
      10:10:50
    
  
  
  two radio buttons I'll just copy these two lines add Radio 4 Radio 5 we'll set the
  


  
    
      10:10:58
    
  
  
  y-coordinate of four to be 150 and 5 to be 200 all radio buttons will be within
  


  
    
      10:11:06
    
  
  
  the same button group if I was to select in store we deselect one of these options what I would like is one option
  


  
    
      10:11:13
    
  
  
  from this first group and another option from this other group these buttons are all in the same group group I can only
  


  
    
      10:11:20
    
  
  
  select one if I would like to pay with the VISA in store and I click the in
  


  
    
      10:11:25
    
  
  
  store radio button we unselect the radio button for Visa I would like these radio
  


  
    
      10:11:31
    
  
  
  buttons within different groups we need to create two different groups and add
  


  
    
      10:11:37
    
  
  
  them accordingly here's how within our Constructor we will
  


  
    
      10:11:42
    
  
  
  access self declare a button group let's name it button group one for Simplicity
  


  
    
      10:11:49
    
  
  
  equals call The Constructor of the class Q button group then pass in to set the
  


  
    
      10:11:56
    
  
  
  parent widget to be the window then we will create button group
  


  
    
      10:12:03
    
  
  
  two we're going to access self select the radio button
  


  
    
      10:12:08
    
  
  
  group button group one call the add
  


  
    
      10:12:14
    
  
  
  button method then pass in a radio button self. Radio
  


  
    
      10:12:21
    
  
  
  1 then we'll add Radio 2 and radio
  


  
    
      10:12:26
    
  
  
  3 we'll select button group two this time button group
  


  
    
      10:12:32
    
  
  
  two add radio button 4 and radio button
  


  
    
      10:12:38
    
  
  
  5 the first three radio buttons are within the same group radio buttons 4 and five are within a different group we
  


  
    
      10:12:45
    
  
  
  can only select one radio button from any one radio button group maybe I would like to pay with a Visa
  


  
    
      10:12:52
    
  
  
  card in store or a master card online or a gift card in store these radio buttons
  


  
    
      10:13:00
    
  
  
  are within different button groups we're limited to one selection in any one radio button group when we select these
  


  
    
      10:13:07
    
  
  
  radio buttons they don't quite do anything for each radio button we have to connect a signal to a slot here's
  


  
    
      10:13:15
    
  
  
  how let's define a method of radio
  


  
    
      10:13:20
    
  
  
  button changed there will be no parameters beside self temporarily I'll write pass we'll
  


  
    
      10:13:28
    
  
  
  fill this in in a moment we will take each radio button let's start with radio one Radio One the
  


  
    
      10:13:37
    
  
  
  signal will be toggled when this radio button is toggled we will connect a slot
  


  
    
      10:13:45
    
  
  
  we will pass in a function or a method self dot radio button
  


  
    
      10:13:51
    
  
  
  changed then we will do this with the other radio buttons one through
  


  
    
      10:14:01
    
  
  
  five let's print a test message you selected
  


  
    
      10:14:07
    
  
  
  something just to be sure that everything is working you selected
  


  
    
      10:14:14
    
  
  
  something okay we know that that works currently
  


  
    
      10:14:19
    
  
  
  what we're going to need to do is get the sender widget which radio button sent the signal of
  


  
    
      10:14:26
    
  
  
  toggled I will create a local radio button to store that radio button
  


  
    
      10:14:33
    
  
  
  whichever one emitted the signal we can determine that with self. sender method
  


  
    
      10:14:40
    
  
  
  the sender method is going to return the widget that sent the signal so if we
  


  
    
      10:14:45
    
  
  
  select radio button one our radio button will be radio button one if it was five
  


  
    
      10:14:51
    
  
  
  then it's five in this case then we'll determine if our radio button is checked take our radio button
  


  
    
      10:14:59
    
  
  
  use the is checked method this will return a Boolean true or false if it's
  


  
    
      10:15:06
    
  
  
  checked if this returns true then let's print the following I'll use an F string we will
  


  
    
      10:15:14
    
  
  
  get the text of the radio button radio button called the text method to return
  


  
    
      10:15:20
    
  
  
  the text of the radio button is selected all right then let's see if
  


  
    
      10:15:27
    
  
  
  this works let's select Visa Visa is selected
  


  
    
      10:15:33
    
  
  
  MasterCard is selected gift card is selected in store is selected and online
  


  
    
      10:15:39
    
  
  
  is selected that's how to determine which radio button was selected which one is
  


  
    
      10:15:45
    
  
  
  the sender which one sent the signal all right everybody so that is an introduction to radio buttons in
  


  
    
      10:15:54
    
  
  
  pyqt5 why hello everybody today I got to explain line edit widgets in pyqt5 also
  


  
    
  73.PyQt5 line edits



  
    
      10:16:01
    
  
  
  known as textboxes in pretty much anything ever made ever why are they called line edit widgets I really don't
  


  
    
      10:16:07
    
  
  
  know let's begin from the module of QT widgets we will import the following
  


  
    
      10:16:13
    
  
  
  class of q line edit to create a text
  


  
    
      10:16:18
    
  
  
  box I I mean a line edit widget we are accessing our window of
  


  
    
      10:16:23
    
  
  
  self we will call this line edit widget line
  


  
    
      10:16:29
    
  
  
  edit equals call The Constructor of the class q line
  


  
    
      10:16:35
    
  
  
  edit then we will pass in self to add this line edit widget to the
  


  
    
      10:16:42
    
  
  
  window let's set the geometry but we do have a text box in which we can type in stuff
  


  
    
      10:16:49
    
  
  
  I have a method to initialize the user interface within this method I will
  


  
    
      10:16:55
    
  
  
  access self dot the line edit widget and set the
  


  
    
      10:17:03
    
  
  
  geometry let's set it in the top left corner where X is 10 Y is 10 set a width
  


  
    
      10:17:10
    
  
  
  200 is good and a height 40 that's not too bad now the text is
  


  
    
      10:17:17
    
  
  
  really small we can change that by applying a stylesheet access our window with self
  


  
    
      10:17:25
    
  
  
  access our line edit widget then call the set stylesheet
  


  
    
      10:17:32
    
  
  
  method we can pass in some CSS like properties including a font
  


  
    
      10:17:38
    
  
  
  size let's pick 25 pixels and here's my new text box we can
  


  
    
      10:17:46
    
  
  
  read the text now let's also change the font
  


  
    
      10:17:51
    
  
  
  family font family I will pick
  


  
    
      10:17:56
    
  
  
  aial this text box by itself it really doesn't do anything we need some way to
  


  
    
      10:18:02
    
  
  
  get the text from the text box let's add a button when we click on the button we
  


  
    
      10:18:08
    
  
  
  will get the text from the text box and do something with it cuz right now it doesn't do
  


  
    
      10:18:14
    
  
  
  anything we will need to import Q push
  


  
    
      10:18:19
    
  
  
  button let's create one button self. button equals call The Constructor of
  


  
    
      10:18:27
    
  
  
  the class Q push button let's say that this is a submit button I will pass in a string of submit
  


  
    
      10:18:35
    
  
  
  and we are adding this button to our window and we do need to set the
  


  
    
      10:18:41
    
  
  
  geometry of the button we're not using a layout manager right now access our window with self
  


  
    
      10:18:49
    
  
  
  access our button that we have previously created in our Constructor then call the set geometry
  


  
    
      10:18:57
    
  
  
  method we'll place our button where X is 210 Y is 10 the width will be
  


  
    
      10:19:05
    
  
  
  100 and the height will be 40 not too bad let's change the font
  


  
    
      10:19:11
    
  
  
  size of the button I'll copy these two lines of code because I'm
  


  
    
      10:19:16
    
  
  
  lazy instead of selecting our line edit widget we will select our
  


  
    
      10:19:24
    
  
  
  button that's better if I were to click on the button it doesn't do
  


  
    
      10:19:29
    
  
  
  anything we'll set up the signal of clicked to connect to a method that will do
  


  
    
      10:19:36
    
  
  
  something let's define a method of submit we're submitting something we're
  


  
    
      10:19:41
    
  
  
  submitting the text within the text box and for now all right pass we'll get back to this in a second
  


  
    
      10:19:49
    
  
  
  we're going to take our button self. button we'll connect the signal of
  


  
    
      10:19:55
    
  
  
  clicked clicked. connect method we will connect the method of submit self.
  


  
    
      10:20:04
    
  
  
  submit so when we click on the button we will call this method let's print a test
  


  
    
      10:20:10
    
  
  
  message you clicked the button let's type in something
  


  
    
      10:20:18
    
  
  
  press submit and we get our test message you clicked the
  


  
    
      10:20:24
    
  
  
  button let's get the text from the text box then do something with
  


  
    
      10:20:29
    
  
  
  it let's create a local variable of text text equals now we have to get the text
  


  
    
      10:20:37
    
  
  
  from our line edit widget self. line edit that's the widget to get
  


  
    
      10:20:45
    
  
  
  the text we can use the text method to return the text then let's print the text I'll use an F
  


  
    
      10:20:53
    
  
  
  string we'll say hello add a placeholder then display the
  


  
    
      10:20:59
    
  
  
  text so now after typing in something why don't you type in your name then press submit
  


  
    
      10:21:07
    
  
  
  we will display hello your name you could add some placeholder text
  


  
    
      10:21:13
    
  
  
  too let's do that here let's take self do line edit
  


  
    
      10:21:20
    
  
  
  widget set placeholder
  


  
    
      10:21:27
    
  
  
  text and let's say enter your name when I run this program we have
  


  
    
      10:21:34
    
  
  
  some placeholder text that says enter your name this time I will type in
  


  
    
      10:21:39
    
  
  
  SpongeBob then press submit hello SpongeBob all right everybody so those
  


  
    
      10:21:45
    
  
  
  are line edit widgets also commonly referred to as text boxes and well
  


  
    
      10:21:51
    
  
  
  everybody those are line edit widgets in pi qt5 hello everybody so in today's video
  


  
    
  74.PyQt5 CSS styles



  
    
      10:21:57
    
  
  
  I'm going to explain setting stylesheets in pyqt5 CSS means cascading stylesheets
  


  
    
      10:22:03
    
  
  
  if you're not familiar with CSS you can still follow along but knowing CSS is
  


  
    
      10:22:08
    
  
  
  helpful as a reminder I do have a full free course on YouTube on HTML and CSS
  


  
    
      10:22:14
    
  
  
  if you would like to learn more let's begin for this demonstration we will need the following Imports we will be
  


  
    
      10:22:20
    
  
  
  designing some buttons we will import Q push button we'll be working with the layout
  


  
    
      10:22:26
    
  
  
  manager we will import Q widget and for a horizontal layout
  


  
    
      10:22:32
    
  
  
  manager we will need Q hbox layout so import these three from
  


  
    
      10:22:40
    
  
  
  the module of QT widgets now in previous topics we've set the geometry of our
  


  
    
      10:22:45
    
  
  
  window since we're using a layout manager we don't necessarily need that anymore so I'm going to delete it in the
  


  
    
      10:22:52
    
  
  
  past I have also created a method to initialize our user interface and we are calling that within the Constructor of
  


  
    
      10:22:58
    
  
  
  our main window we will create three push button widgets self. button one will be the
  


  
    
      10:23:04
    
  
  
  first button equals take our Q push button class and call the Constructor we
  


  
    
      10:23:11
    
  
  
  can add text to the button we will pass that as an argument now since we're using a layout manager we don't need to
  


  
    
      10:23:17
    
  
  
  add this button to self our window we don't need to do that let's create two
  


  
    
      10:23:23
    
  
  
  more buttons we'll have button two and button three button two will say number
  


  
    
      10:23:28
    
  
  
  two button three will say number three now we'll create a layout manager under normal circumstances we can't add a
  


  
    
      10:23:35
    
  
  
  layout manager to our main window with main window widgets there's already a specified layout and format we're going
  


  
    
      10:23:42
    
  
  
  to add a layout manager to a central widget and this widget will be added to
  


  
    
      10:23:47
    
  
  
  the main window let's take care of that within our initialized user interface method we
  


  
    
      10:23:53
    
  
  
  will create a central widget equals call The Constructor of Q
  


  
    
      10:24:00
    
  
  
  widget then we will take self that means our window and set the central
  


  
    
      10:24:08
    
  
  
  widget set Central widget then pass in our Central widget
  


  
    
      10:24:14
    
  
  
  to set it then we will create a layout we will call The Constructor within the
  


  
    
      10:24:19
    
  
  
  class of qbox layout let's name this layout hbox for a
  


  
    
      10:24:25
    
  
  
  horizontal box equals call The Constructor within this
  


  
    
      10:24:31
    
  
  
  class we will take our layout of horizontal box then add the following
  


  
    
      10:24:38
    
  
  
  widgets add widget self. button one we'll do this with two and three
  


  
    
      10:24:49
    
  
  
  then the last thing we need to do is take our Central widget call the set layout
  


  
    
      10:24:56
    
  
  
  method then pass in our layout manager and now we should have those three buttons they're all arranged
  


  
    
      10:25:04
    
  
  
  horizontally now we're going to apply some CSS like styling using the method
  


  
    
      10:25:09
    
  
  
  of set style sheet here's how rather than apply the CSS properties individually such as self. button one do
  


  
    
      10:25:18
    
  
  
  that stylesheet and in the past we've passed in individual CSS properties we're
  


  
    
      10:25:24
    
  
  
  instead going to set the stylesheet of our window self we have a lot to write
  


  
    
      10:25:30
    
  
  
  instead of double quotes we're going to use triple
  


  
    
      10:25:36
    
  
  
  quotes triple quotes are used to write very long strings in a more organized
  


  
    
      10:25:41
    
  
  
  way all of the CSS properties that we're going to write are going to be within this set of triple quotes so let me give
  


  
    
      10:25:47
    
  
  
  you a demonstration we could individually apply CSS like properties to each of these widgets but we could
  


  
    
      10:25:54
    
  
  
  select an entire class of widgets too let's select the class of Q push
  


  
    
      10:26:00
    
  
  
  button then add a set of curly braces the following CSS properties will
  


  
    
      10:26:07
    
  
  
  apply to all Q push button widgets So currently this is what we have we
  


  
    
      10:26:13
    
  
  
  increase the font size for every push button so we will add the following
  


  
    
      10:26:18
    
  
  
  property of font size then set it to be 40 pixels each be
  


  
    
      10:26:23
    
  
  
  sure to end each CSS property with a semicolon so the font size is now 40 for
  


  
    
      10:26:30
    
  
  
  every button let's set the font font family I
  


  
    
      10:26:36
    
  
  
  will pick aial let's add some padding we can add
  


  
    
      10:26:42
    
  
  
  some space around the text and the button itself so with padding if I was to set
  


  
    
      10:26:50
    
  
  
  this to 75 pixels we would have 75 pixels worth the
  


  
    
      10:26:56
    
  
  
  space between the text and the border of the button I would like to change the dimensions of the padding so let's apply
  


  
    
      10:27:03
    
  
  
  15 pixels to the top and bottom of the button and 75 to the
  


  
    
      10:27:09
    
  
  
  sides that's better margin is the space around a
  


  
    
      10:27:15
    
  
  
  button let's set the margin to be 25 pixels now the buttons are more spread
  


  
    
      10:27:22
    
  
  
  out if this was 250 they would really be spread out that's margin it's the space
  


  
    
      10:27:28
    
  
  
  around a widget let's set that back to
  


  
    
      10:27:34
    
  
  
  25 I'm going to change the border border 3 pixels
  


  
    
      10:27:42
    
  
  
  solid this would change the border of the buttons we now have a black border
  


  
    
      10:27:47
    
  
  
  that's three pixels and width if you would like to round the corners we can use border radius I will set that to be
  


  
    
      10:27:54
    
  
  
  15 pixels with all the buttons the corners are now
  


  
    
      10:27:59
    
  
  
  rounded within our set style sheet method we're applying all of these CSS like properties to every push button now
  


  
    
      10:28:08
    
  
  
  what if you would like to apply CSS properties to Only One widget rather than all of them here's how with each of
  


  
    
      10:28:15
    
  
  
  our widgets buttons 1 two and three we need to set an object name let's do that
  


  
    
      10:28:21
    
  
  
  before we call the set stylesheet method we will take our buttons self. button
  


  
    
      10:28:27
    
  
  
  one call the set object name method then
  


  
    
      10:28:33
    
  
  
  pass in a name for this widget we'll keep the name the same as button
  


  
    
      10:28:38
    
  
  
  one so let's do this with button two and button three button two button
  


  
    
      10:28:46
    
  
  
  three within the context of set stylesheet we will refer to these widgets by their object name buttons 1 2
  


  
    
      10:28:54
    
  
  
  and three and now we can select them individually let's say that with button
  


  
    
      10:29:00
    
  
  
  one I would like the background color to be red we're going to access our class
  


  
    
      10:29:05
    
  
  
  of Q push button follow this with a pound sign I like to call it a hashtag
  


  
    
      10:29:11
    
  
  
  then we need the object name button one button one refers to the widget of
  


  
    
      10:29:17
    
  
  
  button one again I kept the name the same then we need a set of curly braces between the
  


  
    
      10:29:23
    
  
  
  set of curly braces we can list one or many different CSS properties let's
  


  
    
      10:29:29
    
  
  
  change the background color I will set it to be
  


  
    
      10:29:34
    
  
  
  red and now the background color of only that button is red and not all of
  


  
    
      10:29:40
    
  
  
  them if I was to set the background color within the class well then all of
  


  
    
      10:29:45
    
  
  
  them would be red okay so with button two I'll just copy
  


  
    
      10:29:50
    
  
  
  what we have and paste it we are selecting the ID of button two
  


  
    
      10:29:56
    
  
  
  let's set the background color to be green so then the background color is
  


  
    
      10:30:02
    
  
  
  now green and button three button three will be
  


  
    
      10:30:12
    
  
  
  blue if you would like a greater variety of colors I recommend looking up a color
  


  
    
      10:30:18
    
  
  
  picker you can just Google Color Picker so if I would like a very specific shade
  


  
    
      10:30:23
    
  
  
  of red I can pick that let's go with that there are a few options provided to
  


  
    
      10:30:30
    
  
  
  you you can use hex values now we have a very specific shade
  


  
    
      10:30:37
    
  
  
  of red you can use
  


  
    
      10:30:44
    
  
  
  RGB RGB en close it with within a set of parentheses and then paste those
  


  
    
      10:30:51
    
  
  
  numbers or my favorite which is hsl hsl means Hue saturation and
  


  
    
      10:31:00
    
  
  
  lightness we will enclose our values within hsl if you copy these values
  


  
    
      10:31:06
    
  
  
  directly from Google you would have to remove this degree symbol I like hsl because I can also
  


  
    
      10:31:12
    
  
  
  control the saturation and the lightness pretty easily okay let's pick a very specific shade of
  


  
    
      10:31:20
    
  
  
  green that's good I would say I'll use the hsl
  


  
    
      10:31:25
    
  
  
  values hsl remove the degree
  


  
    
      10:31:31
    
  
  
  symbol and now we have a very specific shade of green and
  


  
    
      10:31:37
    
  
  
  blue that's good I would say
  


  
    
      10:31:50
    
  
  
  that's not too bad if you're already familiar with CSS we can apply pseudo
  


  
    
      10:31:55
    
  
  
  classes such as when we hover over one of the buttons here's how let's copy
  


  
    
      10:32:00
    
  
  
  these three blocks then paste them
  


  
    
      10:32:06
    
  
  
  again we can add CSS properties when we hover over something we have to use the
  


  
    
      10:32:12
    
  
  
  hover PSE sudo class after the ID of each of our buttons we will add Cod in
  


  
    
      10:32:18
    
  
  
  Hover we can apply the following CSS properties when we hover over the buttons all I'm going to do is up the
  


  
    
      10:32:26
    
  
  
  lightness let's say by 20% each then when we hover over one of the
  


  
    
      10:32:33
    
  
  
  buttons the lightness is going to change we apply the new CSS
  


  
    
      10:32:39
    
  
  
  properties all right everybody so that is a more in-depth explanation of the set stylesheet method in pi qt5
  


  
    
  75.digital clock program



  
    
      10:32:48
    
  
  
  all right everybody in today's video we're going to build a digital clock widget using Python's Pi qt5 library at
  


  
    
      10:32:55
    
  
  
  the top of our python file we will need the following Imports import CIS CIS
  


  
    
      10:33:01
    
  
  
  means system this module provides variables used and maintained by the python interpreter we would also need
  


  
    
      10:33:07
    
  
  
  widgets widgets are the building blocks of a guy application from the package of Pi
  


  
    
      10:33:15
    
  
  
  qt5 we need to access the module of QT widgets import the
  


  
    
      10:33:22
    
  
  
  following Q application Q widget this is a generic
  


  
    
      10:33:29
    
  
  
  widget we'll turn our digital clock into its own widget and Q label to work with
  


  
    
      10:33:36
    
  
  
  labels we will be using a layout manager more specifically QV box
  


  
    
      10:33:44
    
  
  
  layout there's another import we'll need too from the package of Pi
  


  
    
      10:33:49
    
  
  
  qt5 access the module of QT core the QT core module it provides functionality
  


  
    
      10:33:56
    
  
  
  not related to guy components this is where we'll get a timer to keep track of the time from this module we will import
  


  
    
      10:34:04
    
  
  
  Q timer Q time and QT QT is for alignment
  


  
    
      10:34:11
    
  
  
  we will create a class of digital clock instead of inheriting from the main
  


  
    
      10:34:17
    
  
  
  window window widget we will inherit from The Base Class of Q widget Q widget
  


  
    
      10:34:22
    
  
  
  is a base class to create our own widgets our digital clock will be a widget we will need a Constructor so
  


  
    
      10:34:29
    
  
  
  let's define that Define init pass and self if there are any arguments to send
  


  
    
      10:34:36
    
  
  
  to the parent we will call the Constructor of the parent the super class
  


  
    
      10:34:42
    
  
  
  super called the init method at the end of The Constructor what I like to do is call a method of
  


  
    
      10:34:49
    
  
  
  initialize UI init UI this will be a separate method Define init UI there are
  


  
    
      10:34:59
    
  
  
  no parameters besid self and for now I'll write pass it's within this method
  


  
    
      10:35:04
    
  
  
  that we will be designing the layout of the digital clock within the Constructor that's where we will be constructing all
  


  
    
      10:35:10
    
  
  
  of the different entities for the clock at the end of my python file I will add the following statement if Thunder name
  


  
    
      10:35:18
    
  
  
  is equal to a string of Dunder main this statement will be true if we
  


  
    
      10:35:25
    
  
  
  are running this program directly to create an application we will create an F object equals call The
  


  
    
      10:35:32
    
  
  
  Constructor within the class Q application as an argument to the Constructor we will pass in the
  


  
    
      10:35:38
    
  
  
  following argument access the module of CIS a RGV which means arguments this
  


  
    
      10:35:45
    
  
  
  would apply if we're running from command prompt or terminal but we won't be doing that in this video but it's
  


  
    
      10:35:51
    
  
  
  nice just to set it up in case we do in the future now we are going to create a
  


  
    
      10:35:56
    
  
  
  clock object clock equals we will call the Constructor of our digital clock
  


  
    
      10:36:02
    
  
  
  class there are no arguments now the window doesn't appear That's because we
  


  
    
      10:36:08
    
  
  
  have to use the show method of our clock take our clock call the show method now
  


  
    
      10:36:14
    
  
  
  it's only going to appear for a brief second just momentarily I don't know if you saw
  


  
    
      10:36:20
    
  
  
  that to ensure a clean and proper exit of our application we need to call the following method access our module of
  


  
    
      10:36:28
    
  
  
  sis call the exit method then pass in the following we will take our app
  


  
    
      10:36:34
    
  
  
  object then call the following method eccore and then a set of parentheses
  


  
    
      10:36:42
    
  
  
  it's a method it's the execute method it starts the main event Loop of the application it also handles events such
  


  
    
      10:36:49
    
  
  
  as key presses Mouse clicks or other user interactions so then we should have
  


  
    
      10:36:54
    
  
  
  a window that stays in place until we exit okay now we have the base
  


  
    
      10:37:00
    
  
  
  functionality all set up we have a class of digital clock that inherits from the
  


  
    
      10:37:05
    
  
  
  Q widget based class we're not going to be using main window in this video within the Constructor of my digital
  


  
    
      10:37:11
    
  
  
  clock I will create a label self. time label this will be a label
  


  
    
      10:37:18
    
  
  
  that displays the time we will call the Constructor within the class Q label
  


  
    
      10:37:24
    
  
  
  then be sure to pass in self we will be adding this label directly to our widget
  


  
    
      10:37:29
    
  
  
  of clock we will need a timer self. timer equals call The Constructor of Q
  


  
    
      10:37:37
    
  
  
  timer then pass in self we are adding the timer to the
  


  
    
      10:37:42
    
  
  
  clock now with designing the layout of our clock I'll handle that within the initialized user interface
  


  
    
      10:37:48
    
  
  
  method we're going to set a title for the window self. set window title method
  


  
    
      10:37:57
    
  
  
  pass in a string that will be used for the title of the window let's say digital clock then our window should say
  


  
    
      10:38:06
    
  
  
  digital clock let's set the geometry of the window self. set
  


  
    
      10:38:14
    
  
  
  geometry the first two arguments are going to be for for the placement of the window where will it appear within your
  


  
    
      10:38:21
    
  
  
  screen so I'll pick something approximately in the middle for me but feel free to change these values then we
  


  
    
      10:38:27
    
  
  
  need a width for the window let's say 300 and a height 100 for the height so
  


  
    
      10:38:34
    
  
  
  my window should appear approximately in the middle of my screen the base width is 300 the base height is 100 now we're
  


  
    
      10:38:41
    
  
  
  going to need a layout manager I will name this layout manager vbox for a
  


  
    
      10:38:46
    
  
  
  vertical box vbox equals call The Constructor within the class QV box this
  


  
    
      10:38:54
    
  
  
  will arrange all of our widgets vertically but we only have one widget a Time label so we will take our layout
  


  
    
      10:39:02
    
  
  
  manager of vbox add widget that's a method we will
  


  
    
      10:39:09
    
  
  
  pass in self. time label as an argument we're adding our label to this layout
  


  
    
      10:39:14
    
  
  
  manager of vbox then to set the layout we will take self
  


  
    
      10:39:20
    
  
  
  that applies to our clock call the set layout method then pass in our layout
  


  
    
      10:39:26
    
  
  
  manager of vbox So currently if I run this we don't see anything temporarily within our
  


  
    
      10:39:33
    
  
  
  label I will add some text just as a placeholder so we can see what we're working with let's say 12
  


  
    
      10:39:42
    
  
  
  o' so then we should see something at least although the font is kind of small
  


  
    
      10:39:48
    
  
  
  we will be getting rid of this later we just want to be sure that we can see everything all right so after our layout
  


  
    
      10:39:57
    
  
  
  I would like the label to be Center aligned horizontally here's how we can set that
  


  
    
      10:40:02
    
  
  
  up we will take our label self. time label call the set alignment
  


  
    
      10:40:13
    
  
  
  method access the class of QT
  


  
    
      10:40:18
    
  
  
  access align Center this should Center align our
  


  
    
      10:40:25
    
  
  
  time now let's work on the font I can barely read
  


  
    
      10:40:31
    
  
  
  it we will take our label self. time label set style
  


  
    
      10:40:39
    
  
  
  sheet we can pass in multiple CSS like properties let's set the font size I'll
  


  
    
      10:40:46
    
  
  
  set it to be 150 pixels now we can read
  


  
    
      10:40:52
    
  
  
  it you could pick a font but we're going to change that at the end of this video we'll import a custom font but
  


  
    
      10:40:59
    
  
  
  temporarily let's say font family
  


  
    
      10:41:06
    
  
  
  aial you could change the color too so if I set the color to be
  


  
    
      10:41:13
    
  
  
  green then the font color is going to be green but I would like a very specific
  


  
    
      10:41:19
    
  
  
  shade of green you could always Google a Color Picker then pick a very specific color
  


  
    
      10:41:27
    
  
  
  uh let's go with that something that's bright green you can copy the hex value
  


  
    
      10:41:33
    
  
  
  RGB or hsl hsl means Hue saturation and lightness I'll use hsl
  


  
    
      10:41:41
    
  
  
  values for the color we will type hsl add a set of parenthesis then paste
  


  
    
      10:41:47
    
  
  
  those values but there is a degree symbol you do have to get rid of that now the font color is going to be bright
  


  
    
      10:41:53
    
  
  
  green let's change the background color here's how we will take self that
  


  
    
      10:42:00
    
  
  
  applies to our clock then call the set stylesheet method pass in a background
  


  
    
      10:42:08
    
  
  
  color we will set the background color property to be
  


  
    
      10:42:14
    
  
  
  black I think that looks pretty good but doesn't quite do anything quite yet that's the next step let's create a
  


  
    
      10:42:21
    
  
  
  method to update time no arguments beside self I will create a local
  


  
    
      10:42:28
    
  
  
  variable of current time equals now to get the current time we can access the
  


  
    
      10:42:34
    
  
  
  class of Q time Q time do call the method of
  


  
    
      10:42:41
    
  
  
  current time we will need to convert it to a string we will method chain
  


  
    
      10:42:47
    
  
  
  the two string method within the two string method we will Design the layout
  


  
    
      10:42:53
    
  
  
  of the time so I would like hours first I will type 2 H's colon minutes that's 2
  


  
    
      10:43:00
    
  
  
  M's colon 2 s's to set the text of the label we will
  


  
    
      10:43:05
    
  
  
  take self. time Lael call the set text method then pass
  


  
    
      10:43:11
    
  
  
  in our current time so if I run this currently we still
  


  
    
      10:43:17
    
  
  
  have our placeholder time let's update it with the current time we can get rid
  


  
    
      10:43:22
    
  
  
  of our placeholder text of 12 we can delete it after we set the font let's call the
  


  
    
      10:43:30
    
  
  
  method of update time self. update
  


  
    
      10:43:36
    
  
  
  time now we should display the current time so me I'm recording this video at
  


  
    
      10:43:41
    
  
  
  7:44 in the morning if you would like to add amm or p.m. after your time here's
  


  
    
      10:43:47
    
  
  
  how after our string format specifiers we will add Capital AP a means anti-
  


  
    
      10:43:54
    
  
  
  meridium and P means post meridium so then we should display AM or
  


  
    
      10:44:00
    
  
  
  PM depending on when you're coding this currently the time for me is 7:45 a.m.
  


  
    
      10:44:07
    
  
  
  to get the clock to update every second we need to connect our timer
  


  
    
      10:44:12
    
  
  
  widget to a slot of update time we will take our timer self. timer this isn't
  


  
    
      10:44:19
    
  
  
  the time label it's the timer to keep track of the time during a signal of
  


  
    
      10:44:24
    
  
  
  time out we will connect the following slot of self. update time self. update
  


  
    
      10:44:34
    
  
  
  time with our timer we need to trigger a timeout signal every 1,000 milliseconds
  


  
    
      10:44:41
    
  
  
  every second that is to handle that we will take our timer self. timer call the
  


  
    
      10:44:47
    
  
  
  start method then pass in 1,000 from 1,000
  


  
    
      10:44:52
    
  
  
  milliseconds so then when we run this program our clock should update every second and display the new current
  


  
    
      10:45:00
    
  
  
  time as an added bonus if you would like to download a custom font here's how
  


  
    
      10:45:06
    
  
  
  using Google or another search engine I would recommend looking up a font of you're choosing so one font that I like
  


  
    
      10:45:12
    
  
  
  is DS digital what we need is a ttf file meaning true type font I'll just pick
  


  
    
      10:45:20
    
  
  
  this first link so these fonts are pretty good so
  


  
    
      10:45:25
    
  
  
  I'm going to download them I'll pick this specific font DS
  


  
    
      10:45:30
    
  
  
  digit and again the file extension is ttf so once you have your font move it
  


  
    
      10:45:37
    
  
  
  to your project folder so for convenience we have that ttf file right next to our main python
  


  
    
      10:45:43
    
  
  
  file okay to work with specific fonts we will need the f following import from PI
  


  
    
      10:45:51
    
  
  
  qt5 do QT GUI
  


  
    
      10:45:56
    
  
  
  import Q font as well as Q font data
  


  
    
      10:46:06
    
  
  
  base since we're going to use our own custom font we can delete that from the set stylesheet method of our time label
  


  
    
      10:46:13
    
  
  
  so let's set the font right here we will assign a local variable a font
  


  
    
      10:46:20
    
  
  
  ID equals Q font data base Q font
  


  
    
      10:46:26
    
  
  
  database is a class for managing and querying fonts available to the application to add a custom font we will
  


  
    
      10:46:34
    
  
  
  call the following method within it add application
  


  
    
      10:46:40
    
  
  
  font within the set of quotes we're going to pass in a file path this can be a relative file path or an absolute file
  


  
    
      10:46:47
    
  
  
  path this ttf file is right next to my main python file I only need the file
  


  
    
      10:46:53
    
  
  
  name my font file is named DS digit and get the file extension of
  


  
    
      10:47:01
    
  
  
  ttf we will create a local variable of font family we will retrieve the name of the
  


  
    
      10:47:09
    
  
  
  font family from this ID again we will access qfont database
  


  
    
      10:47:15
    
  
  
  do call the application font families method so this
  


  
    
      10:47:23
    
  
  
  method returns a list of font names we will pass in our font
  


  
    
      10:47:29
    
  
  
  ID but there's another step we're going to use the index of operator and get the
  


  
    
      10:47:35
    
  
  
  index of zero this will retrieve the first element of the font family that's
  


  
    
      10:47:40
    
  
  
  because we're working with a list we will need just the first element at index zero now we'll have a font family
  


  
    
      10:47:47
    
  
  
  to work with now to set the font we will create a local variable of my font
  


  
    
      10:47:54
    
  
  
  equals called the class call The Constructor within the class Q
  


  
    
      10:48:02
    
  
  
  font pass in the following arguments our font family that's the first argument
  


  
    
      10:48:09
    
  
  
  and then a font size let's say 150 to set the font we will take our time label
  


  
    
      10:48:15
    
  
  
  self. time label called the set font
  


  
    
      10:48:21
    
  
  
  method then pass in my font our custom font so then we should have our custom
  


  
    
      10:48:28
    
  
  
  font that digital font that we've downloaded art everybody so that is how to create a digital clock widget using
  


  
    
      10:48:36
    
  
  
  pi qt5 hey yeah everybody so in today's video we're going to create this
  


  
    
  76.stopwatch program



  
    
      10:48:41
    
  
  
  stopwatch program using Python's pyqt5 Library once that's out of the way you
  


  
    
      10:48:46
    
  
  
  will need the following Imports import CIS CIS means system it handles system
  


  
    
      10:48:52
    
  
  
  variables for your python interpreter we will need the following widgets from PI
  


  
    
      10:48:59
    
  
  
  qt5 access the module of QT widgets
  


  
    
      10:49:04
    
  
  
  widgets are the building blocks of a pi qt5 application we will import the following
  


  
    
      10:49:10
    
  
  
  widgets Q application Q widget
  


  
    
      10:49:17
    
  
  
  Q label Q push button QV box
  


  
    
      10:49:26
    
  
  
  layout and qh box layout let me put these on a new line
  


  
    
      10:49:32
    
  
  
  just so we can read everything from the package of Pi qt5 access QT core we will
  


  
    
      10:49:40
    
  
  
  import Q timer our timer will emit a signal after a given interval
  


  
    
      10:49:47
    
  
  
  which is what we need for a stopwatch Q time to keep track of the time and QT
  


  
    
      10:49:53
    
  
  
  for alignment let's do a test run to be sure that there's no errors looks like L and label should be
  


  
    
      10:50:00
    
  
  
  Capital there we go no errors once you have the following Imports we will
  


  
    
      10:50:06
    
  
  
  construct a Class A Class of stopwatch which will inherit from The
  


  
    
      10:50:13
    
  
  
  Base Class of Q widget our stopwatch will be a widget we
  


  
    
      10:50:18
    
  
  
  will need a Constructor we'll Define that Dunder init no arguments besid self if we have
  


  
    
      10:50:26
    
  
  
  arguments to pass to the parent of Q widget we will call the super class the parent call The Constructor of the
  


  
    
      10:50:33
    
  
  
  parent no arguments currently now if we are running this file directly we'll use an if statement
  


  
    
      10:50:40
    
  
  
  to verify that if Dunder name is equal to a string of Dunder Main
  


  
    
      10:50:47
    
  
  
  if this is true if we are running this file directly then we will construct a
  


  
    
      10:50:53
    
  
  
  stopwatch we will create an app object call The Constructor within the Q
  


  
    
      10:50:58
    
  
  
  application class pass in the following access CIS our system access AR RGV
  


  
    
      10:51:06
    
  
  
  which means arguments this is if we're using command line arguments which we won't be using
  


  
    
      10:51:12
    
  
  
  but it's nice to Future proof our code just in case we do in the future we will create a stopwatch object stopwatch
  


  
    
      10:51:20
    
  
  
  equals call The Constructor within our class of stopwatch our window is not going to
  


  
    
      10:51:27
    
  
  
  show unless we call the show method take our stopwatch call the show
  


  
    
      10:51:32
    
  
  
  method now our window is only going to show for a brief second we need to ensure a clean exit we
  


  
    
      10:51:40
    
  
  
  can access CIS call the exit method pass in the following
  


  
    
      10:51:47
    
  
  
  app then call the excore method this method starts the
  


  
    
      10:51:54
    
  
  
  main event Loop and handles events so then we should have a basic window which stays in place until we
  


  
    
      10:52:01
    
  
  
  close it we now have the main skeletal structure of a pi qt5 application set up
  


  
    
      10:52:06
    
  
  
  if you're one of the people that have jumped ahead up until this point we have a class of stopwatch which inherits from
  


  
    
      10:52:12
    
  
  
  the Q widget class we've constructed a stopwatch object and we're showing it so
  


  
    
      10:52:19
    
  
  
  now we can begin designing our stopwatch we will create a Time object self. time
  


  
    
      10:52:25
    
  
  
  equals call The Constructor within the class of Q time for arguments we'll pass
  


  
    
      10:52:31
    
  
  
  in the hours minutes seconds and milliseconds all
  


  
    
      10:52:36
    
  
  
  zero we need a label for the stopwatch self. time label equals called
  


  
    
      10:52:44
    
  
  
  The Constructor of Q label what would we like the text to say I'll
  


  
    
      10:52:50
    
  
  
  display some placeholder text a bunch of zeros zero hours minutes seconds and
  


  
    
      10:52:58
    
  
  
  milliseconds we will add this label to self our stopwatch we need a start button self.
  


  
    
      10:53:06
    
  
  
  start button equals called The Constructor within Q push button what
  


  
    
      10:53:13
    
  
  
  would we like the text of the button to say let's say start we are adding this
  


  
    
      10:53:19
    
  
  
  button to self our stopwatch we need a stop button let's
  


  
    
      10:53:25
    
  
  
  replace start with stop change the text from start to stop and
  


  
    
      10:53:33
    
  
  
  reset the name of this button will be the reset button the text will be
  


  
    
      10:53:39
    
  
  
  reset we will need a timer to emit a signal at a given interval self. time
  


  
    
      10:53:47
    
  
  
  equals call The Constructor within the class qtimer then pass
  


  
    
      10:53:54
    
  
  
  in we're going to call a method of initialize UI self. init
  


  
    
      10:54:01
    
  
  
  UI but we still have to Define this method all right within our stopwatch
  


  
    
      10:54:06
    
  
  
  class we need the following methods a method of init UI this is
  


  
    
      10:54:13
    
  
  
  where we'll be designing the user interface I'll write pass for now as a
  


  
    
      10:54:19
    
  
  
  placeholder we need a method to start to start the stopwatch that is a
  


  
    
      10:54:26
    
  
  
  method to stop the stopwatch a method to reset the
  


  
    
      10:54:35
    
  
  
  stopwatch we'll create a method to format our time format time besides self
  


  
    
      10:54:41
    
  
  
  there's one parameter we have to pass in a time to format we will will be returning a string a string
  


  
    
      10:54:48
    
  
  
  representation of the current time and a method to update our display
  


  
    
      10:54:55
    
  
  
  update display here are the six methods we'll
  


  
    
      10:55:02
    
  
  
  need within our initialized user interface method we will set the title
  


  
    
      10:55:07
    
  
  
  of the window because right now it says python we will take self our stopwatch
  


  
    
      10:55:14
    
  
  
  call the set window title method and we will pass in
  


  
    
      10:55:22
    
  
  
  stopwatch that should change the title of the window to stopwatch we're going
  


  
    
      10:55:27
    
  
  
  to use a vertical layout manager for the label and the buttons we will create a layout manager
  


  
    
      10:55:34
    
  
  
  named vbox vbox equals call The Constructor of q v box
  


  
    
      10:55:43
    
  
  
  layout we will take our layout manager and add the following
  


  
    
      10:55:50
    
  
  
  widgets self. time label then our start stop and reset
  


  
    
      10:55:59
    
  
  
  buttons start button stop
  


  
    
      10:56:05
    
  
  
  button and reset
  


  
    
      10:56:12
    
  
  
  button we will take self set the lay
  


  
    
      10:56:17
    
  
  
  layout passing our vertical layout manager so we have all of our buttons we
  


  
    
      10:56:25
    
  
  
  have our widgets arranged in a column we're going to take our time label and also Center it
  


  
    
      10:56:32
    
  
  
  horizontally we will take our time label self. time
  


  
    
      10:56:37
    
  
  
  label call the set alignment method access our class of
  


  
    
      10:56:44
    
  
  
  QT access the flag of a line
  


  
    
      10:56:49
    
  
  
  Center that's going to Center align the time it should be aligned both vertically and
  


  
    
      10:56:56
    
  
  
  horizontally now with your buttons they're arranged in a column we could group them together
  


  
    
      10:57:02
    
  
  
  horizontally here's how we will create a horizontal layout manager of hbox hbox
  


  
    
      10:57:09
    
  
  
  equals call The Constructor of qbox layout
  


  
    
      10:57:16
    
  
  
  instead of adding these buttons directly to our vertical layout manager let's cut
  


  
    
      10:57:23
    
  
  
  them paste them underneath hbox replace vbox with
  


  
    
      10:57:30
    
  
  
  hbox then with our vertical layout manager vbox we will add our layout of
  


  
    
      10:57:42
    
  
  
  hbox this group of buttons is arranged vertically with with the time
  


  
    
      10:57:47
    
  
  
  label now we'll be applying a style sheet access self our stopwatch call the
  


  
    
      10:57:54
    
  
  
  set stylesheet method we can pass in one extremely long
  


  
    
      10:58:00
    
  
  
  string with a set of triple quotes all of the CSS like properties We'll add
  


  
    
      10:58:06
    
  
  
  we'll do so between the set of triple quotes let's select our buttons Q push
  


  
    
      10:58:12
    
  
  
  button we are selecting an entire class within a set of curly braces let's add
  


  
    
      10:58:19
    
  
  
  the property of font size the font size of all buttons will be 50
  


  
    
      10:58:26
    
  
  
  pixels let's customize our label select the class of Q
  


  
    
      10:58:32
    
  
  
  label within a set of curly braces let's add the following properties font size
  


  
    
      10:58:38
    
  
  
  will be 120 if you would like we can add a
  


  
    
      10:58:44
    
  
  
  background color too to the label we can select a background
  


  
    
      10:58:50
    
  
  
  color temporarily I will select blue but we can pick more specific shades of blue
  


  
    
      10:58:57
    
  
  
  or another color here's how you can look up a Color Picker and
  


  
    
      10:59:02
    
  
  
  select a very specific color you can use hex values RGB or
  


  
    
      10:59:08
    
  
  
  hsl I've already selected a color I'm going to copy these hsl values so
  


  
    
      10:59:14
    
  
  
  instead of a color name we will select hsl then paste those values if you have
  


  
    
      10:59:21
    
  
  
  a degree symbol you will need to remove that and now we have a very specific
  


  
    
      10:59:26
    
  
  
  shade of blue I will also round the corners of our label add the property of Border radius
  


  
    
      10:59:34
    
  
  
  I will set that to be 20 pixels this will round the corners
  


  
    
      10:59:40
    
  
  
  between each button and label We'll add some padding we're going to use multiple selectors
  


  
    
      10:59:46
    
  
  
  we will select all push buttons and all
  


  
    
      10:59:51
    
  
  
  labels apply the following properties to each I will add padding of 20
  


  
    
      10:59:58
    
  
  
  pixels around these widgets and I will also make the font
  


  
    
      11:00:03
    
  
  
  weight bold font weight will be
  


  
    
      11:00:11
    
  
  
  bold all right I think that looks pretty good hey this is bro from the future I
  


  
    
      11:00:16
    
  
  
  currently editing this video if you would like you can add a font family one
  


  
    
      11:00:21
    
  
  
  font that I think looks really good is C we'll apply that to all push buttons
  


  
    
      11:00:26
    
  
  
  and C labels I really like this font I think it fits a stopwatch but it's up to you
  


  
    
      11:00:32
    
  
  
  if you would like to change the font I just thought I would mention that now we just have to add some functionality
  


  
    
      11:00:38
    
  
  
  because these buttons don't do anything for each of our buttons we have to connect a signal to a slot we will
  


  
    
      11:00:46
    
  
  
  take our start button self. start button with the signal of clicked we
  


  
    
      11:00:54
    
  
  
  will connect the following slot we will call the start method self. start method
  


  
    
      11:01:01
    
  
  
  let's do this with the stop button change start to stop clicked
  


  
    
      11:01:08
    
  
  
  connect self. stop method
  


  
    
      11:01:13
    
  
  
  reset self. reset button called the reset
  


  
    
      11:01:20
    
  
  
  method at a given interval we're going to update our
  


  
    
      11:01:25
    
  
  
  display self. timer during a signal of
  


  
    
      11:01:31
    
  
  
  timeout we will connect the following method self. update
  


  
    
      11:01:36
    
  
  
  display self. update display within our start method we will
  


  
    
      11:01:43
    
  
  
  take our timer self. timer call the start method pass in 10 for 10
  


  
    
      11:01:50
    
  
  
  milliseconds we will set an interval for a time out every 10
  


  
    
      11:01:57
    
  
  
  milliseconds within our stop method we will take our timer and instead called
  


  
    
      11:02:02
    
  
  
  the stop method we'll get back to reset in just a moment let's work on the format time
  


  
    
      11:02:10
    
  
  
  method from our time that we pass in we have to get the hours minutes seconds and millisecs seconds we will create
  


  
    
      11:02:17
    
  
  
  some local variables hours equals access our time that we pass in call the hour
  


  
    
      11:02:24
    
  
  
  method to return hours we have variable minutes time do
  


  
    
      11:02:30
    
  
  
  call the minute method to return the minutes we have a variable of seconds
  


  
    
      11:02:35
    
  
  
  seconds equals take our time called the second method then for
  


  
    
      11:02:43
    
  
  
  milliseconds access our time call the MC which means milliseconds and call it
  


  
    
      11:02:51
    
  
  
  this is a method I'm going to return a string an F string to represent the
  


  
    
      11:02:58
    
  
  
  time we will add four placeholders hours minutes seconds and
  


  
    
      11:03:04
    
  
  
  milliseconds each will be separated with a colon except for milliseconds which will be a DOT a
  


  
    
      11:03:12
    
  
  
  period we will display the hours I'll add some leading zeros two leading
  


  
    
      11:03:19
    
  
  
  zeros let's do this for minutes we're using a format specifier
  


  
    
      11:03:25
    
  
  
  for two leading zeros as well
  


  
    
      11:03:31
    
  
  
  seconds and
  


  
    
      11:03:38
    
  
  
  milliseconds now we will work on the update display method we have to get the time self. time
  


  
    
      11:03:46
    
  
  
  equals we will take our time but call the add milliseconds
  


  
    
      11:03:53
    
  
  
  method Ms e CS then pass in 10 for 10
  


  
    
      11:04:00
    
  
  
  milliseconds we're going to take our time label self. time
  


  
    
      11:04:06
    
  
  
  label and set the text of it we will call our format time
  


  
    
      11:04:13
    
  
  
  method but we have to pass in a Time we will be passing in self.
  


  
    
      11:04:19
    
  
  
  time let's see what we have currently we can start the
  


  
    
      11:04:25
    
  
  
  stopwatch and we can stop it however we're displaying three digits
  


  
    
      11:04:31
    
  
  
  for the milliseconds we can eliminate that within format time when we get the
  


  
    
      11:04:37
    
  
  
  milliseconds we will use integer division we will divide by 10 this will
  


  
    
      11:04:44
    
  
  
  convert our milliseconds from three digits to two we're basically dividing by
  


  
    
      11:04:49
    
  
  
  10 so here's our stopwatch currently we can start we can stop we can start again and
  


  
    
      11:04:58
    
  
  
  we can stop again now we just need to reset here's how within the reset method
  


  
    
      11:05:05
    
  
  
  we will take our timer self. timer use the stop method to stop we will reassign
  


  
    
      11:05:12
    
  
  
  our time call The Constructor of Q time we have to pass in hours minutes seconds
  


  
    
      11:05:19
    
  
  
  and milliseconds they're all going to be zero we're resetting our time and then
  


  
    
      11:05:25
    
  
  
  we'll reset the text again of our time label self. time label call the set text
  


  
    
      11:05:32
    
  
  
  method when we set the text we will first format it with the format time
  


  
    
      11:05:38
    
  
  
  method but we have to pass in a time we will pass in self.
  


  
    
      11:05:44
    
  
  
  time and now should be able to reset our stopwatch we can
  


  
    
      11:05:50
    
  
  
  start we can stop we can reset start again and stop
  


  
    
      11:05:58
    
  
  
  again all right everybody so that is a cool stopwatch that you can make using
  


  
    
      11:06:04
    
  
  
  python hey uh what's going on everybody so in today's video we're going to create a working weather app that
  


  
    
  77.weather API app ☀️



  
    
      11:06:10
    
  
  
  fetches realtime weather data from an API this is a massive project so feel
  


  
    
      11:06:15
    
  
  
  free to take your time take several days or even weeks if you need to complete this heck you can even add this project
  


  
    
      11:06:21
    
  
  
  to your portfolio well let's get started
  


  
    
      11:06:27
    
  
  
  everybody all right let's get started everybody this is a fairly useful API to get real-time weather data the website
  


  
    
      11:06:34
    
  
  
  is openweathermap.org you will need your own API key but
  


  
    
      11:06:39
    
  
  
  signing up for an account is free to create an account we'll go to sign in create an account
  


  
    
      11:06:46
    
  
  
  enter your information and then sign in once you're signed in to find your
  


  
    
      11:06:52
    
  
  
  API key go to this drop- down menu go to my API keys and you would just need to
  


  
    
      11:06:58
    
  
  
  copy this API key if the status is in active you'll need to toggle it to
  


  
    
      11:07:04
    
  
  
  active like so now it may take several minutes for your API key to become active hopefully
  


  
    
      11:07:11
    
  
  
  by the time of this project where we will need it it'll be active I would either leave up this window or copy this
  


  
    
      11:07:17
    
  
  
  key and paste it somewhere we will need the following Imports we will import CIS CIS means
  


  
    
      11:07:25
    
  
  
  system it handles system variables for your python interpreter we will import
  


  
    
      11:07:30
    
  
  
  the request module to make a request to an API then we'll need widgets widgets are
  


  
    
      11:07:36
    
  
  
  the building blocks of a pi qt5 application from the package of Pi
  


  
    
      11:07:42
    
  
  
  qt5 access the module of QT widget import the following
  


  
    
      11:07:49
    
  
  
  widgets Q application Q
  


  
    
      11:07:54
    
  
  
  widget Q label q line
  


  
    
      11:08:01
    
  
  
  edit Q push button let me put some of these on a new line for
  


  
    
      11:08:08
    
  
  
  readability QV box layout this is a vertical layout
  


  
    
      11:08:16
    
  
  
  manager to work with alignment we'll need the following from the package of Pi qt5 from the module of QT core import
  


  
    
      11:08:26
    
  
  
  the following class QT which is used for alignment so these are the Imports that
  


  
    
      11:08:32
    
  
  
  you'll need just to be sure that I didn't misspell anything or get the
  


  
    
      11:08:37
    
  
  
  capitalization wrong I'm just going to do a test run no problems processed finished with
  


  
    
      11:08:43
    
  
  
  exit Code Zero sometimes I make one of these characters a lowercase and then it doesn't
  


  
    
      11:08:50
    
  
  
  work okay we have our Imports we will need to create a class of weather app
  


  
    
      11:08:57
    
  
  
  weather app is going to inherit from the parent of Q
  


  
    
      11:09:03
    
  
  
  widget we will need a Constructor so we'll Define that Dunder init no
  


  
    
      11:09:09
    
  
  
  arguments besid self in case we have arguments to send to the parent we will call the the
  


  
    
      11:09:15
    
  
  
  parent with super meaning the super class then call the Constructor but
  


  
    
      11:09:21
    
  
  
  currently we don't have any arguments if we are running our main python file directly we can verify that
  


  
    
      11:09:28
    
  
  
  with the if statement if Dunder name is equal to a
  


  
    
      11:09:33
    
  
  
  string of Dunder main if we are running this file
  


  
    
      11:09:40
    
  
  
  directly then we will create a weather app object otherwise we won't
  


  
    
      11:09:45
    
  
  
  if this statement is true we will do the following we will create an app object
  


  
    
      11:09:51
    
  
  
  app equals call The Constructor within our Q application class but we will pass
  


  
    
      11:09:56
    
  
  
  in the following access the module of CIS then access a RGV which means
  


  
    
      11:10:03
    
  
  
  arguments if we have command Aline arguments to send to our application this is how we would take care of that
  


  
    
      11:10:10
    
  
  
  but we're not going to be using command line arguments in this video but it's nice to Future proof our code just just
  


  
    
      11:10:15
    
  
  
  in case we do we will construct a weather app object weather app equals
  


  
    
      11:10:21
    
  
  
  call The Constructor of our weather app class now this window isn't going to show we have to call the show method of
  


  
    
      11:10:28
    
  
  
  our weather app Weather app. Show and now it's going to show for a
  


  
    
      11:10:34
    
  
  
  brief second we need to ensure a clean exit access sis call the exit method within
  


  
    
      11:10:43
    
  
  
  this method we will pass in the following take our app call the execute method
  


  
    
      11:10:49
    
  
  
  which is excore it is a method so we have to call
  


  
    
      11:10:54
    
  
  
  it this method handles events within our application such as closing the
  


  
    
      11:11:01
    
  
  
  window so now our window should stay in place until we close
  


  
    
      11:11:06
    
  
  
  it if you're one of the people that have jumped ahead we have created a class of weather app which inherits from the
  


  
    
      11:11:13
    
  
  
  parent of Q widget we've constructed a weather app object and we're showing it
  


  
    
      11:11:19
    
  
  
  if you've made some Pi qt5 Projects in the past you would just have to change some of these
  


  
    
      11:11:24
    
  
  
  around within the Constructor of our class weather app we will declare the different widgets that belong to our
  


  
    
      11:11:30
    
  
  
  weather app object we will create a label that prompts the user to enter in a city we will name this city label
  


  
    
      11:11:38
    
  
  
  equals this is a q label widget we can set the initial text of
  


  
    
      11:11:44
    
  
  
  the label let's say enter city
  


  
    
      11:11:49
    
  
  
  name then the second argument is going to be self we are adding this label to
  


  
    
      11:11:55
    
  
  
  our weather app object here's what we have currently we still have to do some CSS
  


  
    
      11:12:02
    
  
  
  formatting but we'll take care of that soon we will need a line edit widget
  


  
    
      11:12:08
    
  
  
  basically a textbox we will name it City input
  


  
    
      11:12:16
    
  
  
  the widget is line edit no parameters besides
  


  
    
      11:12:24
    
  
  
  self here is our line edit widget we're not currently using a layout manager
  


  
    
      11:12:29
    
  
  
  these widgets are going to overlap we need a button self. getet
  


  
    
      11:12:37
    
  
  
  weather button this is a q push
  


  
    
      11:12:43
    
  
  
  button the text on this button button will be get weather we are adding this
  


  
    
      11:12:49
    
  
  
  to self our weather app object here's our button when we click on this button
  


  
    
      11:12:56
    
  
  
  we'll make a request to an API for the next following widgets we're going to add some placeholders just so that we
  


  
    
      11:13:03
    
  
  
  can see what we're doing when we apply CSS styling we need a temperature label to
  


  
    
      11:13:08
    
  
  
  display the temperature temperature label equals a q
  


  
    
      11:13:17
    
  
  
  label temporarily for the label let's say that the temperature is 70° fight or
  


  
    
      11:13:24
    
  
  
  pick something else in Celsius so to add a degree symbol if you're using Windows make sure numb lock is on hold alt then
  


  
    
      11:13:31
    
  
  
  on the numpad type 0176 I will pick 70°
  


  
    
      11:13:36
    
  
  
  fah and then we will add this to self again we're just using this
  


  
    
      11:13:41
    
  
  
  temperature as a placeholder we'll delete it when we do a test run if you would like to include an emoji or
  


  
    
      11:13:48
    
  
  
  some other image we can create a label for that I will name this Emoji
  


  
    
      11:13:55
    
  
  
  label equals a q label I will add an emoji of a son as a
  


  
    
      11:14:03
    
  
  
  placeholder again we're going to delete this when we do a test run we are adding
  


  
    
      11:14:08
    
  
  
  this to self again everything is overlapping
  


  
    
      11:14:14
    
  
  
  that is fine and we need a description of the
  


  
    
      11:14:19
    
  
  
  weather description label equals a q
  


  
    
      11:14:26
    
  
  
  label as a placeholder let's say that it's sunny and we are adding this label
  


  
    
      11:14:32
    
  
  
  to self okay here are all the widgets they're all overlapping so we need to
  


  
    
      11:14:39
    
  
  
  fix that all right moving on everybody so now we have to design the layout of our
  


  
    
      11:14:46
    
  
  
  web app right now all of our widgets are gravitating to the top left corner so I
  


  
    
      11:14:53
    
  
  
  will Define a method to initialize our user
  


  
    
      11:15:01
    
  
  
  interface at the end of this Constructor we will call this method self. initialize UI then call it once we've
  


  
    
      11:15:10
    
  
  
  constructed our widgets we'll format them and design the layout
  


  
    
      11:15:16
    
  
  
  so we are now within our initialized user interface method first let's set the title of our
  


  
    
      11:15:22
    
  
  
  window self. set window
  


  
    
      11:15:27
    
  
  
  title let's say that the title is weather app so that should change which
  


  
    
      11:15:34
    
  
  
  it does we're going to use a vertical layout manager to handle all the
  


  
    
      11:15:41
    
  
  
  widgets let's name the layout manager vbox equals call The Constructor of the
  


  
    
      11:15:47
    
  
  
  class QV box layout we're going to take our layout manager of v-box then add a
  


  
    
      11:15:55
    
  
  
  widget we will start with the city label that's
  


  
    
      11:16:00
    
  
  
  first we will pass in self. City Lael and we'll do this with the other widgets
  


  
    
      11:16:08
    
  
  
  too we have City input get weather
  


  
    
      11:16:18
    
  
  
  button temperature
  


  
    
      11:16:24
    
  
  
  label Emoji label and then a description
  


  
    
      11:16:35
    
  
  
  label take self our weather app set the layout we will pass in the layout
  


  
    
      11:16:42
    
  
  
  manager of vbox and here's what we have
  


  
    
      11:16:49
    
  
  
  currently all the widgets are arranged in a column now we just have to centeralign them horizontally here's
  


  
    
      11:16:58
    
  
  
  how we will take self. City label call the set alignment
  


  
    
      11:17:07
    
  
  
  method access the class of QT access the flag of a line Center
  


  
    
      11:17:15
    
  
  
  we're going to align all of our widgets in the center except for our weather button currently our button expands to
  


  
    
      11:17:22
    
  
  
  take up the width of the window so we don't need to horizontally align that so
  


  
    
      11:17:28
    
  
  
  we have five widgets to align we have City label City input
  


  
    
      11:17:35
    
  
  
  temperature label Emoji label and description label all of the widgets are going to be
  


  
    
      11:17:42
    
  
  
  arranged in a column horizontally now we just have to apply some CSS
  


  
    
      11:17:47
    
  
  
  styling because right now it's kind of ugly we will apply Styles based on an
  


  
    
      11:17:53
    
  
  
  object name but we have to set that object name so let's start with our city label self. City
  


  
    
      11:18:02
    
  
  
  label call the set object name
  


  
    
      11:18:08
    
  
  
  method pass in a unique ID for this widget I will name it City label I'll
  


  
    
      11:18:14
    
  
  
  keep it the same okay we have to do this with the other widgets too we have a total of
  


  
    
      11:18:21
    
  
  
  six we have City label City
  


  
    
      11:18:27
    
  
  
  input we have the get weather
  


  
    
      11:18:33
    
  
  
  button temperature label Emoji
  


  
    
      11:18:38
    
  
  
  label and description label then we're going to set a
  


  
    
      11:18:45
    
  
  
  stylesheet take s our weather app apply a stylesheet with set style
  


  
    
      11:18:52
    
  
  
  sheet we have a lot of properties to write I will do so within a set of triple quotes just to keep everything
  


  
    
      11:18:59
    
  
  
  more organized we can apply CSS Styles based on a class so the class is going to be Q
  


  
    
      11:19:07
    
  
  
  label within a set of curly braces we can list multiple CSS properties I will
  


  
    
      11:19:13
    
  
  
  set the font family to be calibri as well as all push buttons Q
  


  
    
      11:19:21
    
  
  
  push button so here's the font although it's
  


  
    
      11:19:26
    
  
  
  still kind of small let's select our ID of City label it's good practice to
  


  
    
      11:19:32
    
  
  
  preedee this ID with the name of the class so Q label pound sign the
  


  
    
      11:19:39
    
  
  
  ID we precede the ID with the name of the class just so we're only applying
  


  
    
      11:19:44
    
  
  
  these CSS properties to any ID that's a city label that falls within the class
  


  
    
      11:19:49
    
  
  
  of Q label let's set the font size to be 40
  


  
    
      11:19:55
    
  
  
  pixels let's set the font size to be 40 pixels that's
  


  
    
      11:20:01
    
  
  
  better I'll set the font style to be italic font style
  


  
    
      11:20:09
    
  
  
  italic that's pretty good let's select the ID of City input
  


  
    
      11:20:17
    
  
  
  this is a line edit widget q line edit
  


  
    
      11:20:23
    
  
  
  pound the ID of City input within a set of curly braces let's set the font size to be 40
  


  
    
      11:20:38
    
  
  
  pixels we will select our push button which is named get weather button the
  


  
    
      11:20:44
    
  
  
  class is Q push button pound the ID of
  


  
    
      11:20:49
    
  
  
  get WEA button within a set of curly braces we will apply the following let's
  


  
    
      11:20:54
    
  
  
  set the font size to be 30
  


  
    
      11:21:00
    
  
  
  pixels and let's make it bold font weight
  


  
    
      11:21:11
    
  
  
  bold let's select our temperature label the ID is temperature label and this is
  


  
    
      11:21:18
    
  
  
  a q label pound temperature label we will increase the font
  


  
    
      11:21:25
    
  
  
  size font size 75
  


  
    
      11:21:33
    
  
  
  pixels better let's work on our Emoji
  


  
    
      11:21:39
    
  
  
  next we will select the ID of emoji label
  


  
    
      11:21:44
    
  
  
  the class is Q label the ID is Emoji
  


  
    
      11:21:49
    
  
  
  label we'll set the font size first font size 100 pixels I would like a large
  


  
    
      11:21:58
    
  
  
  image to display emojis properly we're going to use a very specific font we're
  


  
    
      11:22:04
    
  
  
  going to set the font family to be now I don't know if I'm saying this right seg
  


  
    
      11:22:11
    
  
  
  o UI emoji I probably pronounced this word wrong
  


  
    
      11:22:17
    
  
  
  but I don't care so then our Emoji should display
  


  
    
      11:22:22
    
  
  
  correctly using this font it's colorful then we have the description
  


  
    
      11:22:29
    
  
  
  label of the weather that is the last widget description label the class is Q
  


  
    
      11:22:35
    
  
  
  label the ID is description label let's take the font size and set
  


  
    
      11:22:43
    
  
  
  it to be 50 pixels all right so this is what our weather
  


  
    
      11:22:49
    
  
  
  app is going to look like we have the city label a text box to enter in a city
  


  
    
      11:22:55
    
  
  
  the get weather button the temperature label an emoji label and a description
  


  
    
      11:23:00
    
  
  
  of the weather currently now we just have to add some functionality because currently this doesn't do
  


  
    
      11:23:08
    
  
  
  anything all right so now we just have to add some functionality to our weather app temporarily I'm going to to collapse
  


  
    
      11:23:15
    
  
  
  our initialized user interface method we will Define a few extra methods let's
  


  
    
      11:23:20
    
  
  
  declare a method of get weather no parameters besid self I'll
  


  
    
      11:23:27
    
  
  
  write pass for now as a placeholder we will need a method to
  


  
    
      11:23:32
    
  
  
  display any errors display error there's
  


  
    
      11:23:37
    
  
  
  going to be one argument besid self a message we will pass in an error message
  


  
    
      11:23:42
    
  
  
  if there is one and a method to display weather that's
  


  
    
      11:23:49
    
  
  
  if there's no errors we will need some data our weather
  


  
    
      11:23:55
    
  
  
  data so be sure that you write these three methods back within our initialized user
  


  
    
      11:24:01
    
  
  
  interface method at the bottom we have to connect a signal to a
  


  
    
      11:24:09
    
  
  
  slot when we click on the button with the signal of clicked we will connect a
  


  
    
      11:24:15
    
  
  
  slot of get weather we will access self take our get weather
  


  
    
      11:24:23
    
  
  
  button with a signal of clicked we will connect a slot upself dog
  


  
    
      11:24:32
    
  
  
  getwe and I will print a test message just to be sure that it's
  


  
    
      11:24:37
    
  
  
  working you get the weather so I press the button and and we
  


  
    
      11:24:44
    
  
  
  will display you get the weather we can get rid of our
  


  
    
      11:24:49
    
  
  
  placeholder text for the temperature our emoji and the weather
  


  
    
      11:24:55
    
  
  
  description so we can delete these strings But be sure to keep
  


  
    
      11:25:06
    
  
  
  self scrolling down to our get weather method when we click the button we're
  


  
    
      11:25:12
    
  
  
  going to create a few local variables the first is going to be our API key
  


  
    
      11:25:19
    
  
  
  equals this will be a string back to the open Weather API you
  


  
    
      11:25:25
    
  
  
  will copy your API key and make sure that it's active you can use the toggle button to make it inactive and
  


  
    
      11:25:32
    
  
  
  active so make sure that it's active paste your API key within a
  


  
    
      11:25:39
    
  
  
  string please use your own it still may take several minutes for your key to be itive just keep that in
  


  
    
      11:25:46
    
  
  
  mind we will need to get the city that we're looking up so let's say we type in
  


  
    
      11:25:53
    
  
  
  Miami I have to get the text from this widget this line edit widget we will
  


  
    
      11:25:59
    
  
  
  create a local variable of city city equals access our line edit widget it
  


  
    
      11:26:07
    
  
  
  had a name of City input so self. City input to get the
  


  
    
      11:26:15
    
  
  
  text we will call the text method we have the API key and the city
  


  
    
      11:26:21
    
  
  
  now we will create a URL this will be an F string using the request module we will
  


  
    
      11:26:28
    
  
  
  pass in a URL to make a request too so back to our open Weather API to
  


  
    
      11:26:35
    
  
  
  get the URL for a city we have to go to the tab of API scroll down to current weather data
  


  
    
      11:26:44
    
  
  
  and there's going to be some API documentation to the right we have a link for built-in API request by city
  


  
    
      11:26:52
    
  
  
  name we will copy this URL and paste it within our F string
  


  
    
      11:26:59
    
  
  
  there's two changes we're going to make we will replace city name with City the
  


  
    
      11:27:04
    
  
  
  name of that variable and API space key with API uncore
  


  
    
      11:27:11
    
  
  
  key it doesn't matter what you name these just make sure they're consistent with your variables when we make an API request we
  


  
    
      11:27:19
    
  
  
  will be returned with a response object response equals access our module of
  


  
    
      11:27:26
    
  
  
  requests call the get method then pass in our
  


  
    
      11:27:32
    
  
  
  URL with our response object we have to convert it to a Json
  


  
    
      11:27:37
    
  
  
  format we will be returned with an object we will name this object data it's going to be readable to us
  


  
    
      11:27:45
    
  
  
  data equals take our response object and use the Json method to convert it to a
  


  
    
      11:27:51
    
  
  
  Json format so let's print our data to see what we're working
  


  
    
      11:27:58
    
  
  
  with let's say I look up the city of
  


  
    
      11:28:04
    
  
  
  Miami so we have one gigantic object this is our weather data we have
  


  
    
      11:28:11
    
  
  
  coordinates such as longitude and attitude a weather
  


  
    
      11:28:17
    
  
  
  description currently in Miami there's broken clouds there's an ID of the weather this
  


  
    
      11:28:24
    
  
  
  is the temperature but it's in kelvin if we scroll all the way to the
  


  
    
      11:28:29
    
  
  
  end we are looking for an HTTP status code which is named Cod short for code
  


  
    
      11:28:37
    
  
  
  200 means that the response was successful depending on what this number is we will display one of a few are
  


  
    
      11:28:44
    
  
  
  messages if our status code is 404 that means the city wasn't found and there's
  


  
    
      11:28:49
    
  
  
  many others so 200 means that the request was
  


  
    
      11:28:54
    
  
  
  successful so let's write the following if our data object at Key of
  


  
    
      11:29:03
    
  
  
  cod if this is equal to 200 if the request was successful then we will call
  


  
    
      11:29:10
    
  
  
  the display weather method self. display weather there but we do have to pass in our
  


  
    
      11:29:19
    
  
  
  data now temporarily I'm just going to print our weather data we'll do some
  


  
    
      11:29:25
    
  
  
  more complex stuff later but I just want to be sure that everything is working so let's look up Los
  


  
    
      11:29:34
    
  
  
  Angeles so here's the weather in Los Angeles there is currently broken
  


  
    
      11:29:41
    
  
  
  clouds and again the status code is 200 the request was
  


  
    
      11:29:48
    
  
  
  successful I'll write an else statement for now we will print our data what if
  


  
    
      11:29:54
    
  
  
  we can't find a city for example I will look up the city blah blah blah and get
  


  
    
      11:30:01
    
  
  
  the weather so here's our weather data we
  


  
    
      11:30:06
    
  
  
  have an error code of 404 and a message of City not found
  


  
    
      11:30:11
    
  
  
  let's do some exception handling in case we run into one of these status codes that's not
  


  
    
      11:30:17
    
  
  
  200 we can get rid of our else statement what we'll do is enclose all
  


  
    
      11:30:23
    
  
  
  of our dangerous code that means any code that might cause an exception within a tri
  


  
    
      11:30:29
    
  
  
  block we will try all of this code and handle any exceptions with an accept
  


  
    
      11:30:36
    
  
  
  block there's two types of exceptions we're looking for the first is an HTTP
  


  
    
      11:30:41
    
  
  
  error HTTP error is an exception raised by the
  


  
    
      11:30:49
    
  
  
  request module when an HTTP request returns a status code that's 400 or
  


  
    
      11:30:57
    
  
  
  500 however this exception is found within the request module that we've
  


  
    
      11:31:03
    
  
  
  imported so we can't simply just say accept HTTP error we first have to
  


  
    
      11:31:09
    
  
  
  access the request module then access exceptions
  


  
    
      11:31:15
    
  
  
  then we can list the specific exception of HTTP error we'll encounter this
  


  
    
      11:31:22
    
  
  
  exception if the status code is between 400 and
  


  
    
      11:31:28
    
  
  
  500 and for now all right pass so there's one more step within our
  


  
    
      11:31:33
    
  
  
  Tri block if we're going to handle any HTTP errors we have to raise an
  


  
    
      11:31:39
    
  
  
  exception within our Tri block because our Tri block by itself normally doesn't
  


  
    
      11:31:44
    
  
  
  catch these we will take our response object and call the raise for status
  


  
    
      11:31:54
    
  
  
  method this method will raise an exception if there's any HTTP errors
  


  
    
      11:32:01
    
  
  
  normally our Tri block doesn't do that so we have to manually type this there's another type of exception
  


  
    
      11:32:08
    
  
  
  we'll catch and that's the request exception We'll add another block for
  


  
    
      11:32:13
    
  
  
  accept request
  


  
    
      11:32:19
    
  
  
  exception this is found within the request module
  


  
    
      11:32:24
    
  
  
  requests exceptions request exception with a request exception this
  


  
    
      11:32:31
    
  
  
  can be due to network problems invalid URLs exceptions of that
  


  
    
      11:32:36
    
  
  
  nature in case we run into one of those types of exceptions we will execute this block of code but for now I'll right
  


  
    
      11:32:43
    
  
  
  pass we'll get back to it later going back to our accept block where we handle any HTTP errors let's
  


  
    
      11:32:51
    
  
  
  use a match case statement we need to get the status code of our response I'll
  


  
    
      11:32:56
    
  
  
  print that temporarily let's print our response objects status code and see what it
  


  
    
      11:33:06
    
  
  
  is again let's make up a city get the weather we have a status code of 404
  


  
    
      11:33:12
    
  
  
  that means the city will wasn't found depending on what this number is the status code we'll use a match case
  


  
    
      11:33:21
    
  
  
  statement so we will match our response objects status
  


  
    
      11:33:30
    
  
  
  code the first case will be 400 that means there's a bad
  


  
    
      11:33:38
    
  
  
  request so let's print the following bad add request I'll add a new
  


  
    
      11:33:46
    
  
  
  line character please check your
  


  
    
      11:33:52
    
  
  
  input we'll create a total of I believe eight cases we'll copy what we
  


  
    
      11:34:01
    
  
  
  have so we have 400 401
  


  
    
      11:34:06
    
  
  
  403 404 that one we're familiar with
  


  
    
      11:34:12
    
  
  
  500 5 2
  


  
    
      11:34:19
    
  
  
  503 504 so for case 401 that means we're
  


  
    
      11:34:26
    
  
  
  unauthorized maybe our API key isn't active yet so let's say
  


  
    
      11:34:36
    
  
  
  unauthorized invalid API key
  


  
    
      11:34:43
    
  
  
  for 403 that means access is denied it's forbidden so let's print
  


  
    
      11:34:53
    
  
  
  forbidden access is denied 404 is for something that's not
  


  
    
      11:35:01
    
  
  
  found not found City not
  


  
    
      11:35:09
    
  
  
  found 500 is for an internal server error
  


  
    
      11:35:14
    
  
  
  internal server error please try again
  


  
    
      11:35:22
    
  
  
  later 502 is for a bad gateway bad gateway invalid response from the
  


  
    
      11:35:37
    
  
  
  server 503 is for service unavailable service
  


  
    
      11:35:44
    
  
  
  unavailable server is down then 504 is for a Gateway
  


  
    
      11:35:55
    
  
  
  timeout Gateway timeout no response from the
  


  
    
      11:36:07
    
  
  
  server in case there's any unexpected error we can add a wild card of an underscore
  


  
    
      11:36:15
    
  
  
  with our HTTP error let's give it a name as
  


  
    
      11:36:20
    
  
  
  HTTP error and then we'll just print it in case there are no matching cases let's
  


  
    
      11:36:27
    
  
  
  print the following HTTP error
  


  
    
      11:36:33
    
  
  
  occurred I'll add a new line let's convert this to an FST
  


  
    
      11:36:39
    
  
  
  string add a placeholder and then I will print our HTTP
  


  
    
      11:36:45
    
  
  
  air all right let's do a test run so in case we can't find our city we
  


  
    
      11:36:52
    
  
  
  should encounter a 404 error not found City not found
  


  
    
      11:36:57
    
  
  
  eventually we will display this message within our app but we know that it works what if my API key is
  


  
    
      11:37:06
    
  
  
  invalid so I will take my API key set it to be inactive but it might take a few minutes
  


  
    
      11:37:13
    
  
  
  to take effect the status code of our response object should be
  


  
    
      11:37:19
    
  
  
  401 so this time I'm going to look up a city I have an invalid API
  


  
    
      11:37:25
    
  
  
  key and I get that error message of unauthorized invalid API
  


  
    
      11:37:31
    
  
  
  key all right everybody so I am on day three of working on and recording this topic over the course of the day I
  


  
    
      11:37:38
    
  
  
  thought of one change that I can make we're going to add a few extra accept blocks so we will accept access requests
  


  
    
      11:37:46
    
  
  
  access exceptions we will handle any connection eror
  


  
    
      11:37:55
    
  
  
  exceptions as well as any timeout
  


  
    
      11:38:03
    
  
  
  exceptions and any redirects too many redirects
  


  
    
      11:38:16
    
  
  
  so if we run into a connection error let's say that our internet gets disconnected well we can print something
  


  
    
      11:38:22
    
  
  
  so let's print the following let's print connection
  


  
    
      11:38:28
    
  
  
  error I'll add a new line character check your internet
  


  
    
      11:38:36
    
  
  
  connection if we encounter a timeout then we will print the following we have a a time out
  


  
    
      11:38:47
    
  
  
  error the request timed out if we have a too many redirects
  


  
    
      11:38:54
    
  
  
  error that M should be Capital by the
  


  
    
      11:39:00
    
  
  
  way let's State too many
  


  
    
      11:39:08
    
  
  
  redirects check the URL
  


  
    
      11:39:13
    
  
  
  and if there's anything else we don't anticipate I'll give this exception a name of as Rec
  


  
    
      11:39:21
    
  
  
  error and then we'll just print it this is a last resort I'll use an F
  


  
    
      11:39:28
    
  
  
  string request error I'll add a new line I'll
  


  
    
      11:39:34
    
  
  
  add a placeholder then display our request error so I'm actually going to turn off
  


  
    
      11:39:40
    
  
  
  my internet I'll see if I can get a connection eror intentionally so my internet is
  


  
    
      11:39:46
    
  
  
  currently off I will attempt to look up a city get the weather and we get a
  


  
    
      11:39:52
    
  
  
  connection error check your internet connection all right my internet is
  


  
    
      11:39:58
    
  
  
  connected again let's perform a test
  


  
    
      11:40:03
    
  
  
  run and we get the weather in Miami now what we're going to do is if
  


  
    
      11:40:10
    
  
  
  we have an error we'll display the error message within the app and not within our
  


  
    
      11:40:18
    
  
  
  console so we're going to replace print with the call to our display error
  


  
    
      11:40:23
    
  
  
  method let me zoom out a little bit so replace print with
  


  
    
      11:40:29
    
  
  
  self. display error and we're passing in a message so let's replace those
  


  
    
      11:40:44
    
  
  
  one thing I forgot to add although it's not necessary I'm going to add a colon after each initial
  


  
    
      11:40:51
    
  
  
  message I think it'll look better you don't have to do this but I'm
  


  
    
      11:40:56
    
  
  
  OCD about the appearance if we encounter one of these exceptions we'll pass along a message to
  


  
    
      11:41:04
    
  
  
  our display error method and display it within the app let's take our temperature label
  


  
    
      11:41:10
    
  
  
  self. temperature Lael
  


  
    
      11:41:15
    
  
  
  and set the text to be our message that we pass
  


  
    
      11:41:23
    
  
  
  in let's do a test run let's look up a city that doesn't exist get the
  


  
    
      11:41:29
    
  
  
  weather so we get that error message not found City not found while we're within
  


  
    
      11:41:35
    
  
  
  this method I'm going to change the font size just so that it's a little bit smaller
  


  
    
      11:41:44
    
  
  
  so let's take our temperature label self. temperature label I'm just going
  


  
    
      11:41:49
    
  
  
  to copy this because I'm lazy I will call the set stylesheet
  


  
    
      11:41:55
    
  
  
  method and pass along a new property let's set the font size to 30
  


  
    
      11:42:03
    
  
  
  pixels let's look up north pole I don't think that's a
  


  
    
      11:42:09
    
  
  
  city oh I guess it is interesting
  


  
    
      11:42:16
    
  
  
  the North Pole is a city I guess let's look up blah blah
  


  
    
      11:42:21
    
  
  
  blah not found City not found let's do another test what if our
  


  
    
      11:42:28
    
  
  
  API key is invalid I'll just delete one of the digits let's look up Los
  


  
    
      11:42:36
    
  
  
  Angeles unauthorized invalid API key let's change that back again I will
  


  
    
      11:42:43
    
  
  
  turn off my internet then look up Miami Connection Error check your
  


  
    
      11:42:50
    
  
  
  internet connection all right so we know that our exception handling works okay now we're within the display
  


  
    
      11:42:58
    
  
  
  weather method we'll receive an object to represent our data we have to get the
  


  
    
      11:43:05
    
  
  
  temperature but first I'm going to print our data so let me zoom in a little
  


  
    
      11:43:11
    
  
  
  bit let's look up Houston Houston
  


  
    
      11:43:16
    
  
  
  Texas I need the temperature within our data object we are looking for a key of
  


  
    
      11:43:23
    
  
  
  Main and that is right here main contains a dictionary with key value
  


  
    
      11:43:28
    
  
  
  pairs once we've accessed main we have to access temp to get the temperature
  


  
    
      11:43:34
    
  
  
  and this temperature is in kelvin we'll have to convert it to Celsius or Fahrenheit it's your
  


  
    
      11:43:39
    
  
  
  choice so we need to extract this value I will store it as a local variable
  


  
    
      11:43:49
    
  
  
  temperature let's say temperature _ k for Kelvin equals take our data object
  


  
    
      11:43:56
    
  
  
  access the key of main that's right here then we have to go one level deeper and
  


  
    
      11:44:03
    
  
  
  get the temperature the key is temp then give me the value at the Key
  


  
    
      11:44:09
    
  
  
  of Temp and that should return the current temperature so to test it let's
  


  
    
      11:44:14
    
  
  
  print it let's print the temperature in Kelvin so what is the weather in Houston
  


  
    
      11:44:22
    
  
  
  Texas the temperature that is 309
  


  
    
      11:44:28
    
  
  
  Kelvin let's convert it to Celsius and Fahrenheit let's create temperature C if
  


  
    
      11:44:35
    
  
  
  you want to use celsius if you would rather use Fahrenheit you can skip this step to convert from Kelvin to Celsius
  


  
    
      11:44:43
    
  
  
  we will take our temperature in Kelvin subtract
  


  
    
      11:44:49
    
  
  
  273.15 then for Fahrenheit let's take temperature f for
  


  
    
      11:44:55
    
  
  
  Fahrenheit equals this is a little more complicated take our temperature in
  


  
    
      11:45:02
    
  
  
  Kelvin time 9 / 5 subtract
  


  
    
      11:45:10
    
  
  
  45967 okay so let's print the temperature in
  


  
    
      11:45:17
    
  
  
  celsius let's look up Houston 36.467853
  


  
    
      11:45:27
    
  
  
  [Music]
  


  
    
      11:45:43
    
  
  
  self. temperature label I'll just copy this then we will set the text I'll use
  


  
    
      11:45:50
    
  
  
  an F string add a placeholder I'll use Fahrenheit but feel free to use
  


  
    
      11:45:57
    
  
  
  celsius then I will add a degree symbol with Windows make sure numb lock is on
  


  
    
      11:46:02
    
  
  
  hold alt then on your numpad type 0176 for a degree symbol then f for
  


  
    
      11:46:10
    
  
  
  Fahrenheit let's look up get the weather and here's the
  


  
    
      11:46:16
    
  
  
  temperature 94.9 64 now let's say I would like no digits after the decimal I
  


  
    
      11:46:23
    
  
  
  can add a format specifier after our temperature I'll add a colon 0f to display no
  


  
    
      11:46:30
    
  
  
  decimals let's try that again I will look up Miami get the weather the
  


  
    
      11:46:37
    
  
  
  current temperature in Fahrenheit is 95° Fahrenheit
  


  
    
      11:46:42
    
  
  
  now here's one issue let's say we display an air then display the weather if we display an err we're going to be
  


  
    
      11:46:49
    
  
  
  changing the font size so let's look up blah blah blah get
  


  
    
      11:46:54
    
  
  
  the weather City not found then let's look up Miami again get
  


  
    
      11:47:00
    
  
  
  the weather and the font size is a lot smaller so if we display the weather
  


  
    
      11:47:06
    
  
  
  let's reset the font size we can really just copy this line so within the display weather
  


  
    
      11:47:13
    
  
  
  method let's set the font size back to 75 what it was
  


  
    
      11:47:20
    
  
  
  originally let's try that again let's look up a city that doesn't
  


  
    
      11:47:25
    
  
  
  exist get the weather City not found then we'll look up the city that does exist like Miami and get the weather 95°
  


  
    
      11:47:35
    
  
  
  F now let's get a description of the weather we'll display that at the bottom in the center we'll display a picture or
  


  
    
      11:47:42
    
  
  
  an em but we'll handle that last now we need a description of the weather like is it sunny is it cloudy is
  


  
    
      11:47:49
    
  
  
  it raining so after we calculate the temperature so I'm going to print our
  


  
    
      11:47:56
    
  
  
  data again let's look up Los
  


  
    
      11:48:03
    
  
  
  Angeles So currently it's 85° Fahrenheit so for the weather description that is found at the Key of
  


  
    
      11:48:11
    
  
  
  weather we now within a list at index zero within our
  


  
    
      11:48:17
    
  
  
  list we'll look up the key of description which states clear
  


  
    
      11:48:22
    
  
  
  sky so we will create a local variable of weather
  


  
    
      11:48:30
    
  
  
  description equals access our data at the Key of
  


  
    
      11:48:40
    
  
  
  weather there's layers to this we're then within a list and actually it's a list with only
  


  
    
      11:48:48
    
  
  
  one item in it so add the index of zero then at the Key of
  


  
    
      11:48:57
    
  
  
  description that's going to return this description of clear
  


  
    
      11:49:03
    
  
  
  sky so we will take our description label self. description label let me
  


  
    
      11:49:10
    
  
  
  just copy it this one right
  


  
    
      11:49:15
    
  
  
  here then we will set the text and then pass in our weather
  


  
    
      11:49:23
    
  
  
  description what is the weather description of Los
  


  
    
      11:49:29
    
  
  
  Angeles 86° fhe and there's a clear sky okay now the last thing we're going
  


  
    
      11:49:36
    
  
  
  to do is add an emoji We'll add it right to the center between the temperature and the weather description you don't NE
  


  
    
      11:49:42
    
  
  
  necessarily have to but I think it'll look cool and that's a good enough reason so let's create another method to
  


  
    
      11:49:50
    
  
  
  handle that we will Define a method of get weather
  


  
    
      11:49:57
    
  
  
  Emoji or a picture if you would rather use a picture we don't need self
  


  
    
      11:50:02
    
  
  
  necessarily we're going to need a weather ID this method isn't going to rely on
  


  
    
      11:50:09
    
  
  
  any class data or instance data we could make it a static method I'll add a
  


  
    
      11:50:14
    
  
  
  decorator of static method in summary a static method we
  


  
    
      11:50:20
    
  
  
  haven't covered these for a little bit they belong to a class but don't require any instance specific data or any other
  


  
    
      11:50:28
    
  
  
  methods they're used as more of a utility tool we're going to be passing in a weather ID and returning an
  


  
    
      11:50:37
    
  
  
  emoji I'm going to show you where we can find that weather ID I'll use a print statement
  


  
    
      11:50:44
    
  
  
  I will print our data let's look up Miami again that's
  


  
    
      11:50:50
    
  
  
  the first thing that came to mind now at the Key of weather there's a
  


  
    
      11:50:57
    
  
  
  key of ID and the value is a three-digit number I'll show you this chart
  


  
    
      11:51:03
    
  
  
  depending on what this three-digit number is that cor responds to a certain group of weather so the 200 range is a
  


  
    
      11:51:11
    
  
  
  thunderstorm 300 is a drizzle 500 is rain 600 is
  


  
    
      11:51:17
    
  
  
  snow 700 is atmosphere like if there's a tornado or there's a volcanic
  


  
    
      11:51:25
    
  
  
  eruption 800 exactly is a clear sky anything that's 801 or above refers to
  


  
    
      11:51:31
    
  
  
  clouds so this ID is 803 we have broken clouds depending on what this ID is I
  


  
    
      11:51:39
    
  
  
  would like to return a certain Emoji based on the weather so we need this ID
  


  
    
      11:51:45
    
  
  
  I'll delete our print statement we no longer need it let's say before our weather description we will create a
  


  
    
      11:51:52
    
  
  
  local variable of weather ID equals access our data
  


  
    
      11:51:59
    
  
  
  object then access the key of weather the value at weather is a list
  


  
    
      11:52:08
    
  
  
  but this list only has one item in it so we need the index of operator at zero
  


  
    
      11:52:15
    
  
  
  and then we will access the key of ID the key is ID so our weather ID is
  


  
    
      11:52:23
    
  
  
  going to be a number a three-digit number okay everybody we're near the end
  


  
    
      11:52:28
    
  
  
  so after setting the temperature we're going to set the Emoji label self.
  


  
    
      11:52:35
    
  
  
  Emoji label and call the set text
  


  
    
      11:52:40
    
  
  
  method within the set text method we will call self. getwe Emoji
  


  
    
      11:52:48
    
  
  
  method this will return a string an emoji within a string but we have to
  


  
    
      11:52:54
    
  
  
  pass in our weather ID it's that three-digit number so now we are within our get
  


  
    
      11:53:01
    
  
  
  weather Emoji method depending on the range of that three-digit number we will return one of
  


  
    
      11:53:07
    
  
  
  a few emojis we could use a match case statement I think it's more complicated with with the match case statement we'll
  


  
    
      11:53:14
    
  
  
  use LF statements for Simplicity so if our weather
  


  
    
      11:53:20
    
  
  
  ID is greater than or equal to 200 and our weather ID is less than or equal to
  


  
    
      11:53:30
    
  
  
  232 now we have two conditions here linked with the and logical operator there is a shortcut to this and
  


  
    
      11:53:38
    
  
  
  actually py charm is telling me that there is we can simplify these Expressions instead of two separate
  


  
    
      11:53:45
    
  
  
  conditions we can combine them into one if 200 is less than or equal to our
  


  
    
      11:53:51
    
  
  
  weather ID and our weather ID is less than or equal to 232 if this one
  


  
    
      11:53:57
    
  
  
  combined condition is true then we will return an emoji so to add an emoji on Windows you
  


  
    
      11:54:05
    
  
  
  can hold on the window key and press semicolon so 200 to 232 that's for a
  


  
    
      11:54:13
    
  
  
  thunderstorm depending on the font style of your IDE some of these emojis might not display properly you can always just
  


  
    
      11:54:21
    
  
  
  copy them from someplace else I think that's better it's more
  


  
    
      11:54:27
    
  
  
  colorful than else if 300 is less than or equal to our
  


  
    
      11:54:33
    
  
  
  weather ID and our weather ID is less than or equal to
  


  
    
      11:54:41
    
  
  
  321 this this is for a partially cloudy Sky we will
  


  
    
      11:54:48
    
  
  
  return some clouds a partially cloudy sky and again I don't like that one so
  


  
    
      11:54:54
    
  
  
  let's use this one instead else if 500 is less than or
  


  
    
      11:55:02
    
  
  
  equal to our weather ID Which is less than or equal to
  


  
    
      11:55:10
    
  
  
  531 we will return
  


  
    
      11:55:19
    
  
  
  rain that's better 600 to
  


  
    
      11:55:25
    
  
  
  622 else if 600 is less than or equal to our weather
  


  
    
      11:55:31
    
  
  
  ID Which is less than or equal to
  


  
    
      11:55:37
    
  
  
  622 we will return snow
  


  
    
      11:55:46
    
  
  
  so 701 to 741 is missed or fog else if
  


  
    
      11:55:53
    
  
  
  701 is less than or equal to our weather
  


  
    
      11:55:58
    
  
  
  ID Which is less than or equal to 741 we will return some mist or
  


  
    
      11:56:09
    
  
  
  fog 762 specifically is for Ash like from a
  


  
    
      11:56:15
    
  
  
  volcano so else if our weather ID is directly equal to
  


  
    
      11:56:23
    
  
  
  762 we will return let's return a
  


  
    
      11:56:30
    
  
  
  volcano 771 is for a Squall that's a violent gust of wind else if our weather
  


  
    
      11:56:39
    
  
  
  ID is directly equal to
  


  
    
      11:56:45
    
  
  
  771 we will return let's return that a violent gust
  


  
    
      11:56:53
    
  
  
  of wind a Squall 781 is for a
  


  
    
      11:56:58
    
  
  
  tornado else if our weather ID is equal to
  


  
    
      11:57:04
    
  
  
  781 return a
  


  
    
      11:57:10
    
  
  
  tornado a 800 exactly is for a clear sky else if our weather ID is equal to
  


  
    
      11:57:20
    
  
  
  800 return a sun a sun
  


  
    
      11:57:27
    
  
  
  emoji else if 801 is less than or equal to our weather
  


  
    
      11:57:34
    
  
  
  ID Which is less than or equal to 804 we will return some clouds
  


  
    
      11:57:50
    
  
  
  now if there are no matches let's return an empty string to not display
  


  
    
      11:57:55
    
  
  
  anything okay let's do a test run let's look up
  


  
    
      11:58:03
    
  
  
  Miami we get scattered clouds it's 94° Los
  


  
    
      11:58:10
    
  
  
  Angeles get the we we have a clear sky and a sun now there's one fix we need to
  


  
    
      11:58:16
    
  
  
  make let's say that I make up a city again blah blah blah get the weather we
  


  
    
      11:58:24
    
  
  
  should clear our Emoji label and the weather description but we still get that error
  


  
    
      11:58:30
    
  
  
  message so after we display our error within the display error method after we
  


  
    
      11:58:36
    
  
  
  set the text of the temperature label let's take the Emoji label self. emoji
  


  
    
      11:58:44
    
  
  
  label and call the Clear method to clear it then we have to do this with the
  


  
    
      11:58:50
    
  
  
  description label self. description
  


  
    
      11:58:55
    
  
  
  label and call the Clear method now we should be able to clear it when we get
  


  
    
      11:59:02
    
  
  
  an error okay let's look up Houston get the weather few clouds
  


  
    
      11:59:10
    
  
  
  98° let's make up a City Pizza City get
  


  
    
      11:59:15
    
  
  
  the weather not found City not found and the Emoji label and the weather
  


  
    
      11:59:21
    
  
  
  description are cleared okay what if I type in nothing what happens let's get the weather we
  


  
    
      11:59:28
    
  
  
  have a bad request please check your input that's if we have an HTTP status
  


  
    
      11:59:34
    
  
  
  Cod to 400 we handled this exception bad request all right one last City what
  


  
    
      11:59:42
    
  
  
  about Paris let's get the weather it is 68° F and there's light
  


  
    
      11:59:49
    
  
  
  rain all right everybody so that is a weather app that you can make using python add it to your portfolio and
  


  
    
      11:59:56
    
  
  
  thanks for watching
  



  No results found